
TIM_DashBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002904  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a10  08002a10  00012a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a34  08002a34  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002a34  08002a34  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a34  08002a34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000014  08002a50  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002a50  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141d6  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003685  00000000  00000000  00034213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009018  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  000408b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00041418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b8b  00000000  00000000  000422c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e68  00000000  00000000  0005ae53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c830  00000000  00000000  0006ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fb4eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020ec  00000000  00000000  000fb540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f8 	.word	0x080029f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080029f8 	.word	0x080029f8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800014e:	4811      	ldr	r0, [pc, #68]	; (8000194 <MX_ADC1_Init+0x48>)
 8000150:	4a11      	ldr	r2, [pc, #68]	; (8000198 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000154:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8000156:	6002      	str	r2, [r0, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000158:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800015c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000160:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000164:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000166:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000168:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800016c:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800016e:	f000 ffcb 	bl	8001108 <HAL_ADC_Init>
 8000172:	b108      	cbz	r0, 8000178 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8000174:	f000 f9fa 	bl	800056c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000178:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800017a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800017e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000180:	4804      	ldr	r0, [pc, #16]	; (8000194 <MX_ADC1_Init+0x48>)
 8000182:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000184:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000186:	f000 fe51 	bl	8000e2c <HAL_ADC_ConfigChannel>
 800018a:	b108      	cbz	r0, 8000190 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 800018c:	f000 f9ee 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000190:	b004      	add	sp, #16
 8000192:	bd10      	pop	{r4, pc}
 8000194:	20000040 	.word	0x20000040
 8000198:	40012400 	.word	0x40012400

0800019c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800019c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	2410      	movs	r4, #16
{
 80001a0:	4605      	mov	r5, r0
 80001a2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a4:	4622      	mov	r2, r4
 80001a6:	2100      	movs	r1, #0
 80001a8:	a802      	add	r0, sp, #8
 80001aa:	f002 fc1d 	bl	80029e8 <memset>
  if(adcHandle->Instance==ADC1)
 80001ae:	682a      	ldr	r2, [r5, #0]
 80001b0:	4b1f      	ldr	r3, [pc, #124]	; (8000230 <HAL_ADC_MspInit+0x94>)
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d13a      	bne.n	800022c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001b6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80001ba:	6999      	ldr	r1, [r3, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001bc:	481d      	ldr	r0, [pc, #116]	; (8000234 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001be:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80001c2:	6199      	str	r1, [r3, #24]
 80001c4:	6999      	ldr	r1, [r3, #24]
 80001c6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80001ca:	9100      	str	r1, [sp, #0]
 80001cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ce:	6999      	ldr	r1, [r3, #24]
 80001d0:	f041 0104 	orr.w	r1, r1, #4
 80001d4:	6199      	str	r1, [r3, #24]
 80001d6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	f003 0304 	and.w	r3, r3, #4
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001e2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001e4:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001e6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e8:	f001 fc6a 	bl	8001ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80001ec:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 80001ee:	4c12      	ldr	r4, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80001f2:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80001f4:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80001f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001fc:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000200:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000204:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000206:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800020a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800020c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800020e:	f001 fb5b 	bl	80018c8 <HAL_DMA_Init>
 8000212:	b108      	cbz	r0, 8000218 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8000214:	f000 f9aa 	bl	800056c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000218:	2200      	movs	r2, #0
 800021a:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800021c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800021e:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000220:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000222:	f001 fafb 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000226:	2012      	movs	r0, #18
 8000228:	f001 fb2a 	bl	8001880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	b007      	add	sp, #28
 800022e:	bd30      	pop	{r4, r5, pc}
 8000230:	40012400 	.word	0x40012400
 8000234:	40010800 	.word	0x40010800
 8000238:	20000070 	.word	0x20000070
 800023c:	40020008 	.word	0x40020008

08000240 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000240:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 9;
 8000242:	2309      	movs	r3, #9
  hcan.Instance = CAN1;
 8000244:	480c      	ldr	r0, [pc, #48]	; (8000278 <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 9;
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <MX_CAN_Init+0x3c>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000248:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
  hcan.Init.Prescaler = 9;
 800024c:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000250:	2300      	movs	r3, #0
 8000252:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000256:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800025a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.TimeTriggeredMode = DISABLE;
 800025e:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000260:	8383      	strh	r3, [r0, #28]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000262:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000266:	f000 ffce 	bl	8001206 <HAL_CAN_Init>
 800026a:	b118      	cbz	r0, 8000274 <MX_CAN_Init+0x34>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800026c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000270:	f000 b97c 	b.w	800056c <Error_Handler>
}
 8000274:	bd08      	pop	{r3, pc}
 8000276:	bf00      	nop
 8000278:	200000b4 	.word	0x200000b4
 800027c:	40006400 	.word	0x40006400

08000280 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000280:	b510      	push	{r4, lr}
 8000282:	4604      	mov	r4, r0
 8000284:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	2210      	movs	r2, #16
 8000288:	2100      	movs	r1, #0
 800028a:	a802      	add	r0, sp, #8
 800028c:	f002 fbac 	bl	80029e8 <memset>
  if(canHandle->Instance==CAN1)
 8000290:	6822      	ldr	r2, [r4, #0]
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <HAL_CAN_MspInit+0x90>)
 8000294:	429a      	cmp	r2, r3
 8000296:	d138      	bne.n	800030a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000298:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800029c:	69da      	ldr	r2, [r3, #28]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029e:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002a0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80002a4:	61da      	str	r2, [r3, #28]
 80002a6:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a8:	481a      	ldr	r0, [pc, #104]	; (8000314 <HAL_CAN_MspInit+0x94>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002aa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80002ae:	9200      	str	r2, [sp, #0]
 80002b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	f042 0204 	orr.w	r2, r2, #4
 80002ba:	619a      	str	r2, [r3, #24]
 80002bc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	f003 0304 	and.w	r3, r3, #4
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d0:	f001 fbf6 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002d8:	2302      	movs	r3, #2
 80002da:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002de:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <HAL_CAN_MspInit+0x94>)
 80002e2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e6:	f001 fbeb 	bl	8001ac0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002ea:	4622      	mov	r2, r4
 80002ec:	4621      	mov	r1, r4
 80002ee:	2014      	movs	r0, #20
 80002f0:	f001 fa94 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002f4:	2014      	movs	r0, #20
 80002f6:	f001 fac3 	bl	8001880 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80002fa:	2015      	movs	r0, #21
 80002fc:	4622      	mov	r2, r4
 80002fe:	4621      	mov	r1, r4
 8000300:	f001 fa8c 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000304:	2015      	movs	r0, #21
 8000306:	f001 fabb 	bl	8001880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800030a:	b006      	add	sp, #24
 800030c:	bd10      	pop	{r4, pc}
 800030e:	bf00      	nop
 8000310:	40006400 	.word	0x40006400
 8000314:	40010800 	.word	0x40010800

08000318 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_DMA_Init+0x68>)
{
 800031a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800031c:	695a      	ldr	r2, [r3, #20]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800031e:	4819      	ldr	r0, [pc, #100]	; (8000384 <MX_DMA_Init+0x6c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000320:	f042 0201 	orr.w	r2, r2, #1
 8000324:	615a      	str	r2, [r3, #20]
 8000326:	695b      	ldr	r3, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000328:	4a17      	ldr	r2, [pc, #92]	; (8000388 <MX_DMA_Init+0x70>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800033a:	e9c0 2300 	strd	r2, r3, [r0]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_DISABLE;
 800033e:	2300      	movs	r3, #0
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000340:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 8000344:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000348:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 800034c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000350:	f001 faba 	bl	80018c8 <HAL_DMA_Init>
 8000354:	b108      	cbz	r0, 800035a <MX_DMA_Init+0x42>
  {
    Error_Handler();
 8000356:	f000 f909 	bl	800056c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	200b      	movs	r0, #11
 800035e:	4611      	mov	r1, r2
 8000360:	f001 fa5c 	bl	800181c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000364:	200b      	movs	r0, #11
 8000366:	f001 fa8b 	bl	8001880 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	200c      	movs	r0, #12
 800036e:	4611      	mov	r1, r2
 8000370:	f001 fa54 	bl	800181c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000374:	200c      	movs	r0, #12

}
 8000376:	b003      	add	sp, #12
 8000378:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800037c:	f001 ba80 	b.w	8001880 <HAL_NVIC_EnableIRQ>
 8000380:	40021000 	.word	0x40021000
 8000384:	200000dc 	.word	0x200000dc
 8000388:	4002001c 	.word	0x4002001c

0800038c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	2210      	movs	r2, #16
{
 800038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000392:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	eb0d 0002 	add.w	r0, sp, r2
 8000398:	2100      	movs	r1, #0
 800039a:	f002 fb25 	bl	80029e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	4b2f      	ldr	r3, [pc, #188]	; (800045c <MX_GPIO_Init+0xd0>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003a4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	f042 0210 	orr.w	r2, r2, #16
 80003aa:	619a      	str	r2, [r3, #24]
 80003ac:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80003ae:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000468 <MX_GPIO_Init+0xdc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b2:	f002 0210 	and.w	r2, r2, #16
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80003bc:	4d28      	ldr	r5, [pc, #160]	; (8000460 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003be:	f042 0220 	orr.w	r2, r2, #32
 80003c2:	619a      	str	r2, [r3, #24]
 80003c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80003c6:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	f002 0220 	and.w	r2, r2, #32
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80003d2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	f042 0204 	orr.w	r2, r2, #4
 80003da:	619a      	str	r2, [r3, #24]
 80003dc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = wiper_power_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	f002 0204 	and.w	r2, r2, #4
 80003e4:	9202      	str	r2, [sp, #8]
 80003e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	f042 0208 	orr.w	r2, r2, #8
 80003ee:	619a      	str	r2, [r3, #24]
 80003f0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	9303      	str	r3, [sp, #12]
 80003fa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80003fc:	f001 fc42 	bl	8001c84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	4628      	mov	r0, r5
 8000404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000408:	f001 fc3c 	bl	8001c84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0xd8>)
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 800040e:	4628      	mov	r0, r5
 8000410:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000412:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8000418:	f001 fb52 	bl	8001ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = wiper_power_Pin|LED_Pin;
 800041c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000420:	4640      	mov	r0, r8
 8000422:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042c:	f001 fb48 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000430:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000434:	4628      	mov	r0, r5
 8000436:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000440:	f001 fb3e 	bl	8001ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000444:	4622      	mov	r2, r4
 8000446:	4621      	mov	r1, r4
 8000448:	2006      	movs	r0, #6
 800044a:	f001 f9e7 	bl	800181c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800044e:	2006      	movs	r0, #6
 8000450:	f001 fa16 	bl	8001880 <HAL_NVIC_EnableIRQ>

}
 8000454:	b008      	add	sp, #32
 8000456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10310000 	.word	0x10310000
 8000468:	40011000 	.word	0x40011000

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b510      	push	{r4, lr}
 800046e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000470:	2210      	movs	r2, #16
 8000472:	2100      	movs	r1, #0
 8000474:	a80d      	add	r0, sp, #52	; 0x34
 8000476:	f002 fab7 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	2214      	movs	r2, #20
 800047c:	2100      	movs	r1, #0
 800047e:	eb0d 0002 	add.w	r0, sp, r2
 8000482:	f002 fab1 	bl	80029e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000486:	2210      	movs	r2, #16
 8000488:	2100      	movs	r1, #0
 800048a:	a801      	add	r0, sp, #4
 800048c:	f002 faac 	bl	80029e8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000496:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000498:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004aa:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ac:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f001 fc03 	bl	8001cb8 <HAL_RCC_OscConfig>
 80004b2:	b108      	cbz	r0, 80004b8 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c8:	4621      	mov	r1, r4
 80004ca:	a805      	add	r0, sp, #20
 80004cc:	f001 fdca 	bl	8002064 <HAL_RCC_ClockConfig>
 80004d0:	b108      	cbz	r0, 80004d6 <SystemClock_Config+0x6a>
 80004d2:	b672      	cpsid	i
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <SystemClock_Config+0x68>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80004d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004da:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004dc:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80004de:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	f001 fe5c 	bl	800219c <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	b108      	cbz	r0, 80004ea <SystemClock_Config+0x7e>
 80004e6:	b672      	cpsid	i
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <SystemClock_Config+0x7c>
}
 80004ea:	b014      	add	sp, #80	; 0x50
 80004ec:	bd10      	pop	{r4, pc}
	...

080004f0 <main>:
{
 80004f0:	b508      	push	{r3, lr}
  HAL_Init();
 80004f2:	f000 fbb3 	bl	8000c5c <HAL_Init>
  SystemClock_Config();
 80004f6:	f7ff ffb9 	bl	800046c <SystemClock_Config>
  MX_GPIO_Init();
 80004fa:	f7ff ff47 	bl	800038c <MX_GPIO_Init>
  MX_CAN_Init();
 80004fe:	f7ff fe9f 	bl	8000240 <MX_CAN_Init>
  MX_TIM2_Init();
 8000502:	f000 fa7d 	bl	8000a00 <MX_TIM2_Init>
  MX_DMA_Init();
 8000506:	f7ff ff07 	bl	8000318 <MX_DMA_Init>
  MX_ADC1_Init();
 800050a:	f7ff fe1f 	bl	800014c <MX_ADC1_Init>
  MX_TIM4_Init();
 800050e:	f000 f9ab 	bl	8000868 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000512:	f000 f93d 	bl	8000790 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000516:	f000 f971 	bl	80007fc <MX_TIM3_Init>
  CAN_receive_init();
 800051a:	f000 fadf 	bl	8000adc <CAN_receive_init>
  wiper_start(wiper_speed_1);
 800051e:	2001      	movs	r0, #1
 8000520:	f000 fb24 	bl	8000b6c <wiper_start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x6c>)
 8000526:	f001 ff25 	bl	8002374 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x70>)
 800052c:	f001 ff22 	bl	8002374 <HAL_TIM_Base_Start_IT>
  wiper_start(3);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 fb1b 	bl	8000b6c <wiper_start>
	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 8000536:	4d0b      	ldr	r5, [pc, #44]	; (8000564 <main+0x74>)
	  CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message );
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <main+0x78>)
	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 800053a:	4628      	mov	r0, r5
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	f001 fb9f 	bl	8001c84 <HAL_GPIO_WritePin>
	  CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message );
 8000546:	4622      	mov	r2, r4
 8000548:	2101      	movs	r1, #1
 800054a:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800054e:	f000 faad 	bl	8000aac <CAN_send_message>
	  HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f000 fba5 	bl	8000ca4 <HAL_Delay>
  while (1)
 800055a:	e7ee      	b.n	800053a <main+0x4a>
 800055c:	200001b4 	.word	0x200001b4
 8000560:	2000016c 	.word	0x2000016c
 8000564:	40011000 	.word	0x40011000
 8000568:	20000000 	.word	0x20000000

0800056c <Error_Handler>:
 800056c:	b672      	cpsid	i
  while (1)
 800056e:	e7fe      	b.n	800056e <Error_Handler+0x2>

08000570 <HAL_GPIO_EXTI_Callback>:

extern uint8_t wiper_direction;

// model : control GPIO (interrupts)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // on interruption on a pin (ex : BUT_Pin or GPIO_PIN_0 or ((uint16_t)0x0001) )
 8000570:	b508      	push	{r3, lr}
	if (GPIO_Pin && BUT_Pin)
 8000572:	b138      	cbz	r0, 8000584 <HAL_GPIO_EXTI_Callback+0x14>
	{
			if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_RESET){
 8000574:	2101      	movs	r1, #1
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8000578:	f001 fb7e 	bl	8001c78 <HAL_GPIO_ReadPin>
 800057c:	b918      	cbnz	r0, 8000586 <HAL_GPIO_EXTI_Callback+0x16>
					enable_motor_CMD = 1;
 800057e:	2201      	movs	r2, #1
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000582:	701a      	strb	r2, [r3, #0]
	/*
	 * if (GPIO_Pin && GPIO_PIN_1)
	 * { }
	 */

}
 8000584:	bd08      	pop	{r3, pc}
			} else if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_SET) {
 8000586:	2101      	movs	r1, #1
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <HAL_GPIO_EXTI_Callback+0x3c>)
 800058a:	f001 fb75 	bl	8001c78 <HAL_GPIO_ReadPin>
 800058e:	2801      	cmp	r0, #1
 8000590:	4601      	mov	r1, r0
 8000592:	d1f7      	bne.n	8000584 <HAL_GPIO_EXTI_Callback+0x14>
					enable_motor_CMD = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x40>)
					CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8000598:	f240 4004 	movw	r0, #1028	; 0x404
					enable_motor_CMD = 0;
 800059c:	7013      	strb	r3, [r2, #0]
					TxMotorCMD=0;
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x44>)
 80005a0:	7013      	strb	r3, [r2, #0]
}
 80005a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 80005a6:	f000 ba81 	b.w	8000aac <CAN_send_message>
 80005aa:	bf00      	nop
 80005ac:	40010800 	.word	0x40010800
 80005b0:	20000036 	.word	0x20000036
 80005b4:	20000122 	.word	0x20000122

080005b8 <HAL_ADC_ConvHalfCpltCallback>:

// model : ADC / DMA input

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
	if (abs(ADC_Values[0]-ADC_Values[1]) > 200)
 80005b8:	4a1a      	ldr	r2, [pc, #104]	; (8000624 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
{
 80005ba:	b510      	push	{r4, lr}
	if (abs(ADC_Values[0]-ADC_Values[1]) > 200)
 80005bc:	8813      	ldrh	r3, [r2, #0]
 80005be:	8851      	ldrh	r1, [r2, #2]
 80005c0:	b21b      	sxth	r3, r3
 80005c2:	b209      	sxth	r1, r1
 80005c4:	1a5b      	subs	r3, r3, r1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bfcb      	itete	gt
 80005ca:	8813      	ldrhgt	r3, [r2, #0]
 80005cc:	8853      	ldrhle	r3, [r2, #2]
 80005ce:	8851      	ldrhgt	r1, [r2, #2]
 80005d0:	8811      	ldrhle	r1, [r2, #0]
 80005d2:	bfcc      	ite	gt
 80005d4:	b21b      	sxthgt	r3, r3
 80005d6:	b21b      	sxthle	r3, r3
 80005d8:	b209      	sxth	r1, r1
 80005da:	1a5b      	subs	r3, r3, r1
 80005dc:	2bc8      	cmp	r3, #200	; 0xc8
 80005de:	bfd4      	ite	le
 80005e0:	2300      	movle	r3, #0
 80005e2:	2301      	movgt	r3, #1
 80005e4:	b1ab      	cbz	r3, 8000612 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	{
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 80005e6:	8813      	ldrh	r3, [r2, #0]
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 80005e8:	2102      	movs	r1, #2
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	230c      	movs	r3, #12
 80005ee:	4353      	muls	r3, r2
 80005f0:	bf48      	it	mi
 80005f2:	f603 73ff 	addwmi	r3, r3, #4095	; 0xfff
 80005f6:	131b      	asrs	r3, r3, #12
 80005f8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80005fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000604:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 8000608:	f44f 608c 	mov.w	r0, #1120	; 0x460
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 800060c:	8013      	strh	r3, [r2, #0]
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 800060e:	f000 fa4d 	bl	8000aac <CAN_send_message>
	}
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, (uint32_t )ADC_Values, (uint32_t )(ADC_Values+1), 1);

}
 8000612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, (uint32_t )ADC_Values, (uint32_t )(ADC_Values+1), 1);
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000618:	2301      	movs	r3, #1
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800061c:	1e91      	subs	r1, r2, #2
 800061e:	f001 b981 	b.w	8001924 <HAL_DMA_Start_IT>
 8000622:	bf00      	nop
 8000624:	20000030 	.word	0x20000030
 8000628:	20000120 	.word	0x20000120
 800062c:	20000032 	.word	0x20000032
 8000630:	200000dc 	.word	0x200000dc

08000634 <HAL_TIM_PeriodElapsedCallback>:

// model : timer period triggered actions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if (htim->Instance==TIM3){
 8000634:	6802      	ldr	r2, [r0, #0]
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x68>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000638:	b510      	push	{r4, lr}
	if (htim->Instance==TIM3){
 800063a:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800063c:	4604      	mov	r4, r0
	if (htim->Instance==TIM3){
 800063e:	d109      	bne.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000646:	f001 fb22 	bl	8001c8e <HAL_GPIO_TogglePin>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Values, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	4915      	ldr	r1, [pc, #84]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000650:	f000 fca6 	bl	8000fa0 <HAL_ADC_Start_DMA>
	}
	if (htim->Instance == TIM4) {
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d10f      	bne.n	800067c <HAL_TIM_PeriodElapsedCallback+0x48>
		switch (wiper_direction) {
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800065e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000662:	7819      	ldrb	r1, [r3, #0]
 8000664:	2901      	cmp	r1, #1
 8000666:	d004      	beq.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	2101      	movs	r1, #1
				case 2:
					TIM2->CCR4=100;
					wiper_direction=1;
					break;
				default:
					TIM2->CCR4=100;
 800066c:	6410      	str	r0, [r2, #64]	; 0x40
					wiper_direction=1;
 800066e:	7019      	strb	r1, [r3, #0]
		if( enable_motor_CMD ){
				  TxMotorCMD=1;
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
			  }
	}
}
 8000670:	bd10      	pop	{r4, pc}
					TIM2->CCR4=200;
 8000672:	21c8      	movs	r1, #200	; 0xc8
 8000674:	6411      	str	r1, [r2, #64]	; 0x40
					wiper_direction=0;
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
					break;
 800067a:	e7f9      	b.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x3c>
	if (htim->Instance == TIM1) {
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d1f6      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if( enable_motor_CMD ){
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f2      	beq.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x3c>
				  TxMotorCMD=1;
 800068a:	2101      	movs	r1, #1
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x88>)
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 800068e:	f240 4004 	movw	r0, #1028	; 0x404
				  TxMotorCMD=1;
 8000692:	7011      	strb	r1, [r2, #0]
}
 8000694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8000698:	f000 ba08 	b.w	8000aac <CAN_send_message>
 800069c:	40000400 	.word	0x40000400
 80006a0:	40011000 	.word	0x40011000
 80006a4:	20000030 	.word	0x20000030
 80006a8:	20000040 	.word	0x20000040
 80006ac:	40000800 	.word	0x40000800
 80006b0:	2000000c 	.word	0x2000000c
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	20000036 	.word	0x20000036
 80006bc:	20000122 	.word	0x20000122

080006c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_MspInit+0x3c>)
{
 80006c2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	f042 0201 	orr.w	r2, r2, #1
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	f002 0201 	and.w	r2, r2, #1
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	69da      	ldr	r2, [r3, #28]
 80006d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006dc:	61da      	str	r2, [r3, #28]
 80006de:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ea:	6853      	ldr	r3, [r2, #4]
 80006ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	b002      	add	sp, #8
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler>

08000706 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler>

08000708 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler>

0800070a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler>

0800070c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler>

0800070e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 bab4 	b.w	8000c80 <HAL_IncTick>

08000718 <EXTI0_IRQHandler>:
	//	CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);

	//}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_Pin);
 8000718:	2001      	movs	r0, #1
 800071a:	f001 bac1 	b.w	8001ca0 <HAL_GPIO_EXTI_IRQHandler>
	...

08000720 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */



  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <DMA1_Channel1_IRQHandler+0x8>)
 8000722:	f001 b93b 	b.w	800199c <HAL_DMA_IRQHandler>
 8000726:	bf00      	nop
 8000728:	20000070 	.word	0x20000070

0800072c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 800072c:	4801      	ldr	r0, [pc, #4]	; (8000734 <DMA1_Channel2_IRQHandler+0x8>)
 800072e:	f001 b935 	b.w	800199c <HAL_DMA_IRQHandler>
 8000732:	bf00      	nop
 8000734:	200000dc 	.word	0x200000dc

08000738 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <ADC1_2_IRQHandler+0x8>)
 800073a:	f000 baf3 	b.w	8000d24 <HAL_ADC_IRQHandler>
 800073e:	bf00      	nop
 8000740:	20000040 	.word	0x20000040

08000744 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000746:	f000 bf58 	b.w	80015fa <HAL_CAN_IRQHandler>
 800074a:	bf00      	nop
 800074c:	200000b4 	.word	0x200000b4

08000750 <CAN1_RX1_IRQHandler>:
 8000750:	f7ff bff8 	b.w	8000744 <USB_LP_CAN1_RX0_IRQHandler>

08000754 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <TIM1_BRK_IRQHandler+0x8>)
 8000756:	f001 be3c 	b.w	80023d2 <HAL_TIM_IRQHandler>
 800075a:	bf00      	nop
 800075c:	200001b4 	.word	0x200001b4

08000760 <TIM1_UP_IRQHandler>:
 8000760:	f7ff bff8 	b.w	8000754 <TIM1_BRK_IRQHandler>

08000764 <TIM1_TRG_COM_IRQHandler>:
 8000764:	f7ff bff6 	b.w	8000754 <TIM1_BRK_IRQHandler>

08000768 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <TIM2_IRQHandler+0x8>)
 800076a:	f001 be32 	b.w	80023d2 <HAL_TIM_IRQHandler>
 800076e:	bf00      	nop
 8000770:	200001fc 	.word	0x200001fc

08000774 <TIM3_IRQHandler>:
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Values, 1);
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <TIM3_IRQHandler+0x8>)
 8000776:	f001 be2c 	b.w	80023d2 <HAL_TIM_IRQHandler>
 800077a:	bf00      	nop
 800077c:	2000016c 	.word	0x2000016c

08000780 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000780:	4801      	ldr	r0, [pc, #4]	; (8000788 <TIM4_IRQHandler+0x8>)
 8000782:	f001 be26 	b.w	80023d2 <HAL_TIM_IRQHandler>
 8000786:	bf00      	nop
 8000788:	20000124 	.word	0x20000124

0800078c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	4770      	bx	lr
	...

08000790 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	2210      	movs	r2, #16
 8000794:	2100      	movs	r1, #0
 8000796:	a802      	add	r0, sp, #8
 8000798:	f002 f926 	bl	80029e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 720-1;
 800079c:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim1.Instance = TIM1;
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 720-1;
 80007a2:	4915      	ldr	r1, [pc, #84]	; (80007f8 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 720-1;
 80007a6:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10000-1;
 80007aa:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007bc:	f001 fee4 	bl	8002588 <HAL_TIM_Base_Init>
 80007c0:	b108      	cbz	r0, 80007c6 <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 80007c2:	f7ff fed3 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <MX_TIM1_Init+0x64>)
 80007cc:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d0:	f001 ffc3 	bl	800275a <HAL_TIM_ConfigClockSource>
 80007d4:	b108      	cbz	r0, 80007da <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f7ff fec9 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007dc:	4669      	mov	r1, sp
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e4:	f002 f8ac 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	b108      	cbz	r0, 80007ee <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80007ea:	f7ff febf 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ee:	b007      	add	sp, #28
 80007f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80007f4:	200001b4 	.word	0x200001b4
 80007f8:	40012c00 	.word	0x40012c00

080007fc <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	2210      	movs	r2, #16
 8000800:	2100      	movs	r1, #0
 8000802:	a802      	add	r0, sp, #8
 8000804:	f002 f8f0 	bl	80029e8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 7200-1;
 8000808:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim3.Instance = TIM3;
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 7200-1;
 800080e:	4915      	ldr	r1, [pc, #84]	; (8000864 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 7200-1;
 8000812:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 10000-1;
 8000816:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000826:	f001 feaf 	bl	8002588 <HAL_TIM_Base_Init>
 800082a:	b108      	cbz	r0, 8000830 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 800082c:	f7ff fe9e 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <MX_TIM3_Init+0x64>)
 8000836:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083a:	f001 ff8e 	bl	800275a <HAL_TIM_ConfigClockSource>
 800083e:	b108      	cbz	r0, 8000844 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8000840:	f7ff fe94 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000846:	4669      	mov	r1, sp
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084e:	f002 f877 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	b108      	cbz	r0, 8000858 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000854:	f7ff fe8a 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000858:	b007      	add	sp, #28
 800085a:	f85d fb04 	ldr.w	pc, [sp], #4
 800085e:	bf00      	nop
 8000860:	2000016c 	.word	0x2000016c
 8000864:	40000400 	.word	0x40000400

08000868 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	2210      	movs	r2, #16
 800086c:	2100      	movs	r1, #0
 800086e:	a802      	add	r0, sp, #8
 8000870:	f002 f8ba 	bl	80029e8 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 7200-1;
 8000874:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim4.Instance = TIM4;
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 7200-1;
 800087a:	4915      	ldr	r1, [pc, #84]	; (80008d0 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7200-1;
 800087e:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 8000882:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000892:	f001 fe79 	bl	8002588 <HAL_TIM_Base_Init>
 8000896:	b108      	cbz	r0, 800089c <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8000898:	f7ff fe68 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <MX_TIM4_Init+0x64>)
 80008a2:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008a6:	f001 ff58 	bl	800275a <HAL_TIM_ConfigClockSource>
 80008aa:	b108      	cbz	r0, 80008b0 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 80008ac:	f7ff fe5e 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b2:	4669      	mov	r1, sp
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ba:	f002 f841 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	b108      	cbz	r0, 80008c4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f7ff fe54 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c4:	b007      	add	sp, #28
 80008c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ca:	bf00      	nop
 80008cc:	20000124 	.word	0x20000124
 80008d0:	40000800 	.word	0x40000800

080008d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 80008d6:	6803      	ldr	r3, [r0, #0]
 80008d8:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <HAL_TIM_Base_MspInit+0xd4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d124      	bne.n	8000928 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_TIM_Base_MspInit+0xd8>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80008e0:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80008e8:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ec:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80008ee:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80008f8:	f000 ff90 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80008fc:	2018      	movs	r0, #24
 80008fe:	f000 ffbf 	bl	8001880 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2019      	movs	r0, #25
 8000906:	4611      	mov	r1, r2
 8000908:	f000 ff88 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800090c:	2019      	movs	r0, #25
 800090e:	f000 ffb7 	bl	8001880 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	201a      	movs	r0, #26
 8000916:	4611      	mov	r1, r2
 8000918:	f000 ff80 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800091c:	201a      	movs	r0, #26
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800091e:	b005      	add	sp, #20
 8000920:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000924:	f000 bfac 	b.w	8001880 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM2)
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d111      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000932:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000934:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000936:	f042 0201 	orr.w	r2, r2, #1
 800093a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000940:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800094a:	f000 ff67 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800094e:	201c      	movs	r0, #28
 8000950:	e7e5      	b.n	800091e <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM3)
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_TIM_Base_MspInit+0xdc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d110      	bne.n	800097a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_TIM_Base_MspInit+0xd8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800095a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	f042 0202 	orr.w	r2, r2, #2
 8000962:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000966:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000968:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000972:	f000 ff53 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000976:	201d      	movs	r0, #29
 8000978:	e7d1      	b.n	800091e <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM4)
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_TIM_Base_MspInit+0xe0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d110      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_TIM_Base_MspInit+0xd8>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000982:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000984:	69da      	ldr	r2, [r3, #28]
 8000986:	f042 0204 	orr.w	r2, r2, #4
 800098a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800098e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000990:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	9303      	str	r3, [sp, #12]
 8000998:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800099a:	f000 ff3f 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800099e:	201e      	movs	r0, #30
 80009a0:	e7bd      	b.n	800091e <HAL_TIM_Base_MspInit+0x4a>
}
 80009a2:	b005      	add	sp, #20
 80009a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40000800 	.word	0x40000800

080009b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009b8:	b510      	push	{r4, lr}
 80009ba:	4604      	mov	r4, r0
 80009bc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	2210      	movs	r2, #16
 80009c0:	2100      	movs	r1, #0
 80009c2:	a802      	add	r0, sp, #8
 80009c4:	f002 f810 	bl	80029e8 <memset>
  if(timHandle->Instance==TIM2)
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ce:	d113      	bne.n	80009f8 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80009d4:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = wiper_pwm_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(wiper_pwm_GPIO_Port, &GPIO_InitStruct);
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	f042 0204 	orr.w	r2, r2, #4
 80009dc:	619a      	str	r2, [r3, #24]
 80009de:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
    HAL_GPIO_Init(wiper_pwm_GPIO_Port, &GPIO_InitStruct);
 80009ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(wiper_pwm_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f001 f864 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009f8:	b006      	add	sp, #24
 80009fa:	bd10      	pop	{r4, pc}
 80009fc:	40010800 	.word	0x40010800

08000a00 <MX_TIM2_Init>:
{
 8000a00:	b530      	push	{r4, r5, lr}
 8000a02:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a04:	2210      	movs	r2, #16
 8000a06:	2100      	movs	r1, #0
 8000a08:	a803      	add	r0, sp, #12
 8000a0a:	f001 ffed 	bl	80029e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	2500      	movs	r5, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	221c      	movs	r2, #28
 8000a12:	4629      	mov	r1, r5
 8000a14:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	e9cd 5501 	strd	r5, r5, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1c:	f001 ffe4 	bl	80029e8 <memset>
  htim2.Init.Prescaler = 720-1;
 8000a20:	f240 23cf 	movw	r3, #719	; 0x2cf
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8000a28:	4c1f      	ldr	r4, [pc, #124]	; (8000aa8 <MX_TIM2_Init+0xa8>)
  htim2.Init.Prescaler = 720-1;
 8000a2a:	e9c4 2300 	strd	r2, r3, [r4]
  htim2.Init.Period = 2000-1;
 8000a2e:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a32:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a3c:	f001 fda4 	bl	8002588 <HAL_TIM_Base_Init>
 8000a40:	b108      	cbz	r0, 8000a46 <MX_TIM2_Init+0x46>
    Error_Handler();
 8000a42:	f7ff fd93 	bl	800056c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <MX_TIM2_Init+0xa8>)
 8000a4c:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a50:	f001 fe83 	bl	800275a <HAL_TIM_ConfigClockSource>
 8000a54:	b108      	cbz	r0, 8000a5a <MX_TIM2_Init+0x5a>
    Error_Handler();
 8000a56:	f7ff fd89 	bl	800056c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_TIM2_Init+0xa8>)
 8000a5c:	f001 fdc0 	bl	80025e0 <HAL_TIM_PWM_Init>
 8000a60:	b108      	cbz	r0, 8000a66 <MX_TIM2_Init+0x66>
    Error_Handler();
 8000a62:	f7ff fd83 	bl	800056c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <MX_TIM2_Init+0xa8>)
 8000a6a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	e9cd 5501 	strd	r5, r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a70:	f001 ff66 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	b108      	cbz	r0, 8000a7a <MX_TIM2_Init+0x7a>
    Error_Handler();
 8000a76:	f7ff fd79 	bl	800056c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <MX_TIM2_Init+0xa8>)
 8000a80:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8000a82:	e9cd 3507 	strd	r3, r5, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	9509      	str	r5, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8a:	f001 fe01 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	b108      	cbz	r0, 8000a94 <MX_TIM2_Init+0x94>
    Error_Handler();
 8000a90:	f7ff fd6c 	bl	800056c <Error_Handler>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8000a94:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim2);
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_TIM2_Init+0xa8>)
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8000a98:	69d3      	ldr	r3, [r2, #28]
 8000a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a9e:	61d3      	str	r3, [r2, #28]
  HAL_TIM_MspPostInit(&htim2);
 8000aa0:	f7ff ff8a 	bl	80009b8 <HAL_TIM_MspPostInit>
}
 8000aa4:	b00f      	add	sp, #60	; 0x3c
 8000aa6:	bd30      	pop	{r4, r5, pc}
 8000aa8:	200001fc 	.word	0x200001fc

08000aac <CAN_send_message>:

CAN_RxHeaderTypeDef pCAN_RxHeader;

// --CAN

void CAN_send_message(uint16_t adresse,uint8_t dlc,uint8_t  *message){
 8000aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	CAN_TxHeaderTypeDef pCAN_Header;
	pCAN_Header.DLC   = dlc; // 1 DLC is 8bits
	pCAN_Header.StdId = adresse;
	pCAN_Header.ExtId = adresse<<16;
	pCAN_Header.IDE   = CAN_ID_EXT;
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8000aae:	2300      	movs	r3, #0
	pCAN_Header.DLC   = dlc; // 1 DLC is 8bits
 8000ab0:	9104      	str	r1, [sp, #16]
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8000ab2:	2104      	movs	r1, #4
	pCAN_Header.StdId = adresse;
 8000ab4:	9000      	str	r0, [sp, #0]
	pCAN_Header.ExtId = adresse<<16;
 8000ab6:	0400      	lsls	r0, r0, #16
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8000ab8:	e9cd 1302 	strd	r1, r3, [sp, #8]
	pCAN_Header.ExtId = adresse<<16;
 8000abc:	9001      	str	r0, [sp, #4]
	pCAN_Header.TransmitGlobalTime = DISABLE;
 8000abe:	f88d 3014 	strb.w	r3, [sp, #20]

	HAL_CAN_AddTxMessage(&hcan, &pCAN_Header, message, &pCAN_TxMailbox);
 8000ac2:	4669      	mov	r1, sp
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <CAN_send_message+0x28>)
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <CAN_send_message+0x2c>)
 8000ac8:	f000 fcb5 	bl	8001436 <HAL_CAN_AddTxMessage>

}
 8000acc:	b007      	add	sp, #28
 8000ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad2:	bf00      	nop
 8000ad4:	20000268 	.word	0x20000268
 8000ad8:	200000b4 	.word	0x200000b4

08000adc <CAN_receive_init>:

	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterIdHigh = /*((0x04210031  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;*/(0x04210031 >> 13);
	sFilterConfig.FilterIdLow = (0x04210031 & 0X1FFF) << 3;//(0x04210031 >> (11 - 3)) & 0xFFF8;//(0x04210031 >> 13);
 8000adc:	f242 1108 	movw	r1, #8456	; 0x2108
 8000ae0:	f44f 72c4 	mov.w	r2, #392	; 0x188
void CAN_receive_init(void){
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ae8:	2301      	movs	r3, #1
	sFilterConfig.FilterBank = 0;
 8000aea:	2400      	movs	r4, #0
	sFilterConfig.FilterIdLow = (0x04210031 & 0X1FFF) << 3;//(0x04210031 >> (11 - 3)) & 0xFFF8;//(0x04210031 >> 13);
 8000aec:	e9cd 1200 	strd	r1, r2, [sp]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;//(((uint16_t)0x0FFFffFF  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;
 8000af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;

	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);      // Configure le filtre comme ci-dessus
 8000af4:	4d0d      	ldr	r5, [pc, #52]	; (8000b2c <CAN_receive_init+0x50>)
 8000af6:	4669      	mov	r1, sp
 8000af8:	4628      	mov	r0, r5
	sFilterConfig.FilterMaskIdLow =0x0000;// 0xFFF8;//(0x0FFFFFFF >> (11 - 3)) & 0xFFF8;
 8000afa:	e9cd 2402 	strd	r2, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000afe:	e9cd 3408 	strd	r3, r4, [sp, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b02:	9307      	str	r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b04:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b08:	9404      	str	r4, [sp, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);      // Configure le filtre comme ci-dessus
 8000b0a:	f000 fbf7 	bl	80012fc <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4628      	mov	r0, r5
 8000b12:	f000 fd55 	bl	80015c0 <HAL_CAN_ActivateNotification>


	HAL_CAN_Start(&hcan);
 8000b16:	4628      	mov	r0, r5
 8000b18:	f000 fc5f 	bl	80013da <HAL_CAN_Start>
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <CAN_receive_init+0x54>)
 8000b24:	f001 f8ae 	bl	8001c84 <HAL_GPIO_WritePin>

}
 8000b28:	b00b      	add	sp, #44	; 0x2c
 8000b2a:	bd30      	pop	{r4, r5, pc}
 8000b2c:	200000b4 	.word	0x200000b4
 8000b30:	40010800 	.word	0x40010800

08000b34 <HAL_CAN_RxFifo0MsgPendingCallback>:
void CAN_close_can(void){
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_SET);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000b34:	b538      	push	{r3, r4, r5, lr}
	extern uint8_t message[8];
	extern uint8_t RxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pCAN_RxHeader, RxData);
 8000b36:	4d09      	ldr	r5, [pc, #36]	; (8000b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000b38:	4c09      	ldr	r4, [pc, #36]	; (8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000b3a:	462a      	mov	r2, r5
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f000 fcc7 	bl	80014d2 <HAL_CAN_GetRxMessage>

	if ((pCAN_RxHeader.ExtId) == 0x4210031){
 8000b44:	686a      	ldr	r2, [r5, #4]
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d105      	bne.n	8000b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		message[0]= (RxData[0]==1) ? 0 : 1;
 8000b4c:	7823      	ldrb	r3, [r4, #0]
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b50:	3b01      	subs	r3, #1
 8000b52:	bf18      	it	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	7013      	strb	r3, [r2, #0]
	}
}
 8000b58:	bd38      	pop	{r3, r4, r5, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000244 	.word	0x20000244
 8000b60:	20000037 	.word	0x20000037
 8000b64:	04210031 	.word	0x04210031
 8000b68:	20000000 	.word	0x20000000

08000b6c <wiper_start>:
extern TIM_HandleTypeDef htim2; //needed for specific period of pwm to control the servo motor
extern TIM_HandleTypeDef htim4; // control by wiper.c to change wiper speed

uint8_t wiper_direction = 1;

void wiper_start(wiper_speed the_wiper_speed){
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4605      	mov	r5, r0



	//HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
    HAL_TIM_Base_Start_IT(&htim4);
 8000b70:	4c12      	ldr	r4, [pc, #72]	; (8000bbc <wiper_start+0x50>)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b72:	210c      	movs	r1, #12
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <wiper_start+0x54>)
 8000b76:	f001 fee1 	bl	800293c <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim4);
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f001 fbfa 	bl	8002374 <HAL_TIM_Base_Start_IT>


	//configure htim4 period using wiper_speed
    switch (the_wiper_speed) {
 8000b80:	2d02      	cmp	r5, #2
 8000b82:	d011      	beq.n	8000ba8 <wiper_start+0x3c>
 8000b84:	2d03      	cmp	r5, #3
 8000b86:	d012      	beq.n	8000bae <wiper_start+0x42>
 8000b88:	2d01      	cmp	r5, #1
 8000b8a:	d113      	bne.n	8000bb4 <wiper_start+0x48>
		case wiper_speed_1:
			htim4.Init.Period=10000-1;
 8000b8c:	f242 730f 	movw	r3, #9999	; 0x270f
			htim4.Init.Period=30000-1;
			HAL_TIM_Base_Init(&htim4);
			break;
		default:
			htim4.Init.Period=1000-1;
			HAL_TIM_Base_Init(&htim4);
 8000b90:	4620      	mov	r0, r4
			htim4.Init.Period=1000-1;
 8000b92:	60e3      	str	r3, [r4, #12]
			HAL_TIM_Base_Init(&htim4);
 8000b94:	f001 fcf8 	bl	8002588 <HAL_TIM_Base_Init>

    //switch wiper_power on
    	HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, GPIO_PIN_SET);


}
 8000b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <wiper_start+0x58>)
 8000ba4:	f001 b86e 	b.w	8001c84 <HAL_GPIO_WritePin>
			htim4.Init.Period=20000-1;
 8000ba8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000bac:	e7f0      	b.n	8000b90 <wiper_start+0x24>
			htim4.Init.Period=30000-1;
 8000bae:	f247 532f 	movw	r3, #29999	; 0x752f
 8000bb2:	e7ed      	b.n	8000b90 <wiper_start+0x24>
			htim4.Init.Period=1000-1;
 8000bb4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000bb8:	e7ea      	b.n	8000b90 <wiper_start+0x24>
 8000bba:	bf00      	nop
 8000bbc:	20000124 	.word	0x20000124
 8000bc0:	200001fc 	.word	0x200001fc
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f7ff fdcd 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f001 fed5 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fc7b 	bl	80004f0 <main>
  bx lr
 8000bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c04:	08002a3c 	.word	0x08002a3c
  ldr r2, =_sbss
 8000c08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c0c:	20000270 	.word	0x20000270

08000c10 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <CAN1_SCE_IRQHandler>
	...

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_InitTick+0x3c>)
{
 8000c18:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1a:	7818      	ldrb	r0, [r3, #0]
 8000c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c20:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_InitTick+0x40>)
 8000c26:	6810      	ldr	r0, [r2, #0]
 8000c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c2c:	f000 fe36 	bl	800189c <HAL_SYSTICK_Config>
 8000c30:	4604      	mov	r4, r0
 8000c32:	b958      	cbnz	r0, 8000c4c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	2d0f      	cmp	r5, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 fdec 	bl	800181c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4620      	mov	r0, r4
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_InitTick+0x44>)
 8000c48:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	e7fc      	b.n	8000c4a <HAL_InitTick+0x36>
 8000c50:	2000000d 	.word	0x2000000d
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000010 	.word	0x20000010

08000c5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x20>)
{
 8000c5e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	f000 fdc5 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff ffd0 	bl	8000c14 <HAL_InitTick>
  HAL_MspInit();
 8000c74:	f7ff fd24 	bl	80006c0 <HAL_MspInit>
}
 8000c78:	2000      	movs	r0, #0
 8000c7a:	bd08      	pop	{r3, pc}
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x10>)
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_IncTick+0x14>)
 8000c84:	6811      	ldr	r1, [r2, #0]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	440b      	add	r3, r1
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000026c 	.word	0x2000026c
 8000c94:	2000000d 	.word	0x2000000d

08000c98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c98:	4b01      	ldr	r3, [pc, #4]	; (8000ca0 <HAL_GetTick+0x8>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000026c 	.word	0x2000026c

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff fff6 	bl	8000c98 <HAL_GetTick>
 8000cac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	4b04      	ldrne	r3, [pc, #16]	; (8000cc4 <HAL_Delay+0x20>)
 8000cb4:	781b      	ldrbne	r3, [r3, #0]
 8000cb6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	1b43      	subs	r3, r0, r5
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d3fa      	bcc.n	8000cb8 <HAL_Delay+0x14>
  {
  }
}
 8000cc2:	bd38      	pop	{r3, r4, r5, pc}
 8000cc4:	2000000d 	.word	0x2000000d

08000cc8 <HAL_ADC_ConvCpltCallback>:
 8000cc8:	4770      	bx	lr

08000cca <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cca:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000ccc:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd0:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000cd4:	d11b      	bne.n	8000d0e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6892      	ldr	r2, [r2, #8]
 8000ce2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000ce6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cea:	d10c      	bne.n	8000d06 <ADC_DMAConvCplt+0x3c>
 8000cec:	7b1a      	ldrb	r2, [r3, #12]
 8000cee:	b952      	cbnz	r2, 8000d06 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cfa:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cfc:	bf5e      	ittt	pl
 8000cfe:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000d00:	f042 0201 	orrpl.w	r2, r2, #1
 8000d04:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000d0c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
}
 8000d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4718      	bx	r3

08000d18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d18:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d1c:	f7ff fc4c 	bl	80005b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d20:	bd08      	pop	{r3, pc}

08000d22 <HAL_ADC_LevelOutOfWindowCallback>:
 8000d22:	4770      	bx	lr

08000d24 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d24:	6803      	ldr	r3, [r0, #0]
{
 8000d26:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d28:	685a      	ldr	r2, [r3, #4]
{
 8000d2a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d2c:	0690      	lsls	r0, r2, #26
 8000d2e:	d527      	bpl.n	8000d80 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	0791      	lsls	r1, r2, #30
 8000d34:	d524      	bpl.n	8000d80 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d38:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d3a:	bf5e      	ittt	pl
 8000d3c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000d3e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000d42:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d4a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d4e:	d110      	bne.n	8000d72 <HAL_ADC_IRQHandler+0x4e>
 8000d50:	7b22      	ldrb	r2, [r4, #12]
 8000d52:	b972      	cbnz	r2, 8000d72 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	f022 0220 	bic.w	r2, r2, #32
 8000d5a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d62:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d66:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d68:	bf5e      	ittt	pl
 8000d6a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000d6c:	f043 0301 	orrpl.w	r3, r3, #1
 8000d70:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000d72:	4620      	mov	r0, r4
 8000d74:	f7ff ffa8 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d78:	f06f 0212 	mvn.w	r2, #18
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	0610      	lsls	r0, r2, #24
 8000d86:	d530      	bpl.n	8000dea <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	0751      	lsls	r1, r2, #29
 8000d8c:	d52d      	bpl.n	8000dea <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d90:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d92:	bf5e      	ittt	pl
 8000d94:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000d96:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000d9a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000da2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000da6:	d00a      	beq.n	8000dbe <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000da8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000daa:	0550      	lsls	r0, r2, #21
 8000dac:	d416      	bmi.n	8000ddc <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000db4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000db8:	d110      	bne.n	8000ddc <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dba:	7b22      	ldrb	r2, [r4, #12]
 8000dbc:	b972      	cbnz	r2, 8000ddc <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dcc:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dd0:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dd2:	bf5e      	ittt	pl
 8000dd4:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000dd6:	f043 0301 	orrpl.w	r3, r3, #1
 8000dda:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f000 fa11 	bl	8001204 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000de2:	f06f 020c 	mvn.w	r2, #12
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	0652      	lsls	r2, r2, #25
 8000df0:	d50d      	bpl.n	8000e0e <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	07db      	lsls	r3, r3, #31
 8000df6:	d50a      	bpl.n	8000e0e <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dfa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e00:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e02:	f7ff ff8e 	bl	8000d22 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e06:	f06f 0201 	mvn.w	r2, #1
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	bd10      	pop	{r4, pc}

08000e10 <HAL_ADC_ErrorCallback>:
 8000e10:	4770      	bx	lr

08000e12 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e12:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000e14:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e26:	f7ff fff3 	bl	8000e10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e2a:	bd08      	pop	{r3, pc}

08000e2c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000e2c:	2300      	movs	r3, #0
{ 
 8000e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e30:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e32:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8000e36:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d06c      	beq.n	8000f16 <HAL_ADC_ConfigChannel+0xea>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000e42:	684d      	ldr	r5, [r1, #4]
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	2d06      	cmp	r5, #6
 8000e48:	6808      	ldr	r0, [r1, #0]
 8000e4a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000e4e:	d822      	bhi.n	8000e96 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e50:	261f      	movs	r6, #31
 8000e52:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000e54:	3b05      	subs	r3, #5
 8000e56:	409e      	lsls	r6, r3
 8000e58:	ea25 0506 	bic.w	r5, r5, r6
 8000e5c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e60:	432b      	orrs	r3, r5
 8000e62:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e64:	2809      	cmp	r0, #9
 8000e66:	688b      	ldr	r3, [r1, #8]
 8000e68:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000e6c:	f04f 0107 	mov.w	r1, #7
 8000e70:	d929      	bls.n	8000ec6 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e72:	68d6      	ldr	r6, [r2, #12]
 8000e74:	3d1e      	subs	r5, #30
 8000e76:	40a9      	lsls	r1, r5
 8000e78:	ea26 0101 	bic.w	r1, r6, r1
 8000e7c:	40ab      	lsls	r3, r5
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e82:	f1a0 0310 	sub.w	r3, r0, #16
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d925      	bls.n	8000ed6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000e92:	b002      	add	sp, #8
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000e96:	2d0c      	cmp	r5, #12
 8000e98:	f04f 051f 	mov.w	r5, #31
 8000e9c:	d809      	bhi.n	8000eb2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e9e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000ea0:	3b23      	subs	r3, #35	; 0x23
 8000ea2:	409d      	lsls	r5, r3
 8000ea4:	ea26 0505 	bic.w	r5, r6, r5
 8000ea8:	fa00 f303 	lsl.w	r3, r0, r3
 8000eac:	432b      	orrs	r3, r5
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	e7d8      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000eb4:	3b41      	subs	r3, #65	; 0x41
 8000eb6:	409d      	lsls	r5, r3
 8000eb8:	ea26 0505 	bic.w	r5, r6, r5
 8000ebc:	fa00 f303 	lsl.w	r3, r0, r3
 8000ec0:	432b      	orrs	r3, r5
 8000ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ec4:	e7ce      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ec6:	6910      	ldr	r0, [r2, #16]
 8000ec8:	40a9      	lsls	r1, r5
 8000eca:	ea20 0101 	bic.w	r1, r0, r1
 8000ece:	40ab      	lsls	r3, r5
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6113      	str	r3, [r2, #16]
 8000ed4:	e7d9      	b.n	8000e8a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_ADC_ConfigChannel+0xf0>)
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d116      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000edc:	6893      	ldr	r3, [r2, #8]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	d4d3      	bmi.n	8000e8a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ee2:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eea:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eec:	d1cd      	bne.n	8000e8a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_ADC_ConfigChannel+0xf4>)
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_ADC_ConfigChannel+0xf8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ef8:	230a      	movs	r3, #10
 8000efa:	4353      	muls	r3, r2
            wait_loop_index--;
 8000efc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0c2      	beq.n	8000e8a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	e7f8      	b.n	8000efc <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000f14:	e7ba      	b.n	8000e8c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8000f16:	2002      	movs	r0, #2
 8000f18:	e7bb      	b.n	8000e92 <HAL_ADC_ConfigChannel+0x66>
 8000f1a:	bf00      	nop
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	20000008 	.word	0x20000008
 8000f24:	000f4240 	.word	0x000f4240

08000f28 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000f28:	2300      	movs	r3, #0
{
 8000f2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000f2c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f2e:	6803      	ldr	r3, [r0, #0]
{
 8000f30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	07d2      	lsls	r2, r2, #31
 8000f36:	d502      	bpl.n	8000f3e <ADC_Enable+0x16>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
}
 8000f3a:	b003      	add	sp, #12
 8000f3c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <ADC_Enable+0x70>)
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <ADC_Enable+0x74>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000f50:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000f52:	9b01      	ldr	r3, [sp, #4]
 8000f54:	b9e3      	cbnz	r3, 8000f90 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8000f56:	f7ff fe9f 	bl	8000c98 <HAL_GetTick>
 8000f5a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	07db      	lsls	r3, r3, #31
 8000f62:	d4e9      	bmi.n	8000f38 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f64:	f7ff fe98 	bl	8000c98 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f6      	bls.n	8000f5c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f013 0301 	ands.w	r3, r3, #1
 8000f76:	d1f1      	bne.n	8000f5c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000f7a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
 8000f80:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8000f84:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8000f8e:	e7d4      	b.n	8000f3a <ADC_Enable+0x12>
      wait_loop_index--;
 8000f90:	9b01      	ldr	r3, [sp, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	e7dc      	b.n	8000f50 <ADC_Enable+0x28>
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	000f4240 	.word	0x000f4240

08000fa0 <HAL_ADC_Start_DMA>:
{
 8000fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fa4:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <HAL_ADC_Start_DMA+0x108>)
{
 8000fa6:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fa8:	6802      	ldr	r2, [r0, #0]
{
 8000faa:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fac:	429a      	cmp	r2, r3
{
 8000fae:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fb0:	d002      	beq.n	8000fb8 <HAL_ADC_Start_DMA+0x18>
 8000fb2:	493e      	ldr	r1, [pc, #248]	; (80010ac <HAL_ADC_Start_DMA+0x10c>)
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d103      	bne.n	8000fc0 <HAL_ADC_Start_DMA+0x20>
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000fbe:	d16e      	bne.n	800109e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000fc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d06c      	beq.n	80010a2 <HAL_ADC_Start_DMA+0x102>
 8000fc8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000fca:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000fcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000fd0:	f7ff ffaa 	bl	8000f28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d15d      	bne.n	8001096 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000fda:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fdc:	6821      	ldr	r1, [r4, #0]
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8000fe4:	f025 0501 	bic.w	r5, r5, #1
 8000fe8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fec:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000fee:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff0:	d104      	bne.n	8000ffc <HAL_ADC_Start_DMA+0x5c>
 8000ff2:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <HAL_ADC_Start_DMA+0x108>)
 8000ff4:	6853      	ldr	r3, [r2, #4]
 8000ff6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000ffa:	d13e      	bne.n	800107a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ffe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001002:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001004:	684b      	ldr	r3, [r1, #4]
 8001006:	055a      	lsls	r2, r3, #21
 8001008:	d505      	bpl.n	8001016 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800100a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800100c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001014:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001018:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800101a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800101e:	bf18      	it	ne
 8001020:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001022:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001024:	bf18      	it	ne
 8001026:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800102a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800102c:	2300      	movs	r3, #0
 800102e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001034:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001036:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_ADC_Start_DMA+0x114>)
 800103a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_ADC_Start_DMA+0x118>)
 800103e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001040:	f06f 0302 	mvn.w	r3, #2
 8001044:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001048:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001054:	4643      	mov	r3, r8
 8001056:	f000 fc65 	bl	8001924 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001062:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	bf0c      	ite	eq
 800106a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800106e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001072:	609a      	str	r2, [r3, #8]
}
 8001074:	4630      	mov	r0, r6
 8001076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800107c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001080:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001086:	bf41      	itttt	mi
 8001088:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800108a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800108e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001092:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001094:	e7bf      	b.n	8001016 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001096:	2300      	movs	r3, #0
 8001098:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800109c:	e7ea      	b.n	8001074 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800109e:	2601      	movs	r6, #1
 80010a0:	e7e8      	b.n	8001074 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80010a2:	2602      	movs	r6, #2
 80010a4:	e7e6      	b.n	8001074 <HAL_ADC_Start_DMA+0xd4>
 80010a6:	bf00      	nop
 80010a8:	40012400 	.word	0x40012400
 80010ac:	40012800 	.word	0x40012800
 80010b0:	08000ccb 	.word	0x08000ccb
 80010b4:	08000d19 	.word	0x08000d19
 80010b8:	08000e13 	.word	0x08000e13

080010bc <ADC_ConversionStop_Disable>:
{
 80010bc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010be:	6803      	ldr	r3, [r0, #0]
{
 80010c0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	07d1      	lsls	r1, r2, #31
 80010c6:	d401      	bmi.n	80010cc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
}
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80010d4:	f7ff fde0 	bl	8000c98 <HAL_GetTick>
 80010d8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	07db      	lsls	r3, r3, #31
 80010e0:	d5f2      	bpl.n	80010c8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010e2:	f7ff fdd9 	bl	8000c98 <HAL_GetTick>
 80010e6:	1b40      	subs	r0, r0, r5
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9f6      	bls.n	80010da <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	07da      	lsls	r2, r3, #31
 80010f2:	d5f2      	bpl.n	80010da <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001106:	e7e0      	b.n	80010ca <ADC_ConversionStop_Disable+0xe>

08001108 <HAL_ADC_Init>:
{
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800110a:	4604      	mov	r4, r0
 800110c:	2800      	cmp	r0, #0
 800110e:	d06e      	beq.n	80011ee <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001110:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001112:	b923      	cbnz	r3, 800111e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001114:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001116:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800111a:	f7ff f83f 	bl	800019c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ffcc 	bl	80010bc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001126:	f013 0310 	ands.w	r3, r3, #16
 800112a:	d162      	bne.n	80011f2 <HAL_ADC_Init+0xea>
 800112c:	2800      	cmp	r0, #0
 800112e:	d160      	bne.n	80011f2 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8001130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001132:	69e5      	ldr	r5, [r4, #28]
 8001134:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800113a:	f022 0202 	bic.w	r2, r2, #2
 800113e:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001142:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001144:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001148:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800114a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800114e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001152:	d037      	beq.n	80011c4 <HAL_ADC_Init+0xbc>
 8001154:	2d01      	cmp	r5, #1
 8001156:	bf14      	ite	ne
 8001158:	2700      	movne	r7, #0
 800115a:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115e:	7d26      	ldrb	r6, [r4, #20]
 8001160:	2e01      	cmp	r6, #1
 8001162:	d106      	bne.n	8001172 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001164:	bb82      	cbnz	r2, 80011c8 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001166:	69a2      	ldr	r2, [r4, #24]
 8001168:	3a01      	subs	r2, #1
 800116a:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800116e:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001172:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001174:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001178:	6856      	ldr	r6, [r2, #4]
 800117a:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800117e:	ea46 0607 	orr.w	r6, r6, r7
 8001182:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001184:	6897      	ldr	r7, [r2, #8]
 8001186:	4e1d      	ldr	r6, [pc, #116]	; (80011fc <HAL_ADC_Init+0xf4>)
 8001188:	ea06 0607 	and.w	r6, r6, r7
 800118c:	ea46 0601 	orr.w	r6, r6, r1
 8001190:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001192:	d001      	beq.n	8001198 <HAL_ADC_Init+0x90>
 8001194:	2d01      	cmp	r5, #1
 8001196:	d102      	bne.n	800119e <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001198:	6923      	ldr	r3, [r4, #16]
 800119a:	3b01      	subs	r3, #1
 800119c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800119e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80011a0:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80011a4:	432b      	orrs	r3, r5
 80011a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011a8:	6892      	ldr	r2, [r2, #8]
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_ADC_Init+0xf8>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d113      	bne.n	80011da <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80011b2:	2300      	movs	r3, #0
 80011b4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80011b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b8:	f023 0303 	bic.w	r3, r3, #3
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80011c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011c4:	462f      	mov	r7, r5
 80011c6:	e7ca      	b.n	800115e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011ca:	f042 0220 	orr.w	r2, r2, #32
 80011ce:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80011d8:	e7cb      	b.n	8001172 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80011da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011dc:	f023 0312 	bic.w	r3, r3, #18
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
 80011f0:	e7e7      	b.n	80011c2 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80011fa:	e7f8      	b.n	80011ee <HAL_ADC_Init+0xe6>
 80011fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001200:	ff1f0efe 	.word	0xff1f0efe

08001204 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001204:	4770      	bx	lr

08001206 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001206:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001208:	4604      	mov	r4, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	d06e      	beq.n	80012ec <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800120e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001212:	b90b      	cbnz	r3, 8001218 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001214:	f7ff f834 	bl	8000280 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001222:	f7ff fd39 	bl	8000c98 <HAL_GetTick>
 8001226:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	07d1      	lsls	r1, r2, #31
 800122e:	d551      	bpl.n	80012d4 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f022 0202 	bic.w	r2, r2, #2
 8001236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001238:	f7ff fd2e 	bl	8000c98 <HAL_GetTick>
 800123c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	0792      	lsls	r2, r2, #30
 8001244:	d454      	bmi.n	80012f0 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001246:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001248:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800124a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	bf0c      	ite	eq
 8001250:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001254:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001258:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800125a:	7e62      	ldrb	r2, [r4, #25]
 800125c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	bf0c      	ite	eq
 8001262:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001266:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800126a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800126c:	7ea2      	ldrb	r2, [r4, #26]
 800126e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	bf0c      	ite	eq
 8001274:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001278:	f022 0220 	bicne.w	r2, r2, #32
 800127c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800127e:	7ee2      	ldrb	r2, [r4, #27]
 8001280:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	bf0c      	ite	eq
 8001286:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128a:	f042 0210 	orrne.w	r2, r2, #16
 800128e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001290:	7f22      	ldrb	r2, [r4, #28]
 8001292:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	bf0c      	ite	eq
 8001298:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129c:	f022 0208 	bicne.w	r2, r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012a2:	7f62      	ldrb	r2, [r4, #29]
 80012a4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	bf0c      	ite	eq
 80012aa:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ae:	f022 0204 	bicne.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	6921      	ldr	r1, [r4, #16]
 80012bc:	430a      	orrs	r2, r1
 80012be:	6961      	ldr	r1, [r4, #20]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	6861      	ldr	r1, [r4, #4]
 80012c4:	3901      	subs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012ca:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012cc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80012ce:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d4:	f7ff fce0 	bl	8000c98 <HAL_GetTick>
 80012d8:	1b40      	subs	r0, r0, r5
 80012da:	280a      	cmp	r0, #10
 80012dc:	d9a4      	bls.n	8001228 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e6:	2305      	movs	r3, #5
 80012e8:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7f0      	b.n	80012d2 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff fcd2 	bl	8000c98 <HAL_GetTick>
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	280a      	cmp	r0, #10
 80012f8:	d9a1      	bls.n	800123e <HAL_CAN_Init+0x38>
 80012fa:	e7f0      	b.n	80012de <HAL_CAN_Init+0xd8>

080012fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012fe:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001302:	3b01      	subs	r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d862      	bhi.n	80013ce <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001308:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 800130a:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800130c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001318:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800131a:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800131e:	f002 001f 	and.w	r0, r2, #31
 8001322:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001326:	ea25 0500 	bic.w	r5, r5, r0
 800132a:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800132e:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001330:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001332:	bb85      	cbnz	r5, 8001396 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001334:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001338:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800133a:	4025      	ands	r5, r4
 800133c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001340:	888d      	ldrh	r5, [r1, #4]
 8001342:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001346:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001350:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001352:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001356:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800135a:	698a      	ldr	r2, [r1, #24]
 800135c:	bb6a      	cbnz	r2, 80013ba <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800135e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001362:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001364:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001368:	690a      	ldr	r2, [r1, #16]
 800136a:	bb52      	cbnz	r2, 80013c2 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800136c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001370:	4014      	ands	r4, r2
 8001372:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001376:	6a0a      	ldr	r2, [r1, #32]
 8001378:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800137a:	bf02      	ittt	eq
 800137c:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8001380:	4310      	orreq	r0, r2
 8001382:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001386:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001388:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001394:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001396:	2d01      	cmp	r5, #1
 8001398:	d1df      	bne.n	800135a <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800139a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800139e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013a0:	4305      	orrs	r5, r0
 80013a2:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013a6:	888d      	ldrh	r5, [r1, #4]
 80013a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ac:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013b0:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b4:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013b6:	898d      	ldrh	r5, [r1, #12]
 80013b8:	e7cb      	b.n	8001352 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013be:	4302      	orrs	r2, r0
 80013c0:	e7d0      	b.n	8001364 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c6:	4302      	orrs	r2, r0
 80013c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013cc:	e7d3      	b.n	8001376 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80013d6:	2001      	movs	r0, #1
 80013d8:	e7dc      	b.n	8001394 <HAL_CAN_ConfigFilter+0x98>

080013da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013da:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013dc:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80013e0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	b2dd      	uxtb	r5, r3
 80013e6:	d120      	bne.n	800142a <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013e8:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ea:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013ec:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fc4e 	bl	8000c98 <HAL_GetTick>
 80013fc:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f013 0301 	ands.w	r3, r3, #1
 8001406:	d102      	bne.n	800140e <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 8001408:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140a:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 800140c:	e00b      	b.n	8001426 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800140e:	f7ff fc43 	bl	8000c98 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	280a      	cmp	r0, #10
 8001416:	d9f2      	bls.n	80013fe <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800141a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001420:	2305      	movs	r3, #5
 8001422:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8001426:	4628      	mov	r0, r5
 8001428:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800142a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800142c:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800142e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001432:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001434:	e7f7      	b.n	8001426 <HAL_CAN_Start+0x4c>

08001436 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001436:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001438:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800143c:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800143e:	3d01      	subs	r5, #1
 8001440:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001442:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001444:	d841      	bhi.n	80014ca <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001446:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800144a:	d03a      	beq.n	80014c2 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800144c:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001450:	2c03      	cmp	r4, #3
 8001452:	f04f 0501 	mov.w	r5, #1
 8001456:	d105      	bne.n	8001464 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800145a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800145e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001460:	2001      	movs	r0, #1
 8001462:	e028      	b.n	80014b6 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001464:	40a5      	lsls	r5, r4
 8001466:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001468:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800146c:	f104 0318 	add.w	r3, r4, #24
 8001470:	bb10      	cbnz	r0, 80014b8 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001472:	6808      	ldr	r0, [r1, #0]
 8001474:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800147c:	0120      	lsls	r0, r4, #4
 800147e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001482:	4406      	add	r6, r0
      return HAL_OK;
 8001484:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001486:	690d      	ldr	r5, [r1, #16]
 8001488:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800148c:	7d09      	ldrb	r1, [r1, #20]
 800148e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001490:	bf02      	ittt	eq
 8001492:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001496:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800149a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800149e:	6851      	ldr	r1, [r2, #4]
 80014a0:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014aa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b8:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80014ba:	4338      	orrs	r0, r7
 80014bc:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80014c0:	e7da      	b.n	8001478 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c8:	e7c9      	b.n	800145e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	e7c5      	b.n	800145e <HAL_CAN_AddTxMessage+0x28>

080014d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d4:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014d8:	3c01      	subs	r4, #1
 80014da:	2c01      	cmp	r4, #1
 80014dc:	d86c      	bhi.n	80015b8 <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014de:	6806      	ldr	r6, [r0, #0]
 80014e0:	b941      	cbnz	r1, 80014f4 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014e2:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014e4:	07a4      	lsls	r4, r4, #30
 80014e6:	d107      	bne.n	80014f8 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ee:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
 80014f2:	e056      	b.n	80015a2 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014f4:	6934      	ldr	r4, [r6, #16]
 80014f6:	e7f5      	b.n	80014e4 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014f8:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80014fc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001500:	010c      	lsls	r4, r1, #4
 8001502:	f007 0704 	and.w	r7, r7, #4
 8001506:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001508:	2f00      	cmp	r7, #0
 800150a:	d14b      	bne.n	80015a4 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800150c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001510:	0d7f      	lsrs	r7, r7, #21
 8001512:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001514:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001518:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800151a:	f007 0702 	and.w	r7, r7, #2
 800151e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001520:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001524:	f007 070f 	and.w	r7, r7, #15
 8001528:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800152a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800152e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001532:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001536:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001538:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800153a:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800153c:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8001540:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001542:	6802      	ldr	r2, [r0, #0]
 8001544:	4422      	add	r2, r4
 8001546:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800154a:	0a12      	lsrs	r2, r2, #8
 800154c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800154e:	6802      	ldr	r2, [r0, #0]
 8001550:	4422      	add	r2, r4
 8001552:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001556:	0c12      	lsrs	r2, r2, #16
 8001558:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	4422      	add	r2, r4
 800155e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001562:	0e12      	lsrs	r2, r2, #24
 8001564:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001566:	6802      	ldr	r2, [r0, #0]
 8001568:	4422      	add	r2, r4
 800156a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800156e:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001570:	6802      	ldr	r2, [r0, #0]
 8001572:	4422      	add	r2, r4
 8001574:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001578:	0a12      	lsrs	r2, r2, #8
 800157a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	4422      	add	r2, r4
 8001580:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001584:	0c12      	lsrs	r2, r2, #16
 8001586:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001588:	6802      	ldr	r2, [r0, #0]
 800158a:	4414      	add	r4, r2
 800158c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001590:	0e12      	lsrs	r2, r2, #24
 8001592:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	b951      	cbnz	r1, 80015ae <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80015a0:	2000      	movs	r0, #0
  }
}
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015a4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80015a8:	08ff      	lsrs	r7, r7, #3
 80015aa:	6057      	str	r7, [r2, #4]
 80015ac:	e7b2      	b.n	8001514 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	e7f3      	b.n	80015a0 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015be:	e796      	b.n	80014ee <HAL_CAN_GetRxMessage+0x1c>

080015c0 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c4:	3b01      	subs	r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d805      	bhi.n	80015d6 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ca:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80015cc:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ce:	6953      	ldr	r3, [r2, #20]
 80015d0:	4319      	orrs	r1, r3
 80015d2:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80015d4:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80015de:	2001      	movs	r0, #1
  }
}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80015e2:	4770      	bx	lr

080015e4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80015e4:	4770      	bx	lr

080015e6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80015e6:	4770      	bx	lr

080015e8 <HAL_CAN_TxMailbox0AbortCallback>:
 80015e8:	4770      	bx	lr

080015ea <HAL_CAN_TxMailbox1AbortCallback>:
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_TxMailbox2AbortCallback>:
 80015ec:	4770      	bx	lr

080015ee <HAL_CAN_RxFifo0FullCallback>:
 80015ee:	4770      	bx	lr

080015f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80015f0:	4770      	bx	lr

080015f2 <HAL_CAN_RxFifo1FullCallback>:
 80015f2:	4770      	bx	lr

080015f4 <HAL_CAN_SleepCallback>:
 80015f4:	4770      	bx	lr

080015f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_ErrorCallback>:
 80015f8:	4770      	bx	lr

080015fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015fe:	6803      	ldr	r3, [r0, #0]
{
 8001600:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001602:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001604:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001608:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800160c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800160e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001612:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001616:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800161a:	d022      	beq.n	8001662 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800161c:	f017 0401 	ands.w	r4, r7, #1
 8001620:	d007      	beq.n	8001632 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001622:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001624:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001626:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001628:	f140 80a5 	bpl.w	8001776 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800162c:	f7ff ffd9 	bl	80015e2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001630:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001632:	05fb      	lsls	r3, r7, #23
 8001634:	d509      	bpl.n	800164a <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163a:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800163c:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800163e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001640:	f140 80a7 	bpl.w	8001792 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001644:	4628      	mov	r0, r5
 8001646:	f7ff ffcd 	bl	80015e4 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800164a:	03fb      	lsls	r3, r7, #15
 800164c:	d509      	bpl.n	8001662 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800164e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001652:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001654:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001656:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001658:	f140 80a9 	bpl.w	80017ae <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff ffc2 	bl	80015e6 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001662:	0733      	lsls	r3, r6, #28
 8001664:	d507      	bpl.n	8001676 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001666:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800166a:	bf1f      	itttt	ne
 800166c:	2210      	movne	r2, #16
 800166e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001670:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001674:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001676:	0777      	lsls	r7, r6, #29
 8001678:	d508      	bpl.n	800168c <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800167a:	f01b 0f08 	tst.w	fp, #8
 800167e:	d005      	beq.n	800168c <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001680:	2208      	movs	r2, #8
 8001682:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001684:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001686:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001688:	f7ff ffb1 	bl	80015ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800168c:	07b0      	lsls	r0, r6, #30
 800168e:	d506      	bpl.n	800169e <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0799      	lsls	r1, r3, #30
 8001696:	d002      	beq.n	800169e <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001698:	4628      	mov	r0, r5
 800169a:	f7ff fa4b 	bl	8000b34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800169e:	0672      	lsls	r2, r6, #25
 80016a0:	d507      	bpl.n	80016b2 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016a2:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016a6:	bf1f      	itttt	ne
 80016a8:	2210      	movne	r2, #16
 80016aa:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ac:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016b0:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016b2:	06b3      	lsls	r3, r6, #26
 80016b4:	d508      	bpl.n	80016c8 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016b6:	f01a 0f08 	tst.w	sl, #8
 80016ba:	d005      	beq.n	80016c8 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016bc:	2208      	movs	r2, #8
 80016be:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016c0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016c2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016c4:	f7ff ff95 	bl	80015f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016c8:	06f7      	lsls	r7, r6, #27
 80016ca:	d506      	bpl.n	80016da <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	0798      	lsls	r0, r3, #30
 80016d2:	d002      	beq.n	80016da <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff ff8b 	bl	80015f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016da:	03b1      	lsls	r1, r6, #14
 80016dc:	d508      	bpl.n	80016f0 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016de:	f019 0f10 	tst.w	r9, #16
 80016e2:	d005      	beq.n	80016f0 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016e4:	2210      	movs	r2, #16
 80016e6:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016e8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ea:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80016ec:	f7ff ff82 	bl	80015f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016f0:	03f2      	lsls	r2, r6, #15
 80016f2:	d508      	bpl.n	8001706 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016f4:	f019 0f08 	tst.w	r9, #8
 80016f8:	d005      	beq.n	8001706 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016fa:	2208      	movs	r2, #8
 80016fc:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016fe:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001700:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001702:	f7ff ff78 	bl	80015f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001706:	0433      	lsls	r3, r6, #16
 8001708:	d52c      	bpl.n	8001764 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800170a:	f019 0f04 	tst.w	r9, #4
 800170e:	682a      	ldr	r2, [r5, #0]
 8001710:	d026      	beq.n	8001760 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001712:	05f7      	lsls	r7, r6, #23
 8001714:	d504      	bpl.n	8001720 <HAL_CAN_IRQHandler+0x126>
 8001716:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800171a:	bf18      	it	ne
 800171c:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001720:	05b0      	lsls	r0, r6, #22
 8001722:	d504      	bpl.n	800172e <HAL_CAN_IRQHandler+0x134>
 8001724:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001728:	bf18      	it	ne
 800172a:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800172e:	0571      	lsls	r1, r6, #21
 8001730:	d504      	bpl.n	800173c <HAL_CAN_IRQHandler+0x142>
 8001732:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001736:	bf18      	it	ne
 8001738:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800173c:	0533      	lsls	r3, r6, #20
 800173e:	d50f      	bpl.n	8001760 <HAL_CAN_IRQHandler+0x166>
 8001740:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8001744:	d00c      	beq.n	8001760 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8001746:	2b40      	cmp	r3, #64	; 0x40
 8001748:	d04f      	beq.n	80017ea <HAL_CAN_IRQHandler+0x1f0>
 800174a:	d83e      	bhi.n	80017ca <HAL_CAN_IRQHandler+0x1d0>
 800174c:	2b20      	cmp	r3, #32
 800174e:	d046      	beq.n	80017de <HAL_CAN_IRQHandler+0x1e4>
 8001750:	2b30      	cmp	r3, #48	; 0x30
 8001752:	d047      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x1ea>
 8001754:	2b10      	cmp	r3, #16
 8001756:	d03f      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001758:	6993      	ldr	r3, [r2, #24]
 800175a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175e:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001760:	2304      	movs	r3, #4
 8001762:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001764:	b12c      	cbz	r4, 8001772 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001768:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800176a:	431c      	orrs	r4, r3
 800176c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800176e:	f7ff ff43 	bl	80015f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001776:	077a      	lsls	r2, r7, #29
 8001778:	d405      	bmi.n	8001786 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800177a:	f017 0408 	ands.w	r4, r7, #8
 800177e:	d105      	bne.n	800178c <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001780:	f7ff ff32 	bl	80015e8 <HAL_CAN_TxMailbox0AbortCallback>
 8001784:	e755      	b.n	8001632 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001786:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800178a:	e752      	b.n	8001632 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800178c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001790:	e74f      	b.n	8001632 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001792:	0579      	lsls	r1, r7, #21
 8001794:	d502      	bpl.n	800179c <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001796:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800179a:	e756      	b.n	800164a <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800179c:	053a      	lsls	r2, r7, #20
 800179e:	d502      	bpl.n	80017a6 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017a0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80017a4:	e751      	b.n	800164a <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017a6:	4628      	mov	r0, r5
 80017a8:	f7ff ff1f 	bl	80015ea <HAL_CAN_TxMailbox1AbortCallback>
 80017ac:	e74d      	b.n	800164a <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017ae:	0379      	lsls	r1, r7, #13
 80017b0:	d502      	bpl.n	80017b8 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80017b6:	e754      	b.n	8001662 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017b8:	033a      	lsls	r2, r7, #12
 80017ba:	d502      	bpl.n	80017c2 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017bc:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80017c0:	e74f      	b.n	8001662 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017c2:	4628      	mov	r0, r5
 80017c4:	f7ff ff12 	bl	80015ec <HAL_CAN_TxMailbox2AbortCallback>
 80017c8:	e74b      	b.n	8001662 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80017ca:	2b50      	cmp	r3, #80	; 0x50
 80017cc:	d010      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x1f6>
 80017ce:	2b60      	cmp	r3, #96	; 0x60
 80017d0:	d1c2      	bne.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017d2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80017d6:	e7bf      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 80017d8:	f044 0408 	orr.w	r4, r4, #8
            break;
 80017dc:	e7bc      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017de:	f044 0410 	orr.w	r4, r4, #16
            break;
 80017e2:	e7b9      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017e4:	f044 0420 	orr.w	r4, r4, #32
            break;
 80017e8:	e7b6      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80017ea:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80017ee:	e7b3      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 80017f0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80017f4:	e7b0      	b.n	8001758 <HAL_CAN_IRQHandler+0x15e>
	...

080017f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017fa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001806:	0412      	lsls	r2, r2, #16
 8001808:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001814:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b530      	push	{r4, r5, lr}
 8001820:	68dc      	ldr	r4, [r3, #12]
 8001822:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001826:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	2b04      	cmp	r3, #4
 800182e:	bf28      	it	cs
 8001830:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001838:	bf98      	it	ls
 800183a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001840:	bf88      	it	hi
 8001842:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	ea21 0303 	bic.w	r3, r1, r3
 8001848:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184a:	fa05 f404 	lsl.w	r4, r5, r4
 800184e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001852:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	bfac      	ite	ge
 800185a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	4a07      	ldrlt	r2, [pc, #28]	; (800187c <HAL_NVIC_SetPriority+0x60>)
 8001860:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001864:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	bfab      	itete	ge
 8001868:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001876:	bd30      	pop	{r4, r5, pc}
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	e000ed14 	.word	0xe000ed14

08001880 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001880:	2800      	cmp	r0, #0
 8001882:	db08      	blt.n	8001896 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001884:	2301      	movs	r3, #1
 8001886:	0942      	lsrs	r2, r0, #5
 8001888:	f000 001f 	and.w	r0, r0, #31
 800188c:	fa03 f000 	lsl.w	r0, r3, r0
 8001890:	4b01      	ldr	r3, [pc, #4]	; (8001898 <HAL_NVIC_EnableIRQ+0x18>)
 8001892:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100

0800189c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	3801      	subs	r0, #1
 800189e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018a2:	d20a      	bcs.n	80018ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018ca:	b320      	cbz	r0, 8001916 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018cc:	2214      	movs	r2, #20
 80018ce:	6801      	ldr	r1, [r0, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_DMA_Init+0x54>)
 80018d2:	440b      	add	r3, r1
 80018d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018de:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80018e0:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018e2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80018e6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ea:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	4323      	orrs	r3, r4
 80018f0:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	6944      	ldr	r4, [r0, #20]
 80018fa:	4323      	orrs	r3, r4
 80018fc:	6984      	ldr	r4, [r0, #24]
 80018fe:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001900:	69c4      	ldr	r4, [r0, #28]
 8001902:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001904:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001906:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001908:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190c:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 800190e:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001912:	4618      	mov	r0, r3
}
 8001914:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
 8001918:	e7fc      	b.n	8001914 <HAL_DMA_Init+0x4c>
 800191a:	bf00      	nop
 800191c:	bffdfff8 	.word	0xbffdfff8
 8001920:	40020000 	.word	0x40020000

08001924 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001926:	f890 4020 	ldrb.w	r4, [r0, #32]
 800192a:	2c01      	cmp	r4, #1
 800192c:	d034      	beq.n	8001998 <HAL_DMA_Start_IT+0x74>
 800192e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001930:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001934:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001938:	42a5      	cmp	r5, r4
 800193a:	f04f 0600 	mov.w	r6, #0
 800193e:	f04f 0402 	mov.w	r4, #2
 8001942:	d127      	bne.n	8001994 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001948:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800194c:	6826      	ldr	r6, [r4, #0]
 800194e:	f026 0601 	bic.w	r6, r6, #1
 8001952:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001954:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001958:	40bd      	lsls	r5, r7
 800195a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800195c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800195e:	6843      	ldr	r3, [r0, #4]
 8001960:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001964:	bf0b      	itete	eq
 8001966:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001968:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800196a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800196c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800196e:	b14b      	cbz	r3, 8001984 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001978:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6023      	str	r3, [r4, #0]
}
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	f043 030a 	orr.w	r3, r3, #10
 8001992:	e7f0      	b.n	8001976 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001994:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001998:	2002      	movs	r0, #2
 800199a:	e7f2      	b.n	8001982 <HAL_DMA_Start_IT+0x5e>

0800199c <HAL_DMA_IRQHandler>:
{
 800199c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800199e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019a6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019a8:	4095      	lsls	r5, r2
 80019aa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80019ac:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019ae:	d032      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
 80019b0:	074d      	lsls	r5, r1, #29
 80019b2:	d530      	bpl.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b8:	bf5e      	ittt	pl
 80019ba:	681a      	ldrpl	r2, [r3, #0]
 80019bc:	f022 0204 	bicpl.w	r2, r2, #4
 80019c0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019c2:	4a3d      	ldr	r2, [pc, #244]	; (8001ab8 <HAL_DMA_IRQHandler+0x11c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_DMA_IRQHandler+0x60>
 80019c8:	3214      	adds	r2, #20
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d018      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x64>
 80019ce:	3214      	adds	r2, #20
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d017      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x68>
 80019d4:	3214      	adds	r2, #20
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d017      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x6e>
 80019da:	3214      	adds	r2, #20
 80019dc:	4293      	cmp	r3, r2
 80019de:	d017      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x74>
 80019e0:	3214      	adds	r2, #20
 80019e2:	4293      	cmp	r3, r2
 80019e4:	bf0c      	ite	eq
 80019e6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80019ea:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80019ee:	4a33      	ldr	r2, [pc, #204]	; (8001abc <HAL_DMA_IRQHandler+0x120>)
 80019f0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80019f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d05c      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x116>
}
 80019f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80019fa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019fc:	2304      	movs	r3, #4
 80019fe:	e7f6      	b.n	80019ee <HAL_DMA_IRQHandler+0x52>
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	e7f4      	b.n	80019ee <HAL_DMA_IRQHandler+0x52>
 8001a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a08:	e7f1      	b.n	80019ee <HAL_DMA_IRQHandler+0x52>
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	e7ee      	b.n	80019ee <HAL_DMA_IRQHandler+0x52>
 8001a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a14:	e7eb      	b.n	80019ee <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a16:	2502      	movs	r5, #2
 8001a18:	4095      	lsls	r5, r2
 8001a1a:	4225      	tst	r5, r4
 8001a1c:	d035      	beq.n	8001a8a <HAL_DMA_IRQHandler+0xee>
 8001a1e:	078d      	lsls	r5, r1, #30
 8001a20:	d533      	bpl.n	8001a8a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	0694      	lsls	r4, r2, #26
 8001a26:	d406      	bmi.n	8001a36 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f022 020a 	bic.w	r2, r2, #10
 8001a2e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a30:	2201      	movs	r2, #1
 8001a32:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_DMA_IRQHandler+0x11c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d019      	beq.n	8001a70 <HAL_DMA_IRQHandler+0xd4>
 8001a3c:	3214      	adds	r2, #20
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d018      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
 8001a42:	3214      	adds	r2, #20
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d017      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xdc>
 8001a48:	3214      	adds	r2, #20
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d017      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xe2>
 8001a4e:	3214      	adds	r2, #20
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d017      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xe8>
 8001a54:	3214      	adds	r2, #20
 8001a56:	4293      	cmp	r3, r2
 8001a58:	bf0c      	ite	eq
 8001a5a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001a5e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <HAL_DMA_IRQHandler+0x120>)
 8001a64:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001a66:	2300      	movs	r3, #0
 8001a68:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a6e:	e7c1      	b.n	80019f4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a70:	2302      	movs	r3, #2
 8001a72:	e7f6      	b.n	8001a62 <HAL_DMA_IRQHandler+0xc6>
 8001a74:	2320      	movs	r3, #32
 8001a76:	e7f4      	b.n	8001a62 <HAL_DMA_IRQHandler+0xc6>
 8001a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7c:	e7f1      	b.n	8001a62 <HAL_DMA_IRQHandler+0xc6>
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	e7ee      	b.n	8001a62 <HAL_DMA_IRQHandler+0xc6>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	e7eb      	b.n	8001a62 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8a:	2508      	movs	r5, #8
 8001a8c:	4095      	lsls	r5, r2
 8001a8e:	4225      	tst	r5, r4
 8001a90:	d00f      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x116>
 8001a92:	0709      	lsls	r1, r1, #28
 8001a94:	d50d      	bpl.n	8001ab2 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	f021 010e 	bic.w	r1, r1, #14
 8001a9c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	fa03 f202 	lsl.w	r2, r3, r2
 8001aa4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aac:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001aae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ab0:	e7a0      	b.n	80019f4 <HAL_DMA_IRQHandler+0x58>
}
 8001ab2:	bc70      	pop	{r4, r5, r6}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40020008 	.word	0x40020008
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001ac6:	4616      	mov	r6, r2
 8001ac8:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aca:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8001c6c <HAL_GPIO_Init+0x1ac>
 8001ace:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8001c70 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	680d      	ldr	r5, [r1, #0]
 8001ad4:	fa35 f406 	lsrs.w	r4, r5, r6
 8001ad8:	d102      	bne.n	8001ae0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001ada:	b003      	add	sp, #12
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001ae0:	f04f 0801 	mov.w	r8, #1
 8001ae4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae8:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001aec:	ea38 0505 	bics.w	r5, r8, r5
 8001af0:	d17c      	bne.n	8001bec <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8001af2:	684d      	ldr	r5, [r1, #4]
 8001af4:	2d03      	cmp	r5, #3
 8001af6:	d807      	bhi.n	8001b08 <HAL_GPIO_Init+0x48>
 8001af8:	3d01      	subs	r5, #1
 8001afa:	2d02      	cmp	r5, #2
 8001afc:	f200 8088 	bhi.w	8001c10 <HAL_GPIO_Init+0x150>
 8001b00:	e8df f005 	tbb	[pc, r5]
 8001b04:	9b96      	.short	0x9b96
 8001b06:	a1          	.byte	0xa1
 8001b07:	00          	.byte	0x00
 8001b08:	2d12      	cmp	r5, #18
 8001b0a:	f000 8099 	beq.w	8001c40 <HAL_GPIO_Init+0x180>
 8001b0e:	d86f      	bhi.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001b10:	2d11      	cmp	r5, #17
 8001b12:	f000 808f 	beq.w	8001c34 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b16:	2cff      	cmp	r4, #255	; 0xff
 8001b18:	bf98      	it	ls
 8001b1a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b1c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b20:	bf88      	it	hi
 8001b22:	f100 0a04 	addhi.w	sl, r0, #4
 8001b26:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b2a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b2e:	bf88      	it	hi
 8001b30:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b32:	fa09 fb05 	lsl.w	fp, r9, r5
 8001b36:	ea28 080b 	bic.w	r8, r8, fp
 8001b3a:	fa02 f505 	lsl.w	r5, r2, r5
 8001b3e:	ea48 0505 	orr.w	r5, r8, r5
 8001b42:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b46:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001b4a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001b4e:	d04d      	beq.n	8001bec <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b50:	4f43      	ldr	r7, [pc, #268]	; (8001c60 <HAL_GPIO_Init+0x1a0>)
 8001b52:	f026 0803 	bic.w	r8, r6, #3
 8001b56:	69bd      	ldr	r5, [r7, #24]
 8001b58:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001b5c:	f045 0501 	orr.w	r5, r5, #1
 8001b60:	61bd      	str	r5, [r7, #24]
 8001b62:	69bd      	ldr	r5, [r7, #24]
 8001b64:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001b68:	f005 0501 	and.w	r5, r5, #1
 8001b6c:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b6e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b72:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001b78:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b7c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b80:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b84:	4d37      	ldr	r5, [pc, #220]	; (8001c64 <HAL_GPIO_Init+0x1a4>)
 8001b86:	42a8      	cmp	r0, r5
 8001b88:	d061      	beq.n	8001c4e <HAL_GPIO_Init+0x18e>
 8001b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b8e:	42a8      	cmp	r0, r5
 8001b90:	d05f      	beq.n	8001c52 <HAL_GPIO_Init+0x192>
 8001b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b96:	42a8      	cmp	r0, r5
 8001b98:	d05d      	beq.n	8001c56 <HAL_GPIO_Init+0x196>
 8001b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9e:	42a8      	cmp	r0, r5
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2503      	moveq	r5, #3
 8001ba4:	2504      	movne	r5, #4
 8001ba6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001baa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001bae:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb8:	bf14      	ite	ne
 8001bba:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bbc:	43a5      	biceq	r5, r4
 8001bbe:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc6:	bf14      	ite	ne
 8001bc8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bca:	43a5      	biceq	r5, r4
 8001bcc:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bce:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	bf14      	ite	ne
 8001bd6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd8:	43a5      	biceq	r5, r4
 8001bda:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bdc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bde:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be2:	bf14      	ite	ne
 8001be4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be6:	ea25 0404 	biceq.w	r4, r5, r4
 8001bea:	60dc      	str	r4, [r3, #12]
	position++;
 8001bec:	3601      	adds	r6, #1
 8001bee:	e770      	b.n	8001ad2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001bf0:	4f1d      	ldr	r7, [pc, #116]	; (8001c68 <HAL_GPIO_Init+0x1a8>)
 8001bf2:	42bd      	cmp	r5, r7
 8001bf4:	d00c      	beq.n	8001c10 <HAL_GPIO_Init+0x150>
 8001bf6:	d817      	bhi.n	8001c28 <HAL_GPIO_Init+0x168>
 8001bf8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001c74 <HAL_GPIO_Init+0x1b4>
 8001bfc:	454d      	cmp	r5, r9
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x150>
 8001c00:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001c04:	454d      	cmp	r5, r9
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x150>
 8001c08:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001c0c:	454d      	cmp	r5, r9
 8001c0e:	d182      	bne.n	8001b16 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c10:	688a      	ldr	r2, [r1, #8]
 8001c12:	b1d2      	cbz	r2, 8001c4a <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c14:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001c16:	bf08      	it	eq
 8001c18:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001c20:	bf18      	it	ne
 8001c22:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001c26:	e776      	b.n	8001b16 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001c28:	4565      	cmp	r5, ip
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_GPIO_Init+0x150>
 8001c2c:	4575      	cmp	r5, lr
 8001c2e:	e7ee      	b.n	8001c0e <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c30:	68ca      	ldr	r2, [r1, #12]
          break;
 8001c32:	e770      	b.n	8001b16 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c34:	68ca      	ldr	r2, [r1, #12]
 8001c36:	3204      	adds	r2, #4
          break;
 8001c38:	e76d      	b.n	8001b16 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3a:	68ca      	ldr	r2, [r1, #12]
 8001c3c:	3208      	adds	r2, #8
          break;
 8001c3e:	e76a      	b.n	8001b16 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c40:	68ca      	ldr	r2, [r1, #12]
 8001c42:	320c      	adds	r2, #12
          break;
 8001c44:	e767      	b.n	8001b16 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001c46:	2200      	movs	r2, #0
 8001c48:	e765      	b.n	8001b16 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	e763      	b.n	8001b16 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4e:	2500      	movs	r5, #0
 8001c50:	e7a9      	b.n	8001ba6 <HAL_GPIO_Init+0xe6>
 8001c52:	2501      	movs	r5, #1
 8001c54:	e7a7      	b.n	8001ba6 <HAL_GPIO_Init+0xe6>
 8001c56:	2502      	movs	r5, #2
 8001c58:	e7a5      	b.n	8001ba6 <HAL_GPIO_Init+0xe6>
 8001c5a:	bf00      	nop
 8001c5c:	40010400 	.word	0x40010400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10310000 	.word	0x10310000
 8001c70:	10320000 	.word	0x10320000
 8001c74:	10120000 	.word	0x10120000

08001c78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c78:	6883      	ldr	r3, [r0, #8]
 8001c7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c7c:	bf14      	ite	ne
 8001c7e:	2001      	movne	r0, #1
 8001c80:	2000      	moveq	r0, #0
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c84:	b10a      	cbz	r2, 8001c8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c86:	6101      	str	r1, [r0, #16]
  }
}
 8001c88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	e7fb      	b.n	8001c86 <HAL_GPIO_WritePin+0x2>

08001c8e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c8e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c90:	ea01 0203 	and.w	r2, r1, r3
 8001c94:	ea21 0103 	bic.w	r1, r1, r3
 8001c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001c9c:	6101      	str	r1, [r0, #16]
}
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001ca2:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ca4:	6951      	ldr	r1, [r2, #20]
 8001ca6:	4201      	tst	r1, r0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001caa:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	f7fe fc60 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb0:	bd08      	pop	{r3, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	b338      	cbz	r0, 8001d10 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	07db      	lsls	r3, r3, #31
 8001cc4:	d410      	bmi.n	8001ce8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	079f      	lsls	r7, r3, #30
 8001cca:	d45e      	bmi.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	0719      	lsls	r1, r3, #28
 8001cd0:	f100 8095 	bmi.w	8001dfe <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	075a      	lsls	r2, r3, #29
 8001cd8:	f100 80bf 	bmi.w	8001e5a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cdc:	69e8      	ldr	r0, [r5, #28]
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	f040 812c 	bne.w	8001f3c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e029      	b.n	8001d3c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4c8f      	ldr	r4, [pc, #572]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d007      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d10a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
 8001cfe:	6863      	ldr	r3, [r4, #4]
 8001d00:	03de      	lsls	r6, r3, #15
 8001d02:	d507      	bpl.n	8001d14 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	039c      	lsls	r4, r3, #14
 8001d08:	d5dd      	bpl.n	8001cc6 <HAL_RCC_OscConfig+0xe>
 8001d0a:	686b      	ldr	r3, [r5, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1da      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	e013      	b.n	8001d3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	686b      	ldr	r3, [r5, #4]
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x8a>
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d24:	f7fe ffb8 	bl	8000c98 <HAL_GetTick>
 8001d28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	0398      	lsls	r0, r3, #14
 8001d2e:	d4ca      	bmi.n	8001cc6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7fe ffb2 	bl	8000c98 <HAL_GetTick>
 8001d34:	1b80      	subs	r0, r0, r6
 8001d36:	2864      	cmp	r0, #100	; 0x64
 8001d38:	d9f7      	bls.n	8001d2a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001d3a:	2003      	movs	r0, #3
}
 8001d3c:	b002      	add	sp, #8
 8001d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	b99b      	cbnz	r3, 8001d6c <HAL_RCC_OscConfig+0xb4>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d54:	f7fe ffa0 	bl	8000c98 <HAL_GetTick>
 8001d58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	0399      	lsls	r1, r3, #14
 8001d5e:	d5b2      	bpl.n	8001cc6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7fe ff9a 	bl	8000c98 <HAL_GetTick>
 8001d64:	1b80      	subs	r0, r0, r6
 8001d66:	2864      	cmp	r0, #100	; 0x64
 8001d68:	d9f7      	bls.n	8001d5a <HAL_RCC_OscConfig+0xa2>
 8001d6a:	e7e6      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	d103      	bne.n	8001d7c <HAL_RCC_OscConfig+0xc4>
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	e7cf      	b.n	8001d1c <HAL_RCC_OscConfig+0x64>
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	e7cb      	b.n	8001d22 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4c67      	ldr	r4, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	f013 0f0c 	tst.w	r3, #12
 8001d92:	d007      	beq.n	8001da4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d94:	6863      	ldr	r3, [r4, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d110      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	03da      	lsls	r2, r3, #15
 8001da2:	d40d      	bmi.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	079b      	lsls	r3, r3, #30
 8001da8:	d502      	bpl.n	8001db0 <HAL_RCC_OscConfig+0xf8>
 8001daa:	692b      	ldr	r3, [r5, #16]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d1af      	bne.n	8001d10 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	696a      	ldr	r2, [r5, #20]
 8001db4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001db8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	e785      	b.n	8001ccc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	692a      	ldr	r2, [r5, #16]
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001dc4:	b16a      	cbz	r2, 8001de2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff65 	bl	8000c98 <HAL_GetTick>
 8001dce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	079f      	lsls	r7, r3, #30
 8001dd4:	d4ec      	bmi.n	8001db0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7fe ff5f 	bl	8000c98 <HAL_GetTick>
 8001dda:	1b80      	subs	r0, r0, r6
 8001ddc:	2802      	cmp	r0, #2
 8001dde:	d9f7      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x118>
 8001de0:	e7ab      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001de2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001de4:	f7fe ff58 	bl	8000c98 <HAL_GetTick>
 8001de8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	0798      	lsls	r0, r3, #30
 8001dee:	f57f af6d 	bpl.w	8001ccc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7fe ff51 	bl	8000c98 <HAL_GetTick>
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	2802      	cmp	r0, #2
 8001dfa:	d9f6      	bls.n	8001dea <HAL_RCC_OscConfig+0x132>
 8001dfc:	e79d      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	69aa      	ldr	r2, [r5, #24]
 8001e00:	4e49      	ldr	r6, [pc, #292]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e02:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x278>)
 8001e04:	b1da      	cbz	r2, 8001e3e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ff45 	bl	8000c98 <HAL_GetTick>
 8001e0e:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001e12:	079b      	lsls	r3, r3, #30
 8001e14:	d50d      	bpl.n	8001e32 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e16:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e22:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e24:	bf00      	nop
  }
  while (Delay --);
 8001e26:	9b01      	ldr	r3, [sp, #4]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x16c>
 8001e30:	e750      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e32:	f7fe ff31 	bl	8000c98 <HAL_GetTick>
 8001e36:	1b00      	subs	r0, r0, r4
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9e9      	bls.n	8001e10 <HAL_RCC_OscConfig+0x158>
 8001e3c:	e77d      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e40:	f7fe ff2a 	bl	8000c98 <HAL_GetTick>
 8001e44:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001e48:	079f      	lsls	r7, r3, #30
 8001e4a:	f57f af43 	bpl.w	8001cd4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7fe ff23 	bl	8000c98 <HAL_GetTick>
 8001e52:	1b00      	subs	r0, r0, r4
 8001e54:	2802      	cmp	r0, #2
 8001e56:	d9f6      	bls.n	8001e46 <HAL_RCC_OscConfig+0x18e>
 8001e58:	e76f      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4c33      	ldr	r4, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	69e3      	ldr	r3, [r4, #28]
 8001e5e:	00d8      	lsls	r0, r3, #3
 8001e60:	d424      	bmi.n	8001eac <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8001e62:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	69e3      	ldr	r3, [r4, #28]
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	61e3      	str	r3, [r4, #28]
 8001e6c:	69e3      	ldr	r3, [r4, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4e30      	ldr	r6, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x280>)
 8001e78:	6833      	ldr	r3, [r6, #0]
 8001e7a:	05d9      	lsls	r1, r3, #23
 8001e7c:	d518      	bpl.n	8001eb0 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7e:	68eb      	ldr	r3, [r5, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d126      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x21a>
 8001e84:	6a23      	ldr	r3, [r4, #32]
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e8c:	f7fe ff04 	bl	8000c98 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	6a23      	ldr	r3, [r4, #32]
 8001e98:	079b      	lsls	r3, r3, #30
 8001e9a:	d53f      	bpl.n	8001f1c <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8001e9c:	2f00      	cmp	r7, #0
 8001e9e:	f43f af1d 	beq.w	8001cdc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	69e3      	ldr	r3, [r4, #28]
 8001ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61e3      	str	r3, [r4, #28]
 8001eaa:	e717      	b.n	8001cdc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001eac:	2700      	movs	r7, #0
 8001eae:	e7e2      	b.n	8001e76 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb0:	6833      	ldr	r3, [r6, #0]
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001eb8:	f7fe feee 	bl	8000c98 <HAL_GetTick>
 8001ebc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	6833      	ldr	r3, [r6, #0]
 8001ec0:	05da      	lsls	r2, r3, #23
 8001ec2:	d4dc      	bmi.n	8001e7e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fee8 	bl	8000c98 <HAL_GetTick>
 8001ec8:	eba0 0008 	sub.w	r0, r0, r8
 8001ecc:	2864      	cmp	r0, #100	; 0x64
 8001ece:	d9f6      	bls.n	8001ebe <HAL_RCC_OscConfig+0x206>
 8001ed0:	e733      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed2:	b9ab      	cbnz	r3, 8001f00 <HAL_RCC_OscConfig+0x248>
 8001ed4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6223      	str	r3, [r4, #32]
 8001ee0:	6a23      	ldr	r3, [r4, #32]
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fed6 	bl	8000c98 <HAL_GetTick>
 8001eec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	6a23      	ldr	r3, [r4, #32]
 8001ef0:	0798      	lsls	r0, r3, #30
 8001ef2:	d5d3      	bpl.n	8001e9c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fed0 	bl	8000c98 <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	4540      	cmp	r0, r8
 8001efc:	d9f7      	bls.n	8001eee <HAL_RCC_OscConfig+0x236>
 8001efe:	e71c      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	6a23      	ldr	r3, [r4, #32]
 8001f04:	d103      	bne.n	8001f0e <HAL_RCC_OscConfig+0x256>
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6223      	str	r3, [r4, #32]
 8001f0c:	e7ba      	b.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6223      	str	r3, [r4, #32]
 8001f14:	6a23      	ldr	r3, [r4, #32]
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	e7b6      	b.n	8001e8a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe febc 	bl	8000c98 <HAL_GetTick>
 8001f20:	1b80      	subs	r0, r0, r6
 8001f22:	4540      	cmp	r0, r8
 8001f24:	d9b7      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1de>
 8001f26:	e708      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	42420000 	.word	0x42420000
 8001f30:	42420480 	.word	0x42420480
 8001f34:	20000008 	.word	0x20000008
 8001f38:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x330>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	461c      	mov	r4, r3
 8001f42:	f002 020c 	and.w	r2, r2, #12
 8001f46:	2a08      	cmp	r2, #8
 8001f48:	d03d      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4e27      	ldr	r6, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x334>)
 8001f4e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001f50:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f52:	d12b      	bne.n	8001fac <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001f54:	f7fe fea0 	bl	8000c98 <HAL_GetTick>
 8001f58:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	0199      	lsls	r1, r3, #6
 8001f5e:	d41f      	bmi.n	8001fa0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f60:	6a2b      	ldr	r3, [r5, #32]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f68:	6862      	ldr	r2, [r4, #4]
 8001f6a:	68a9      	ldr	r1, [r5, #8]
 8001f6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f70:	430a      	orrs	r2, r1
 8001f72:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f76:	6862      	ldr	r2, [r4, #4]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f82:	2301      	movs	r3, #1
 8001f84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f86:	f7fe fe87 	bl	8000c98 <HAL_GetTick>
 8001f8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	019a      	lsls	r2, r3, #6
 8001f90:	f53f aea8 	bmi.w	8001ce4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fe80 	bl	8000c98 <HAL_GetTick>
 8001f98:	1b40      	subs	r0, r0, r5
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d9f6      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2d4>
 8001f9e:	e6cc      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fe7a 	bl	8000c98 <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9d7      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2a2>
 8001faa:	e6c6      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001fac:	f7fe fe74 	bl	8000c98 <HAL_GetTick>
 8001fb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	f57f ae95 	bpl.w	8001ce4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fba:	f7fe fe6d 	bl	8000c98 <HAL_GetTick>
 8001fbe:	1b40      	subs	r0, r0, r5
 8001fc0:	2802      	cmp	r0, #2
 8001fc2:	d9f6      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x2fa>
 8001fc4:	e6b9      	b.n	8001d3a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	2801      	cmp	r0, #1
 8001fc8:	f43f aeb8 	beq.w	8001d3c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001fcc:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	6a2a      	ldr	r2, [r5, #32]
 8001fd0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001fd4:	4291      	cmp	r1, r2
 8001fd6:	f47f ae9b 	bne.w	8001d10 <HAL_RCC_OscConfig+0x58>
 8001fda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	f43f ae7f 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x2c>
 8001fe6:	e693      	b.n	8001d10 <HAL_RCC_OscConfig+0x58>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420060 	.word	0x42420060

08001ff0 <HAL_RCC_GetSysClockFreq>:
{
 8001ff0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ff4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ff6:	ac02      	add	r4, sp, #8
 8001ff8:	f103 0510 	add.w	r5, r3, #16
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	3308      	adds	r3, #8
 8002004:	c203      	stmia	r2!, {r0, r1}
 8002006:	42ab      	cmp	r3, r5
 8002008:	4614      	mov	r4, r2
 800200a:	d1f7      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800200c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002010:	4911      	ldr	r1, [pc, #68]	; (8002058 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002012:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002016:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	f003 020c 	and.w	r2, r3, #12
 800201c:	2a08      	cmp	r2, #8
 800201e:	d117      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002020:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002024:	a806      	add	r0, sp, #24
 8002026:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202e:	d50c      	bpl.n	800204a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002030:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002034:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002038:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203a:	aa06      	add	r2, sp, #24
 800203c:	4413      	add	r3, r2
 800203e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002042:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002046:	b007      	add	sp, #28
 8002048:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_RCC_GetSysClockFreq+0x70>)
 800204c:	4350      	muls	r0, r2
 800204e:	e7fa      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002052:	e7f8      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x56>
 8002054:	08002a20 	.word	0x08002a20
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	003d0900 	.word	0x003d0900

08002064 <HAL_RCC_ClockConfig>:
{
 8002064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002068:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800206a:	4604      	mov	r4, r0
 800206c:	b910      	cbnz	r0, 8002074 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
}
 8002070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4a44      	ldr	r2, [pc, #272]	; (8002188 <HAL_RCC_ClockConfig+0x124>)
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	428b      	cmp	r3, r1
 800207e:	d328      	bcc.n	80020d2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	6821      	ldr	r1, [r4, #0]
 8002082:	078e      	lsls	r6, r1, #30
 8002084:	d430      	bmi.n	80020e8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	07ca      	lsls	r2, r1, #31
 8002088:	d443      	bmi.n	8002112 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_RCC_ClockConfig+0x124>)
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	42ab      	cmp	r3, r5
 8002094:	d865      	bhi.n	8002162 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	6822      	ldr	r2, [r4, #0]
 8002098:	4d3c      	ldr	r5, [pc, #240]	; (800218c <HAL_RCC_ClockConfig+0x128>)
 800209a:	f012 0f04 	tst.w	r2, #4
 800209e:	d16c      	bne.n	800217a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	0713      	lsls	r3, r2, #28
 80020a2:	d506      	bpl.n	80020b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a4:	686b      	ldr	r3, [r5, #4]
 80020a6:	6922      	ldr	r2, [r4, #16]
 80020a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f7ff ff9d 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 80020b6:	686b      	ldr	r3, [r5, #4]
 80020b8:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_RCC_ClockConfig+0x12c>)
 80020ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	40d8      	lsrs	r0, r3
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_RCC_ClockConfig+0x130>)
 80020c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x134>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f7fe fda3 	bl	8000c14 <HAL_InitTick>
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
 80020d0:	e7ce      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f023 0307 	bic.w	r3, r3, #7
 80020d8:	430b      	orrs	r3, r1
 80020da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	6813      	ldr	r3, [r2, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d1c3      	bne.n	800206e <HAL_RCC_ClockConfig+0xa>
 80020e6:	e7cb      	b.n	8002080 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCC_ClockConfig+0x128>)
 80020ea:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ee:	bf1e      	ittt	ne
 80020f0:	685a      	ldrne	r2, [r3, #4]
 80020f2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80020f6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fa:	bf42      	ittt	mi
 80020fc:	685a      	ldrmi	r2, [r3, #4]
 80020fe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002102:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68a0      	ldr	r0, [r4, #8]
 8002108:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800210c:	4302      	orrs	r2, r0
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	e7b9      	b.n	8002086 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	6862      	ldr	r2, [r4, #4]
 8002114:	4e1d      	ldr	r6, [pc, #116]	; (800218c <HAL_RCC_ClockConfig+0x128>)
 8002116:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002118:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	d11a      	bne.n	8002152 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	d0a5      	beq.n	800206e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002128:	f023 0303 	bic.w	r3, r3, #3
 800212c:	4313      	orrs	r3, r2
 800212e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002130:	f7fe fdb2 	bl	8000c98 <HAL_GetTick>
 8002134:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	6873      	ldr	r3, [r6, #4]
 8002138:	6862      	ldr	r2, [r4, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002142:	d0a2      	beq.n	800208a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe fda8 	bl	8000c98 <HAL_GetTick>
 8002148:	1bc0      	subs	r0, r0, r7
 800214a:	4540      	cmp	r0, r8
 800214c:	d9f3      	bls.n	8002136 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e78e      	b.n	8002070 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	2a02      	cmp	r2, #2
 8002154:	d102      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800215a:	e7e1      	b.n	8002120 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	e7de      	b.n	8002120 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f023 0307 	bic.w	r3, r3, #7
 8002168:	432b      	orrs	r3, r5
 800216a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	42ab      	cmp	r3, r5
 8002174:	f47f af7b 	bne.w	800206e <HAL_RCC_ClockConfig+0xa>
 8002178:	e78d      	b.n	8002096 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217a:	686b      	ldr	r3, [r5, #4]
 800217c:	68e1      	ldr	r1, [r4, #12]
 800217e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002182:	430b      	orrs	r3, r1
 8002184:	606b      	str	r3, [r5, #4]
 8002186:	e78b      	b.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
 8002190:	08002a10 	.word	0x08002a10
 8002194:	20000008 	.word	0x20000008
 8002198:	20000010 	.word	0x20000010

0800219c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800219c:	6803      	ldr	r3, [r0, #0]
{
 800219e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021a2:	07d9      	lsls	r1, r3, #31
{
 80021a4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021a6:	d520      	bpl.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a8:	4c35      	ldr	r4, [pc, #212]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80021aa:	69e3      	ldr	r3, [r4, #28]
 80021ac:	00da      	lsls	r2, r3, #3
 80021ae:	d432      	bmi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80021b0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	69e3      	ldr	r3, [r4, #28]
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61e3      	str	r3, [r4, #28]
 80021ba:	69e3      	ldr	r3, [r4, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	4e2f      	ldr	r6, [pc, #188]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021c6:	6833      	ldr	r3, [r6, #0]
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	d526      	bpl.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021cc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ce:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021d2:	d136      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	6a23      	ldr	r3, [r4, #32]
 80021d6:	686a      	ldr	r2, [r5, #4]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	4313      	orrs	r3, r2
 80021de:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e0:	b11f      	cbz	r7, 80021ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	69e3      	ldr	r3, [r4, #28]
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ea:	6828      	ldr	r0, [r5, #0]
 80021ec:	0783      	lsls	r3, r0, #30
 80021ee:	d506      	bpl.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021f0:	4923      	ldr	r1, [pc, #140]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80021f2:	68ab      	ldr	r3, [r5, #8]
 80021f4:	684a      	ldr	r2, [r1, #4]
 80021f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80021fa:	431a      	orrs	r2, r3
 80021fc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021fe:	f010 0010 	ands.w	r0, r0, #16
 8002202:	d01b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002204:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002206:	68e9      	ldr	r1, [r5, #12]
 8002208:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800220a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002210:	430b      	orrs	r3, r1
 8002212:	6053      	str	r3, [r2, #4]
 8002214:	e012      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8002216:	2700      	movs	r7, #0
 8002218:	e7d4      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	6833      	ldr	r3, [r6, #0]
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002222:	f7fe fd39 	bl	8000c98 <HAL_GetTick>
 8002226:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	6833      	ldr	r3, [r6, #0]
 800222a:	05d8      	lsls	r0, r3, #23
 800222c:	d4ce      	bmi.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fd33 	bl	8000c98 <HAL_GetTick>
 8002232:	eba0 0008 	sub.w	r0, r0, r8
 8002236:	2864      	cmp	r0, #100	; 0x64
 8002238:	d9f6      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
}
 800223c:	b002      	add	sp, #8
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002242:	686a      	ldr	r2, [r5, #4]
 8002244:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002248:	429a      	cmp	r2, r3
 800224a:	d0c3      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800224c:	2001      	movs	r0, #1
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002250:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002252:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002254:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800225a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800225c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800225e:	07d9      	lsls	r1, r3, #31
 8002260:	d5b8      	bpl.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002262:	f7fe fd19 	bl	8000c98 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800226a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	6a23      	ldr	r3, [r4, #32]
 800226e:	079a      	lsls	r2, r3, #30
 8002270:	d4b0      	bmi.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fd11 	bl	8000c98 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	4540      	cmp	r0, r8
 800227a:	d9f7      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800227c:	e7dd      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420440 	.word	0x42420440

0800228c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228c:	6a03      	ldr	r3, [r0, #32]
{
 800228e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002296:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800229a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800229c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80022a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80022a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80022aa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ac:	4d0a      	ldr	r5, [pc, #40]	; (80022d8 <TIM_OC1_SetConfig+0x4c>)
 80022ae:	42a8      	cmp	r0, r5
 80022b0:	d10b      	bne.n	80022ca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80022b4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80022b8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022be:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80022c2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80022c4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80022c8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022ce:	684a      	ldr	r2, [r1, #4]
 80022d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d2:	6203      	str	r3, [r0, #32]
}
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
 80022d6:	bf00      	nop
 80022d8:	40012c00 	.word	0x40012c00

080022dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022dc:	6a03      	ldr	r3, [r0, #32]
{
 80022de:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80022f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80022f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022fe:	4d0b      	ldr	r5, [pc, #44]	; (800232c <TIM_OC3_SetConfig+0x50>)
 8002300:	42a8      	cmp	r0, r5
 8002302:	d10d      	bne.n	8002320 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002304:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800230a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800230e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002312:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002316:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800231c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002320:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002322:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002324:	684a      	ldr	r2, [r1, #4]
 8002326:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002328:	6203      	str	r3, [r0, #32]
}
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	40012c00 	.word	0x40012c00

08002330 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002330:	6a03      	ldr	r3, [r0, #32]
{
 8002332:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002338:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800233c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002340:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002342:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002346:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800234a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800234c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002350:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002354:	4d06      	ldr	r5, [pc, #24]	; (8002370 <TIM_OC4_SetConfig+0x40>)
 8002356:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002358:	bf02      	ittt	eq
 800235a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800235c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002360:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002364:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002366:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002368:	684a      	ldr	r2, [r1, #4]
 800236a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236c:	6203      	str	r3, [r0, #32]
}
 800236e:	bd30      	pop	{r4, r5, pc}
 8002370:	40012c00 	.word	0x40012c00

08002374 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002374:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002378:	2b01      	cmp	r3, #1
 800237a:	d120      	bne.n	80023be <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	2302      	movs	r3, #2
 800237e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002382:	6803      	ldr	r3, [r0, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_TIM_Base_Start_IT+0x50>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00a      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x34>
 8002392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002396:	d007      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x34>
 8002398:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x34>
 80023a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	2a06      	cmp	r2, #6
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80023ba:	2000      	movs	r0, #0
}
 80023bc:	4770      	bx	lr
    return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00

080023c8 <HAL_TIM_PWM_MspInit>:
 80023c8:	4770      	bx	lr

080023ca <HAL_TIM_OC_DelayElapsedCallback>:
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_IC_CaptureCallback>:
 80023cc:	4770      	bx	lr

080023ce <HAL_TIM_PWM_PulseFinishedCallback>:
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIM_TriggerCallback>:
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d2:	6803      	ldr	r3, [r0, #0]
{
 80023d4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d6:	691a      	ldr	r2, [r3, #16]
{
 80023d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023da:	0791      	lsls	r1, r2, #30
 80023dc:	d50e      	bpl.n	80023fc <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	0792      	lsls	r2, r2, #30
 80023e2:	d50b      	bpl.n	80023fc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	2201      	movs	r2, #1
 80023ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	079b      	lsls	r3, r3, #30
 80023f2:	d077      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80023f4:	f7ff ffea 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	2300      	movs	r3, #0
 80023fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	0750      	lsls	r0, r2, #29
 8002402:	d510      	bpl.n	8002426 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	0751      	lsls	r1, r2, #29
 8002408:	d50d      	bpl.n	8002426 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800240a:	f06f 0204 	mvn.w	r2, #4
 800240e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002410:	2202      	movs	r2, #2
 8002412:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002414:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002418:	f413 7f40 	tst.w	r3, #768	; 0x300
 800241c:	d068      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	f7ff ffd5 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	2300      	movs	r3, #0
 8002424:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	0712      	lsls	r2, r2, #28
 800242c:	d50f      	bpl.n	800244e <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	0710      	lsls	r0, r2, #28
 8002432:	d50c      	bpl.n	800244e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002434:	f06f 0208 	mvn.w	r2, #8
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243a:	2204      	movs	r2, #4
 800243c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002440:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002442:	0799      	lsls	r1, r3, #30
 8002444:	d05a      	beq.n	80024fc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	f7ff ffc1 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	2300      	movs	r3, #0
 800244c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	06d2      	lsls	r2, r2, #27
 8002454:	d510      	bpl.n	8002478 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	06d0      	lsls	r0, r2, #27
 800245a:	d50d      	bpl.n	8002478 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800245c:	f06f 0210 	mvn.w	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002462:	2208      	movs	r2, #8
 8002464:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002466:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002468:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800246e:	d04b      	beq.n	8002508 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002470:	f7ff ffac 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002474:	2300      	movs	r3, #0
 8002476:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	07d1      	lsls	r1, r2, #31
 800247e:	d508      	bpl.n	8002492 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	07d2      	lsls	r2, r2, #31
 8002484:	d505      	bpl.n	8002492 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002486:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800248c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800248e:	f7fe f8d1 	bl	8000634 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	0610      	lsls	r0, r2, #24
 8002498:	d508      	bpl.n	80024ac <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	0611      	lsls	r1, r2, #24
 800249e:	d505      	bpl.n	80024ac <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80024a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024a8:	f000 fa79 	bl	800299e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	0652      	lsls	r2, r2, #25
 80024b2:	d508      	bpl.n	80024c6 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	0650      	lsls	r0, r2, #25
 80024b8:	d505      	bpl.n	80024c6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80024be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024c2:	f7ff ff85 	bl	80023d0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	0691      	lsls	r1, r2, #26
 80024cc:	d522      	bpl.n	8002514 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	0692      	lsls	r2, r2, #26
 80024d2:	d51f      	bpl.n	8002514 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80024d8:	4620      	mov	r0, r4
}
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80024e0:	f000 ba5c 	b.w	800299c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e4:	f7ff ff71 	bl	80023ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff ff70 	bl	80023ce <HAL_TIM_PWM_PulseFinishedCallback>
 80024ee:	e783      	b.n	80023f8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f0:	f7ff ff6b 	bl	80023ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff ff6a 	bl	80023ce <HAL_TIM_PWM_PulseFinishedCallback>
 80024fa:	e792      	b.n	8002422 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fc:	f7ff ff65 	bl	80023ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff64 	bl	80023ce <HAL_TIM_PWM_PulseFinishedCallback>
 8002506:	e7a0      	b.n	800244a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	f7ff ff5f 	bl	80023ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff ff5e 	bl	80023ce <HAL_TIM_PWM_PulseFinishedCallback>
 8002512:	e7af      	b.n	8002474 <HAL_TIM_IRQHandler+0xa2>
}
 8002514:	bd10      	pop	{r4, pc}
	...

08002518 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800251a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	4290      	cmp	r0, r2
 800251e:	d00a      	beq.n	8002536 <TIM_Base_SetConfig+0x1e>
 8002520:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002524:	d007      	beq.n	8002536 <TIM_Base_SetConfig+0x1e>
 8002526:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800252a:	4290      	cmp	r0, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0x1e>
 800252e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002532:	4290      	cmp	r0, r2
 8002534:	d115      	bne.n	8002562 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002536:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800253c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <TIM_Base_SetConfig+0x6c>)
 8002540:	4290      	cmp	r0, r2
 8002542:	d00a      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 8002544:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 800254a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800254e:	4290      	cmp	r0, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x42>
 8002552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002556:	4290      	cmp	r0, r2
 8002558:	d103      	bne.n	8002562 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002560:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002562:	694a      	ldr	r2, [r1, #20]
 8002564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002568:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800256a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002570:	680b      	ldr	r3, [r1, #0]
 8002572:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <TIM_Base_SetConfig+0x6c>)
 8002576:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002578:	bf04      	itt	eq
 800257a:	690b      	ldreq	r3, [r1, #16]
 800257c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800257e:	2301      	movs	r3, #1
 8002580:	6143      	str	r3, [r0, #20]
}
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00

08002588 <HAL_TIM_Base_Init>:
{
 8002588:	b510      	push	{r4, lr}
  if (htim == NULL)
 800258a:	4604      	mov	r4, r0
 800258c:	b330      	cbz	r0, 80025dc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002592:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002596:	b91b      	cbnz	r3, 80025a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002598:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800259c:	f7fe f99a 	bl	80008d4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a8:	1d21      	adds	r1, r4, #4
 80025aa:	f7ff ffb5 	bl	8002518 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ae:	2301      	movs	r3, #1
  return HAL_OK;
 80025b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80025ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80025be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80025d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80025d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80025da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
 80025de:	e7fc      	b.n	80025da <HAL_TIM_Base_Init+0x52>

080025e0 <HAL_TIM_PWM_Init>:
{
 80025e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80025e2:	4604      	mov	r4, r0
 80025e4:	b330      	cbz	r0, 8002634 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ee:	b91b      	cbnz	r3, 80025f8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80025f4:	f7ff fee8 	bl	80023c8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	1d21      	adds	r1, r4, #4
 8002602:	f7ff ff89 	bl	8002518 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002606:	2301      	movs	r3, #1
  return HAL_OK;
 8002608:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002612:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002616:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800261a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002626:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800262a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800262e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002632:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
 8002636:	e7fc      	b.n	8002632 <HAL_TIM_PWM_Init+0x52>

08002638 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002638:	6a03      	ldr	r3, [r0, #32]
{
 800263a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800263c:	f023 0310 	bic.w	r3, r3, #16
 8002640:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002642:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002644:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002646:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002648:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800264a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002652:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002654:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002658:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800265c:	4d0b      	ldr	r5, [pc, #44]	; (800268c <TIM_OC2_SetConfig+0x54>)
 800265e:	42a8      	cmp	r0, r5
 8002660:	d10d      	bne.n	800267e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002662:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800266c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002670:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002674:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800267a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800267e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002680:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002682:	684a      	ldr	r2, [r1, #4]
 8002684:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002686:	6203      	str	r3, [r0, #32]
}
 8002688:	bd70      	pop	{r4, r5, r6, pc}
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00

08002690 <HAL_TIM_PWM_ConfigChannel>:
{
 8002690:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002692:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002696:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002698:	2b01      	cmp	r3, #1
 800269a:	d052      	beq.n	8002742 <HAL_TIM_PWM_ConfigChannel+0xb2>
 800269c:	2301      	movs	r3, #1
  switch (Channel)
 800269e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80026a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80026a4:	d03c      	beq.n	8002720 <HAL_TIM_PWM_ConfigChannel+0x90>
 80026a6:	d806      	bhi.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80026a8:	b1c2      	cbz	r2, 80026dc <HAL_TIM_PWM_ConfigChannel+0x4c>
 80026aa:	2a04      	cmp	r2, #4
 80026ac:	d027      	beq.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80026b4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80026b6:	2a0c      	cmp	r2, #12
 80026b8:	d1f9      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	f7ff fe38 	bl	8002330 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026da:	e030      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026dc:	6800      	ldr	r0, [r0, #0]
 80026de:	f7ff fdd5 	bl	800228c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	f042 0208 	orr.w	r2, r2, #8
 80026ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	f022 0204 	bic.w	r2, r2, #4
 80026f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026fa:	619a      	str	r2, [r3, #24]
      break;
 80026fc:	e7d7      	b.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fe:	6800      	ldr	r0, [r0, #0]
 8002700:	f7ff ff9a 	bl	8002638 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002706:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800271e:	e7ec      	b.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002720:	6800      	ldr	r0, [r0, #0]
 8002722:	f7ff fddb 	bl	80022dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002726:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002728:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	f042 0208 	orr.w	r2, r2, #8
 8002730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800273e:	61da      	str	r2, [r3, #28]
      break;
 8002740:	e7b5      	b.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8002742:	2002      	movs	r0, #2
 8002744:	e7b6      	b.n	80026b4 <HAL_TIM_PWM_ConfigChannel+0x24>

08002746 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002746:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002748:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800274a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002750:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002754:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002756:	6082      	str	r2, [r0, #8]
}
 8002758:	bd10      	pop	{r4, pc}

0800275a <HAL_TIM_ConfigClockSource>:
{
 800275a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800275c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002760:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002762:	2b01      	cmp	r3, #1
 8002764:	f04f 0002 	mov.w	r0, #2
 8002768:	d027      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x60>
 800276a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002770:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002772:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002776:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002780:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002782:	680b      	ldr	r3, [r1, #0]
 8002784:	2b60      	cmp	r3, #96	; 0x60
 8002786:	d04d      	beq.n	8002824 <HAL_TIM_ConfigClockSource+0xca>
 8002788:	d832      	bhi.n	80027f0 <HAL_TIM_ConfigClockSource+0x96>
 800278a:	2b40      	cmp	r3, #64	; 0x40
 800278c:	d062      	beq.n	8002854 <HAL_TIM_ConfigClockSource+0xfa>
 800278e:	d815      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x62>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d003      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x42>
 8002794:	d809      	bhi.n	80027aa <HAL_TIM_ConfigClockSource+0x50>
 8002796:	f033 0210 	bics.w	r2, r3, #16
 800279a:	d108      	bne.n	80027ae <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800279c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800279e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f043 0307 	orr.w	r3, r3, #7
 80027a8:	e020      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80027aa:	2b30      	cmp	r3, #48	; 0x30
 80027ac:	d0f6      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 80027ae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80027b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d1f6      	bne.n	80027ae <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c0:	684a      	ldr	r2, [r1, #4]
 80027c2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027c4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c6:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027cc:	f025 0501 	bic.w	r5, r5, #1
 80027d0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80027d4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027da:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80027de:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027e0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80027e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80027ec:	6083      	str	r3, [r0, #8]
}
 80027ee:	e7de      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80027f0:	2b70      	cmp	r3, #112	; 0x70
 80027f2:	d00c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xb4>
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d1d9      	bne.n	80027ae <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	68cb      	ldr	r3, [r1, #12]
 80027fc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002800:	f7ff ffa1 	bl	8002746 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	6893      	ldr	r3, [r2, #8]
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	e008      	b.n	8002820 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800280e:	68cb      	ldr	r3, [r1, #12]
 8002810:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002814:	f7ff ff97 	bl	8002746 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002820:	6093      	str	r3, [r2, #8]
      break;
 8002822:	e7c4      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002824:	684d      	ldr	r5, [r1, #4]
 8002826:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002828:	6a01      	ldr	r1, [r0, #32]
 800282a:	f021 0110 	bic.w	r1, r1, #16
 800282e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002830:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002832:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002834:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800283c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002840:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002844:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002846:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002848:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800284e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002852:	e7cb      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002854:	684a      	ldr	r2, [r1, #4]
 8002856:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002858:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800285c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002860:	f025 0501 	bic.w	r5, r5, #1
 8002864:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002866:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002868:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800286a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800286e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002872:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002874:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002876:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002880:	e7b4      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x92>

08002882 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002882:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002884:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002886:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002888:	f001 011f 	and.w	r1, r1, #31
 800288c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800288e:	ea23 0304 	bic.w	r3, r3, r4
 8002892:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002894:	6a03      	ldr	r3, [r0, #32]
 8002896:	408a      	lsls	r2, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	6202      	str	r2, [r0, #32]
}
 800289c:	bd10      	pop	{r4, pc}
	...

080028a0 <HAL_TIM_OC_Start>:
{
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a4:	b929      	cbnz	r1, 80028b2 <HAL_TIM_OC_Start+0x12>
 80028a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d01d      	beq.n	80028ea <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
}
 80028b0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028b2:	2904      	cmp	r1, #4
 80028b4:	d107      	bne.n	80028c6 <HAL_TIM_OC_Start+0x26>
 80028b6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d1f7      	bne.n	80028ae <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	2302      	movs	r3, #2
 80028c0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80028c4:	e014      	b.n	80028f0 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028c6:	2908      	cmp	r1, #8
 80028c8:	d107      	bne.n	80028da <HAL_TIM_OC_Start+0x3a>
 80028ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d1ed      	bne.n	80028ae <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d2:	2302      	movs	r3, #2
 80028d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80028d8:	e00a      	b.n	80028f0 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d1e5      	bne.n	80028ae <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e2:	2302      	movs	r3, #2
 80028e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80028e8:	e002      	b.n	80028f0 <HAL_TIM_OC_Start+0x50>
 80028ea:	2302      	movs	r3, #2
 80028ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	f7ff ffc5 	bl	8002882 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_TIM_OC_Start+0x94>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10a      	bne.n	8002916 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8002900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	2a06      	cmp	r2, #6
 8002910:	d10b      	bne.n	800292a <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 8002912:	2000      	movs	r0, #0
 8002914:	e7cc      	b.n	80028b0 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d0f5      	beq.n	8002908 <HAL_TIM_OC_Start+0x68>
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_TIM_OC_Start+0x98>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d0f2      	beq.n	8002908 <HAL_TIM_OC_Start+0x68>
 8002922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002926:	4293      	cmp	r3, r2
 8002928:	d0ee      	beq.n	8002908 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e7ee      	b.n	8002912 <HAL_TIM_OC_Start+0x72>
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400

0800293c <HAL_TIM_PWM_Start>:
 800293c:	f7ff bfb0 	b.w	80028a0 <HAL_TIM_OC_Start>

08002940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002940:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002946:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002948:	2b01      	cmp	r3, #1
 800294a:	f04f 0002 	mov.w	r0, #2
 800294e:	d022      	beq.n	8002996 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002952:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002956:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002958:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800295a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002960:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002962:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	4c0c      	ldr	r4, [pc, #48]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002966:	42a3      	cmp	r3, r4
 8002968:	d00a      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d007      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002970:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002974:	42a3      	cmp	r3, r4
 8002976:	d003      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002978:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800297c:	42a3      	cmp	r3, r4
 800297e:	d104      	bne.n	800298a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002980:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002982:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002986:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002988:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800298a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800298c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800298e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002992:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8002996:	bd30      	pop	{r4, r5, pc}
 8002998:	40012c00 	.word	0x40012c00

0800299c <HAL_TIMEx_CommutCallback>:
 800299c:	4770      	bx	lr

0800299e <HAL_TIMEx_BreakCallback>:
 800299e:	4770      	bx	lr

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	2600      	movs	r6, #0
 80029a4:	4d0c      	ldr	r5, [pc, #48]	; (80029d8 <__libc_init_array+0x38>)
 80029a6:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a8:	1b64      	subs	r4, r4, r5
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	42a6      	cmp	r6, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	f000 f822 	bl	80029f8 <_init>
 80029b4:	2600      	movs	r6, #0
 80029b6:	4d0a      	ldr	r5, [pc, #40]	; (80029e0 <__libc_init_array+0x40>)
 80029b8:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <__libc_init_array+0x44>)
 80029ba:	1b64      	subs	r4, r4, r5
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	42a6      	cmp	r6, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c8:	4798      	blx	r3
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d2:	4798      	blx	r3
 80029d4:	3601      	adds	r6, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002a34 	.word	0x08002a34
 80029dc:	08002a34 	.word	0x08002a34
 80029e0:	08002a34 	.word	0x08002a34
 80029e4:	08002a38 	.word	0x08002a38

080029e8 <memset>:
 80029e8:	4603      	mov	r3, r0
 80029ea:	4402      	add	r2, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
