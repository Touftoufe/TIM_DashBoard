
TIM_DashBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004930  08004930  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004930  08004930  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000018  08004950  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004950  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f966  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b42  00000000  00000000  0002f9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000324f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00033308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001893c  00000000  00000000  00033fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dfd  00000000  00000000  0004c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7ca  00000000  00000000  0005d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000e9f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080048f8 	.word	0x080048f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080048f8 	.word	0x080048f8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 ffd1 	bl	8001130 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa85 	bl	80006a2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fa55 	bl	8001658 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fa75 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000044 	.word	0x20000044
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a2c      	ldr	r2, [pc, #176]	; (8000294 <HAL_ADC_MspInit+0xcc>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d151      	bne.n	800028c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b2b      	ldr	r3, [pc, #172]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b28      	ldr	r3, [pc, #160]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b25      	ldr	r3, [pc, #148]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <HAL_ADC_MspInit+0xd0>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000218:	2310      	movs	r3, #16
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	481d      	ldr	r0, [pc, #116]	; (800029c <HAL_ADC_MspInit+0xd4>)
 8000228:	f002 fd50 	bl	8002ccc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800022c:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 800022e:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <HAL_ADC_MspInit+0xdc>)
 8000230:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000232:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000234:	2200      	movs	r2, #0
 8000236:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000238:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 800024e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000252:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000256:	2200      	movs	r2, #0
 8000258:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 800025c:	2200      	movs	r2, #0
 800025e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000260:	480f      	ldr	r0, [pc, #60]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000262:	f002 fb45 	bl	80028f0 <HAL_DMA_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800026c:	f000 fa19 	bl	80006a2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000274:	621a      	str	r2, [r3, #32]
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_ADC_MspInit+0xd8>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2012      	movs	r0, #18
 8000282:	f002 fafe 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000286:	2012      	movs	r0, #18
 8000288:	f002 fb17 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40012400 	.word	0x40012400
 8000298:	40021000 	.word	0x40021000
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000074 	.word	0x20000074
 80002a4:	40020008 	.word	0x40020008

080002a8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <MX_CAN_Init+0x68>)
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <MX_CAN_Init+0x6c>)
 80002b0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_CAN_Init+0x68>)
 80002b4:	2209      	movs	r2, #9
 80002b6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <MX_CAN_Init+0x68>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_CAN_Init+0x68>)
 80002c0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80002c4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_CAN_Init+0x68>)
 80002c8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80002cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_CAN_Init+0x68>)
 80002d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002d4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_CAN_Init+0x68>)
 80002d8:	2200      	movs	r2, #0
 80002da:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_CAN_Init+0x68>)
 80002de:	2200      	movs	r2, #0
 80002e0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_CAN_Init+0x68>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_CAN_Init+0x68>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_CAN_Init+0x68>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CAN_Init+0x68>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_CAN_Init+0x68>)
 80002fc:	f001 fbae 	bl	8001a5c <HAL_CAN_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000306:	f000 f9cc 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000b8 	.word	0x200000b8
 8000314:	40006400 	.word	0x40006400

08000318 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <HAL_CAN_MspInit+0xac>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d141      	bne.n	80003bc <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 800033e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000342:	61d3      	str	r3, [r2, #28]
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 8000346:	69db      	ldr	r3, [r3, #28]
 8000348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <HAL_CAN_MspInit+0xb0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800036c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4813      	ldr	r0, [pc, #76]	; (80003cc <HAL_CAN_MspInit+0xb4>)
 800037e:	f002 fca5 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000388:	2302      	movs	r3, #2
 800038a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038c:	2303      	movs	r3, #3
 800038e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	480d      	ldr	r0, [pc, #52]	; (80003cc <HAL_CAN_MspInit+0xb4>)
 8000398:	f002 fc98 	bl	8002ccc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2100      	movs	r1, #0
 80003a0:	2014      	movs	r0, #20
 80003a2:	f002 fa6e 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003a6:	2014      	movs	r0, #20
 80003a8:	f002 fa87 	bl	80028ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	2015      	movs	r0, #21
 80003b2:	f002 fa66 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80003b6:	2015      	movs	r0, #21
 80003b8:	f002 fa7f 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40006400 	.word	0x40006400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010800 	.word	0x40010800

080003d0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_DMA_Init+0x8c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a20      	ldr	r2, [pc, #128]	; (800045c <MX_DMA_Init+0x8c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_DMA_Init+0x8c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_DMA_Init+0x90>)
 80003f0:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <MX_DMA_Init+0x94>)
 80003f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_DMA_Init+0x90>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fa:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_DISABLE;
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_DMA_Init+0x90>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_DMA_Init+0x90>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_DMA_Init+0x90>)
 800040a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800040e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_DMA_Init+0x90>)
 8000412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000416:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_DMA_Init+0x90>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_DMA_Init+0x90>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000424:	480e      	ldr	r0, [pc, #56]	; (8000460 <MX_DMA_Init+0x90>)
 8000426:	f002 fa63 	bl	80028f0 <HAL_DMA_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_DMA_Init+0x64>
  {
    Error_Handler();
 8000430:	f000 f937 	bl	80006a2 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	200b      	movs	r0, #11
 800043a:	f002 fa22 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800043e:	200b      	movs	r0, #11
 8000440:	f002 fa3b 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	200c      	movs	r0, #12
 800044a:	f002 fa1a 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800044e:	200c      	movs	r0, #12
 8000450:	f002 fa33 	bl	80028ba <HAL_NVIC_EnableIRQ>

}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	200000e0 	.word	0x200000e0
 8000464:	4002001c 	.word	0x4002001c

08000468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047c:	4b38      	ldr	r3, [pc, #224]	; (8000560 <MX_GPIO_Init+0xf8>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a37      	ldr	r2, [pc, #220]	; (8000560 <MX_GPIO_Init+0xf8>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b35      	ldr	r3, [pc, #212]	; (8000560 <MX_GPIO_Init+0xf8>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0310 	and.w	r3, r3, #16
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b32      	ldr	r3, [pc, #200]	; (8000560 <MX_GPIO_Init+0xf8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a31      	ldr	r2, [pc, #196]	; (8000560 <MX_GPIO_Init+0xf8>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a25      	ldr	r2, [pc, #148]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <MX_GPIO_Init+0xf8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80004e2:	4820      	ldr	r0, [pc, #128]	; (8000564 <MX_GPIO_Init+0xfc>)
 80004e4:	f002 fd8d 	bl	8003002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_GPIO_Init+0x100>)
 80004f0:	f002 fd87 	bl	8003002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_Pin;
 80004f4:	2301      	movs	r3, #1
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_GPIO_Init+0x104>)
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4818      	ldr	r0, [pc, #96]	; (8000568 <MX_GPIO_Init+0x100>)
 8000508:	f002 fbe0 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = wiper_power_Pin|LED_Pin;
 800050c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <MX_GPIO_Init+0xfc>)
 8000526:	f002 fbd1 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 800052a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <MX_GPIO_Init+0x100>)
 8000544:	f002 fbc2 	bl	8002ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2006      	movs	r0, #6
 800054e:	f002 f998 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000552:	2006      	movs	r0, #6
 8000554:	f002 f9b1 	bl	80028ba <HAL_NVIC_EnableIRQ>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	40011000 	.word	0x40011000
 8000568:	40010800 	.word	0x40010800
 800056c:	10310000 	.word	0x10310000

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fd56 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f838 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f7ff ff74 	bl	8000468 <MX_GPIO_Init>
  MX_CAN_Init();
 8000580:	f7ff fe92 	bl	80002a8 <MX_CAN_Init>
  MX_TIM2_Init();
 8000584:	f000 fa60 	bl	8000a48 <MX_TIM2_Init>
  MX_DMA_Init();
 8000588:	f7ff ff22 	bl	80003d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800058c:	f7ff fdde 	bl	800014c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000590:	f000 fb26 	bl	8000be0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000594:	f000 fa06 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000598:	f000 fad4 	bl	8000b44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  CAN_receive_init();
 800059c:	f000 fc4a 	bl	8000e34 <CAN_receive_init>





  wiper_start(wiper_speed_1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fca1 	bl	8000ee8 <wiper_start>
  HAL_TIM_Base_Start_IT(&htim1);
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x6c>)
 80005a8:	f003 fa6c 	bl	8003a84 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x70>)
 80005ae:	f003 fa69 	bl	8003a84 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim4);


  wiper_start(2);
 80005b2:	2002      	movs	r0, #2
 80005b4:	f000 fc98 	bl	8000ee8 <wiper_start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x74>)
 80005c0:	f002 fd1f 	bl	8003002 <HAL_GPIO_WritePin>
	  CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message );
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <main+0x78>)
 80005c6:	2101      	movs	r1, #1
 80005c8:	f44f 6084 	mov.w	r0, #1056	; 0x420
 80005cc:	f000 fc0e 	bl	8000dec <CAN_send_message>

	  //CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message);
	  HAL_Delay(1000);
 80005d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d4:	f000 fd88 	bl	80010e8 <HAL_Delay>
	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 80005d8:	e7ee      	b.n	80005b8 <main+0x48>
 80005da:	bf00      	nop
 80005dc:	200001b8 	.word	0x200001b8
 80005e0:	20000170 	.word	0x20000170
 80005e4:	40011000 	.word	0x40011000
 80005e8:	20000000 	.word	0x20000000

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f6:	2228      	movs	r2, #40	; 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f974 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fd30 	bl	80030a8 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800064e:	f000 f828 	bl	80006a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f002 ff9a 	bl	80035a8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800067a:	f000 f812 	bl	80006a2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800067e:	2302      	movs	r3, #2
 8000680:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000682:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f8f4 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000696:	f000 f804 	bl	80006a2 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a6:	b672      	cpsid	i
}
 80006a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006aa:	e7fe      	b.n	80006aa <Error_Handler+0x8>

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_MspInit+0x5c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x5c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_MspInit+0x60>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_MspInit+0x60>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 fcab 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_RESET){
 8000764:	2101      	movs	r1, #1
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <EXTI0_IRQHandler+0x4c>)
 8000768:	f002 fc34 	bl	8002fd4 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <EXTI0_IRQHandler+0x1a>
		enable_motor_CMD = 1;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <EXTI0_IRQHandler+0x50>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e012      	b.n	80007a0 <EXTI0_IRQHandler+0x40>

	} else if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_SET) {
 800077a:	2101      	movs	r1, #1
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <EXTI0_IRQHandler+0x4c>)
 800077e:	f002 fc29 	bl	8002fd4 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d10b      	bne.n	80007a0 <EXTI0_IRQHandler+0x40>
		enable_motor_CMD = 0;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <EXTI0_IRQHandler+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		TxMotorCMD=0;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <EXTI0_IRQHandler+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <EXTI0_IRQHandler+0x54>)
 8000796:	2101      	movs	r1, #1
 8000798:	f240 4004 	movw	r0, #1028	; 0x404
 800079c:	f000 fb26 	bl	8000dec <CAN_send_message>

	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_Pin);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f002 fc5f 	bl	8003064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800
 80007b0:	2000003a 	.word	0x2000003a
 80007b4:	20000126 	.word	0x20000126

080007b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */



  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <DMA1_Channel1_IRQHandler+0x10>)
 80007be:	f002 f951 	bl	8002a64 <HAL_DMA_IRQHandler>




  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000074 	.word	0x20000074

080007cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <DMA1_Channel2_IRQHandler+0x10>)
 80007d2:	f002 f947 	bl	8002a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000e0 	.word	0x200000e0

080007e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <ADC1_2_IRQHandler+0x10>)
 80007e6:	f000 fe59 	bl	800149c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000044 	.word	0x20000044

080007f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007fa:	f001 fd47 	bl	800228c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000b8 	.word	0x200000b8

08000808 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <CAN1_RX1_IRQHandler+0x10>)
 800080e:	f001 fd3d 	bl	800228c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000b8 	.word	0x200000b8

0800081c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM1_BRK_IRQHandler+0x10>)
 8000822:	f003 fa7b 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001b8 	.word	0x200001b8

08000830 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	  if( enable_motor_CMD ){
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <TIM1_UP_IRQHandler+0x2c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d008      	beq.n	8000850 <TIM1_UP_IRQHandler+0x20>
		  TxMotorCMD=1;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <TIM1_UP_IRQHandler+0x30>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
		  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <TIM1_UP_IRQHandler+0x30>)
 8000846:	2101      	movs	r1, #1
 8000848:	f240 4004 	movw	r0, #1028	; 0x404
 800084c:	f000 face 	bl	8000dec <CAN_send_message>
	  }
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <TIM1_UP_IRQHandler+0x34>)
 8000852:	f003 fa63 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */



  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000003a 	.word	0x2000003a
 8000860:	20000126 	.word	0x20000126
 8000864:	200001b8 	.word	0x200001b8

08000868 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM1_TRG_COM_IRQHandler+0x10>)
 800086e:	f003 fa55 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001b8 	.word	0x200001b8

0800087c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM2_IRQHandler+0x10>)
 8000882:	f003 fa4b 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000200 	.word	0x20000200

08000890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <TIM3_IRQHandler+0x24>)
 800089a:	f002 fbca 	bl	8003032 <HAL_GPIO_TogglePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Values, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	4905      	ldr	r1, [pc, #20]	; (80008b8 <TIM3_IRQHandler+0x28>)
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <TIM3_IRQHandler+0x2c>)
 80008a4:	f000 fd1c 	bl	80012e0 <HAL_ADC_Start_DMA>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <TIM3_IRQHandler+0x30>)
 80008aa:	f003 fa37 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40011000 	.word	0x40011000
 80008b8:	20000034 	.word	0x20000034
 80008bc:	20000044 	.word	0x20000044
 80008c0:	20000170 	.word	0x20000170

080008c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM4_IRQHandler+0x10>)
 80008ca:	f003 fa27 	bl	8003d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000128 	.word	0x20000128

080008d8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (abs(ADC_Values[0]-ADC_Values[1]) > 200)
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 80008ea:	885b      	ldrh	r3, [r3, #2]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dd0d      	ble.n	8000910 <HAL_ADC_ConvHalfCpltCallback+0x38>
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 80008fe:	885b      	ldrh	r3, [r3, #2]
 8000900:	b21b      	sxth	r3, r3
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2bc8      	cmp	r3, #200	; 0xc8
 8000906:	bfcc      	ite	gt
 8000908:	2301      	movgt	r3, #1
 800090a:	2300      	movle	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	e00c      	b.n	800092a <HAL_ADC_ConvHalfCpltCallback+0x52>
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8000912:	885b      	ldrh	r3, [r3, #2]
 8000914:	b21b      	sxth	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b21b      	sxth	r3, r3
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2bc8      	cmp	r3, #200	; 0xc8
 8000922:	bfcc      	ite	gt
 8000924:	2301      	movgt	r3, #1
 8000926:	2300      	movle	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d021      	beq.n	8000972 <HAL_ADC_ConvHalfCpltCallback+0x9a>
	{
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	b21b      	sxth	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	da01      	bge.n	8000946 <HAL_ADC_ConvHalfCpltCallback+0x6e>
 8000942:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000946:	131b      	asrs	r3, r3, #12
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	0152      	lsls	r2, r2, #5
 800094e:	1ad2      	subs	r2, r2, r3
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	4413      	add	r3, r2
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	b29b      	uxth	r3, r3
 8000958:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 8000960:	801a      	strh	r2, [r3, #0]
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,TxMotorFRW);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	2102      	movs	r1, #2
 800096a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800096e:	f000 fa3d 	bl	8000dec <CAN_send_message>
	}
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, ADC_Values, ADC_Values+1, 1);
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_ADC_ConvHalfCpltCallback+0xb8>)
 8000976:	461a      	mov	r2, r3
 8000978:	2301      	movs	r3, #1
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <HAL_ADC_ConvHalfCpltCallback+0xbc>)
 800097c:	f002 f812 	bl	80029a4 <HAL_DMA_Start_IT>

}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000034 	.word	0x20000034
 800098c:	20000124 	.word	0x20000124
 8000990:	20000036 	.word	0x20000036
 8000994:	200000e0 	.word	0x200000e0

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <MX_TIM1_Init+0xa0>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009c8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80009cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80009da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009f0:	f002 fff8 	bl	80039e4 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009fa:	f7ff fe52 	bl	80006a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_TIM1_Init+0x9c>)
 8000a0c:	f003 fb4c 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a16:	f7ff fe44 	bl	80006a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_TIM1_Init+0x9c>)
 8000a28:	f003 feca 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000a32:	f7ff fe36 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001b8 	.word	0x200001b8
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a82:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a90:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa2:	4827      	ldr	r0, [pc, #156]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000aa4:	f002 ff9e 	bl	80039e4 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f7ff fdf8 	bl	80006a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000ac0:	f003 faf2 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aca:	f7ff fdea 	bl	80006a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ace:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000ad0:	f003 f82a 	bl	8003b28 <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ada:	f7ff fde2 	bl	80006a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4619      	mov	r1, r3
 8000aec:	4814      	ldr	r0, [pc, #80]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000aee:	f003 fe67 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000af8:	f7ff fdd3 	bl	80006a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afc:	2360      	movs	r3, #96	; 0x60
 8000afe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	220c      	movs	r2, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000b14:	f003 fa0a 	bl	8003f2c <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b1e:	f7ff fdc0 	bl	80006a2 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b30:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_TIM2_Init+0xf8>)
 8000b34:	f000 f92a 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000200 	.word	0x20000200

08000b44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <MX_TIM3_Init+0x98>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b68:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b76:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000b8a:	f002 ff2b 	bl	80039e4 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b94:	f7ff fd85 	bl	80006a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000ba6:	f003 fa7f 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f7ff fd77 	bl	80006a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM3_Init+0x94>)
 8000bc2:	f003 fdfd 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f7ff fd69 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000170 	.word	0x20000170
 8000bdc:	40000400 	.word	0x40000400

08000be0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <MX_TIM4_Init+0x98>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c04:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c24:	4813      	ldr	r0, [pc, #76]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c26:	f002 fedd 	bl	80039e4 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c30:	f7ff fd37 	bl	80006a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c42:	f003 fa31 	bl	80040a8 <HAL_TIM_ConfigClockSource>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f7ff fd29 	bl	80006a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_TIM4_Init+0x94>)
 8000c5e:	f003 fdaf 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f7ff fd1b 	bl	80006a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000128 	.word	0x20000128
 8000c78:	40000800 	.word	0x40000800

08000c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <HAL_TIM_Base_MspInit+0x100>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d124      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2018      	movs	r0, #24
 8000cac:	f001 fde9 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000cb0:	2018      	movs	r0, #24
 8000cb2:	f001 fe02 	bl	80028ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f001 fde1 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cc0:	2019      	movs	r0, #25
 8000cc2:	f001 fdfa 	bl	80028ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201a      	movs	r0, #26
 8000ccc:	f001 fdd9 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000cd0:	201a      	movs	r0, #26
 8000cd2:	f001 fdf2 	bl	80028ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cd6:	e04c      	b.n	8000d72 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d114      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201c      	movs	r0, #28
 8000d00:	f001 fdbf 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d04:	201c      	movs	r0, #28
 8000d06:	f001 fdd8 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 8000d0a:	e032      	b.n	8000d72 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_TIM_Base_MspInit+0x108>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d114      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201d      	movs	r0, #29
 8000d34:	f001 fda5 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f001 fdbe 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 8000d3e:	e018      	b.n	8000d72 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_TIM_Base_MspInit+0x10c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d113      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_TIM_Base_MspInit+0x104>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	201e      	movs	r0, #30
 8000d68:	f001 fd8b 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d6c:	201e      	movs	r0, #30
 8000d6e:	f001 fda4 	bl	80028ba <HAL_NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40000800 	.word	0x40000800

08000d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000daa:	d117      	bne.n	8000ddc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_TIM_MspPostInit+0x58>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <HAL_TIM_MspPostInit+0x58>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_MspPostInit+0x58>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = wiper_pwm_Pin;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(wiper_pwm_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <HAL_TIM_MspPostInit+0x5c>)
 8000dd8:	f001 ff78 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <CAN_send_message>:

CAN_RxHeaderTypeDef pCAN_RxHeader;

// --CAN

void CAN_send_message(uint16_t adresse,uint8_t dlc,uint8_t  *message){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	717b      	strb	r3, [r7, #5]
	CAN_TxHeaderTypeDef pCAN_Header;
	pCAN_Header.DLC   = dlc; // 1 DLC is 8bits
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	61bb      	str	r3, [r7, #24]
	pCAN_Header.StdId = adresse;
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	60bb      	str	r3, [r7, #8]
	pCAN_Header.ExtId = adresse<<16;
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
	pCAN_Header.IDE   = CAN_ID_EXT;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
	pCAN_Header.TransmitGlobalTime = DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	773b      	strb	r3, [r7, #28]

	HAL_CAN_AddTxMessage(&hcan, &pCAN_Header, message, &pCAN_TxMailbox);
 8000e16:	f107 0108 	add.w	r1, r7, #8
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <CAN_send_message+0x40>)
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <CAN_send_message+0x44>)
 8000e20:	f001 f824 	bl	8001e6c <HAL_CAN_AddTxMessage>

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000026c 	.word	0x2000026c
 8000e30:	200000b8 	.word	0x200000b8

08000e34 <CAN_receive_init>:

void CAN_receive_init(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = /*((0x04210031  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;*/(0x04210031 >> 13);
 8000e46:	f242 1308 	movw	r3, #8456	; 0x2108
 8000e4a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = (0x04210031 & 0X1FFF) << 3;//(0x04210031 >> (11 - 3)) & 0xFFF8;//(0x04210031 >> 13);
 8000e4c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8000e50:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;//(((uint16_t)0x0FFFffFF  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;
 8000e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e56:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow =0x0000;// 0xFFF8;//(0x0FFFFFFF >> (11 - 3)) & 0xFFF8;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]

	sFilterConfig.SlaveStartFilterBank = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);      // Configure le filtre comme ci-dessus
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <CAN_receive_init+0x60>)
 8000e6e:	f000 fef0 	bl	8001c52 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000e72:	2102      	movs	r1, #2
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <CAN_receive_init+0x60>)
 8000e76:	f001 f9e4 	bl	8002242 <HAL_CAN_ActivateNotification>


	HAL_CAN_Start(&hcan);
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <CAN_receive_init+0x60>)
 8000e7c:	f000 ffb2 	bl	8001de4 <HAL_CAN_Start>
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <CAN_receive_init+0x64>)
 8000e88:	f002 f8bb 	bl	8003002 <HAL_GPIO_WritePin>

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000b8 	.word	0x200000b8
 8000e98:	40010800 	.word	0x40010800

08000e9c <HAL_CAN_RxFifo0MsgPendingCallback>:
void CAN_close_can(void){
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_SET);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	extern uint8_t message[8];
	extern uint8_t RxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pCAN_RxHeader, RxData);
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f001 f8b8 	bl	8002020 <HAL_CAN_GetRxMessage>

	if ((pCAN_RxHeader.ExtId) == 0x4210031){
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d109      	bne.n	8000ece <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		message[0]= (RxData[0]==1) ? 0 : 1;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000ecc:	701a      	strb	r2, [r3, #0]
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000003c 	.word	0x2000003c
 8000edc:	20000248 	.word	0x20000248
 8000ee0:	04210031 	.word	0x04210031
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <wiper_start>:
extern TIM_HandleTypeDef htim2; //needed for specific period of pwm to control the servo motor
extern TIM_HandleTypeDef htim4; // control by wiper.c to change wiper speed

uint8_t wiper_direction = 1;

void wiper_start(wiper_speed the_wiper_speed){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]

	//turn timer 2 and 4 on
	//turn timer pwm on

	//HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <wiper_start+0x80>)
 8000ef6:	f002 fe6f 	bl	8003bd8 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim4);
 8000efa:	481c      	ldr	r0, [pc, #112]	; (8000f6c <wiper_start+0x84>)
 8000efc:	f002 fdc2 	bl	8003a84 <HAL_TIM_Base_Start_IT>


	//configure htim4 period using wiper_speed
    switch (the_wiper_speed) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d016      	beq.n	8000f34 <wiper_start+0x4c>
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	dc1c      	bgt.n	8000f44 <wiper_start+0x5c>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d002      	beq.n	8000f14 <wiper_start+0x2c>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d008      	beq.n	8000f24 <wiper_start+0x3c>
 8000f12:	e017      	b.n	8000f44 <wiper_start+0x5c>
		case wiper_speed_1:
			htim4.Init.Period=10000-1;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <wiper_start+0x84>)
 8000f16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f1a:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim4);
 8000f1c:	4813      	ldr	r0, [pc, #76]	; (8000f6c <wiper_start+0x84>)
 8000f1e:	f002 fd61 	bl	80039e4 <HAL_TIM_Base_Init>
			break;
 8000f22:	e017      	b.n	8000f54 <wiper_start+0x6c>
		case wiper_speed_2:
			htim4.Init.Period=20000-1;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <wiper_start+0x84>)
 8000f26:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f2a:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim4);
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <wiper_start+0x84>)
 8000f2e:	f002 fd59 	bl	80039e4 <HAL_TIM_Base_Init>
			break;
 8000f32:	e00f      	b.n	8000f54 <wiper_start+0x6c>
		case wiper_speed_3:
			htim4.Init.Period=30000-1;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <wiper_start+0x84>)
 8000f36:	f247 522f 	movw	r2, #29999	; 0x752f
 8000f3a:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim4);
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <wiper_start+0x84>)
 8000f3e:	f002 fd51 	bl	80039e4 <HAL_TIM_Base_Init>
			break;
 8000f42:	e007      	b.n	8000f54 <wiper_start+0x6c>
		default:
			htim4.Init.Period=1000-1;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <wiper_start+0x84>)
 8000f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4a:	60da      	str	r2, [r3, #12]
			HAL_TIM_Base_Init(&htim4);
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <wiper_start+0x84>)
 8000f4e:	f002 fd49 	bl	80039e4 <HAL_TIM_Base_Init>
			break;
 8000f52:	bf00      	nop
	}

	//switch wiper_power on
    HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <wiper_start+0x88>)
 8000f5c:	f002 f851 	bl	8003002 <HAL_GPIO_WritePin>



}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000200 	.word	0x20000200
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	40011000 	.word	0x40011000

08000f74 <HAL_TIM_PeriodElapsedCallback>:

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

		if (htim == &htim4) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d11e      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x4e>


			switch (wiper_direction) {
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d008      	beq.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000f90:	e00f      	b.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x3e>
				case 1:
					TIM2->CCR4=200;
 8000f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f96:	22c8      	movs	r2, #200	; 0xc8
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
					wiper_direction=0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
					break;
 8000fa0:	e010      	b.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x50>
				case 2:
					TIM2->CCR4=100;
 8000fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa6:	2264      	movs	r2, #100	; 0x64
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
					wiper_direction=1;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
					break;
 8000fb0:	e008      	b.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x50>
				default:
					TIM2->CCR4=100;
 8000fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb6:	2264      	movs	r2, #100	; 0x64
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
					wiper_direction=1;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
					break;
 8000fc0:	e000      	b.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x50>





		}
 8000fc2:	bf00      	nop

 	 }
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000128 	.word	0x20000128
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	; (800101c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ffe:	f7ff fccb 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f003 fc4d 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001006:	f7ff fab3 	bl	8000570 <main>
  bx lr
 800100a:	4770      	bx	lr
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001014:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 8001018:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800101c:	20000274 	.word	0x20000274

08001020 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <CAN1_SCE_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f001 fc19 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fb34 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fc31 	bl	80028d6 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f001 fbf9 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000014 	.word	0x20000014
 80010ac:	20000010 	.word	0x20000010

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_IncTick+0x20>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000014 	.word	0x20000014
 80010d0:	20000270 	.word	0x20000270

080010d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000270 	.word	0x20000270

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff fff0 	bl	80010d4 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffe0 	bl	80010d4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000014 	.word	0x20000014

08001130 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0be      	b.n	80012d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff f82a 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fbc1 	bl	80018fc <ADC_ConversionStop_Disable>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8099 	bne.w	80012be <HAL_ADC_Init+0x18e>
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 8095 	bne.w	80012be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119c:	f023 0302 	bic.w	r3, r3, #2
 80011a0:	f043 0202 	orr.w	r2, r3, #2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b1b      	ldrb	r3, [r3, #12]
 80011b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c8:	d003      	beq.n	80011d2 <HAL_ADC_Init+0xa2>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d102      	bne.n	80011d8 <HAL_ADC_Init+0xa8>
 80011d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d6:	e000      	b.n	80011da <HAL_ADC_Init+0xaa>
 80011d8:	2300      	movs	r3, #0
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7d1b      	ldrb	r3, [r3, #20]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d119      	bne.n	800121c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7b1b      	ldrb	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	035a      	lsls	r2, r3, #13
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	e00b      	b.n	800121c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	f043 0220 	orr.w	r2, r3, #32
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_ADC_Init+0x1a8>)
 8001238:	4013      	ands	r3, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	430b      	orrs	r3, r1
 8001242:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800124c:	d003      	beq.n	8001256 <HAL_ADC_Init+0x126>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d104      	bne.n	8001260 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	3b01      	subs	r3, #1
 800125c:	051b      	lsls	r3, r3, #20
 800125e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	430a      	orrs	r2, r1
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_ADC_Init+0x1ac>)
 800127c:	4013      	ands	r3, r2
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	429a      	cmp	r2, r3
 8001282:	d10b      	bne.n	800129c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800129a:	e018      	b.n	80012ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f023 0312 	bic.w	r3, r3, #18
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012bc:	e007      	b.n	80012ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	ffe1f7fd 	.word	0xffe1f7fd
 80012dc:	ff1f0efe 	.word	0xff1f0efe

080012e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a64      	ldr	r2, [pc, #400]	; (8001488 <HAL_ADC_Start_DMA+0x1a8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d004      	beq.n	8001304 <HAL_ADC_Start_DMA+0x24>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_ADC_Start_DMA+0x1ac>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d106      	bne.n	8001312 <HAL_ADC_Start_DMA+0x32>
 8001304:	4b60      	ldr	r3, [pc, #384]	; (8001488 <HAL_ADC_Start_DMA+0x1a8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 80b3 	bne.w	8001478 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_ADC_Start_DMA+0x40>
 800131c:	2302      	movs	r3, #2
 800131e:	e0ae      	b.n	800147e <HAL_ADC_Start_DMA+0x19e>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 fa8d 	bl	8001848 <ADC_Enable>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 809a 	bne.w	800146e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_ADC_Start_DMA+0x1ac>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d105      	bne.n	8001364 <HAL_ADC_Start_DMA+0x84>
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_ADC_Start_DMA+0x1a8>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d115      	bne.n	8001390 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d026      	beq.n	80013cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138e:	e01d      	b.n	80013cc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a39      	ldr	r2, [pc, #228]	; (8001488 <HAL_ADC_Start_DMA+0x1a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_ADC_Start_DMA+0xd0>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a38      	ldr	r2, [pc, #224]	; (800148c <HAL_ADC_Start_DMA+0x1ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d10d      	bne.n	80013cc <HAL_ADC_Start_DMA+0xec>
 80013b0:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_ADC_Start_DMA+0x1a8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f023 0206 	bic.w	r2, r3, #6
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4a25      	ldr	r2, [pc, #148]	; (8001490 <HAL_ADC_Start_DMA+0x1b0>)
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4a24      	ldr	r2, [pc, #144]	; (8001494 <HAL_ADC_Start_DMA+0x1b4>)
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_ADC_Start_DMA+0x1b8>)
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f06f 0202 	mvn.w	r2, #2
 8001414:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001424:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a18      	ldr	r0, [r3, #32]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	334c      	adds	r3, #76	; 0x4c
 8001430:	4619      	mov	r1, r3
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f001 fab5 	bl	80029a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001444:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001448:	d108      	bne.n	800145c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001458:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800145a:	e00f      	b.n	800147c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800146a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800146c:	e006      	b.n	800147c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001476:	e001      	b.n	800147c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800147c:	7dfb      	ldrb	r3, [r7, #23]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012400 	.word	0x40012400
 800148c:	40012800 	.word	0x40012800
 8001490:	0800197f 	.word	0x0800197f
 8001494:	080019fb 	.word	0x080019fb
 8001498:	08001a17 	.word	0x08001a17

0800149c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d140      	bne.n	8001534 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d139      	bne.n	8001534 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014e6:	d11d      	bne.n	8001524 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d119      	bne.n	8001524 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0220 	bic.w	r2, r2, #32
 80014fe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f87c 	bl	8001622 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0212 	mvn.w	r2, #18
 8001532:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	2b80      	cmp	r3, #128	; 0x80
 8001540:	d14f      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b04      	cmp	r3, #4
 800154e:	d148      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001572:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001576:	d012      	beq.n	800159e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001582:	2b00      	cmp	r3, #0
 8001584:	d125      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001590:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001594:	d11d      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d119      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	f043 0201 	orr.w	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fa39 	bl	8001a4a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 020c 	mvn.w	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b40      	cmp	r3, #64	; 0x40
 80015ee:	d114      	bne.n	800161a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d10d      	bne.n	800161a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f812 	bl	8001634 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0201 	mvn.w	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x20>
 8001674:	2302      	movs	r3, #2
 8001676:	e0dc      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1da>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b06      	cmp	r3, #6
 8001686:	d81c      	bhi.n	80016c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	221f      	movs	r2, #31
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4019      	ands	r1, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	3b05      	subs	r3, #5
 80016b4:	fa00 f203 	lsl.w	r2, r0, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
 80016c0:	e03c      	b.n	800173c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d81c      	bhi.n	8001704 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b23      	subs	r3, #35	; 0x23
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4019      	ands	r1, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
 8001702:	e01b      	b.n	800173c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b41      	subs	r3, #65	; 0x41
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	4019      	ands	r1, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	3b41      	subs	r3, #65	; 0x41
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b09      	cmp	r3, #9
 8001742:	d91c      	bls.n	800177e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	3b1e      	subs	r3, #30
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e019      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d003      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017be:	2b11      	cmp	r3, #17
 80017c0:	d132      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_ADC_ConfigChannel+0x1e4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d125      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d126      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d11a      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_ADC_ConfigChannel+0x1e8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_ADC_ConfigChannel+0x1ec>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	0c9a      	lsrs	r2, r3, #18
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_ConfigChannel+0x1b2>
 8001816:	e007      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40012400 	.word	0x40012400
 8001840:	20000008 	.word	0x20000008
 8001844:	431bde83 	.word	0x431bde83

08001848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d040      	beq.n	80018e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <ADC_Enable+0xac>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <ADC_Enable+0xb0>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001884:	e002      	b.n	800188c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3b01      	subs	r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001892:	f7ff fc1f 	bl	80010d4 <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001898:	e01f      	b.n	80018da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800189a:	f7ff fc1b 	bl	80010d4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d918      	bls.n	80018da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d011      	beq.n	80018da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e007      	b.n	80018ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d1d8      	bne.n	800189a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008
 80018f8:	431bde83 	.word	0x431bde83

080018fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d12e      	bne.n	8001974 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001926:	f7ff fbd5 	bl	80010d4 <HAL_GetTick>
 800192a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800192c:	e01b      	b.n	8001966 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800192e:	f7ff fbd1 	bl	80010d4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d914      	bls.n	8001966 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10d      	bne.n	8001966 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f043 0210 	orr.w	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e007      	b.n	8001976 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d0dc      	beq.n	800192e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001994:	2b00      	cmp	r3, #0
 8001996:	d127      	bne.n	80019e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019b2:	d115      	bne.n	80019e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fe1e 	bl	8001622 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019e6:	e004      	b.n	80019f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7fe ff65 	bl	80008d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff fe02 	bl	8001646 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0ed      	b.n	8001c4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fc4c 	bl	8000318 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a90:	f7ff fb20 	bl	80010d4 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a96:	e012      	b.n	8001abe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a98:	f7ff fb1c 	bl	80010d4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b0a      	cmp	r3, #10
 8001aa4:	d90b      	bls.n	8001abe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0c5      	b.n	8001c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0e5      	beq.n	8001a98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0202 	bic.w	r2, r2, #2
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001adc:	f7ff fafa 	bl	80010d4 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ae2:	e012      	b.n	8001b0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ae4:	f7ff faf6 	bl	80010d4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b0a      	cmp	r3, #10
 8001af0:	d90b      	bls.n	8001b0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2205      	movs	r2, #5
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e09f      	b.n	8001c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e5      	bne.n	8001ae4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e1b      	ldrb	r3, [r3, #24]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d108      	bne.n	8001b32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7e5b      	ldrb	r3, [r3, #25]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e9b      	ldrb	r3, [r3, #26]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d108      	bne.n	8001b86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e007      	b.n	8001b96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0220 	bic.w	r2, r2, #32
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7edb      	ldrb	r3, [r3, #27]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d108      	bne.n	8001bb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0210 	bic.w	r2, r2, #16
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e007      	b.n	8001bc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0210 	orr.w	r2, r2, #16
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7f1b      	ldrb	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0208 	orr.w	r2, r2, #8
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7f5b      	ldrb	r3, [r3, #29]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0204 	orr.w	r2, r2, #4
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e007      	b.n	8001c14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0204 	bic.w	r2, r2, #4
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	ea42 0103 	orr.w	r1, r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b087      	sub	sp, #28
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d003      	beq.n	8001c78 <HAL_CAN_ConfigFilter+0x26>
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	f040 80aa 	bne.w	8001dcc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d123      	bne.n	8001cfa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3248      	adds	r2, #72	; 0x48
 8001cda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf0:	6979      	ldr	r1, [r7, #20]
 8001cf2:	3348      	adds	r3, #72	; 0x48
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d122      	bne.n	8001d48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3248      	adds	r2, #72	; 0x48
 8001d28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	3348      	adds	r3, #72	; 0x48
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d62:	e007      	b.n	8001d74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dbe:	f023 0201 	bic.w	r2, r3, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e006      	b.n	8001dda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d12e      	bne.n	8001e56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e10:	f7ff f960 	bl	80010d4 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e16:	e012      	b.n	8001e3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff f95c 	bl	80010d4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d90b      	bls.n	8001e3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e012      	b.n	8001e64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e006      	b.n	8001e64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d003      	beq.n	8001e98 <HAL_CAN_AddTxMessage+0x2c>
 8001e90:	7ffb      	ldrb	r3, [r7, #31]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	f040 80b8 	bne.w	8002008 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80a0 	beq.w	8001ff8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0e1b      	lsrs	r3, r3, #24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d907      	bls.n	8001ed8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e09e      	b.n	8002016 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	409a      	lsls	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ef4:	68f9      	ldr	r1, [r7, #12]
 8001ef6:	6809      	ldr	r1, [r1, #0]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3318      	adds	r3, #24
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	440b      	add	r3, r1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3318      	adds	r3, #24
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3318      	adds	r3, #24
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	3304      	adds	r3, #4
 8001f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	7d1b      	ldrb	r3, [r3, #20]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d111      	bne.n	8001f66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	6811      	ldr	r1, [r2, #0]
 8001f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	440b      	add	r3, r1
 8001f62:	3304      	adds	r3, #4
 8001f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3307      	adds	r3, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	061a      	lsls	r2, r3, #24
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3306      	adds	r3, #6
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	3204      	adds	r2, #4
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	6811      	ldr	r1, [r2, #0]
 8001f8e:	ea43 0200 	orr.w	r2, r3, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	061a      	lsls	r2, r3, #24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	6811      	ldr	r1, [r2, #0]
 8001fc4:	ea43 0200 	orr.w	r2, r3, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3318      	adds	r3, #24
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3318      	adds	r3, #24
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e00e      	b.n	8002016 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e006      	b.n	8002016 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d003      	beq.n	8002044 <HAL_CAN_GetRxMessage+0x24>
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 80f3 	bne.w	800222a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10e      	bne.n	8002068 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d116      	bne.n	8002086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0e7      	b.n	8002238 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d107      	bne.n	8002086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0d8      	b.n	8002238 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	331b      	adds	r3, #27
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0204 	and.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10c      	bne.n	80020be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	331b      	adds	r3, #27
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0d5b      	lsrs	r3, r3, #21
 80020b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e00b      	b.n	80020d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	331b      	adds	r3, #27
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	331b      	adds	r3, #27
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0202 	and.w	r2, r3, #2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	331b      	adds	r3, #27
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4413      	add	r3, r2
 80020f8:	3304      	adds	r3, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	331b      	adds	r3, #27
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	331b      	adds	r3, #27
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	4413      	add	r3, r2
 800213e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0a1a      	lsrs	r2, r3, #8
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	4413      	add	r3, r2
 800216e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0c1a      	lsrs	r2, r3, #16
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	3302      	adds	r3, #2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e1a      	lsrs	r2, r3, #24
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3303      	adds	r3, #3
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	3304      	adds	r3, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0a1a      	lsrs	r2, r3, #8
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	3305      	adds	r3, #5
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0c1a      	lsrs	r2, r3, #16
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	3306      	adds	r3, #6
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e1a      	lsrs	r2, r3, #24
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	3307      	adds	r3, #7
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	e007      	b.n	8002226 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e006      	b.n	8002238 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002252:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d002      	beq.n	8002260 <HAL_CAN_ActivateNotification+0x1e>
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d109      	bne.n	8002274 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6959      	ldr	r1, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e006      	b.n	8002282 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d07c      	beq.n	80023cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f983 	bl	80025fa <HAL_CAN_TxMailbox0CompleteCallback>
 80022f4:	e016      	b.n	8002324 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e00c      	b.n	8002324 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
 800231c:	e002      	b.n	8002324 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f986 	bl	8002630 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d024      	beq.n	8002378 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002336:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f962 	bl	800260c <HAL_CAN_TxMailbox1CompleteCallback>
 8002348:	e016      	b.n	8002378 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	e00c      	b.n	8002378 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e002      	b.n	8002378 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f965 	bl	8002642 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d024      	beq.n	80023cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800238a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f941 	bl	800261e <HAL_CAN_TxMailbox2CompleteCallback>
 800239c:	e016      	b.n	80023cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e00c      	b.n	80023cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	e002      	b.n	80023cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f944 	bl	8002654 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00c      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f92a 	bl	8002666 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fd36 	bl	8000e9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00c      	beq.n	8002454 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2210      	movs	r2, #16
 8002452:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2208      	movs	r2, #8
 800246e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f90a 	bl	800268a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8f2 	bl	8002678 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8f3 	bl	800269c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8eb 	bl	80026ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07b      	beq.n	80025da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d072      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	2b00      	cmp	r3, #0
 8002548:	d043      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03e      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800255a:	2b60      	cmp	r3, #96	; 0x60
 800255c:	d02b      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x32a>
 800255e:	2b60      	cmp	r3, #96	; 0x60
 8002560:	d82e      	bhi.n	80025c0 <HAL_CAN_IRQHandler+0x334>
 8002562:	2b50      	cmp	r3, #80	; 0x50
 8002564:	d022      	beq.n	80025ac <HAL_CAN_IRQHandler+0x320>
 8002566:	2b50      	cmp	r3, #80	; 0x50
 8002568:	d82a      	bhi.n	80025c0 <HAL_CAN_IRQHandler+0x334>
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d019      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x316>
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d826      	bhi.n	80025c0 <HAL_CAN_IRQHandler+0x334>
 8002572:	2b30      	cmp	r3, #48	; 0x30
 8002574:	d010      	beq.n	8002598 <HAL_CAN_IRQHandler+0x30c>
 8002576:	2b30      	cmp	r3, #48	; 0x30
 8002578:	d822      	bhi.n	80025c0 <HAL_CAN_IRQHandler+0x334>
 800257a:	2b10      	cmp	r3, #16
 800257c:	d002      	beq.n	8002584 <HAL_CAN_IRQHandler+0x2f8>
 800257e:	2b20      	cmp	r3, #32
 8002580:	d005      	beq.n	800258e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002582:	e01d      	b.n	80025c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800258c:	e019      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002596:	e014      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	f043 0320 	orr.w	r3, r3, #32
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025a0:	e00f      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025aa:	e00a      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025b4:	e005      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025be:	e000      	b.n	80025c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80025c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2204      	movs	r2, #4
 80025d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f867 	bl	80026c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4906      	ldr	r1, [pc, #24]	; (800276c <__NVIC_EnableIRQ+0x34>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284c:	f7ff ff90 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2d 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff42 	bl	800271c <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff90 	bl	80027c4 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5f 	bl	8002770 <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff35 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e043      	b.n	800298e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_DMA_Init+0xa8>)
 800290e:	4413      	add	r3, r2
 8002910:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_DMA_Init+0xac>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <HAL_DMA_Init+0xb0>)
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800293a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800293e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	bffdfff8 	.word	0xbffdfff8
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_DMA_Start_IT+0x20>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e04a      	b.n	8002a5a <HAL_DMA_Start_IT+0xb6>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d13a      	bne.n	8002a4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f938 	bl	8002c70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 020e 	orr.w	r2, r2, #14
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e00f      	b.n	8002a3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0204 	bic.w	r2, r2, #4
 8002a28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 020a 	orr.w	r2, r2, #10
 8002a38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e005      	b.n	8002a58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2204      	movs	r2, #4
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d04f      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xc8>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a66      	ldr	r2, [pc, #408]	; (8002c54 <HAL_DMA_IRQHandler+0x1f0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d029      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xae>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_DMA_IRQHandler+0x1f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xaa>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_DMA_IRQHandler+0x1f8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0xa4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a62      	ldr	r2, [pc, #392]	; (8002c60 <HAL_DMA_IRQHandler+0x1fc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d012      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x9e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a60      	ldr	r2, [pc, #384]	; (8002c64 <HAL_DMA_IRQHandler+0x200>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00a      	beq.n	8002afc <HAL_DMA_IRQHandler+0x98>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_DMA_IRQHandler+0x204>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x92>
 8002af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002af4:	e00e      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002af6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002afa:	e00b      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b00:	e008      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b06:	e005      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0c:	e002      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_IRQHandler+0xb0>
 8002b12:	2304      	movs	r3, #4
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <HAL_DMA_IRQHandler+0x208>)
 8002b16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8094 	beq.w	8002c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b2a:	e08e      	b.n	8002c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	2202      	movs	r2, #2
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d056      	beq.n	8002bea <HAL_DMA_IRQHandler+0x186>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d051      	beq.n	8002bea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020a 	bic.w	r2, r2, #10
 8002b62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_DMA_IRQHandler+0x1f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d029      	beq.n	8002bca <HAL_DMA_IRQHandler+0x166>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a37      	ldr	r2, [pc, #220]	; (8002c58 <HAL_DMA_IRQHandler+0x1f4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x162>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <HAL_DMA_IRQHandler+0x1f8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01a      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x15c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_DMA_IRQHandler+0x1fc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d012      	beq.n	8002bba <HAL_DMA_IRQHandler+0x156>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <HAL_DMA_IRQHandler+0x200>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x150>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_DMA_IRQHandler+0x204>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d102      	bne.n	8002bae <HAL_DMA_IRQHandler+0x14a>
 8002ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bac:	e00e      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	e00b      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	e008      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bbe:	e005      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc4:	e002      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e000      	b.n	8002bcc <HAL_DMA_IRQHandler+0x168>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_DMA_IRQHandler+0x208>)
 8002bce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d034      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be8:	e02f      	b.n	8002c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2208      	movs	r2, #8
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d028      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x1e8>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d023      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 020e 	bic.w	r2, r2, #14
 8002c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
    }
  }
  return;
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
}
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40020008 	.word	0x40020008
 8002c58:	4002001c 	.word	0x4002001c
 8002c5c:	40020030 	.word	0x40020030
 8002c60:	40020044 	.word	0x40020044
 8002c64:	40020058 	.word	0x40020058
 8002c68:	4002006c 	.word	0x4002006c
 8002c6c:	40020000 	.word	0x40020000

08002c70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d108      	bne.n	8002cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cae:	e007      	b.n	8002cc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b08b      	sub	sp, #44	; 0x2c
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cde:	e169      	b.n	8002fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f040 8158 	bne.w	8002fae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a9a      	ldr	r2, [pc, #616]	; (8002f6c <HAL_GPIO_Init+0x2a0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d05e      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
 8002d08:	4a98      	ldr	r2, [pc, #608]	; (8002f6c <HAL_GPIO_Init+0x2a0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d875      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d0e:	4a98      	ldr	r2, [pc, #608]	; (8002f70 <HAL_GPIO_Init+0x2a4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d058      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
 8002d14:	4a96      	ldr	r2, [pc, #600]	; (8002f70 <HAL_GPIO_Init+0x2a4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d86f      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d1a:	4a96      	ldr	r2, [pc, #600]	; (8002f74 <HAL_GPIO_Init+0x2a8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d052      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
 8002d20:	4a94      	ldr	r2, [pc, #592]	; (8002f74 <HAL_GPIO_Init+0x2a8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d869      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d26:	4a94      	ldr	r2, [pc, #592]	; (8002f78 <HAL_GPIO_Init+0x2ac>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d04c      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
 8002d2c:	4a92      	ldr	r2, [pc, #584]	; (8002f78 <HAL_GPIO_Init+0x2ac>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d863      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d32:	4a92      	ldr	r2, [pc, #584]	; (8002f7c <HAL_GPIO_Init+0x2b0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d046      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
 8002d38:	4a90      	ldr	r2, [pc, #576]	; (8002f7c <HAL_GPIO_Init+0x2b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d85d      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d3e:	2b12      	cmp	r3, #18
 8002d40:	d82a      	bhi.n	8002d98 <HAL_GPIO_Init+0xcc>
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d859      	bhi.n	8002dfa <HAL_GPIO_Init+0x12e>
 8002d46:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <HAL_GPIO_Init+0x80>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002dc7 	.word	0x08002dc7
 8002d50:	08002da1 	.word	0x08002da1
 8002d54:	08002db3 	.word	0x08002db3
 8002d58:	08002df5 	.word	0x08002df5
 8002d5c:	08002dfb 	.word	0x08002dfb
 8002d60:	08002dfb 	.word	0x08002dfb
 8002d64:	08002dfb 	.word	0x08002dfb
 8002d68:	08002dfb 	.word	0x08002dfb
 8002d6c:	08002dfb 	.word	0x08002dfb
 8002d70:	08002dfb 	.word	0x08002dfb
 8002d74:	08002dfb 	.word	0x08002dfb
 8002d78:	08002dfb 	.word	0x08002dfb
 8002d7c:	08002dfb 	.word	0x08002dfb
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dfb 	.word	0x08002dfb
 8002d88:	08002dfb 	.word	0x08002dfb
 8002d8c:	08002dfb 	.word	0x08002dfb
 8002d90:	08002da9 	.word	0x08002da9
 8002d94:	08002dbd 	.word	0x08002dbd
 8002d98:	4a79      	ldr	r2, [pc, #484]	; (8002f80 <HAL_GPIO_Init+0x2b4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d9e:	e02c      	b.n	8002dfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	623b      	str	r3, [r7, #32]
          break;
 8002da6:	e029      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	3304      	adds	r3, #4
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e024      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	3308      	adds	r3, #8
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e01f      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e01a      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dce:	2304      	movs	r3, #4
 8002dd0:	623b      	str	r3, [r7, #32]
          break;
 8002dd2:	e013      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ddc:	2308      	movs	r3, #8
 8002dde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	611a      	str	r2, [r3, #16]
          break;
 8002de6:	e009      	b.n	8002dfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002de8:	2308      	movs	r3, #8
 8002dea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	615a      	str	r2, [r3, #20]
          break;
 8002df2:	e003      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x130>
          break;
 8002dfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2bff      	cmp	r3, #255	; 0xff
 8002e00:	d801      	bhi.n	8002e06 <HAL_GPIO_Init+0x13a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	e001      	b.n	8002e0a <HAL_GPIO_Init+0x13e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2bff      	cmp	r3, #255	; 0xff
 8002e10:	d802      	bhi.n	8002e18 <HAL_GPIO_Init+0x14c>
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	e002      	b.n	8002e1e <HAL_GPIO_Init+0x152>
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3b08      	subs	r3, #8
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	210f      	movs	r1, #15
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	6a39      	ldr	r1, [r7, #32]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80b1 	beq.w	8002fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x2b8>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4a4c      	ldr	r2, [pc, #304]	; (8002f84 <HAL_GPIO_Init+0x2b8>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6193      	str	r3, [r2, #24]
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_GPIO_Init+0x2b8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <HAL_GPIO_Init+0x2c0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_GPIO_Init+0x1ec>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3f      	ldr	r2, [pc, #252]	; (8002f90 <HAL_GPIO_Init+0x2c4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00d      	beq.n	8002eb4 <HAL_GPIO_Init+0x1e8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3e      	ldr	r2, [pc, #248]	; (8002f94 <HAL_GPIO_Init+0x2c8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d007      	beq.n	8002eb0 <HAL_GPIO_Init+0x1e4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <HAL_GPIO_Init+0x2cc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_GPIO_Init+0x1e0>
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e006      	b.n	8002eba <HAL_GPIO_Init+0x1ee>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e004      	b.n	8002eba <HAL_GPIO_Init+0x1ee>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e002      	b.n	8002eba <HAL_GPIO_Init+0x1ee>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_GPIO_Init+0x1ee>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	f002 0203 	and.w	r2, r2, #3
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	4093      	lsls	r3, r2
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eca:	492f      	ldr	r1, [pc, #188]	; (8002f88 <HAL_GPIO_Init+0x2bc>)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee4:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	492c      	ldr	r1, [pc, #176]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4928      	ldr	r1, [pc, #160]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4922      	ldr	r1, [pc, #136]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	491e      	ldr	r1, [pc, #120]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4918      	ldr	r1, [pc, #96]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4914      	ldr	r1, [pc, #80]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d021      	beq.n	8002fa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_GPIO_Init+0x2d0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
 8002f68:	e021      	b.n	8002fae <HAL_GPIO_Init+0x2e2>
 8002f6a:	bf00      	nop
 8002f6c:	10320000 	.word	0x10320000
 8002f70:	10310000 	.word	0x10310000
 8002f74:	10220000 	.word	0x10220000
 8002f78:	10210000 	.word	0x10210000
 8002f7c:	10120000 	.word	0x10120000
 8002f80:	10110000 	.word	0x10110000
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40010800 	.word	0x40010800
 8002f90:	40010c00 	.word	0x40010c00
 8002f94:	40011000 	.word	0x40011000
 8002f98:	40011400 	.word	0x40011400
 8002f9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f47f ae8e 	bne.w	8002ce0 <HAL_GPIO_Init+0x14>
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	372c      	adds	r7, #44	; 0x2c
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40010400 	.word	0x40010400

08002fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e001      	b.n	8002ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	807b      	strh	r3, [r7, #2]
 800300e:	4613      	mov	r3, r2
 8003010:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003012:	787b      	ldrb	r3, [r7, #1]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003018:	887a      	ldrh	r2, [r7, #2]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800301e:	e003      	b.n	8003028 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	041a      	lsls	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	041a      	lsls	r2, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43d9      	mvns	r1, r3
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	611a      	str	r2, [r3, #16]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f806 	bl	8003094 <HAL_GPIO_EXTI_Callback>
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e26c      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8087 	beq.w	80031d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c8:	4b92      	ldr	r3, [pc, #584]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d00c      	beq.n	80030ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d4:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d112      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
 80030e0:	4b8c      	ldr	r3, [pc, #560]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d10b      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4b89      	ldr	r3, [pc, #548]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d06c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x12c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d168      	bne.n	80031d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e246      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x76>
 8003110:	4b80      	ldr	r3, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a7f      	ldr	r2, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e02e      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x98>
 8003126:	4b7b      	ldr	r3, [pc, #492]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7a      	ldr	r2, [pc, #488]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b78      	ldr	r3, [pc, #480]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a77      	ldr	r2, [pc, #476]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xbc>
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a71      	ldr	r2, [pc, #452]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003164:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6a      	ldr	r2, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b68      	ldr	r3, [pc, #416]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a67      	ldr	r2, [pc, #412]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd ffa6 	bl	80010d4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ffa2 	bl	80010d4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1fa      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xe4>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd ff92 	bl	80010d4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd ff8e 	bl	80010d4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1e6      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x10c>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x18c>
 80031fa:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x176>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1ba      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4939      	ldr	r1, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fd ff47 	bl	80010d4 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fd ff43 	bl	80010d4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e19b      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4927      	ldr	r1, [pc, #156]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_OscConfig+0x270>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd ff26 	bl	80010d4 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fd ff22 	bl	80010d4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e17a      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d03a      	beq.n	800332c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d019      	beq.n	80032f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fd ff06 	bl	80010d4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fd ff02 	bl	80010d4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e15a      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f000 faa6 	bl	800383c <RCC_Delay>
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_OscConfig+0x274>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fd feec 	bl	80010d4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fe:	e00f      	b.n	8003320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fd fee8 	bl	80010d4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d908      	bls.n	8003320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e140      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	42420000 	.word	0x42420000
 800331c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b9e      	ldr	r3, [pc, #632]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e9      	bne.n	8003300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a6 	beq.w	8003486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b97      	ldr	r3, [pc, #604]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a93      	ldr	r2, [pc, #588]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	61d3      	str	r3, [r2, #28]
 8003356:	4b91      	ldr	r3, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <HAL_RCC_OscConfig+0x4f8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d118      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4f8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a8a      	ldr	r2, [pc, #552]	; (80035a0 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337e:	f7fd fea9 	bl	80010d4 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fd fea5 	bl	80010d4 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	; 0x64
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0fd      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003398:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <HAL_RCC_OscConfig+0x4f8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x312>
 80033ac:	4b7b      	ldr	r3, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a7a      	ldr	r2, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e02d      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x334>
 80033c2:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a75      	ldr	r2, [pc, #468]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a72      	ldr	r2, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	e01c      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x356>
 80033e4:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a6c      	ldr	r2, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_OscConfig+0x36e>
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a66      	ldr	r2, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a63      	ldr	r2, [pc, #396]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d015      	beq.n	800344a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341e:	f7fd fe59 	bl	80010d4 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fd fe55 	bl	80010d4 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0ab      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	4b57      	ldr	r3, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ee      	beq.n	8003426 <HAL_RCC_OscConfig+0x37e>
 8003448:	e014      	b.n	8003474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fd fe43 	bl	80010d4 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fd fe3f 	bl	80010d4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e095      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ee      	bne.n	8003452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b48      	ldr	r3, [pc, #288]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a47      	ldr	r2, [pc, #284]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8081 	beq.w	8003592 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d061      	beq.n	8003560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d146      	bne.n	8003532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_OscConfig+0x4fc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fd fe13 	bl	80010d4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fe0f 	bl	80010d4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e067      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034da:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	492d      	ldr	r1, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a19      	ldr	r1, [r3, #32]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	430b      	orrs	r3, r1
 80034fe:	4927      	ldr	r1, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x4fc>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fd fde3 	bl	80010d4 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fd fddf 	bl	80010d4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e037      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x46a>
 8003530:	e02f      	b.n	8003592 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_RCC_OscConfig+0x4fc>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fd fdcc 	bl	80010d4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fd fdc8 	bl	80010d4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e020      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x498>
 800355e:	e018      	b.n	8003592 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e013      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x4f4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	429a      	cmp	r2, r3
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420060 	.word	0x42420060

080035a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0d0      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d910      	bls.n	80035ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b67      	ldr	r3, [pc, #412]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 0207 	bic.w	r2, r3, #7
 80035d2:	4965      	ldr	r1, [pc, #404]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0b8      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003604:	4b59      	ldr	r3, [pc, #356]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800360e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800361c:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a52      	ldr	r2, [pc, #328]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	494d      	ldr	r1, [pc, #308]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d040      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d115      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e07f      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e073      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e06b      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b39      	ldr	r3, [pc, #228]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4936      	ldr	r1, [pc, #216]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7fd fd1c 	bl	80010d4 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fd fd18 	bl	80010d4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e053      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d210      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 0207 	bic.w	r2, r3, #7
 80036de:	4922      	ldr	r1, [pc, #136]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e032      	b.n	800375e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4916      	ldr	r1, [pc, #88]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	490e      	ldr	r1, [pc, #56]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003736:	f000 f821 	bl	800377c <HAL_RCC_GetSysClockFreq>
 800373a:	4602      	mov	r2, r0
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	490a      	ldr	r1, [pc, #40]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1cc>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1d0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fc7a 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40022000 	.word	0x40022000
 800376c:	40021000 	.word	0x40021000
 8003770:	08004920 	.word	0x08004920
 8003774:	20000008 	.word	0x20000008
 8003778:	20000010 	.word	0x20000010

0800377c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b490      	push	{r4, r7}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003784:	1d3c      	adds	r4, r7, #4
 8003786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800378c:	f240 2301 	movw	r3, #513	; 0x201
 8003790:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d002      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x40>
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x46>
 80037ba:	e02d      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	623b      	str	r3, [r7, #32]
      break;
 80037c0:	e02d      	b.n	800381e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	0c9b      	lsrs	r3, r3, #18
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ce:	4413      	add	r3, r2
 80037d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	0c5b      	lsrs	r3, r3, #17
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ee:	4413      	add	r3, r2
 80037f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037fa:	fb02 f203 	mul.w	r2, r2, r3
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e004      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <HAL_RCC_GetSysClockFreq+0xbc>)
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	623b      	str	r3, [r7, #32]
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381a:	623b      	str	r3, [r7, #32]
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6a3b      	ldr	r3, [r7, #32]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc90      	pop	{r4, r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	08004910 	.word	0x08004910
 8003830:	40021000 	.word	0x40021000
 8003834:	007a1200 	.word	0x007a1200
 8003838:	003d0900 	.word	0x003d0900

0800383c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCC_Delay+0x34>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <RCC_Delay+0x38>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a5b      	lsrs	r3, r3, #9
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003858:	bf00      	nop
  }
  while (Delay --);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <RCC_Delay+0x1c>
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	20000008 	.word	0x20000008
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d07d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
 80038b0:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d118      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a42      	ldr	r2, [pc, #264]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7fd fbfc 	bl	80010d4 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	e008      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fd fbf8 	bl	80010d4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e06d      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d027      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391c:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003926:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392c:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003932:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d014      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd fbc7 	bl	80010d4 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fbc3 	bl	80010d4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e036      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4917      	ldr	r1, [pc, #92]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	4313      	orrs	r3, r2
 800397c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	490b      	ldr	r1, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4904      	ldr	r1, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42420440 	.word	0x42420440

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e041      	b.n	8003a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd f936 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f000 fc28 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03a      	b.n	8003b12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_TIM_Base_Start_IT+0x98>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x58>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800

08003b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f839 	bl	8003bc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fb86 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_TIM_PWM_Start+0x24>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e022      	b.n	8003c42 <HAL_TIM_PWM_Start+0x6a>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d109      	bne.n	8003c16 <HAL_TIM_PWM_Start+0x3e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e015      	b.n	8003c42 <HAL_TIM_PWM_Start+0x6a>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d109      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x58>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e008      	b.n	8003c42 <HAL_TIM_PWM_Start+0x6a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e05e      	b.n	8003d08 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x82>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x92>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_PWM_Start+0xaa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fd74 	bl	8004778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_TIM_PWM_Start+0x138>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d107      	bne.n	8003caa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIM_PWM_Start+0x138>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0xfa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d009      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0xfa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_TIM_PWM_Start+0x13c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0xfa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_TIM_PWM_Start+0x140>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d111      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d010      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf4:	e007      	b.n	8003d06 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800

08003d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0202 	mvn.w	r2, #2
 8003d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa6f 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa62 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fa71 	bl	8004254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0204 	mvn.w	r2, #4
 8003d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa45 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa38 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fa47 	bl	8004254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0208 	mvn.w	r2, #8
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2204      	movs	r2, #4
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa1b 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa0e 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa1d 	bl	8004254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0210 	mvn.w	r2, #16
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9f1 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9e4 	bl	8004230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f9f3 	bl	8004254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0201 	mvn.w	r2, #1
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd f86a 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fce1 	bl	800488e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9b7 	bl	8004266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0220 	mvn.w	r2, #32
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fcac 	bl	800487c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0ac      	b.n	80040a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	f200 809f 	bhi.w	8004094 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08004095 	.word	0x08004095
 8003f64:	08004095 	.word	0x08004095
 8003f68:	08004095 	.word	0x08004095
 8003f6c:	08003fd1 	.word	0x08003fd1
 8003f70:	08004095 	.word	0x08004095
 8003f74:	08004095 	.word	0x08004095
 8003f78:	08004095 	.word	0x08004095
 8003f7c:	08004013 	.word	0x08004013
 8003f80:	08004095 	.word	0x08004095
 8003f84:	08004095 	.word	0x08004095
 8003f88:	08004095 	.word	0x08004095
 8003f8c:	08004053 	.word	0x08004053
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f9d0 	bl	800433c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0208 	orr.w	r2, r2, #8
 8003faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0204 	bic.w	r2, r2, #4
 8003fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6999      	ldr	r1, [r3, #24]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	619a      	str	r2, [r3, #24]
      break;
 8003fce:	e062      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fa16 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6999      	ldr	r1, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	021a      	lsls	r2, r3, #8
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]
      break;
 8004010:	e041      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fa5f 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0208 	orr.w	r2, r2, #8
 800402c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0204 	bic.w	r2, r2, #4
 800403c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69d9      	ldr	r1, [r3, #28]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	61da      	str	r2, [r3, #28]
      break;
 8004050:	e021      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 faa9 	bl	80045b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	021a      	lsls	r2, r3, #8
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	61da      	str	r2, [r3, #28]
      break;
 8004092:	e000      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIM_ConfigClockSource+0x18>
 80040bc:	2302      	movs	r3, #2
 80040be:	e0b3      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x180>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f8:	d03e      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0xd0>
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fe:	f200 8087 	bhi.w	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	f000 8085 	beq.w	8004214 <HAL_TIM_ConfigClockSource+0x16c>
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	d87f      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004110:	2b70      	cmp	r3, #112	; 0x70
 8004112:	d01a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xa2>
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d87b      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d050      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x116>
 800411c:	2b60      	cmp	r3, #96	; 0x60
 800411e:	d877      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004120:	2b50      	cmp	r3, #80	; 0x50
 8004122:	d03c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0xf6>
 8004124:	2b50      	cmp	r3, #80	; 0x50
 8004126:	d873      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d058      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x136>
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d86f      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004130:	2b30      	cmp	r3, #48	; 0x30
 8004132:	d064      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x156>
 8004134:	2b30      	cmp	r3, #48	; 0x30
 8004136:	d86b      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004138:	2b20      	cmp	r3, #32
 800413a:	d060      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x156>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d867      	bhi.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05c      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x156>
 8004144:	2b10      	cmp	r3, #16
 8004146:	d05a      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004148:	e062      	b.n	8004210 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f000 faee 	bl	800473a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800416c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]
      break;
 8004176:	e04e      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6899      	ldr	r1, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f000 fad7 	bl	800473a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419a:	609a      	str	r2, [r3, #8]
      break;
 800419c:	e03b      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 fa4e 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2150      	movs	r1, #80	; 0x50
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 faa5 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e02b      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 fa6c 	bl	80046a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2160      	movs	r1, #96	; 0x60
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fa95 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80041dc:	e01b      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 fa2e 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fa85 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e00b      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f000 fa7c 	bl	8004706 <TIM_ITRx_SetConfig>
        break;
 800420e:	e002      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004214:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a29      	ldr	r2, [pc, #164]	; (8004330 <TIM_Base_SetConfig+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_Base_SetConfig+0x30>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0x30>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0xbc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x30>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a25      	ldr	r2, [pc, #148]	; (8004338 <TIM_Base_SetConfig+0xc0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <TIM_Base_SetConfig+0xb8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0x62>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <TIM_Base_SetConfig+0xbc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0x62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <TIM_Base_SetConfig+0xc0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <TIM_Base_SetConfig+0xb8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	615a      	str	r2, [r3, #20]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0201 	bic.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <TIM_OC1_SetConfig+0xc8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10c      	bne.n	80043b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0308 	bic.w	r3, r3, #8
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <TIM_OC1_SetConfig+0xc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0320 	bic.w	r3, r3, #32
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <TIM_OC2_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10d      	bne.n	8004484 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <TIM_OC2_SetConfig+0xd0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d113      	bne.n	80044b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <TIM_OC3_SetConfig+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00

080045b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <TIM_OC4_SetConfig+0x98>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00

0800464c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 030a 	bic.w	r3, r3, #10
 8004688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 0210 	bic.w	r2, r3, #16
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	031b      	lsls	r3, r3, #12
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	f043 0307 	orr.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004754:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	431a      	orrs	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	609a      	str	r2, [r3, #8]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e046      	b.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a10      	ldr	r2, [pc, #64]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10c      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800

0800487c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	2600      	movs	r6, #0
 80048a4:	4d0c      	ldr	r5, [pc, #48]	; (80048d8 <__libc_init_array+0x38>)
 80048a6:	4c0d      	ldr	r4, [pc, #52]	; (80048dc <__libc_init_array+0x3c>)
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	f000 f822 	bl	80048f8 <_init>
 80048b4:	2600      	movs	r6, #0
 80048b6:	4d0a      	ldr	r5, [pc, #40]	; (80048e0 <__libc_init_array+0x40>)
 80048b8:	4c0a      	ldr	r4, [pc, #40]	; (80048e4 <__libc_init_array+0x44>)
 80048ba:	1b64      	subs	r4, r4, r5
 80048bc:	10a4      	asrs	r4, r4, #2
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08004930 	.word	0x08004930
 80048dc:	08004930 	.word	0x08004930
 80048e0:	08004930 	.word	0x08004930
 80048e4:	08004934 	.word	0x08004934

080048e8 <memset>:
 80048e8:	4603      	mov	r3, r0
 80048ea:	4402      	add	r2, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
