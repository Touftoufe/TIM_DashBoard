
lvgl_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001530c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051ec  08015418  08015418  00025418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a604  0801a604  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801a604  0801a604  0002a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a60c  0801a60c  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a60c  0801a60c  0002a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a610  0801a610  0002a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801a614  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000486c  2000009c  0801a6b0  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004908  0801a6b0  00034908  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000c68b0  00000000  00000000  000300c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00014555  00000000  00000000  000f6975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004752b  00000000  00000000  0010aeca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003040  00000000  00000000  001523f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008980  00000000  00000000  00155438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d231  00000000  00000000  0015ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007cc2d  00000000  00000000  0018afe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a906b  00000000  00000000  00207c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b0c81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008be8  00000000  00000000  002b0cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  002b98bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08015400 	.word	0x08015400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08015400 	.word	0x08015400

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000180:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000184:	f000 b96e 	b.w	8000464 <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9e08      	ldr	r6, [sp, #32]
 80001a6:	460d      	mov	r5, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	468e      	mov	lr, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	f040 8083 	bne.w	80002b8 <__udivmoddi4+0x118>
 80001b2:	428a      	cmp	r2, r1
 80001b4:	4617      	mov	r7, r2
 80001b6:	d947      	bls.n	8000248 <__udivmoddi4+0xa8>
 80001b8:	fab2 f382 	clz	r3, r2
 80001bc:	b14b      	cbz	r3, 80001d2 <__udivmoddi4+0x32>
 80001be:	f1c3 0120 	rsb	r1, r3, #32
 80001c2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001c6:	fa20 f101 	lsr.w	r1, r0, r1
 80001ca:	409f      	lsls	r7, r3
 80001cc:	ea41 0e0e 	orr.w	lr, r1, lr
 80001d0:	409c      	lsls	r4, r3
 80001d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001d6:	fbbe fcf8 	udiv	ip, lr, r8
 80001da:	fa1f f987 	uxth.w	r9, r7
 80001de:	fb08 e21c 	mls	r2, r8, ip, lr
 80001e2:	fb0c f009 	mul.w	r0, ip, r9
 80001e6:	0c21      	lsrs	r1, r4, #16
 80001e8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001ec:	4290      	cmp	r0, r2
 80001ee:	d90a      	bls.n	8000206 <__udivmoddi4+0x66>
 80001f0:	18ba      	adds	r2, r7, r2
 80001f2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80001f6:	f080 8118 	bcs.w	800042a <__udivmoddi4+0x28a>
 80001fa:	4290      	cmp	r0, r2
 80001fc:	f240 8115 	bls.w	800042a <__udivmoddi4+0x28a>
 8000200:	f1ac 0c02 	sub.w	ip, ip, #2
 8000204:	443a      	add	r2, r7
 8000206:	1a12      	subs	r2, r2, r0
 8000208:	fbb2 f0f8 	udiv	r0, r2, r8
 800020c:	fb08 2210 	mls	r2, r8, r0, r2
 8000210:	fb00 f109 	mul.w	r1, r0, r9
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	42a1      	cmp	r1, r4
 800021c:	d909      	bls.n	8000232 <__udivmoddi4+0x92>
 800021e:	193c      	adds	r4, r7, r4
 8000220:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000224:	f080 8103 	bcs.w	800042e <__udivmoddi4+0x28e>
 8000228:	42a1      	cmp	r1, r4
 800022a:	f240 8100 	bls.w	800042e <__udivmoddi4+0x28e>
 800022e:	3802      	subs	r0, #2
 8000230:	443c      	add	r4, r7
 8000232:	1a64      	subs	r4, r4, r1
 8000234:	2100      	movs	r1, #0
 8000236:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800023a:	b11e      	cbz	r6, 8000244 <__udivmoddi4+0xa4>
 800023c:	2200      	movs	r2, #0
 800023e:	40dc      	lsrs	r4, r3
 8000240:	e9c6 4200 	strd	r4, r2, [r6]
 8000244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000248:	b902      	cbnz	r2, 800024c <__udivmoddi4+0xac>
 800024a:	deff      	udf	#255	; 0xff
 800024c:	fab2 f382 	clz	r3, r2
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14f      	bne.n	80002f4 <__udivmoddi4+0x154>
 8000254:	1a8d      	subs	r5, r1, r2
 8000256:	2101      	movs	r1, #1
 8000258:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800025c:	fa1f f882 	uxth.w	r8, r2
 8000260:	fbb5 fcfe 	udiv	ip, r5, lr
 8000264:	fb0e 551c 	mls	r5, lr, ip, r5
 8000268:	fb08 f00c 	mul.w	r0, r8, ip
 800026c:	0c22      	lsrs	r2, r4, #16
 800026e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000272:	42a8      	cmp	r0, r5
 8000274:	d907      	bls.n	8000286 <__udivmoddi4+0xe6>
 8000276:	197d      	adds	r5, r7, r5
 8000278:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800027c:	d202      	bcs.n	8000284 <__udivmoddi4+0xe4>
 800027e:	42a8      	cmp	r0, r5
 8000280:	f200 80e9 	bhi.w	8000456 <__udivmoddi4+0x2b6>
 8000284:	4694      	mov	ip, r2
 8000286:	1a2d      	subs	r5, r5, r0
 8000288:	fbb5 f0fe 	udiv	r0, r5, lr
 800028c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000290:	fb08 f800 	mul.w	r8, r8, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029a:	45a0      	cmp	r8, r4
 800029c:	d907      	bls.n	80002ae <__udivmoddi4+0x10e>
 800029e:	193c      	adds	r4, r7, r4
 80002a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a4:	d202      	bcs.n	80002ac <__udivmoddi4+0x10c>
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	f200 80d9 	bhi.w	800045e <__udivmoddi4+0x2be>
 80002ac:	4610      	mov	r0, r2
 80002ae:	eba4 0408 	sub.w	r4, r4, r8
 80002b2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002b6:	e7c0      	b.n	800023a <__udivmoddi4+0x9a>
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d908      	bls.n	80002ce <__udivmoddi4+0x12e>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	f000 80b1 	beq.w	8000424 <__udivmoddi4+0x284>
 80002c2:	2100      	movs	r1, #0
 80002c4:	e9c6 0500 	strd	r0, r5, [r6]
 80002c8:	4608      	mov	r0, r1
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d14b      	bne.n	800036e <__udivmoddi4+0x1ce>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0x140>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80b9 	bhi.w	8000452 <__udivmoddi4+0x2b2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0303 	sbc.w	r3, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469e      	mov	lr, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0aa      	beq.n	8000244 <__udivmoddi4+0xa4>
 80002ee:	e9c6 4e00 	strd	r4, lr, [r6]
 80002f2:	e7a7      	b.n	8000244 <__udivmoddi4+0xa4>
 80002f4:	409f      	lsls	r7, r3
 80002f6:	f1c3 0220 	rsb	r2, r3, #32
 80002fa:	40d1      	lsrs	r1, r2
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fa1f f887 	uxth.w	r8, r7
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	fa24 f202 	lsr.w	r2, r4, r2
 8000310:	409d      	lsls	r5, r3
 8000312:	fb00 fc08 	mul.w	ip, r0, r8
 8000316:	432a      	orrs	r2, r5
 8000318:	0c15      	lsrs	r5, r2, #16
 800031a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800031e:	45ac      	cmp	ip, r5
 8000320:	fa04 f403 	lsl.w	r4, r4, r3
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x19a>
 8000326:	197d      	adds	r5, r7, r5
 8000328:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800032c:	f080 808f 	bcs.w	800044e <__udivmoddi4+0x2ae>
 8000330:	45ac      	cmp	ip, r5
 8000332:	f240 808c 	bls.w	800044e <__udivmoddi4+0x2ae>
 8000336:	3802      	subs	r0, #2
 8000338:	443d      	add	r5, r7
 800033a:	eba5 050c 	sub.w	r5, r5, ip
 800033e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000342:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000346:	fb01 f908 	mul.w	r9, r1, r8
 800034a:	b295      	uxth	r5, r2
 800034c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000350:	45a9      	cmp	r9, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x1c4>
 8000354:	197d      	adds	r5, r7, r5
 8000356:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800035a:	d274      	bcs.n	8000446 <__udivmoddi4+0x2a6>
 800035c:	45a9      	cmp	r9, r5
 800035e:	d972      	bls.n	8000446 <__udivmoddi4+0x2a6>
 8000360:	3902      	subs	r1, #2
 8000362:	443d      	add	r5, r7
 8000364:	eba5 0509 	sub.w	r5, r5, r9
 8000368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800036c:	e778      	b.n	8000260 <__udivmoddi4+0xc0>
 800036e:	f1c1 0720 	rsb	r7, r1, #32
 8000372:	408b      	lsls	r3, r1
 8000374:	fa22 fc07 	lsr.w	ip, r2, r7
 8000378:	ea4c 0c03 	orr.w	ip, ip, r3
 800037c:	fa25 f407 	lsr.w	r4, r5, r7
 8000380:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000384:	fbb4 f9fe 	udiv	r9, r4, lr
 8000388:	fa1f f88c 	uxth.w	r8, ip
 800038c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000390:	fa20 f307 	lsr.w	r3, r0, r7
 8000394:	fb09 fa08 	mul.w	sl, r9, r8
 8000398:	408d      	lsls	r5, r1
 800039a:	431d      	orrs	r5, r3
 800039c:	0c2b      	lsrs	r3, r5, #16
 800039e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a2:	45a2      	cmp	sl, r4
 80003a4:	fa02 f201 	lsl.w	r2, r2, r1
 80003a8:	fa00 f301 	lsl.w	r3, r0, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x222>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b6:	d248      	bcs.n	800044a <__udivmoddi4+0x2aa>
 80003b8:	45a2      	cmp	sl, r4
 80003ba:	d946      	bls.n	800044a <__udivmoddi4+0x2aa>
 80003bc:	f1a9 0902 	sub.w	r9, r9, #2
 80003c0:	4464      	add	r4, ip
 80003c2:	eba4 040a 	sub.w	r4, r4, sl
 80003c6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ca:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ce:	fb00 fa08 	mul.w	sl, r0, r8
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x24e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003e4:	d22d      	bcs.n	8000442 <__udivmoddi4+0x2a2>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d92b      	bls.n	8000442 <__udivmoddi4+0x2a2>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c6      	mov	lr, r8
 80003fe:	464d      	mov	r5, r9
 8000400:	d319      	bcc.n	8000436 <__udivmoddi4+0x296>
 8000402:	d016      	beq.n	8000432 <__udivmoddi4+0x292>
 8000404:	b15e      	cbz	r6, 800041e <__udivmoddi4+0x27e>
 8000406:	ebb3 020e 	subs.w	r2, r3, lr
 800040a:	eb64 0405 	sbc.w	r4, r4, r5
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431f      	orrs	r7, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c6 7400 	strd	r7, r4, [r6]
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	4631      	mov	r1, r6
 8000426:	4630      	mov	r0, r6
 8000428:	e70c      	b.n	8000244 <__udivmoddi4+0xa4>
 800042a:	468c      	mov	ip, r1
 800042c:	e6eb      	b.n	8000206 <__udivmoddi4+0x66>
 800042e:	4610      	mov	r0, r2
 8000430:	e6ff      	b.n	8000232 <__udivmoddi4+0x92>
 8000432:	4543      	cmp	r3, r8
 8000434:	d2e6      	bcs.n	8000404 <__udivmoddi4+0x264>
 8000436:	ebb8 0e02 	subs.w	lr, r8, r2
 800043a:	eb69 050c 	sbc.w	r5, r9, ip
 800043e:	3801      	subs	r0, #1
 8000440:	e7e0      	b.n	8000404 <__udivmoddi4+0x264>
 8000442:	4628      	mov	r0, r5
 8000444:	e7d3      	b.n	80003ee <__udivmoddi4+0x24e>
 8000446:	4611      	mov	r1, r2
 8000448:	e78c      	b.n	8000364 <__udivmoddi4+0x1c4>
 800044a:	4681      	mov	r9, r0
 800044c:	e7b9      	b.n	80003c2 <__udivmoddi4+0x222>
 800044e:	4608      	mov	r0, r1
 8000450:	e773      	b.n	800033a <__udivmoddi4+0x19a>
 8000452:	4608      	mov	r0, r1
 8000454:	e749      	b.n	80002ea <__udivmoddi4+0x14a>
 8000456:	f1ac 0c02 	sub.w	ip, ip, #2
 800045a:	443d      	add	r5, r7
 800045c:	e713      	b.n	8000286 <__udivmoddi4+0xe6>
 800045e:	3802      	subs	r0, #2
 8000460:	443c      	add	r4, r7
 8000462:	e724      	b.n	80002ae <__udivmoddi4+0x10e>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <disp_driver_flush>:
//	ili9341_fill_screen(_lcd, ILI9341_BLUE);
	HAL_Delay(100);
}

void disp_driver_flush(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_map)
{
 8000468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800046a:	4605      	mov	r5, r0
 800046c:	4608      	mov	r0, r1
	ili9341_buff(_lcd, (uint16_t *) color_map, area->x1, area->y1, area->x2 - area->x1 + 1, area->y2 - area->y1 + 1);
 800046e:	88c4      	ldrh	r4, [r0, #6]
 8000470:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8000474:	3401      	adds	r4, #1
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	b2a4      	uxth	r4, r4
{
 800047a:	4611      	mov	r1, r2
	ili9341_buff(_lcd, (uint16_t *) color_map, area->x1, area->y1, area->x2 - area->x1 + 1, area->y2 - area->y1 + 1);
 800047c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8000480:	9401      	str	r4, [sp, #4]
 8000482:	8884      	ldrh	r4, [r0, #4]
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <disp_driver_flush+0x38>)
 8000486:	3401      	adds	r4, #1
 8000488:	1aa4      	subs	r4, r4, r2
 800048a:	b2a4      	uxth	r4, r4
 800048c:	9400      	str	r4, [sp, #0]
 800048e:	6800      	ldr	r0, [r0, #0]
 8000490:	f000 fe30 	bl	80010f4 <ili9341_buff>
	/*if(lv_disp_flush_is_last(drv)) */lv_disp_flush_ready(drv);
 8000494:	4628      	mov	r0, r5
}
 8000496:	b003      	add	sp, #12
 8000498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	/*if(lv_disp_flush_is_last(drv)) */lv_disp_flush_ready(drv);
 800049c:	f00e bed6 	b.w	800f24c <lv_disp_flush_ready>
 80004a0:	200000b8 	.word	0x200000b8

080004a4 <disp_driver_init>:
	_lcd = ili9341_new(&hspi1, LCD_RST_GPIO_Port, LCD_RST_Pin, SPI_CS_GPIO_Port, SPI_CS_Pin,
 80004a4:	2110      	movs	r1, #16
{
 80004a6:	b570      	push	{r4, r5, r6, lr}
	_lcd = ili9341_new(&hspi1, LCD_RST_GPIO_Port, LCD_RST_Pin, SPI_CS_GPIO_Port, SPI_CS_Pin,
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <disp_driver_init+0x68>)
{
 80004aa:	b08a      	sub	sp, #40	; 0x28
	_lcd = ili9341_new(&hspi1, LCD_RST_GPIO_Port, LCD_RST_Pin, SPI_CS_GPIO_Port, SPI_CS_Pin,
 80004ac:	2400      	movs	r4, #0
 80004ae:	2201      	movs	r2, #1
 80004b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80004b4:	2120      	movs	r1, #32
 80004b6:	e9cd 4208 	strd	r4, r2, [sp, #32]
 80004ba:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80004be:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80004c2:	9203      	str	r2, [sp, #12]
 80004c4:	9100      	str	r1, [sp, #0]
 80004c6:	4812      	ldr	r0, [pc, #72]	; (8000510 <disp_driver_init+0x6c>)
 80004c8:	4912      	ldr	r1, [pc, #72]	; (8000514 <disp_driver_init+0x70>)
 80004ca:	f000 fb8b 	bl	8000be4 <ili9341_new>
	lv_disp_draw_buf_init(&buf, disp_buf1, NULL, _lcd->screen_size.width * 10);
 80004ce:	220a      	movs	r2, #10
 80004d0:	8b83      	ldrh	r3, [r0, #28]
	_lcd = ili9341_new(&hspi1, LCD_RST_GPIO_Port, LCD_RST_Pin, SPI_CS_GPIO_Port, SPI_CS_Pin,
 80004d2:	4d11      	ldr	r5, [pc, #68]	; (8000518 <disp_driver_init+0x74>)
	lv_disp_draw_buf_init(&buf, disp_buf1, NULL, _lcd->screen_size.width * 10);
 80004d4:	4e11      	ldr	r6, [pc, #68]	; (800051c <disp_driver_init+0x78>)
 80004d6:	4353      	muls	r3, r2
 80004d8:	4622      	mov	r2, r4
	lv_disp_drv_init(&disp_drv);
 80004da:	4c11      	ldr	r4, [pc, #68]	; (8000520 <disp_driver_init+0x7c>)
	lv_disp_draw_buf_init(&buf, disp_buf1, NULL, _lcd->screen_size.width * 10);
 80004dc:	4911      	ldr	r1, [pc, #68]	; (8000524 <disp_driver_init+0x80>)
	_lcd = ili9341_new(&hspi1, LCD_RST_GPIO_Port, LCD_RST_Pin, SPI_CS_GPIO_Port, SPI_CS_Pin,
 80004de:	6028      	str	r0, [r5, #0]
	lv_disp_draw_buf_init(&buf, disp_buf1, NULL, _lcd->screen_size.width * 10);
 80004e0:	4630      	mov	r0, r6
 80004e2:	f00e fdfb 	bl	800f0dc <lv_disp_draw_buf_init>
	lv_disp_drv_init(&disp_drv);
 80004e6:	4620      	mov	r0, r4
 80004e8:	f00e fdd4 	bl	800f094 <lv_disp_drv_init>
	disp_drv.flush_cb = disp_driver_flush;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <disp_driver_init+0x84>)
	lv_disp_drv_register(&disp_drv);
 80004ee:	4620      	mov	r0, r4
	disp_drv.flush_cb = disp_driver_flush;
 80004f0:	6163      	str	r3, [r4, #20]
	disp_drv.hor_res = _lcd->screen_size.width;
 80004f2:	682b      	ldr	r3, [r5, #0]
	disp_drv.draw_buf = &buf;
 80004f4:	60e6      	str	r6, [r4, #12]
	disp_drv.hor_res = _lcd->screen_size.width;
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	6023      	str	r3, [r4, #0]
	lv_disp_drv_register(&disp_drv);
 80004fa:	f00e fdfd 	bl	800f0f8 <lv_disp_drv_register>
	HAL_Delay(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
}
 8000500:	b00a      	add	sp, #40	; 0x28
 8000502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(100);
 8000506:	f012 be23 	b.w	8013150 <HAL_Delay>
 800050a:	bf00      	nop
 800050c:	40011000 	.word	0x40011000
 8000510:	200044fc 	.word	0x200044fc
 8000514:	40010c00 	.word	0x40010c00
 8000518:	200000b8 	.word	0x200000b8
 800051c:	200000bc 	.word	0x200000bc
 8000520:	200019d8 	.word	0x200019d8
 8000524:	200000d8 	.word	0x200000d8
 8000528:	08000469 	.word	0x08000469

0800052c <getSpeed>:

///////////////////// ANIMATIONS ////////////////////

///////////////////// FUNCTIONS2 ////////////////////
void getSpeed(lv_timer_t * timer)
{
 800052c:	b538      	push	{r3, r4, r5, lr}
 800052e:	4604      	mov	r4, r0
    static uint8_t v = 0;
    lv_snprintf(timer->user_data, sizeof(timer->user_data), "%d", v);
 8000530:	4d0a      	ldr	r5, [pc, #40]	; (800055c <getSpeed+0x30>)
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <getSpeed+0x34>)
 8000534:	2104      	movs	r1, #4
 8000536:	782b      	ldrb	r3, [r5, #0]
 8000538:	68c0      	ldr	r0, [r0, #12]
 800053a:	f010 fa57 	bl	80109ec <lv_snprintf>
    lv_label_set_text(Label3, timer->user_data);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <getSpeed+0x38>)
 8000540:	68e1      	ldr	r1, [r4, #12]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	f012 fd2a 	bl	8012f9c <lv_label_set_text>
    
    //if(v<10) lv_obj_align(Label3, LV_ALIGN_CENTER, 0, 0);
    v = ++v % 100;
 8000548:	2164      	movs	r1, #100	; 0x64
 800054a:	782b      	ldrb	r3, [r5, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	fbb3 f2f1 	udiv	r2, r3, r1
 8000554:	fb01 3312 	mls	r3, r1, r2, r3
 8000558:	702b      	strb	r3, [r5, #0]
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}
 800055c:	20001a44 	.word	0x20001a44
 8000560:	08016f23 	.word	0x08016f23
 8000564:	200043f8 	.word	0x200043f8

08000568 <BuildPages>:
///////////////////// SCREENS ////////////////////
void BuildPages(void)
{
 8000568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Screen1 = lv_obj_create(NULL);
 800056c:	2000      	movs	r0, #0
 800056e:	f002 f8cb 	bl	8002708 <lv_obj_create>
 8000572:	4c6d      	ldr	r4, [pc, #436]	; (8000728 <BuildPages+0x1c0>)

    Object1 = lv_obj_create(Screen1);
 8000574:	4e6d      	ldr	r6, [pc, #436]	; (800072c <BuildPages+0x1c4>)
    Screen1 = lv_obj_create(NULL);
 8000576:	6020      	str	r0, [r4, #0]
    Object1 = lv_obj_create(Screen1);
 8000578:	f002 f8c6 	bl	8002708 <lv_obj_create>
    lv_obj_set_size(Object1, 320, 240);  // force: 0
 800057c:	22f0      	movs	r2, #240	; 0xf0
 800057e:	f44f 71a0 	mov.w	r1, #320	; 0x140
    Object1 = lv_obj_create(Screen1);
 8000582:	6030      	str	r0, [r6, #0]
    lv_obj_set_size(Object1, 320, 240);  // force: 0
 8000584:	f002 ff3b 	bl	80033fe <lv_obj_set_size>
    lv_obj_align(Object1, LV_ALIGN_CENTER, 0, 0); // force: 320
 8000588:	2300      	movs	r3, #0

    static lv_style_t style_Object1;
    lv_style_init(&style_Object1);
 800058a:	4d69      	ldr	r5, [pc, #420]	; (8000730 <BuildPages+0x1c8>)
    lv_obj_align(Object1, LV_ALIGN_CENTER, 0, 0); // force: 320
 800058c:	461a      	mov	r2, r3
 800058e:	2109      	movs	r1, #9
 8000590:	6830      	ldr	r0, [r6, #0]
 8000592:	f002 ff8f 	bl	80034b4 <lv_obj_align>
    lv_style_init(&style_Object1);
 8000596:	4628      	mov	r0, r5
 8000598:	f010 fa3c 	bl	8010a14 <lv_style_init>
    lv_style_set_bg_color(&style_Object1, lv_color_hex(2580));
 800059c:	4628      	mov	r0, r5
 800059e:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80005a2:	f010 fbc7 	bl	8010d34 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&style_Object1, 255);
 80005a6:	4628      	mov	r0, r5
 80005a8:	21ff      	movs	r1, #255	; 0xff
 80005aa:	f010 fbcc 	bl	8010d46 <lv_style_set_bg_opa>
    lv_obj_add_style(Object1, &style_Object1, 0);  
 80005ae:	2200      	movs	r2, #0
 80005b0:	4629      	mov	r1, r5
 80005b2:	6830      	ldr	r0, [r6, #0]
 80005b4:	f005 f82e 	bl	8005614 <lv_obj_add_style>

    Image2 = lv_img_create(Screen1);
 80005b8:	6820      	ldr	r0, [r4, #0]
 80005ba:	f011 fb01 	bl	8011bc0 <lv_img_create>
 80005be:	4d5d      	ldr	r5, [pc, #372]	; (8000734 <BuildPages+0x1cc>)
    lv_img_set_src(Image2, &light);
 80005c0:	495d      	ldr	r1, [pc, #372]	; (8000738 <BuildPages+0x1d0>)
    Image2 = lv_img_create(Screen1);
 80005c2:	6028      	str	r0, [r5, #0]
    lv_img_set_src(Image2, &light);
 80005c4:	f011 fb08 	bl	8011bd8 <lv_img_set_src>
    //lv_obj_set_size(Image2, 226, 217);
    lv_obj_align(Image2, LV_ALIGN_TOP_MID, 0, 20);
 80005c8:	2314      	movs	r3, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	6828      	ldr	r0, [r5, #0]
 80005d0:	f002 ff70 	bl	80034b4 <lv_obj_align>

    Image3 = lv_img_create(Screen1);
 80005d4:	6820      	ldr	r0, [r4, #0]
 80005d6:	f011 faf3 	bl	8011bc0 <lv_img_create>
    lv_img_set_src(Image3, &TL);
 80005da:	4e58      	ldr	r6, [pc, #352]	; (800073c <BuildPages+0x1d4>)
    Image3 = lv_img_create(Screen1);
 80005dc:	4d58      	ldr	r5, [pc, #352]	; (8000740 <BuildPages+0x1d8>)
    lv_img_set_src(Image3, &TL);
 80005de:	4631      	mov	r1, r6
    Image3 = lv_img_create(Screen1);
 80005e0:	6028      	str	r0, [r5, #0]
    lv_img_set_src(Image3, &TL);
 80005e2:	f011 faf9 	bl	8011bd8 <lv_img_set_src>
    //lv_obj_set_size(Image2, 226, 217);
    lv_obj_align(Image3, LV_ALIGN_RIGHT_MID, -20, 0);
 80005e6:	2300      	movs	r3, #0
 80005e8:	f06f 0213 	mvn.w	r2, #19
 80005ec:	2108      	movs	r1, #8
 80005ee:	6828      	ldr	r0, [r5, #0]
 80005f0:	f002 ff60 	bl	80034b4 <lv_obj_align>

    Image4 = lv_img_create(Screen1);
 80005f4:	6820      	ldr	r0, [r4, #0]
 80005f6:	f011 fae3 	bl	8011bc0 <lv_img_create>
 80005fa:	4d52      	ldr	r5, [pc, #328]	; (8000744 <BuildPages+0x1dc>)
    lv_img_set_src(Image4, &TL);
 80005fc:	4631      	mov	r1, r6
    Image4 = lv_img_create(Screen1);
 80005fe:	6028      	str	r0, [r5, #0]
    lv_img_set_src(Image4, &TL);
 8000600:	f011 faea 	bl	8011bd8 <lv_img_set_src>
    lv_img_set_angle(Image4, 1800);
 8000604:	6828      	ldr	r0, [r5, #0]
 8000606:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800060a:	f011 feed 	bl	80123e8 <lv_img_set_angle>
    //lv_obj_set_size(Image2, 226, 217);
    lv_obj_align(Image4, LV_ALIGN_LEFT_MID, 20, 0);
 800060e:	2300      	movs	r3, #0
 8000610:	2214      	movs	r2, #20
 8000612:	2107      	movs	r1, #7
 8000614:	6828      	ldr	r0, [r5, #0]
 8000616:	f002 ff4d 	bl	80034b4 <lv_obj_align>

    Label3 = lv_label_create(Screen1);
 800061a:	6820      	ldr	r0, [r4, #0]
 800061c:	f012 fcb2 	bl	8012f84 <lv_label_create>
 8000620:	4e49      	ldr	r6, [pc, #292]	; (8000748 <BuildPages+0x1e0>)
    lv_label_set_long_mode(Label3, LV_LABEL_LONG_WRAP);
    strcpy(Speed, "0");
 8000622:	4f4a      	ldr	r7, [pc, #296]	; (800074c <BuildPages+0x1e4>)
    lv_label_set_long_mode(Label3, LV_LABEL_LONG_WRAP);
 8000624:	2100      	movs	r1, #0
    Label3 = lv_label_create(Screen1);
 8000626:	6030      	str	r0, [r6, #0]
    lv_label_set_long_mode(Label3, LV_LABEL_LONG_WRAP);
 8000628:	f012 fcf4 	bl	8013014 <lv_label_set_long_mode>
    strcpy(Speed, "0");
 800062c:	4638      	mov	r0, r7
 800062e:	4948      	ldr	r1, [pc, #288]	; (8000750 <BuildPages+0x1e8>)
 8000630:	f014 fed0 	bl	80153d4 <strcpy>
    lv_label_set_text(Label3, Speed);
 8000634:	4639      	mov	r1, r7
 8000636:	6830      	ldr	r0, [r6, #0]
 8000638:	f012 fcb0 	bl	8012f9c <lv_label_set_text>
    lv_obj_align(Label3, LV_ALIGN_CENTER, 0, 0); // force: 55
 800063c:	2300      	movs	r3, #0
 800063e:	f647 7885 	movw	r8, #32645	; 0x7f85

    static lv_style_t style_Label3;
    lv_style_init(&style_Label3);
 8000642:	4d44      	ldr	r5, [pc, #272]	; (8000754 <BuildPages+0x1ec>)
    lv_obj_align(Label3, LV_ALIGN_CENTER, 0, 0); // force: 55
 8000644:	461a      	mov	r2, r3
 8000646:	2109      	movs	r1, #9
 8000648:	6830      	ldr	r0, [r6, #0]
 800064a:	f002 ff33 	bl	80034b4 <lv_obj_align>
    lv_style_init(&style_Label3);
 800064e:	4628      	mov	r0, r5
 8000650:	f010 f9e0 	bl	8010a14 <lv_style_init>
    lv_style_set_text_color(&style_Label3, lv_color_hex(129 * 256 * 256 + 172 * 256 + 255));
 8000654:	4641      	mov	r1, r8
 8000656:	4628      	mov	r0, r5
 8000658:	f010 fb79 	bl	8010d4e <lv_style_set_text_color>
    lv_style_set_text_opa(&style_Label3, 255);
 800065c:	4628      	mov	r0, r5
 800065e:	21ff      	movs	r1, #255	; 0xff
 8000660:	f010 fb7f 	bl	8010d62 <lv_style_set_text_opa>
    lv_style_set_text_font(&style_Label3, &f_speed_2);
 8000664:	4628      	mov	r0, r5
 8000666:	493c      	ldr	r1, [pc, #240]	; (8000758 <BuildPages+0x1f0>)
 8000668:	f010 fb80 	bl	8010d6c <lv_style_set_text_font>
    lv_obj_add_style(Label3, &style_Label3, 0);  
 800066c:	2200      	movs	r2, #0
 800066e:	4629      	mov	r1, r5
 8000670:	6830      	ldr	r0, [r6, #0]
 8000672:	f004 ffcf 	bl	8005614 <lv_obj_add_style>

    Label4 = lv_label_create(Screen1);
 8000676:	6820      	ldr	r0, [r4, #0]
 8000678:	f012 fc84 	bl	8012f84 <lv_label_create>
 800067c:	4e37      	ldr	r6, [pc, #220]	; (800075c <BuildPages+0x1f4>)
    lv_label_set_long_mode(Label4, LV_LABEL_LONG_WRAP);
 800067e:	2100      	movs	r1, #0
    lv_label_set_text(Label4, "KM/H");
    lv_obj_align(Label4, LV_ALIGN_CENTER, 30, 35); // force: 55

    static lv_style_t style_Label4;
    lv_style_init(&style_Label4);
 8000680:	4d37      	ldr	r5, [pc, #220]	; (8000760 <BuildPages+0x1f8>)
    Label4 = lv_label_create(Screen1);
 8000682:	6030      	str	r0, [r6, #0]
    lv_label_set_long_mode(Label4, LV_LABEL_LONG_WRAP);
 8000684:	f012 fcc6 	bl	8013014 <lv_label_set_long_mode>
    lv_label_set_text(Label4, "KM/H");
 8000688:	6830      	ldr	r0, [r6, #0]
 800068a:	4936      	ldr	r1, [pc, #216]	; (8000764 <BuildPages+0x1fc>)
 800068c:	f012 fc86 	bl	8012f9c <lv_label_set_text>
    lv_obj_align(Label4, LV_ALIGN_CENTER, 30, 35); // force: 55
 8000690:	2323      	movs	r3, #35	; 0x23
 8000692:	221e      	movs	r2, #30
 8000694:	2109      	movs	r1, #9
 8000696:	6830      	ldr	r0, [r6, #0]
 8000698:	f002 ff0c 	bl	80034b4 <lv_obj_align>
    lv_style_init(&style_Label4);
 800069c:	4628      	mov	r0, r5
 800069e:	f010 f9b9 	bl	8010a14 <lv_style_init>
    lv_style_set_text_color(&style_Label4, lv_color_hex(129 * 256 * 256 + 172 * 256 + 255));
    lv_style_set_text_opa(&style_Label4, 255);
    lv_style_set_text_font(&style_Label4, &sport);
 80006a2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8000778 <BuildPages+0x210>
    lv_style_set_text_color(&style_Label4, lv_color_hex(129 * 256 * 256 + 172 * 256 + 255));
 80006a6:	4641      	mov	r1, r8
 80006a8:	4628      	mov	r0, r5
 80006aa:	f010 fb50 	bl	8010d4e <lv_style_set_text_color>
    lv_style_set_text_opa(&style_Label4, 255);
 80006ae:	4628      	mov	r0, r5
 80006b0:	21ff      	movs	r1, #255	; 0xff
 80006b2:	f010 fb56 	bl	8010d62 <lv_style_set_text_opa>
    lv_style_set_text_font(&style_Label4, &sport);
 80006b6:	4649      	mov	r1, r9
 80006b8:	4628      	mov	r0, r5
 80006ba:	f010 fb57 	bl	8010d6c <lv_style_set_text_font>
    lv_obj_add_style(Label4, &style_Label4, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	4629      	mov	r1, r5
 80006c2:	6830      	ldr	r0, [r6, #0]
 80006c4:	f004 ffa6 	bl	8005614 <lv_obj_add_style>

    Label5 = lv_label_create(Screen1);
 80006c8:	6820      	ldr	r0, [r4, #0]
 80006ca:	f012 fc5b 	bl	8012f84 <lv_label_create>
 80006ce:	4d26      	ldr	r5, [pc, #152]	; (8000768 <BuildPages+0x200>)
    lv_label_set_long_mode(Label5, LV_LABEL_LONG_WRAP);
 80006d0:	2100      	movs	r1, #0
    lv_label_set_text(Label5, "4");
    lv_obj_align(Label5, LV_ALIGN_BOTTOM_MID, 0, -10); // force: 55

    static lv_style_t style_Label5;
    lv_style_init(&style_Label5);
 80006d2:	4c26      	ldr	r4, [pc, #152]	; (800076c <BuildPages+0x204>)
    Label5 = lv_label_create(Screen1);
 80006d4:	6028      	str	r0, [r5, #0]
    lv_label_set_long_mode(Label5, LV_LABEL_LONG_WRAP);
 80006d6:	f012 fc9d 	bl	8013014 <lv_label_set_long_mode>
    lv_label_set_text(Label5, "4");
 80006da:	6828      	ldr	r0, [r5, #0]
 80006dc:	4924      	ldr	r1, [pc, #144]	; (8000770 <BuildPages+0x208>)
 80006de:	f012 fc5d 	bl	8012f9c <lv_label_set_text>
    lv_obj_align(Label5, LV_ALIGN_BOTTOM_MID, 0, -10); // force: 55
 80006e2:	f06f 0309 	mvn.w	r3, #9
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	6828      	ldr	r0, [r5, #0]
 80006ec:	f002 fee2 	bl	80034b4 <lv_obj_align>
    lv_style_init(&style_Label5);
 80006f0:	4620      	mov	r0, r4
 80006f2:	f010 f98f 	bl	8010a14 <lv_style_init>
    lv_style_set_text_color(&style_Label5, lv_color_hex(129 * 256 * 256 + 172 * 256 + 255));
 80006f6:	4641      	mov	r1, r8
 80006f8:	4620      	mov	r0, r4
 80006fa:	f010 fb28 	bl	8010d4e <lv_style_set_text_color>
    lv_style_set_text_opa(&style_Label5, 255);
 80006fe:	4620      	mov	r0, r4
 8000700:	21ff      	movs	r1, #255	; 0xff
 8000702:	f010 fb2e 	bl	8010d62 <lv_style_set_text_opa>
    lv_style_set_text_font(&style_Label5, &sport);
 8000706:	4649      	mov	r1, r9
 8000708:	4620      	mov	r0, r4
 800070a:	f010 fb2f 	bl	8010d6c <lv_style_set_text_font>
    lv_obj_add_style(Label5, &style_Label5, 0);
 800070e:	4621      	mov	r1, r4
 8000710:	6828      	ldr	r0, [r5, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	f004 ff7e 	bl	8005614 <lv_obj_add_style>

    lv_timer_t * getSpeed_timer = lv_timer_create(getSpeed, 100, Speed);
 8000718:	463a      	mov	r2, r7


}
 800071a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_timer_t * getSpeed_timer = lv_timer_create(getSpeed, 100, Speed);
 800071e:	2164      	movs	r1, #100	; 0x64
 8000720:	4814      	ldr	r0, [pc, #80]	; (8000774 <BuildPages+0x20c>)
 8000722:	f010 bb37 	b.w	8010d94 <lv_timer_create>
 8000726:	bf00      	nop
 8000728:	200043ec 	.word	0x200043ec
 800072c:	200043e0 	.word	0x200043e0
 8000730:	20001a3c 	.word	0x20001a3c
 8000734:	200043f4 	.word	0x200043f4
 8000738:	08019714 	.word	0x08019714
 800073c:	08015468 	.word	0x08015468
 8000740:	200043e8 	.word	0x200043e8
 8000744:	200043dc 	.word	0x200043dc
 8000748:	200043f8 	.word	0x200043f8
 800074c:	200043d8 	.word	0x200043d8
 8000750:	08016f26 	.word	0x08016f26
 8000754:	20001a24 	.word	0x20001a24
 8000758:	08016f44 	.word	0x08016f44
 800075c:	200043f0 	.word	0x200043f0
 8000760:	20001a2c 	.word	0x20001a2c
 8000764:	08016f28 	.word	0x08016f28
 8000768:	200043e4 	.word	0x200043e4
 800076c:	20001a34 	.word	0x20001a34
 8000770:	08016f2d 	.word	0x08016f2d
 8000774:	0800052d 	.word	0x0800052d
 8000778:	0801a328 	.word	0x0801a328

0800077c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800077c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x48>)
 8000780:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000784:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8000786:	6002      	str	r2, [r0, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000788:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800078c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000790:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000792:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000794:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	f012 ff09 	bl	80135b4 <HAL_ADC_Init>
 80007a2:	b108      	cbz	r0, 80007a8 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 80007a4:	f000 fd8a 	bl	80012bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a8:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ae:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_ADC1_Init+0x48>)
 80007b2:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	f012 fd8f 	bl	80132d8 <HAL_ADC_ConfigChannel>
 80007ba:	b108      	cbz	r0, 80007c0 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 80007bc:	f000 fd7e 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	b004      	add	sp, #16
 80007c2:	bd10      	pop	{r4, pc}
 80007c4:	200043fc 	.word	0x200043fc
 80007c8:	40012400 	.word	0x40012400

080007cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007cc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	2410      	movs	r4, #16
{
 80007d0:	4605      	mov	r5, r0
 80007d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	4622      	mov	r2, r4
 80007d6:	2100      	movs	r1, #0
 80007d8:	a802      	add	r0, sp, #8
 80007da:	f014 fd89 	bl	80152f0 <memset>
  if(adcHandle->Instance==ADC1)
 80007de:	682a      	ldr	r2, [r5, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <HAL_ADC_MspInit+0x94>)
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d13a      	bne.n	800085c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80007ea:	6999      	ldr	r1, [r3, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	481d      	ldr	r0, [pc, #116]	; (8000864 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ee:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80007f2:	6199      	str	r1, [r3, #24]
 80007f4:	6999      	ldr	r1, [r3, #24]
 80007f6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80007fa:	9100      	str	r1, [sp, #0]
 80007fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	6999      	ldr	r1, [r3, #24]
 8000800:	f041 0104 	orr.w	r1, r1, #4
 8000804:	6199      	str	r1, [r3, #24]
 8000806:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000814:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f013 fbac 	bl	8013f74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081c:	2300      	movs	r3, #0
    hdma_adc1.Instance = DMA1_Channel1;
 800081e:	4c12      	ldr	r4, [pc, #72]	; (8000868 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000822:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000824:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082c:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000830:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000834:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000836:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800083c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800083e:	f013 fa99 	bl	8013d74 <HAL_DMA_Init>
 8000842:	b108      	cbz	r0, 8000848 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8000844:	f000 fd3a 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800084c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084e:	4611      	mov	r1, r2
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000850:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000852:	f013 fa39 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000856:	2012      	movs	r0, #18
 8000858:	f013 fa68 	bl	8013d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800085c:	b007      	add	sp, #28
 800085e:	bd30      	pop	{r4, r5, pc}
 8000860:	40012400 	.word	0x40012400
 8000864:	40010800 	.word	0x40010800
 8000868:	2000442c 	.word	0x2000442c
 800086c:	40020008 	.word	0x40020008

08000870 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000870:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 9;
 8000872:	2309      	movs	r3, #9
  hcan.Instance = CAN1;
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 9;
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <MX_CAN_Init+0x38>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000878:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
  hcan.Init.Prescaler = 9;
 800087c:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000880:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000882:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000886:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000888:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800088e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000892:	f012 ff0e 	bl	80136b2 <HAL_CAN_Init>
 8000896:	b118      	cbz	r0, 80008a0 <MX_CAN_Init+0x30>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800089c:	f000 bd0e 	b.w	80012bc <Error_Handler>
}
 80008a0:	bd08      	pop	{r3, pc}
 80008a2:	bf00      	nop
 80008a4:	20004470 	.word	0x20004470
 80008a8:	40006400 	.word	0x40006400

080008ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008ac:	b510      	push	{r4, lr}
 80008ae:	4604      	mov	r4, r0
 80008b0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	2210      	movs	r2, #16
 80008b4:	2100      	movs	r1, #0
 80008b6:	a802      	add	r0, sp, #8
 80008b8:	f014 fd1a 	bl	80152f0 <memset>
  if(canHandle->Instance==CAN1)
 80008bc:	6822      	ldr	r2, [r4, #0]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_CAN_MspInit+0x90>)
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d138      	bne.n	8000936 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80008c8:	69da      	ldr	r2, [r3, #28]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80008d0:	61da      	str	r2, [r3, #28]
 80008d2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <HAL_CAN_MspInit+0x94>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008d6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	f042 0204 	orr.w	r2, r2, #4
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f013 fb3a 	bl	8013f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000904:	2302      	movs	r3, #2
 8000906:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <HAL_CAN_MspInit+0x94>)
 800090e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f013 fb2f 	bl	8013f74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000916:	4622      	mov	r2, r4
 8000918:	4621      	mov	r1, r4
 800091a:	2014      	movs	r0, #20
 800091c:	f013 f9d4 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000920:	2014      	movs	r0, #20
 8000922:	f013 fa03 	bl	8013d2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000926:	2015      	movs	r0, #21
 8000928:	4622      	mov	r2, r4
 800092a:	4621      	mov	r1, r4
 800092c:	f013 f9cc 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000930:	2015      	movs	r0, #21
 8000932:	f013 f9fb 	bl	8013d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000936:	b006      	add	sp, #24
 8000938:	bd10      	pop	{r4, pc}
 800093a:	bf00      	nop
 800093c:	40006400 	.word	0x40006400
 8000940:	40010800 	.word	0x40010800

08000944 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_DMA_Init+0x78>)
{
 8000946:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000948:	695a      	ldr	r2, [r3, #20]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800094a:	481d      	ldr	r0, [pc, #116]	; (80009c0 <MX_DMA_Init+0x7c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094c:	f042 0201 	orr.w	r2, r2, #1
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	695b      	ldr	r3, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_DMA_Init+0x80>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800095e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000966:	e9c0 2300 	strd	r2, r3, [r0]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_DISABLE;
 800096a:	2300      	movs	r3, #0
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 8000970:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000974:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000978:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800097c:	f013 f9fa 	bl	8013d74 <HAL_DMA_Init>
 8000980:	b108      	cbz	r0, 8000986 <MX_DMA_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fc9b 	bl	80012bc <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	200b      	movs	r0, #11
 800098a:	4611      	mov	r1, r2
 800098c:	f013 f99c 	bl	8013cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000990:	200b      	movs	r0, #11
 8000992:	f013 f9cb 	bl	8013d2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	200c      	movs	r0, #12
 800099a:	4611      	mov	r1, r2
 800099c:	f013 f994 	bl	8013cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009a0:	200c      	movs	r0, #12
 80009a2:	f013 f9c3 	bl	8013d2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	200d      	movs	r0, #13
 80009aa:	4611      	mov	r1, r2
 80009ac:	f013 f98c 	bl	8013cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009b0:	200d      	movs	r0, #13

}
 80009b2:	b003      	add	sp, #12
 80009b4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009b8:	f013 b9b8 	b.w	8013d2c <HAL_NVIC_EnableIRQ>
 80009bc:	40021000 	.word	0x40021000
 80009c0:	20004498 	.word	0x20004498
 80009c4:	4002001c 	.word	0x4002001c

080009c8 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	2210      	movs	r2, #16
{
 80009ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	eb0d 0002 	add.w	r0, sp, r2
 80009d4:	2100      	movs	r1, #0
 80009d6:	f014 fc8b 	bl	80152f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0xec>)
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009e0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	f042 0220 	orr.w	r2, r2, #32
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80009ea:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8000ac0 <MX_GPIO_Init+0xf8>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	f002 0220 	and.w	r2, r2, #32
 80009f2:	9200      	str	r2, [sp, #0]
 80009f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80009f8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8000ac4 <MX_GPIO_Init+0xfc>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	f042 0204 	orr.w	r2, r2, #4
 8000a00:	619a      	str	r2, [r3, #24]
 8000a02:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000a04:	4e2c      	ldr	r6, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	f002 0204 	and.w	r2, r2, #4
 8000a0a:	9201      	str	r2, [sp, #4]
 8000a0c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a10:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	f042 0210 	orr.w	r2, r2, #16
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a1a:	f241 2130 	movw	r1, #4656	; 0x1230
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	f002 0210 	and.w	r2, r2, #16
 8000a22:	9202      	str	r2, [sp, #8]
 8000a24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	f042 0208 	orr.w	r2, r2, #8
 8000a2e:	619a      	str	r2, [r3, #24]
 8000a30:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	9303      	str	r3, [sp, #12]
 8000a3a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a3c:	f013 fb7c 	bl	8014138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000a40:	4640      	mov	r0, r8
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	f013 fb77 	bl	8014138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	f013 fb71 	bl	8014138 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_GPIO_Init+0xf4>)
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8000a58:	4630      	mov	r0, r6
 8000a5a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a5c:	e9cd 5304 	strd	r5, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f013 fa87 	bl	8013f74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DC_Pin|SPI_CS_Pin|wiper_power_Pin|LED_Pin;
 8000a66:	f241 2330 	movw	r3, #4656	; 0x1230
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	4648      	mov	r0, r9
 8000a6c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f013 fa7d 	bl	8013f74 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f013 fa75 	bl	8013f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	4630      	mov	r0, r6
 8000a90:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f013 fa6b 	bl	8013f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	4621      	mov	r1, r4
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f013 f910 	bl	8013cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f013 f93f 	bl	8013d2c <HAL_NVIC_EnableIRQ>

}
 8000aae:	b009      	add	sp, #36	; 0x24
 8000ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	10310000 	.word	0x10310000
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <ili9341_spi_tft_select>:
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 8000ac8:	8a01      	ldrh	r1, [r0, #16]
 8000aca:	2200      	movs	r2, #0
 8000acc:	68c0      	ldr	r0, [r0, #12]
 8000ace:	f013 bb33 	b.w	8014138 <HAL_GPIO_WritePin>

08000ad2 <ili9341_spi_tft_release>:
}

void ili9341_spi_tft_release(ili9341_t *lcd)
{
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 8000ad2:	8a01      	ldrh	r1, [r0, #16]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	68c0      	ldr	r0, [r0, #12]
 8000ad8:	f013 bb2e 	b.w	8014138 <HAL_GPIO_WritePin>

08000adc <ili9341_spi_touch_select>:
}

void ili9341_spi_touch_select(ili9341_t *lcd)
{
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 8000adc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6a00      	ldr	r0, [r0, #32]
 8000ae2:	f013 bb29 	b.w	8014138 <HAL_GPIO_WritePin>

08000ae6 <ili9341_spi_touch_release>:
}

void ili9341_spi_touch_release(ili9341_t *lcd)
{
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 8000ae6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8000ae8:	2201      	movs	r2, #1
 8000aea:	6a00      	ldr	r0, [r0, #32]
 8000aec:	f013 bb24 	b.w	8014138 <HAL_GPIO_WritePin>

08000af0 <ili9341_spi_slave_select>:
}

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
  switch (spi_slave) {
 8000af0:	b111      	cbz	r1, 8000af8 <ili9341_spi_slave_select+0x8>
 8000af2:	2901      	cmp	r1, #1
 8000af4:	d002      	beq.n	8000afc <ili9341_spi_slave_select+0xc>
 8000af6:	4770      	bx	lr
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 8000af8:	f7ff bfe6 	b.w	8000ac8 <ili9341_spi_tft_select>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 8000afc:	f7ff bfee 	b.w	8000adc <ili9341_spi_touch_select>

08000b00 <ili9341_spi_slave_release>:
}

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
  switch (spi_slave) {
 8000b00:	b111      	cbz	r1, 8000b08 <ili9341_spi_slave_release+0x8>
 8000b02:	2901      	cmp	r1, #1
 8000b04:	d002      	beq.n	8000b0c <ili9341_spi_slave_release+0xc>
 8000b06:	4770      	bx	lr

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 8000b08:	f7ff bfe3 	b.w	8000ad2 <ili9341_spi_tft_release>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 8000b0c:	f7ff bfeb 	b.w	8000ae6 <ili9341_spi_touch_release>

08000b10 <ili9341_spi_write_command>:
  }
}

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8000b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __SLAVE_SELECT(lcd, spi_slave);
 8000b12:	b2ce      	uxtb	r6, r1
 8000b14:	2e01      	cmp	r6, #1
{
 8000b16:	4604      	mov	r4, r0
 8000b18:	460d      	mov	r5, r1
 8000b1a:	f88d 2007 	strb.w	r2, [sp, #7]
  __SLAVE_SELECT(lcd, spi_slave);
 8000b1e:	d801      	bhi.n	8000b24 <ili9341_spi_write_command+0x14>
 8000b20:	f7ff ffe6 	bl	8000af0 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8000b24:	2200      	movs	r2, #0
 8000b26:	8b21      	ldrh	r1, [r4, #24]
 8000b28:	6960      	ldr	r0, [r4, #20]
 8000b2a:	f013 fb05 	bl	8014138 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b32:	2201      	movs	r2, #1
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	f10d 0107 	add.w	r1, sp, #7
 8000b3a:	f013 febd 	bl	80148b8 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000b3e:	2e01      	cmp	r6, #1
 8000b40:	d803      	bhi.n	8000b4a <ili9341_spi_write_command+0x3a>
 8000b42:	4629      	mov	r1, r5
 8000b44:	4620      	mov	r0, r4
 8000b46:	f7ff ffdb 	bl	8000b00 <ili9341_spi_slave_release>
}
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}

08000b4e <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8000b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __SLAVE_SELECT(lcd, spi_slave);
 8000b52:	fa5f f881 	uxtb.w	r8, r1
 8000b56:	f1b8 0f01 	cmp.w	r8, #1
{
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	460d      	mov	r5, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	461e      	mov	r6, r3
  __SLAVE_SELECT(lcd, spi_slave);
 8000b62:	d801      	bhi.n	8000b68 <ili9341_spi_write_data+0x1a>
 8000b64:	f7ff ffc4 	bl	8000af0 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	8b21      	ldrh	r1, [r4, #24]
 8000b6c:	6960      	ldr	r0, [r4, #20]
 8000b6e:	f013 fae3 	bl	8014138 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	463a      	mov	r2, r7
 8000b78:	4631      	mov	r1, r6
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	f013 fe9c 	bl	80148b8 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000b80:	f1b8 0f01 	cmp.w	r8, #1
 8000b84:	d805      	bhi.n	8000b92 <ili9341_spi_write_data+0x44>
 8000b86:	4629      	mov	r1, r5
 8000b88:	4620      	mov	r0, r4
}
 8000b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __SLAVE_RELEASE(lcd, spi_slave);
 8000b8e:	f7ff bfb7 	b.w	8000b00 <ili9341_spi_slave_release>
}
 8000b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b96 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8000b96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __SLAVE_SELECT(lcd, spi_slave);
 8000b9a:	fa5f f881 	uxtb.w	r8, r1
 8000b9e:	f1b8 0f01 	cmp.w	r8, #1
{
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	461e      	mov	r6, r3
 8000baa:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __SLAVE_SELECT(lcd, spi_slave);
 8000bae:	d801      	bhi.n	8000bb4 <ili9341_spi_write_command_data+0x1e>
 8000bb0:	f7ff ff9e 	bl	8000af0 <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 8000bb4:	463a      	mov	r2, r7
 8000bb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f7ff ffa8 	bl	8000b10 <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	4632      	mov	r2, r6
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff ffc0 	bl	8000b4e <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 8000bce:	f1b8 0f01 	cmp.w	r8, #1
 8000bd2:	d805      	bhi.n	8000be0 <ili9341_spi_write_command_data+0x4a>
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	4620      	mov	r0, r4
}
 8000bd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __SLAVE_RELEASE(lcd, spi_slave);
 8000bdc:	f7ff bf90 	b.w	8000b00 <ili9341_spi_slave_release>
}
 8000be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000be4 <ili9341_new>:
{
 8000be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be8:	b0a3      	sub	sp, #140	; 0x8c
 8000bea:	460e      	mov	r6, r1
 8000bec:	4617      	mov	r7, r2
 8000bee:	4698      	mov	r8, r3
  if (NULL != spi_hal) {
 8000bf0:	4681      	mov	r9, r0
{
 8000bf2:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8000bf6:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 8000bfa:	f99d a0bc 	ldrsb.w	sl, [sp, #188]	; 0xbc
 8000bfe:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 8000c02:	f8bd b0cc 	ldrh.w	fp, [sp, #204]	; 0xcc
 8000c06:	f99d 50d0 	ldrsb.w	r5, [sp, #208]	; 0xd0
  if (NULL != spi_hal) {
 8000c0a:	b920      	cbnz	r0, 8000c16 <ili9341_new+0x32>
  ili9341_t *lcd = NULL;
 8000c0c:	2400      	movs	r4, #0
}
 8000c0e:	4620      	mov	r0, r4
 8000c10:	b023      	add	sp, #140	; 0x8c
 8000c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0f8      	beq.n	8000c0c <ili9341_new+0x28>
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d0f6      	beq.n	8000c0c <ili9341_new+0x28>
 8000c1e:	f1b8 0f00 	cmp.w	r8, #0
 8000c22:	d0f3      	beq.n	8000c0c <ili9341_new+0x28>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8000c24:	2900      	cmp	r1, #0
 8000c26:	d0f1      	beq.n	8000c0c <ili9341_new+0x28>
 8000c28:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d0ee      	beq.n	8000c0c <ili9341_new+0x28>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d0ec      	beq.n	8000c0c <ili9341_new+0x28>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8000c32:	fa5f f08a 	uxtb.w	r0, sl
 8000c36:	2803      	cmp	r0, #3
 8000c38:	d8e8      	bhi.n	8000c0c <ili9341_new+0x28>
      if ( itsSupported != touch_support ||
 8000c3a:	2d01      	cmp	r5, #1
 8000c3c:	d10a      	bne.n	8000c54 <ili9341_new+0x70>
 8000c3e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d0e3      	beq.n	8000c0c <ili9341_new+0x28>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0e1      	beq.n	8000c0c <ili9341_new+0x28>
 8000c48:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d0de      	beq.n	8000c0c <ili9341_new+0x28>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8000c4e:	f1bb 0f00 	cmp.w	fp, #0
 8000c52:	d0db      	beq.n	8000c0c <ili9341_new+0x28>
        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8000c54:	2068      	movs	r0, #104	; 0x68
 8000c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c5a:	9103      	str	r1, [sp, #12]
 8000c5c:	f014 fb40 	bl	80152e0 <malloc>
 8000c60:	4604      	mov	r4, r0
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d0d2      	beq.n	8000c0c <ili9341_new+0x28>
          lcd->data_command_port    = data_command_port;
 8000c66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
          lcd->data_command_pin     = data_command_pin;
 8000c68:	9a04      	ldr	r2, [sp, #16]
          lcd->data_command_port    = data_command_port;
 8000c6a:	6143      	str	r3, [r0, #20]
}

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
  switch (orientation) {
 8000c6c:	f03a 0302 	bics.w	r3, sl, #2
          lcd->data_command_pin     = data_command_pin;
 8000c70:	8302      	strh	r2, [r0, #24]
          lcd->tft_select_pin       = tft_select_pin;
 8000c72:	9903      	ldr	r1, [sp, #12]
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8000c74:	bf0c      	ite	eq
 8000c76:	4acc      	ldreq	r2, [pc, #816]	; (8000fa8 <ili9341_new+0x3c4>)
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8000c78:	4acc      	ldrne	r2, [pc, #816]	; (8000fac <ili9341_new+0x3c8>)
          lcd->reset_port           = reset_port;
 8000c7a:	e9c0 9600 	strd	r9, r6, [r0]
          lcd->reset_pin            = reset_pin;
 8000c7e:	8107      	strh	r7, [r0, #8]
          lcd->tft_select_port      = tft_select_port;
 8000c80:	f8c0 800c 	str.w	r8, [r0, #12]
          lcd->tft_select_pin       = tft_select_pin;
 8000c84:	8201      	strh	r1, [r0, #16]
          lcd->orientation          = orientation;
 8000c86:	f880 a01a 	strb.w	sl, [r0, #26]
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8000c8a:	6810      	ldr	r0, [r2, #0]
  switch (orientation) {
 8000c8c:	9b05      	ldr	r3, [sp, #20]
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8000c8e:	9016      	str	r0, [sp, #88]	; 0x58
 8000c90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8000c92:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8000c96:	921e      	str	r2, [sp, #120]	; 0x78
          lcd->screen_size          = ili9341_screen_size(orientation);
 8000c98:	61e2      	str	r2, [r4, #28]
          if (touch_support) {
 8000c9a:	f104 0236 	add.w	r2, r4, #54	; 0x36
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	f000 816c 	beq.w	8000f7c <ili9341_new+0x398>
            lcd->touch_select_pin     = touch_select_pin;
 8000ca4:	84a3      	strh	r3, [r4, #36]	; 0x24
            lcd->touch_irq_port       = touch_irq_port;
 8000ca6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
            lcd->touch_support        = touch_support;
 8000ca8:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
            lcd->touch_irq_port       = touch_irq_port;
 8000cac:	62a3      	str	r3, [r4, #40]	; 0x28
            lcd->touch_normalize      = touch_normalize;
 8000cae:	f99d 30d4 	ldrsb.w	r3, [sp, #212]	; 0xd4
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000cb2:	2500      	movs	r5, #0
            lcd->touch_normalize      = touch_normalize;
 8000cb4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
            lcd->touch_calibration    = itcNONE;
 8000cb8:	23ff      	movs	r3, #255	; 0xff
            lcd->touch_select_port    = touch_select_port;
 8000cba:	9930      	ldr	r1, [sp, #192]	; 0xc0
            lcd->touch_irq_pin        = touch_irq_pin;
 8000cbc:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
            lcd->touch_select_port    = touch_select_port;
 8000cc0:	6221      	str	r1, [r4, #32]
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000cc2:	6325      	str	r5, [r4, #48]	; 0x30
            lcd->touch_calibration    = itcNONE;
 8000cc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000cc8:	f8c4 5036 	str.w	r5, [r4, #54]	; 0x36
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000ccc:	4629      	mov	r1, r5
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000cce:	6055      	str	r5, [r2, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000cd0:	221c      	movs	r2, #28
 8000cd2:	f014 fb0d 	bl	80152f0 <memset>
            lcd->touch_pressed        = itpNotPressed;
 8000cd6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4639      	mov	r1, r7
 8000cde:	4630      	mov	r0, r6
            lcd->touch_pressed_end    = NULL;
 8000ce0:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 8000ce4:	f013 fa28 	bl	8014138 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000ce8:	20c8      	movs	r0, #200	; 0xc8
 8000cea:	f012 fa31 	bl	8013150 <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	8921      	ldrh	r1, [r4, #8]
 8000cf2:	6860      	ldr	r0, [r4, #4]
 8000cf4:	f013 fa20 	bl	8014138 <HAL_GPIO_WritePin>
  ili9341_spi_tft_release(lcd);
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff feea 	bl	8000ad2 <ili9341_spi_tft_release>
  if(lcd->touch_support == itsSupported)
 8000cfe:	f994 302e 	ldrsb.w	r3, [r4, #46]	; 0x2e
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d102      	bne.n	8000d0c <ili9341_new+0x128>
	  ili9341_spi_touch_release(lcd);
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff feed 	bl	8000ae6 <ili9341_spi_touch_release>
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000d0c:	2502      	movs	r5, #2
  ili9341_spi_tft_select(lcd);
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff feda 	bl	8000ac8 <ili9341_spi_tft_select>
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fef8 	bl	8000b10 <ili9341_spi_write_command>
  HAL_Delay(1000);
 8000d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d24:	f012 fa14 	bl	8013150 <HAL_Delay>
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000d28:	4ba1      	ldr	r3, [pc, #644]	; (8000fb0 <ili9341_new+0x3cc>)
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d2a:	22cb      	movs	r2, #203	; 0xcb
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000d2c:	9318      	str	r3, [sp, #96]	; 0x60
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d2e:	ab18      	add	r3, sp, #96	; 0x60
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d34:	4620      	mov	r0, r4
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2305      	movs	r3, #5
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8000d3a:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d3e:	f7ff ff2a 	bl	8000b96 <ili9341_spi_write_command_data>
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8000d42:	f44f 4341 	mov.w	r3, #49408	; 0xc100
 8000d46:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8000d4a:	2330      	movs	r3, #48	; 0x30
 8000d4c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d50:	ab15      	add	r3, sp, #84	; 0x54
 8000d52:	22cf      	movs	r2, #207	; 0xcf
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	4620      	mov	r0, r4
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f7ff ff1a 	bl	8000b96 <ili9341_spi_write_command_data>
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8000d62:	2385      	movs	r3, #133	; 0x85
 8000d64:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000d68:	2378      	movs	r3, #120	; 0x78
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8000d6a:	2600      	movs	r6, #0
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8000d6c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d70:	ab14      	add	r3, sp, #80	; 0x50
 8000d72:	22e8      	movs	r2, #232	; 0xe8
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d78:	4620      	mov	r0, r4
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f7ff ff0a 	bl	8000b96 <ili9341_spi_write_command_data>
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d82:	ab12      	add	r3, sp, #72	; 0x48
 8000d84:	22ea      	movs	r2, #234	; 0xea
 8000d86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	462b      	mov	r3, r5
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8000d90:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d94:	f7ff feff 	bl	8000b96 <ili9341_spi_write_command_data>
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8000d98:	4b86      	ldr	r3, [pc, #536]	; (8000fb4 <ili9341_new+0x3d0>)
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d9a:	22ed      	movs	r2, #237	; 0xed
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8000d9c:	9317      	str	r3, [sp, #92]	; 0x5c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000d9e:	ab17      	add	r3, sp, #92	; 0x5c
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da4:	4620      	mov	r0, r4
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2304      	movs	r3, #4
 8000daa:	f7ff fef4 	bl	8000b96 <ili9341_spi_write_command_data>
      0xF7, 1, (uint8_t[]){ 0x20 });
 8000dae:	2320      	movs	r3, #32
 8000db0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000db4:	ab0f      	add	r3, sp, #60	; 0x3c
 8000db6:	22f7      	movs	r2, #247	; 0xf7
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f7ff fee8 	bl	8000b96 <ili9341_spi_write_command_data>
      0xC0, 1, (uint8_t[]){ 0x23 });
 8000dc6:	2323      	movs	r3, #35	; 0x23
 8000dc8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  ili9341_spi_write_command_data(lcd, issNONE,
 8000dcc:	ab0e      	add	r3, sp, #56	; 0x38
 8000dce:	22c0      	movs	r2, #192	; 0xc0
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f7ff fedc 	bl	8000b96 <ili9341_spi_write_command_data>
      0xC1, 1, (uint8_t[]){ 0x10 });
 8000dde:	2310      	movs	r3, #16
 8000de0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  ili9341_spi_write_command_data(lcd, issNONE,
 8000de4:	ab0d      	add	r3, sp, #52	; 0x34
 8000de6:	22c1      	movs	r2, #193	; 0xc1
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	4620      	mov	r0, r4
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	f7ff fed0 	bl	8000b96 <ili9341_spi_write_command_data>
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8000df6:	f642 033e 	movw	r3, #10302	; 0x283e
 8000dfa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 8000dfe:	ab11      	add	r3, sp, #68	; 0x44
 8000e00:	22c5      	movs	r2, #197	; 0xc5
 8000e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e06:	4620      	mov	r0, r4
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	462b      	mov	r3, r5
 8000e0c:	f7ff fec3 	bl	8000b96 <ili9341_spi_write_command_data>
      0xC7, 1, (uint8_t[]){ 0x86 });
 8000e10:	2386      	movs	r3, #134	; 0x86
 8000e12:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e16:	ab0c      	add	r3, sp, #48	; 0x30
 8000e18:	22c7      	movs	r2, #199	; 0xc7
 8000e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1e:	4620      	mov	r0, r4
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	f7ff feb7 	bl	8000b96 <ili9341_spi_write_command_data>
      0x36, 1, (uint8_t[]){ 0x48 });
 8000e28:	2348      	movs	r3, #72	; 0x48
 8000e2a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e2e:	ab0b      	add	r3, sp, #44	; 0x2c
 8000e30:	2236      	movs	r2, #54	; 0x36
 8000e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e36:	4620      	mov	r0, r4
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f7ff feab 	bl	8000b96 <ili9341_spi_write_command_data>
      0x3A, 1, (uint8_t[]){ 0x55 });
 8000e40:	2355      	movs	r3, #85	; 0x55
 8000e42:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e46:	ab0a      	add	r3, sp, #40	; 0x28
 8000e48:	223a      	movs	r2, #58	; 0x3a
 8000e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e4e:	4620      	mov	r0, r4
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2301      	movs	r3, #1
 8000e54:	f7ff fe9f 	bl	8000b96 <ili9341_spi_write_command_data>
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8000e58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e5c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e60:	ab10      	add	r3, sp, #64	; 0x40
 8000e62:	22b1      	movs	r2, #177	; 0xb1
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e68:	4620      	mov	r0, r4
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	462b      	mov	r3, r5
 8000e6e:	f7ff fe92 	bl	8000b96 <ili9341_spi_write_command_data>
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8000e72:	f248 2308 	movw	r3, #33288	; 0x8208
 8000e76:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8000e7a:	2327      	movs	r3, #39	; 0x27
 8000e7c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e80:	ab13      	add	r3, sp, #76	; 0x4c
 8000e82:	22b6      	movs	r2, #182	; 0xb6
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	4620      	mov	r0, r4
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f7ff fe82 	bl	8000b96 <ili9341_spi_write_command_data>
  ili9341_spi_write_command_data(lcd, issNONE,
 8000e92:	ab09      	add	r3, sp, #36	; 0x24
 8000e94:	22f2      	movs	r2, #242	; 0xf2
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
      0xF2, 1, (uint8_t[]){ 0x00 });
 8000ea0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ea4:	f7ff fe77 	bl	8000b96 <ili9341_spi_write_command_data>
      0x26, 1, (uint8_t[]){ 0x01 });
 8000ea8:	2301      	movs	r3, #1
  ili9341_spi_write_command_data(lcd, issNONE,
 8000eaa:	aa08      	add	r2, sp, #32
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb2:	2226      	movs	r2, #38	; 0x26
 8000eb4:	4620      	mov	r0, r4
      0x26, 1, (uint8_t[]){ 0x01 });
 8000eb6:	f88d 3020 	strb.w	r3, [sp, #32]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000eba:	f7ff fe6c 	bl	8000b96 <ili9341_spi_write_command_data>
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000ebe:	aa1e      	add	r2, sp, #120	; 0x78
 8000ec0:	4616      	mov	r6, r2
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <ili9341_new+0x3d4>)
 8000ec4:	f103 0708 	add.w	r7, r3, #8
 8000ec8:	4615      	mov	r5, r2
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	c503      	stmia	r5!, {r0, r1}
 8000ed2:	42bb      	cmp	r3, r7
 8000ed4:	462a      	mov	r2, r5
 8000ed6:	d1f7      	bne.n	8000ec8 <ili9341_new+0x2e4>
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	8899      	ldrh	r1, [r3, #4]
 8000edc:	799b      	ldrb	r3, [r3, #6]
 8000ede:	6028      	str	r0, [r5, #0]
 8000ee0:	80a9      	strh	r1, [r5, #4]
 8000ee2:	71ab      	strb	r3, [r5, #6]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000ee4:	22e0      	movs	r2, #224	; 0xe0
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	9600      	str	r6, [sp, #0]
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fe51 	bl	8000b96 <ili9341_spi_write_command_data>
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000ef4:	aa1a      	add	r2, sp, #104	; 0x68
 8000ef6:	4616      	mov	r6, r2
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <ili9341_new+0x3d8>)
 8000efa:	f103 0708 	add.w	r7, r3, #8
 8000efe:	4615      	mov	r5, r2
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	6859      	ldr	r1, [r3, #4]
 8000f04:	3308      	adds	r3, #8
 8000f06:	c503      	stmia	r5!, {r0, r1}
 8000f08:	42bb      	cmp	r3, r7
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	d1f7      	bne.n	8000efe <ili9341_new+0x31a>
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	8899      	ldrh	r1, [r3, #4]
 8000f12:	799b      	ldrb	r3, [r3, #6]
 8000f14:	6028      	str	r0, [r5, #0]
 8000f16:	80a9      	strh	r1, [r5, #4]
 8000f18:	71ab      	strb	r3, [r5, #6]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	22e1      	movs	r2, #225	; 0xe1
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f24:	9600      	str	r6, [sp, #0]
 8000f26:	f7ff fe36 	bl	8000b96 <ili9341_spi_write_command_data>
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 8000f2a:	2211      	movs	r2, #17
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff fded 	bl	8000b10 <ili9341_spi_write_command>
  HAL_Delay(120);
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f012 f90a 	bl	8013150 <HAL_Delay>
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	2229      	movs	r2, #41	; 0x29
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f44:	f7ff fde4 	bl	8000b10 <ili9341_spi_write_command>
}

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
  switch (orientation) {
 8000f48:	7ea3      	ldrb	r3, [r4, #26]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	2a02      	cmp	r2, #2
  switch (orientation) {
 8000f50:	bf8f      	iteee	hi
 8000f52:	2348      	movhi	r3, #72	; 0x48
 8000f54:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 8000f58:	015b      	lslls	r3, r3, #5
 8000f5a:	3348      	addls	r3, #72	; 0x48
 8000f5c:	bf98      	it	ls
 8000f5e:	b2db      	uxtbls	r3, r3
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 8000f60:	f88d 301c 	strb.w	r3, [sp, #28]
  ili9341_spi_write_command_data(lcd, issNONE,
 8000f64:	ab07      	add	r3, sp, #28
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2236      	movs	r2, #54	; 0x36
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f70:	f7ff fe11 	bl	8000b96 <ili9341_spi_write_command_data>
  ili9341_spi_tft_release(lcd);
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fdac 	bl	8000ad2 <ili9341_spi_tft_release>
  return lcd;
 8000f7a:	e648      	b.n	8000c0e <ili9341_new+0x2a>
            lcd->touch_irq_pin        = 0;
 8000f7c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
            lcd->touch_calibration    = itcNONE;
 8000f80:	f04f 08ff 	mov.w	r8, #255	; 0xff
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8000f84:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
            lcd->touch_select_port    = NULL;
 8000f88:	6225      	str	r5, [r4, #32]
            lcd->touch_select_pin     = 0;
 8000f8a:	84a5      	strh	r5, [r4, #36]	; 0x24
            lcd->touch_irq_port       = NULL;
 8000f8c:	62a5      	str	r5, [r4, #40]	; 0x28
            lcd->touch_calibration    = itcNONE;
 8000f8e:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000f92:	f8c4 5036 	str.w	r5, [r4, #54]	; 0x36
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000f96:	4629      	mov	r1, r5
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8000f98:	6055      	str	r5, [r2, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8000f9a:	221c      	movs	r2, #28
 8000f9c:	f014 f9a8 	bl	80152f0 <memset>
            lcd->touch_pressed        = itpNONE;
 8000fa0:	f884 805c 	strb.w	r8, [r4, #92]	; 0x5c
 8000fa4:	e699      	b.n	8000cda <ili9341_new+0xf6>
 8000fa6:	bf00      	nop
 8000fa8:	08015418 	.word	0x08015418
 8000fac:	0801541c 	.word	0x0801541c
 8000fb0:	34002c39 	.word	0x34002c39
 8000fb4:	81120364 	.word	0x81120364
 8000fb8:	08015420 	.word	0x08015420
 8000fbc:	0801542f 	.word	0x0801542f

08000fc0 <ili9341_clip_rect>:
*/
// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4605      	mov	r5, r0
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
    { return ibFalse; }

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 8000fc4:	f9b1 6000 	ldrsh.w	r6, [r1]
 8000fc8:	8b80      	ldrh	r0, [r0, #28]
{
 8000fca:	9c05      	ldr	r4, [sp, #20]
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 8000fcc:	4286      	cmp	r6, r0
 8000fce:	da0b      	bge.n	8000fe8 <ili9341_clip_rect+0x28>
 8000fd0:	f9b2 7000 	ldrsh.w	r7, [r2]
 8000fd4:	8be8      	ldrh	r0, [r5, #30]
 8000fd6:	4287      	cmp	r7, r0
 8000fd8:	da06      	bge.n	8000fe8 <ili9341_clip_rect+0x28>
    { return ibFalse; }

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 8000fda:	b14b      	cbz	r3, 8000ff0 <ili9341_clip_rect+0x30>
 8000fdc:	b15c      	cbz	r4, 8000ff6 <ili9341_clip_rect+0x36>
    if ((0U == *w) || (0U == *h))
 8000fde:	8818      	ldrh	r0, [r3, #0]
 8000fe0:	b108      	cbz	r0, 8000fe6 <ili9341_clip_rect+0x26>
 8000fe2:	8820      	ldrh	r0, [r4, #0]
 8000fe4:	b938      	cbnz	r0, 8000ff6 <ili9341_clip_rect+0x36>

    return (*w > 0U) && (*h > 0U);
  }

  return ibTrue;
}
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { return ibFalse; }
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e7fc      	b.n	8000fe6 <ili9341_clip_rect+0x26>
  return ibTrue;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e7fa      	b.n	8000fe6 <ili9341_clip_rect+0x26>
  if (*x < 0) {
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	da07      	bge.n	8001004 <ili9341_clip_rect+0x44>
 8000ff4:	e004      	b.n	8001000 <ili9341_clip_rect+0x40>
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	da04      	bge.n	8001004 <ili9341_clip_rect+0x44>
      { *w -= *x; }
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	1b86      	subs	r6, r0, r6
 8000ffe:	801e      	strh	r6, [r3, #0]
    *x = 0;
 8001000:	2000      	movs	r0, #0
 8001002:	8008      	strh	r0, [r1, #0]
  if (*y < 0) {
 8001004:	f9b2 6000 	ldrsh.w	r6, [r2]
 8001008:	2e00      	cmp	r6, #0
 800100a:	da05      	bge.n	8001018 <ili9341_clip_rect+0x58>
    if (NULL != h)
 800100c:	b114      	cbz	r4, 8001014 <ili9341_clip_rect+0x54>
      { *h -= *y; }
 800100e:	8820      	ldrh	r0, [r4, #0]
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	8020      	strh	r0, [r4, #0]
    *y = 0;
 8001014:	2000      	movs	r0, #0
 8001016:	8010      	strh	r0, [r2, #0]
  if ((NULL != w) && (NULL != h)) {
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0e7      	beq.n	8000fec <ili9341_clip_rect+0x2c>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d0e5      	beq.n	8000fec <ili9341_clip_rect+0x2c>
    if ((*x + *w - 1) >= lcd->screen_size.width)
 8001020:	f9b1 6000 	ldrsh.w	r6, [r1]
 8001024:	8818      	ldrh	r0, [r3, #0]
 8001026:	8ba9      	ldrh	r1, [r5, #28]
 8001028:	4430      	add	r0, r6
 800102a:	4288      	cmp	r0, r1
      { *w = lcd->screen_size.width - *x; }
 800102c:	bfc4      	itt	gt
 800102e:	1b89      	subgt	r1, r1, r6
 8001030:	8019      	strhgt	r1, [r3, #0]
    if ((*y + *h - 1) >= lcd->screen_size.height)
 8001032:	f9b2 0000 	ldrsh.w	r0, [r2]
 8001036:	8821      	ldrh	r1, [r4, #0]
 8001038:	8bea      	ldrh	r2, [r5, #30]
 800103a:	4401      	add	r1, r0
 800103c:	4291      	cmp	r1, r2
      { *h = lcd->screen_size.height - *y; }
 800103e:	bfc4      	itt	gt
 8001040:	1a12      	subgt	r2, r2, r0
 8001042:	8022      	strhgt	r2, [r4, #0]
    return (*w > 0U) && (*h > 0U);
 8001044:	8818      	ldrh	r0, [r3, #0]
 8001046:	b118      	cbz	r0, 8001050 <ili9341_clip_rect+0x90>
 8001048:	8820      	ldrh	r0, [r4, #0]
 800104a:	3800      	subs	r0, #0
 800104c:	bf18      	it	ne
 800104e:	2001      	movne	r0, #1
 8001050:	b2c0      	uxtb	r0, r0
 8001052:	e7c8      	b.n	8000fe6 <ili9341_clip_rect+0x26>

08001054 <ili9341_spi_tft_set_address_rect>:
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	4604      	mov	r4, r0
 8001058:	460f      	mov	r7, r1
 800105a:	461e      	mov	r6, r3
 800105c:	4615      	mov	r5, r2
 800105e:	b085      	sub	sp, #20
  ili9341_spi_tft_select(lcd);
 8001060:	f7ff fd32 	bl	8000ac8 <ili9341_spi_tft_select>
  ili9341_spi_write_command_data(lcd, issNONE,
 8001064:	ab02      	add	r3, sp, #8
 8001066:	4620      	mov	r0, r4
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	222a      	movs	r2, #42	; 0x2a
 800106c:	2304      	movs	r3, #4
 800106e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8001072:	ba7f      	rev16	r7, r7
 8001074:	ba76      	rev16	r6, r6
 8001076:	f8ad 7008 	strh.w	r7, [sp, #8]
 800107a:	f8ad 600a 	strh.w	r6, [sp, #10]
  ili9341_spi_write_command_data(lcd, issNONE,
 800107e:	f7ff fd8a 	bl	8000b96 <ili9341_spi_write_command_data>
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8001082:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  ili9341_spi_write_command_data(lcd, issNONE,
 8001086:	4620      	mov	r0, r4
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8001088:	ba5b      	rev16	r3, r3
 800108a:	f8ad 300e 	strh.w	r3, [sp, #14]
  ili9341_spi_write_command_data(lcd, issNONE,
 800108e:	ab03      	add	r3, sp, #12
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	222b      	movs	r2, #43	; 0x2b
 8001094:	2304      	movs	r3, #4
 8001096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 800109a:	ba6d      	rev16	r5, r5
 800109c:	f8ad 500c 	strh.w	r5, [sp, #12]
  ili9341_spi_write_command_data(lcd, issNONE,
 80010a0:	f7ff fd79 	bl	8000b96 <ili9341_spi_write_command_data>
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 80010a4:	222c      	movs	r2, #44	; 0x2c
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fd30 	bl	8000b10 <ili9341_spi_write_command>
  ili9341_spi_tft_release(lcd);
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff fd0e 	bl	8000ad2 <ili9341_spi_tft_release>
}
 80010b6:	b005      	add	sp, #20
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ba <ili9341_transmit_wait>:
{
 80010ba:	b510      	push	{r4, lr}
  if (NULL == lcd)
 80010bc:	4604      	mov	r4, r0
 80010be:	b128      	cbz	r0, 80010cc <ili9341_transmit_wait+0x12>
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80010c4:	f012 ff52 	bl	8013f6c <HAL_DMA_GetState>
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d0f9      	beq.n	80010c0 <ili9341_transmit_wait+0x6>
}
 80010cc:	bd10      	pop	{r4, pc}

080010ce <ili9341_transmit_color>:
{
 80010ce:	b570      	push	{r4, r5, r6, lr}
 80010d0:	460d      	mov	r5, r1
 80010d2:	461e      	mov	r6, r3
 80010d4:	4611      	mov	r1, r2
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 80010d6:	4604      	mov	r4, r0
 80010d8:	b158      	cbz	r0, 80010f2 <ili9341_transmit_color+0x24>
 80010da:	b155      	cbz	r5, 80010f2 <ili9341_transmit_color+0x24>
 80010dc:	b14a      	cbz	r2, 80010f2 <ili9341_transmit_color+0x24>
  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 80010de:	462a      	mov	r2, r5
 80010e0:	6800      	ldr	r0, [r0, #0]
 80010e2:	f013 fc97 	bl	8014a14 <HAL_SPI_Transmit_DMA>
  if (ibOK(wait))
 80010e6:	b126      	cbz	r6, 80010f2 <ili9341_transmit_color+0x24>
    { ili9341_transmit_wait(lcd); }
 80010e8:	4620      	mov	r0, r4
}
 80010ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    { ili9341_transmit_wait(lcd); }
 80010ee:	f7ff bfe4 	b.w	80010ba <ili9341_transmit_wait>
}
 80010f2:	bd70      	pop	{r4, r5, r6, pc}

080010f4 <ili9341_buff>:
}

/********************************************************************************************************/
void ili9341_buff(ili9341_t *lcd, ili9341_color_t* color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 80010f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010f8:	b085      	sub	sp, #20
 80010fa:	f8ad 300c 	strh.w	r3, [sp, #12]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 80010fe:	ab0d      	add	r3, sp, #52	; 0x34
{
 8001100:	460d      	mov	r5, r1
 8001102:	f8ad 200e 	strh.w	r2, [sp, #14]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	aa03      	add	r2, sp, #12
 800110a:	ab0c      	add	r3, sp, #48	; 0x30
 800110c:	f10d 010e 	add.w	r1, sp, #14
{
 8001110:	4604      	mov	r4, r0
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8001112:	f7ff ff55 	bl	8000fc0 <ili9341_clip_rect>
 8001116:	b338      	cbz	r0, 8001168 <ili9341_buff+0x74>
    { return; }

  uint32_t num_pixels = w * h;
 8001118:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800111c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 /* uint16_t color_le = __LEu16(&color);
  for (uint16_t i = 0; i < block_wc; ++i)
    { spi_tx_block[i] = color_le; }*/

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8001120:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  uint32_t num_pixels = w * h;
 8001124:	fb00 f603 	mul.w	r6, r0, r3
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8001128:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800112c:	3801      	subs	r0, #1
 800112e:	4410      	add	r0, r2
 8001130:	3b01      	subs	r3, #1
 8001132:	440b      	add	r3, r1
 8001134:	b280      	uxth	r0, r0
 8001136:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800113a:	b29b      	uxth	r3, r3
 800113c:	9000      	str	r0, [sp, #0]
 800113e:	4620      	mov	r0, r4
 8001140:	4637      	mov	r7, r6
 8001142:	bf28      	it	cs
 8001144:	f44f 6780 	movcs.w	r7, #1024	; 0x400
 8001148:	f7ff ff84 	bl	8001054 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff fcbb 	bl	8000ac8 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8001152:	2201      	movs	r2, #1
 8001154:	8b21      	ldrh	r1, [r4, #24]
 8001156:	6960      	ldr	r0, [r4, #20]
 8001158:	f012 ffee 	bl	8014138 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  int j = 0;
  while (rect_wc > 0) {
 800115c:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8001160:	b92e      	cbnz	r6, 800116e <ili9341_buff+0x7a>
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, &color[j*block_wc], ibYes);
    rect_wc -= curr_wc;
    j++;
  }

  ili9341_spi_tft_release(lcd);
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff fcb5 	bl	8000ad2 <ili9341_spi_tft_release>
}
 8001168:	b005      	add	sp, #20
 800116a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (curr_wc > block_wc)
 800116e:	42b7      	cmp	r7, r6
 8001170:	46b9      	mov	r9, r7
 8001172:	bf28      	it	cs
 8001174:	46b1      	movcs	r9, r6
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, &color[j*block_wc], ibYes);
 8001176:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800117a:	462a      	mov	r2, r5
 800117c:	2301      	movs	r3, #1
 800117e:	4620      	mov	r0, r4
 8001180:	b289      	uxth	r1, r1
 8001182:	f7ff ffa4 	bl	80010ce <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8001186:	eba6 0609 	sub.w	r6, r6, r9
    j++;
 800118a:	4445      	add	r5, r8
 800118c:	e7e8      	b.n	8001160 <ili9341_buff+0x6c>

0800118e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118e:	b510      	push	{r4, lr}
 8001190:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	2210      	movs	r2, #16
 8001194:	2100      	movs	r1, #0
 8001196:	a80d      	add	r0, sp, #52	; 0x34
 8001198:	f014 f8aa 	bl	80152f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	2214      	movs	r2, #20
 800119e:	2100      	movs	r1, #0
 80011a0:	eb0d 0002 	add.w	r0, sp, r2
 80011a4:	f014 f8a4 	bl	80152f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	2210      	movs	r2, #16
 80011aa:	2100      	movs	r1, #0
 80011ac:	a801      	add	r0, sp, #4
 80011ae:	f014 f89f 	bl	80152f0 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ba:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c0:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ca:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011cc:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ce:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f012 ffcc 	bl	801416c <HAL_RCC_OscConfig>
 80011d4:	b108      	cbz	r0, 80011da <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	4621      	mov	r1, r4
 80011ec:	a805      	add	r0, sp, #20
 80011ee:	f013 f993 	bl	8014518 <HAL_RCC_ClockConfig>
 80011f2:	b108      	cbz	r0, 80011f8 <SystemClock_Config+0x6a>
 80011f4:	b672      	cpsid	i
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <SystemClock_Config+0x68>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80011f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fe:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001200:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001202:	f013 fa25 	bl	8014650 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	b108      	cbz	r0, 800120c <SystemClock_Config+0x7e>
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <SystemClock_Config+0x7c>
}
 800120c:	b014      	add	sp, #80	; 0x50
 800120e:	bd10      	pop	{r4, pc}

08001210 <main>:
{
 8001210:	b508      	push	{r3, lr}
  HAL_Init();
 8001212:	f011 ff79 	bl	8013108 <HAL_Init>
  SystemClock_Config();
 8001216:	f7ff ffba 	bl	800118e <SystemClock_Config>
  MX_GPIO_Init();
 800121a:	f7ff fbd5 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800121e:	f7ff fb91 	bl	8000944 <MX_DMA_Init>
  MX_SPI1_Init();
 8001222:	f000 f911 	bl	8001448 <MX_SPI1_Init>
  MX_CAN_Init();
 8001226:	f7ff fb23 	bl	8000870 <MX_CAN_Init>
  MX_ADC1_Init();
 800122a:	f7ff faa7 	bl	800077c <MX_ADC1_Init>
  MX_TIM1_Init();
 800122e:	f000 fa13 	bl	8001658 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001232:	f000 fb49 	bl	80018c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001236:	f000 fa45 	bl	80016c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800123a:	f000 fa79 	bl	8001730 <MX_TIM4_Init>
  lv_init();
 800123e:	f001 fa39 	bl	80026b4 <lv_init>
  disp_driver_init();
 8001242:	f7ff f92f 	bl	80004a4 <disp_driver_init>
  HAL_Delay(2000);
 8001246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800124a:	f011 ff81 	bl	8013150 <HAL_Delay>
  BuildPages();
 800124e:	f7ff f98b 	bl	8000568 <BuildPages>
  lv_scr_load(Screen1);
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <main+0x98>)
	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 8001254:	4d15      	ldr	r5, [pc, #84]	; (80012ac <main+0x9c>)
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	f000 fc31 	bl	8001abe <lv_disp_load_scr>
  CAN_receive_init();
 800125c:	f000 fba2 	bl	80019a4 <CAN_receive_init>
    wiper_start(wiper_speed_1);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fbcb 	bl	80019fc <wiper_start>
    HAL_TIM_Base_Start_IT(&htim1);
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <main+0xa0>)
 8001268:	f013 fcfa 	bl	8014c60 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <main+0xa4>)
 800126e:	f013 fcf7 	bl	8014c60 <HAL_TIM_Base_Start_IT>
    wiper_start(3);
 8001272:	2003      	movs	r0, #3
 8001274:	f000 fbc2 	bl	80019fc <wiper_start>
	  CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message );
 8001278:	4c0f      	ldr	r4, [pc, #60]	; (80012b8 <main+0xa8>)
	  HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, 1);
 800127a:	4628      	mov	r0, r5
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001282:	f012 ff59 	bl	8014138 <HAL_GPIO_WritePin>
	  CAN_send_message(AT07_LIGHTS_CMD, AT07_LIGHTS_LENGTH, message );
 8001286:	4622      	mov	r2, r4
 8001288:	2101      	movs	r1, #1
 800128a:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800128e:	f000 fb71 	bl	8001974 <CAN_send_message>
	  HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f011 ff5b 	bl	8013150 <HAL_Delay>
	  HAL_Delay(3);
 800129a:	2003      	movs	r0, #3
 800129c:	f011 ff58 	bl	8013150 <HAL_Delay>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 80012a0:	f00f fdaa 	bl	8010df8 <lv_timer_handler>
 80012a4:	e7e9      	b.n	800127a <main+0x6a>
 80012a6:	bf00      	nop
 80012a8:	200043ec 	.word	0x200043ec
 80012ac:	40011000 	.word	0x40011000
 80012b0:	20004628 	.word	0x20004628
 80012b4:	200045e0 	.word	0x200045e0
 80012b8:	20000000 	.word	0x20000000

080012bc <Error_Handler>:
 80012bc:	b672      	cpsid	i
  while (1)
 80012be:	e7fe      	b.n	80012be <Error_Handler+0x2>

080012c0 <HAL_GPIO_EXTI_Callback>:
extern uint8_t wiper_direction;
CAN_RxHeaderTypeDef pCAN_RxHeader;

// model : control GPIO (interrupts)

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ // on interruption on a pin (ex : BUT_Pin or GPIO_PIN_0 or ((uint16_t)0x0001) )
 80012c0:	b508      	push	{r3, lr}
	if (GPIO_Pin && BUT_Pin)
 80012c2:	b138      	cbz	r0, 80012d4 <HAL_GPIO_EXTI_Callback+0x14>
	{
			if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_RESET){
 80012c4:	2101      	movs	r1, #1
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80012c8:	f012 ff30 	bl	801412c <HAL_GPIO_ReadPin>
 80012cc:	b918      	cbnz	r0, 80012d6 <HAL_GPIO_EXTI_Callback+0x16>
					enable_motor_CMD = 1;
 80012ce:	2201      	movs	r2, #1
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_GPIO_EXTI_Callback+0x40>)
 80012d2:	701a      	strb	r2, [r3, #0]
	/*
	 * if (GPIO_Pin && GPIO_PIN_1)
	 * { }
	 */

}
 80012d4:	bd08      	pop	{r3, pc}
			} else if (HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin)==GPIO_PIN_SET) {
 80012d6:	2101      	movs	r1, #1
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80012da:	f012 ff27 	bl	801412c <HAL_GPIO_ReadPin>
 80012de:	2801      	cmp	r0, #1
 80012e0:	4601      	mov	r1, r0
 80012e2:	d1f7      	bne.n	80012d4 <HAL_GPIO_EXTI_Callback+0x14>
					enable_motor_CMD = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_GPIO_EXTI_Callback+0x40>)
					CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 80012e8:	f240 4004 	movw	r0, #1028	; 0x404
					enable_motor_CMD = 0;
 80012ec:	7013      	strb	r3, [r2, #0]
					TxMotorCMD=0;
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_GPIO_EXTI_Callback+0x44>)
 80012f0:	7013      	strb	r3, [r2, #0]
}
 80012f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
					CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 80012f6:	f000 bb3d 	b.w	8001974 <CAN_send_message>
 80012fa:	bf00      	nop
 80012fc:	40010800 	.word	0x40010800
 8001300:	20001a56 	.word	0x20001a56
 8001304:	200044fa 	.word	0x200044fa

08001308 <HAL_CAN_RxFifo0MsgPendingCallback>:
// model : control wiper

// model : receive CAN messages


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001308:	b538      	push	{r3, r4, r5, lr}
	extern uint8_t message[8];
	extern uint8_t RxData[8];
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pCAN_RxHeader, RxData);
 800130a:	4d09      	ldr	r5, [pc, #36]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800130c:	4c09      	ldr	r4, [pc, #36]	; (8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800130e:	462a      	mov	r2, r5
 8001310:	4623      	mov	r3, r4
 8001312:	2100      	movs	r1, #0
 8001314:	f012 fb33 	bl	801397e <HAL_CAN_GetRxMessage>


	//light response
	if ((pCAN_RxHeader.ExtId) == 0x4210031){
 8001318:	686a      	ldr	r2, [r5, #4]
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800131c:	429a      	cmp	r2, r3
 800131e:	d105      	bne.n	800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		message[0]= (RxData[0]==1) ? 0 : 1;
 8001320:	7823      	ldrb	r3, [r4, #0]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001324:	3b01      	subs	r3, #1
 8001326:	bf18      	it	ne
 8001328:	2301      	movne	r3, #1
 800132a:	7013      	strb	r3, [r2, #0]

	/*
	 * if ((pCAN_RxHeader.ExtId) == 0x4210031){
	 *		message[0]= (RxData[0]==1) ? 0 : 1;}
	 */
}
 800132c:	bd38      	pop	{r3, r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	200044dc 	.word	0x200044dc
 8001334:	20001a64 	.word	0x20001a64
 8001338:	04210031 	.word	0x04210031
 800133c:	20000000 	.word	0x20000000

08001340 <HAL_ADC_ConvHalfCpltCallback>:

// model : ADC / DMA input

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
	if (abs(ADC_Values[0]-ADC_Values[1]) > 200)
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_ADC_ConvHalfCpltCallback+0x6c>)
{
 8001342:	b510      	push	{r4, lr}
	if (abs(ADC_Values[0]-ADC_Values[1]) > 200)
 8001344:	8813      	ldrh	r3, [r2, #0]
 8001346:	8851      	ldrh	r1, [r2, #2]
 8001348:	b21b      	sxth	r3, r3
 800134a:	b209      	sxth	r1, r1
 800134c:	1a5b      	subs	r3, r3, r1
 800134e:	2b00      	cmp	r3, #0
 8001350:	bfcb      	itete	gt
 8001352:	8813      	ldrhgt	r3, [r2, #0]
 8001354:	8853      	ldrhle	r3, [r2, #2]
 8001356:	8851      	ldrhgt	r1, [r2, #2]
 8001358:	8811      	ldrhle	r1, [r2, #0]
 800135a:	bfcc      	ite	gt
 800135c:	b21b      	sxthgt	r3, r3
 800135e:	b21b      	sxthle	r3, r3
 8001360:	b209      	sxth	r1, r1
 8001362:	1a5b      	subs	r3, r3, r1
 8001364:	2bc8      	cmp	r3, #200	; 0xc8
 8001366:	bfd4      	ite	le
 8001368:	2300      	movle	r3, #0
 800136a:	2301      	movgt	r3, #1
 800136c:	b1ab      	cbz	r3, 800139a <HAL_ADC_ConvHalfCpltCallback+0x5a>
	{
		//change the equation into a table
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 800136e:	8813      	ldrh	r3, [r2, #0]
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 8001370:	2102      	movs	r1, #2
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 8001372:	b21a      	sxth	r2, r3
 8001374:	230c      	movs	r3, #12
 8001376:	4353      	muls	r3, r2
 8001378:	bf48      	it	mi
 800137a:	f603 73ff 	addwmi	r3, r3, #4095	; 0xfff
 800137e:	131b      	asrs	r3, r3, #12
 8001380:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8001384:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 800138c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 8001390:	f44f 608c 	mov.w	r0, #1120	; 0x460
		TxMotorFRW=  (((uint16_t)(ADC_Values[0]*12/4096)-1)*2000);
 8001394:	8013      	strh	r3, [r2, #0]
		CAN_send_message(AT07_CMD_ELEC_MOTOR_FORWARD,2,(uint8_t  *)&TxMotorFRW);
 8001396:	f000 faed 	bl	8001974 <CAN_send_message>
	}
	//change this into a simple variable affectation
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, (uint32_t )ADC_Values, (uint32_t )(ADC_Values+1), 1);

}
 800139a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, (uint32_t )ADC_Values, (uint32_t )(ADC_Values+1), 1);
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013a0:	2301      	movs	r3, #1
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80013a4:	1e91      	subs	r1, r2, #2
 80013a6:	f012 bd13 	b.w	8013dd0 <HAL_DMA_Start_IT>
 80013aa:	bf00      	nop
 80013ac:	20001a50 	.word	0x20001a50
 80013b0:	200044f8 	.word	0x200044f8
 80013b4:	20001a52 	.word	0x20001a52
 80013b8:	20004498 	.word	0x20004498

080013bc <HAL_TIM_PeriodElapsedCallback>:

// model : timer period triggered actions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if (htim->Instance==TIM3){
 80013bc:	6802      	ldr	r2, [r0, #0]
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x68>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013c0:	b510      	push	{r4, lr}
	if (htim->Instance==TIM3){
 80013c2:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013c4:	4604      	mov	r4, r0
	if (htim->Instance==TIM3){
 80013c6:	d109      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013cc:	4816      	ldr	r0, [pc, #88]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80013ce:	f012 feb8 	bl	8014142 <HAL_GPIO_TogglePin>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_Values, 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013d8:	f012 f838 	bl	801344c <HAL_ADC_Start_DMA>
	}
	if (htim->Instance == TIM4) {
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10f      	bne.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x48>
		switch (wiper_direction) {
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	7819      	ldrb	r1, [r3, #0]
 80013ec:	2901      	cmp	r1, #1
 80013ee:	d004      	beq.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x3e>
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	2101      	movs	r1, #1
				case 2:
					TIM2->CCR4=100;
					wiper_direction=1;
					break;
				default:
					TIM2->CCR4=100;
 80013f4:	6410      	str	r0, [r2, #64]	; 0x40
					wiper_direction=1;
 80013f6:	7019      	strb	r1, [r3, #0]
		if( enable_motor_CMD ){
				  TxMotorCMD=1;
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
			  }
	}
}
 80013f8:	bd10      	pop	{r4, pc}
					TIM2->CCR4=200;
 80013fa:	21c8      	movs	r1, #200	; 0xc8
 80013fc:	6411      	str	r1, [r2, #64]	; 0x40
					wiper_direction=0;
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
					break;
 8001402:	e7f9      	b.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	if (htim->Instance == TIM1) {
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d1f6      	bne.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if( enable_motor_CMD ){
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f2      	beq.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				  TxMotorCMD=1;
 8001412:	2101      	movs	r1, #1
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x88>)
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8001416:	f240 4004 	movw	r0, #1028	; 0x404
				  TxMotorCMD=1;
 800141a:	7011      	strb	r1, [r2, #0]
}
 800141c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				  CAN_send_message(AT07_ELEC_MOTOR_CMD,1,&TxMotorCMD);
 8001420:	f000 baa8 	b.w	8001974 <CAN_send_message>
 8001424:	40000400 	.word	0x40000400
 8001428:	40011000 	.word	0x40011000
 800142c:	20001a50 	.word	0x20001a50
 8001430:	200043fc 	.word	0x200043fc
 8001434:	40000800 	.word	0x40000800
 8001438:	2000000c 	.word	0x2000000c
 800143c:	40012c00 	.word	0x40012c00
 8001440:	20001a56 	.word	0x20001a56
 8001444:	200044fa 	.word	0x200044fa

08001448 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001448:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001452:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001456:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800145c:	2208      	movs	r2, #8
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800145e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001466:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800146c:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800146e:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001472:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001474:	f013 f9c8 	bl	8014808 <HAL_SPI_Init>
 8001478:	b118      	cbz	r0, 8001482 <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800147a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800147e:	f7ff bf1d 	b.w	80012bc <Error_Handler>
}
 8001482:	bd08      	pop	{r3, pc}
 8001484:	200044fc 	.word	0x200044fc
 8001488:	40013000 	.word	0x40013000

0800148c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	2710      	movs	r7, #16
{
 8001490:	4606      	mov	r6, r0
 8001492:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	463a      	mov	r2, r7
 8001496:	2100      	movs	r1, #0
 8001498:	a802      	add	r0, sp, #8
 800149a:	f013 ff29 	bl	80152f0 <memset>
  if(spiHandle->Instance==SPI1)
 800149e:	6832      	ldr	r2, [r6, #0]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_SPI_MspInit+0x94>)
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d139      	bne.n	800151a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80014aa:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <HAL_SPI_MspInit+0x98>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014bc:	9200      	str	r2, [sp, #0]
 80014be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	f041 0104 	orr.w	r1, r1, #4
 80014c8:	6199      	str	r1, [r3, #24]
 80014ca:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f012 fd48 	bl	8013f74 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <HAL_SPI_MspInit+0x98>)
 80014e8:	a902      	add	r1, sp, #8

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014ea:	4c0f      	ldr	r4, [pc, #60]	; (8001528 <HAL_SPI_MspInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f012 fd3f 	bl	8013f74 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_SPI_MspInit+0xa0>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014f8:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fa:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001500:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001504:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	60a5      	str	r5, [r4, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800150c:	f012 fc32 	bl	8013d74 <HAL_DMA_Init>
 8001510:	b108      	cbz	r0, 8001516 <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
 8001512:	f7ff fed3 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001516:	64b4      	str	r4, [r6, #72]	; 0x48
 8001518:	6266      	str	r6, [r4, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800151a:	b007      	add	sp, #28
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151e:	bf00      	nop
 8001520:	40013000 	.word	0x40013000
 8001524:	40010800 	.word	0x40010800
 8001528:	20004554 	.word	0x20004554
 800152c:	40020030 	.word	0x40020030

08001530 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_MspInit+0x3c>)
{
 8001532:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	f002 0201 	and.w	r2, r2, #1
 8001542:	9200      	str	r2, [sp, #0]
 8001544:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	69da      	ldr	r2, [r3, #28]
 8001548:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800154c:	61da      	str	r2, [r3, #28]
 800154e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800155a:	6853      	ldr	r3, [r2, #4]
 800155c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	b002      	add	sp, #8
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler>

08001576 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler>

08001578 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler>

0800157a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler>

0800157c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler>

0800157e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001586:	f011 fdd1 	bl	801312c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  lv_tick_inc(1);
  /* USER CODE END SysTick_IRQn 1 */
}
 800158a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lv_tick_inc(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f00d be6e 	b.w	800f270 <lv_tick_inc>

08001594 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_Pin);
 8001594:	2001      	movs	r0, #1
 8001596:	f012 bddd 	b.w	8014154 <HAL_GPIO_EXTI_IRQHandler>
	...

0800159c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800159c:	4801      	ldr	r0, [pc, #4]	; (80015a4 <DMA1_Channel1_IRQHandler+0x8>)
 800159e:	f012 bc53 	b.w	8013e48 <HAL_DMA_IRQHandler>
 80015a2:	bf00      	nop
 80015a4:	2000442c 	.word	0x2000442c

080015a8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80015a8:	4801      	ldr	r0, [pc, #4]	; (80015b0 <DMA1_Channel2_IRQHandler+0x8>)
 80015aa:	f012 bc4d 	b.w	8013e48 <HAL_DMA_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	20004498 	.word	0x20004498

080015b4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015b4:	4801      	ldr	r0, [pc, #4]	; (80015bc <DMA1_Channel3_IRQHandler+0x8>)
 80015b6:	f012 bc47 	b.w	8013e48 <HAL_DMA_IRQHandler>
 80015ba:	bf00      	nop
 80015bc:	20004554 	.word	0x20004554

080015c0 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <ADC1_2_IRQHandler+0x8>)
 80015c2:	f011 be05 	b.w	80131d0 <HAL_ADC_IRQHandler>
 80015c6:	bf00      	nop
 80015c8:	200043fc 	.word	0x200043fc

080015cc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80015ce:	f012 ba6a 	b.w	8013aa6 <HAL_CAN_IRQHandler>
 80015d2:	bf00      	nop
 80015d4:	20004470 	.word	0x20004470

080015d8 <CAN1_RX1_IRQHandler>:
 80015d8:	f7ff bff8 	b.w	80015cc <USB_LP_CAN1_RX0_IRQHandler>

080015dc <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <TIM1_BRK_IRQHandler+0x8>)
 80015de:	f013 bb6e 	b.w	8014cbe <HAL_TIM_IRQHandler>
 80015e2:	bf00      	nop
 80015e4:	20004628 	.word	0x20004628

080015e8 <TIM1_UP_IRQHandler>:
 80015e8:	f7ff bff8 	b.w	80015dc <TIM1_BRK_IRQHandler>

080015ec <TIM1_TRG_COM_IRQHandler>:
 80015ec:	f7ff bff6 	b.w	80015dc <TIM1_BRK_IRQHandler>

080015f0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f0:	4801      	ldr	r0, [pc, #4]	; (80015f8 <TIM2_IRQHandler+0x8>)
 80015f2:	f013 bb64 	b.w	8014cbe <HAL_TIM_IRQHandler>
 80015f6:	bf00      	nop
 80015f8:	20004670 	.word	0x20004670

080015fc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015fc:	4801      	ldr	r0, [pc, #4]	; (8001604 <TIM3_IRQHandler+0x8>)
 80015fe:	f013 bb5e 	b.w	8014cbe <HAL_TIM_IRQHandler>
 8001602:	bf00      	nop
 8001604:	200045e0 	.word	0x200045e0

08001608 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001608:	4801      	ldr	r0, [pc, #4]	; (8001610 <TIM4_IRQHandler+0x8>)
 800160a:	f013 bb58 	b.w	8014cbe <HAL_TIM_IRQHandler>
 800160e:	bf00      	nop
 8001610:	20004598 	.word	0x20004598

08001614 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <_sbrk+0x30>)
{
 8001616:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001618:	6819      	ldr	r1, [r3, #0]
{
 800161a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800161c:	b909      	cbnz	r1, 8001622 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800161e:	490a      	ldr	r1, [pc, #40]	; (8001648 <_sbrk+0x34>)
 8001620:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	4909      	ldr	r1, [pc, #36]	; (800164c <_sbrk+0x38>)
 8001626:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <_sbrk+0x3c>)
 8001628:	4402      	add	r2, r0
 800162a:	1b09      	subs	r1, r1, r4
 800162c:	428a      	cmp	r2, r1
 800162e:	d906      	bls.n	800163e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001630:	f013 fe2c 	bl	801528c <__errno>
 8001634:	230c      	movs	r3, #12
 8001636:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800163c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800163e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001640:	e7fc      	b.n	800163c <_sbrk+0x28>
 8001642:	bf00      	nop
 8001644:	20001a60 	.word	0x20001a60
 8001648:	20004908 	.word	0x20004908
 800164c:	20005000 	.word	0x20005000
 8001650:	00000400 	.word	0x00000400

08001654 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	4770      	bx	lr
	...

08001658 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	2210      	movs	r2, #16
 800165c:	2100      	movs	r1, #0
 800165e:	a802      	add	r0, sp, #8
 8001660:	f013 fe46 	bl	80152f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 720-1;
 8001664:	f240 22cf 	movw	r2, #719	; 0x2cf
  htim1.Instance = TIM1;
 8001668:	4814      	ldr	r0, [pc, #80]	; (80016bc <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 720-1;
 800166a:	4915      	ldr	r1, [pc, #84]	; (80016c0 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 720-1;
 800166e:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 10000-1;
 8001672:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001684:	f013 fbf6 	bl	8014e74 <HAL_TIM_Base_Init>
 8001688:	b108      	cbz	r0, 800168e <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 800168a:	f7ff fe17 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <MX_TIM1_Init+0x64>)
 8001694:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001698:	f013 fcd5 	bl	8015046 <HAL_TIM_ConfigClockSource>
 800169c:	b108      	cbz	r0, 80016a2 <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 800169e:	f7ff fe0d 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a4:	4669      	mov	r1, sp
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	f013 fdbe 	bl	801522c <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	b108      	cbz	r0, 80016b6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80016b2:	f7ff fe03 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016b6:	b007      	add	sp, #28
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016bc:	20004628 	.word	0x20004628
 80016c0:	40012c00 	.word	0x40012c00

080016c4 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	2210      	movs	r2, #16
 80016c8:	2100      	movs	r1, #0
 80016ca:	a802      	add	r0, sp, #8
 80016cc:	f013 fe10 	bl	80152f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 7200-1;
 80016d0:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim3.Instance = TIM3;
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 7200-1;
 80016d6:	4915      	ldr	r1, [pc, #84]	; (800172c <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 7200-1;
 80016da:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 10000-1;
 80016de:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ee:	f013 fbc1 	bl	8014e74 <HAL_TIM_Base_Init>
 80016f2:	b108      	cbz	r0, 80016f8 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 80016f4:	f7ff fde2 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <MX_TIM3_Init+0x64>)
 80016fe:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001702:	f013 fca0 	bl	8015046 <HAL_TIM_ConfigClockSource>
 8001706:	b108      	cbz	r0, 800170c <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8001708:	f7ff fdd8 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170e:	4669      	mov	r1, sp
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001716:	f013 fd89 	bl	801522c <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	b108      	cbz	r0, 8001720 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800171c:	f7ff fdce 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001720:	b007      	add	sp, #28
 8001722:	f85d fb04 	ldr.w	pc, [sp], #4
 8001726:	bf00      	nop
 8001728:	200045e0 	.word	0x200045e0
 800172c:	40000400 	.word	0x40000400

08001730 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	2210      	movs	r2, #16
 8001734:	2100      	movs	r1, #0
 8001736:	a802      	add	r0, sp, #8
 8001738:	f013 fdda 	bl	80152f0 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 7200-1;
 800173c:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim4.Instance = TIM4;
 8001740:	4814      	ldr	r0, [pc, #80]	; (8001794 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 7200-1;
 8001742:	4915      	ldr	r1, [pc, #84]	; (8001798 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7200-1;
 8001746:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
 800174a:	f240 32e7 	movw	r2, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174e:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800175a:	f013 fb8b 	bl	8014e74 <HAL_TIM_Base_Init>
 800175e:	b108      	cbz	r0, 8001764 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8001760:	f7ff fdac 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <MX_TIM4_Init+0x64>)
 800176a:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800176e:	f013 fc6a 	bl	8015046 <HAL_TIM_ConfigClockSource>
 8001772:	b108      	cbz	r0, 8001778 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8001774:	f7ff fda2 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800177a:	4669      	mov	r1, sp
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001782:	f013 fd53 	bl	801522c <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	b108      	cbz	r0, 800178c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001788:	f7ff fd98 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800178c:	b007      	add	sp, #28
 800178e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001792:	bf00      	nop
 8001794:	20004598 	.word	0x20004598
 8001798:	40000800 	.word	0x40000800

0800179c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800179c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 800179e:	6803      	ldr	r3, [r0, #0]
 80017a0:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_TIM_Base_MspInit+0xd4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d124      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017a8:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b0:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b4:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017b6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017c0:	f012 fa82 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80017c4:	2018      	movs	r0, #24
 80017c6:	f012 fab1 	bl	8013d2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2019      	movs	r0, #25
 80017ce:	4611      	mov	r1, r2
 80017d0:	f012 fa7a 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017d4:	2019      	movs	r0, #25
 80017d6:	f012 faa9 	bl	8013d2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	201a      	movs	r0, #26
 80017de:	4611      	mov	r1, r2
 80017e0:	f012 fa72 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80017e4:	201a      	movs	r0, #26
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017e6:	b005      	add	sp, #20
 80017e8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ec:	f012 ba9e 	b.w	8013d2c <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM2)
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d111      	bne.n	800181a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017fa:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017fc:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001808:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001812:	f012 fa59 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001816:	201c      	movs	r0, #28
 8001818:	e7e5      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM3)
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_TIM_Base_MspInit+0xdc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d110      	bne.n	8001842 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001822:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	f042 0202 	orr.w	r2, r2, #2
 800182a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001830:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800183a:	f012 fa45 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800183e:	201d      	movs	r0, #29
 8001840:	e7d1      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x4a>
  else if(tim_baseHandle->Instance==TIM4)
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_TIM_Base_MspInit+0xe0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d110      	bne.n	800186a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_TIM_Base_MspInit+0xd8>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800184a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	f042 0204 	orr.w	r2, r2, #4
 8001852:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001856:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001858:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	9303      	str	r3, [sp, #12]
 8001860:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001862:	f012 fa31 	bl	8013cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001866:	201e      	movs	r0, #30
 8001868:	e7bd      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x4a>
}
 800186a:	b005      	add	sp, #20
 800186c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001870:	40012c00 	.word	0x40012c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40000400 	.word	0x40000400
 800187c:	40000800 	.word	0x40000800

08001880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
 8001884:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	2210      	movs	r2, #16
 8001888:	2100      	movs	r1, #0
 800188a:	a802      	add	r0, sp, #8
 800188c:	f013 fd30 	bl	80152f0 <memset>
  if(timHandle->Instance==TIM2)
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001896:	d113      	bne.n	80018c0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800189c:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = timer_pwm_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(timer_pwm_GPIO_Port, &GPIO_InitStruct);
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	f042 0204 	orr.w	r2, r2, #4
 80018a4:	619a      	str	r2, [r3, #24]
 80018a6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
    HAL_GPIO_Init(timer_pwm_GPIO_Port, &GPIO_InitStruct);
 80018b4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(timer_pwm_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f012 fb5a 	bl	8013f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c0:	b006      	add	sp, #24
 80018c2:	bd10      	pop	{r4, pc}
 80018c4:	40010800 	.word	0x40010800

080018c8 <MX_TIM2_Init>:
{
 80018c8:	b530      	push	{r4, r5, lr}
 80018ca:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018cc:	2210      	movs	r2, #16
 80018ce:	2100      	movs	r1, #0
 80018d0:	a803      	add	r0, sp, #12
 80018d2:	f013 fd0d 	bl	80152f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	2500      	movs	r5, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	221c      	movs	r2, #28
 80018da:	4629      	mov	r1, r5
 80018dc:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	e9cd 5501 	strd	r5, r5, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e4:	f013 fd04 	bl	80152f0 <memset>
  htim2.Init.Prescaler = 720-1;
 80018e8:	f240 23cf 	movw	r3, #719	; 0x2cf
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80018f0:	4c1f      	ldr	r4, [pc, #124]	; (8001970 <MX_TIM2_Init+0xa8>)
  htim2.Init.Prescaler = 720-1;
 80018f2:	e9c4 2300 	strd	r2, r3, [r4]
  htim2.Init.Period = 2000-1;
 80018f6:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fa:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001904:	f013 fab6 	bl	8014e74 <HAL_TIM_Base_Init>
 8001908:	b108      	cbz	r0, 800190e <MX_TIM2_Init+0x46>
    Error_Handler();
 800190a:	f7ff fcd7 	bl	80012bc <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001912:	4817      	ldr	r0, [pc, #92]	; (8001970 <MX_TIM2_Init+0xa8>)
 8001914:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001916:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001918:	f013 fb95 	bl	8015046 <HAL_TIM_ConfigClockSource>
 800191c:	b108      	cbz	r0, 8001922 <MX_TIM2_Init+0x5a>
    Error_Handler();
 800191e:	f7ff fccd 	bl	80012bc <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001922:	4813      	ldr	r0, [pc, #76]	; (8001970 <MX_TIM2_Init+0xa8>)
 8001924:	f013 fad2 	bl	8014ecc <HAL_TIM_PWM_Init>
 8001928:	b108      	cbz	r0, 800192e <MX_TIM2_Init+0x66>
    Error_Handler();
 800192a:	f7ff fcc7 	bl	80012bc <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <MX_TIM2_Init+0xa8>)
 8001932:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	e9cd 5501 	strd	r5, r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001938:	f013 fc78 	bl	801522c <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	b108      	cbz	r0, 8001942 <MX_TIM2_Init+0x7a>
    Error_Handler();
 800193e:	f7ff fcbd 	bl	80012bc <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001942:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001944:	220c      	movs	r2, #12
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <MX_TIM2_Init+0xa8>)
 8001948:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 800194a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	9509      	str	r5, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001950:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001952:	f013 fb13 	bl	8014f7c <HAL_TIM_PWM_ConfigChannel>
 8001956:	b108      	cbz	r0, 800195c <MX_TIM2_Init+0x94>
    Error_Handler();
 8001958:	f7ff fcb0 	bl	80012bc <Error_Handler>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 800195c:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim2);
 800195e:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_TIM2_Init+0xa8>)
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8001960:	69d3      	ldr	r3, [r2, #28]
 8001962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001966:	61d3      	str	r3, [r2, #28]
  HAL_TIM_MspPostInit(&htim2);
 8001968:	f7ff ff8a 	bl	8001880 <HAL_TIM_MspPostInit>
}
 800196c:	b00f      	add	sp, #60	; 0x3c
 800196e:	bd30      	pop	{r4, r5, pc}
 8001970:	20004670 	.word	0x20004670

08001974 <CAN_send_message>:

CAN_RxHeaderTypeDef pCAN_RxHeader;

// --CAN

void CAN_send_message(uint16_t adresse,uint8_t dlc,uint8_t  *message){
 8001974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	CAN_TxHeaderTypeDef pCAN_Header;
	pCAN_Header.DLC   = dlc; // 1 DLC is 8bits
	pCAN_Header.StdId = adresse;
	pCAN_Header.ExtId = adresse<<16;
	pCAN_Header.IDE   = CAN_ID_EXT;
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8001976:	2300      	movs	r3, #0
	pCAN_Header.DLC   = dlc; // 1 DLC is 8bits
 8001978:	9104      	str	r1, [sp, #16]
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 800197a:	2104      	movs	r1, #4
	pCAN_Header.StdId = adresse;
 800197c:	9000      	str	r0, [sp, #0]
	pCAN_Header.ExtId = adresse<<16;
 800197e:	0400      	lsls	r0, r0, #16
	pCAN_Header.RTR	  = CAN_RTR_DATA;
 8001980:	e9cd 1302 	strd	r1, r3, [sp, #8]
	pCAN_Header.ExtId = adresse<<16;
 8001984:	9001      	str	r0, [sp, #4]
	pCAN_Header.TransmitGlobalTime = DISABLE;
 8001986:	f88d 3014 	strb.w	r3, [sp, #20]

	HAL_CAN_AddTxMessage(&hcan, &pCAN_Header, message, &pCAN_TxMailbox);
 800198a:	4669      	mov	r1, sp
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <CAN_send_message+0x28>)
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <CAN_send_message+0x2c>)
 8001990:	f011 ffa7 	bl	80138e2 <HAL_CAN_AddTxMessage>

}
 8001994:	b007      	add	sp, #28
 8001996:	f85d fb04 	ldr.w	pc, [sp], #4
 800199a:	bf00      	nop
 800199c:	200046c0 	.word	0x200046c0
 80019a0:	20004470 	.word	0x20004470

080019a4 <CAN_receive_init>:

	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterIdHigh = /*((0x04210031  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;*/(0x04210031 >> 13);
	sFilterConfig.FilterIdLow = (0x04210031 & 0X1FFF) << 3;//(0x04210031 >> (11 - 3)) & 0xFFF8;//(0x04210031 >> 13);
 80019a4:	f242 1108 	movw	r1, #8456	; 0x2108
 80019a8:	f44f 72c4 	mov.w	r2, #392	; 0x188
void CAN_receive_init(void){
 80019ac:	b530      	push	{r4, r5, lr}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019b0:	2301      	movs	r3, #1
	sFilterConfig.FilterBank = 0;
 80019b2:	2400      	movs	r4, #0
	sFilterConfig.FilterIdLow = (0x04210031 & 0X1FFF) << 3;//(0x04210031 >> (11 - 3)) & 0xFFF8;//(0x04210031 >> 13);
 80019b4:	e9cd 1200 	strd	r1, r2, [sp]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;//(((uint16_t)0x0FFFffFF  << 5)  | (0x04210031  >> (32 - 5))) & 0xFFFF;
 80019b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;

	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);      // Configure le filtre comme ci-dessus
 80019bc:	4d0d      	ldr	r5, [pc, #52]	; (80019f4 <CAN_receive_init+0x50>)
 80019be:	4669      	mov	r1, sp
 80019c0:	4628      	mov	r0, r5
	sFilterConfig.FilterMaskIdLow =0x0000;// 0xFFF8;//(0x0FFFFFFF >> (11 - 3)) & 0xFFF8;
 80019c2:	e9cd 2402 	strd	r2, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 80019c6:	e9cd 3408 	strd	r3, r4, [sp, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019ca:	9307      	str	r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80019cc:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80019d0:	9404      	str	r4, [sp, #16]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);      // Configure le filtre comme ci-dessus
 80019d2:	f011 fee9 	bl	80137a8 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 80019d6:	2102      	movs	r1, #2
 80019d8:	4628      	mov	r0, r5
 80019da:	f012 f847 	bl	8013a6c <HAL_CAN_ActivateNotification>


	HAL_CAN_Start(&hcan);
 80019de:	4628      	mov	r0, r5
 80019e0:	f011 ff51 	bl	8013886 <HAL_CAN_Start>
	HAL_GPIO_WritePin(CAN_STBY_GPIO_Port, CAN_STBY_Pin, GPIO_PIN_RESET);
 80019e4:	4622      	mov	r2, r4
 80019e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <CAN_receive_init+0x54>)
 80019ec:	f012 fba4 	bl	8014138 <HAL_GPIO_WritePin>

}
 80019f0:	b00b      	add	sp, #44	; 0x2c
 80019f2:	bd30      	pop	{r4, r5, pc}
 80019f4:	20004470 	.word	0x20004470
 80019f8:	40010800 	.word	0x40010800

080019fc <wiper_start>:
extern TIM_HandleTypeDef htim2; //needed for specific period of pwm to control the servo motor
extern TIM_HandleTypeDef htim4; // control by wiper.c to change wiper speed

uint8_t wiper_direction = 1;

void wiper_start(wiper_speed the_wiper_speed){
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4605      	mov	r5, r0



	//HAL_TIM_Base_Start_IT(&htim2);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
    HAL_TIM_Base_Start_IT(&htim4);
 8001a00:	4c12      	ldr	r4, [pc, #72]	; (8001a4c <wiper_start+0x50>)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001a02:	210c      	movs	r1, #12
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <wiper_start+0x54>)
 8001a06:	f013 fc0f 	bl	8015228 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim4);
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f013 f928 	bl	8014c60 <HAL_TIM_Base_Start_IT>


	//configure htim4 period using wiper_speed
    switch (the_wiper_speed) {
 8001a10:	2d02      	cmp	r5, #2
 8001a12:	d011      	beq.n	8001a38 <wiper_start+0x3c>
 8001a14:	2d03      	cmp	r5, #3
 8001a16:	d012      	beq.n	8001a3e <wiper_start+0x42>
 8001a18:	2d01      	cmp	r5, #1
 8001a1a:	d113      	bne.n	8001a44 <wiper_start+0x48>
		case wiper_speed_1:
			htim4.Init.Period=10000-1;
 8001a1c:	f242 730f 	movw	r3, #9999	; 0x270f
			htim4.Init.Period=30000-1;
			HAL_TIM_Base_Init(&htim4);
			break;
		default:
			htim4.Init.Period=1000-1;
			HAL_TIM_Base_Init(&htim4);
 8001a20:	4620      	mov	r0, r4
			htim4.Init.Period=1000-1;
 8001a22:	60e3      	str	r3, [r4, #12]
			HAL_TIM_Base_Init(&htim4);
 8001a24:	f013 fa26 	bl	8014e74 <HAL_TIM_Base_Init>

    //switch wiper_power on
    	HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, GPIO_PIN_SET);


}
 8001a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	HAL_GPIO_WritePin(wiper_power_GPIO_Port, wiper_power_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a32:	4808      	ldr	r0, [pc, #32]	; (8001a54 <wiper_start+0x58>)
 8001a34:	f012 bb80 	b.w	8014138 <HAL_GPIO_WritePin>
			htim4.Init.Period=20000-1;
 8001a38:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001a3c:	e7f0      	b.n	8001a20 <wiper_start+0x24>
			htim4.Init.Period=30000-1;
 8001a3e:	f247 532f 	movw	r3, #29999	; 0x752f
 8001a42:	e7ed      	b.n	8001a20 <wiper_start+0x24>
			htim4.Init.Period=1000-1;
 8001a44:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a48:	e7ea      	b.n	8001a20 <wiper_start+0x24>
 8001a4a:	bf00      	nop
 8001a4c:	20004598 	.word	0x20004598
 8001a50:	20004670 	.word	0x20004670
 8001a54:	40011000 	.word	0x40011000

08001a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a7e:	f7ff fde9 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f013 fc09 	bl	8015298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7ff fbc3 	bl	8001210 <main>
  bx lr
 8001a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001a94:	0801a614 	.word	0x0801a614
  ldr r2, =_sbss
 8001a98:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001a9c:	20004908 	.word	0x20004908

08001aa0 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <CAN1_SCE_IRQHandler>

08001aa2 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8001aa2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001aa4:	b910      	cbnz	r0, 8001aac <lv_disp_get_scr_act+0xa>
 8001aa6:	f00d fb9d 	bl	800f1e4 <lv_disp_get_default>
    if(!disp) {
 8001aaa:	b100      	cbz	r0, 8001aae <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8001aac:	6900      	ldr	r0, [r0, #16]
}
 8001aae:	bd08      	pop	{r3, pc}

08001ab0 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8001ab0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001ab2:	b910      	cbnz	r0, 8001aba <lv_disp_get_scr_prev+0xa>
 8001ab4:	f00d fb96 	bl	800f1e4 <lv_disp_get_default>
    if(!disp) {
 8001ab8:	b100      	cbz	r0, 8001abc <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8001aba:	6940      	ldr	r0, [r0, #20]
}
 8001abc:	bd08      	pop	{r3, pc}

08001abe <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8001abe:	b570      	push	{r4, r5, r6, lr}
 8001ac0:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 8001ac2:	f004 fa15 	bl	8005ef0 <lv_obj_get_disp>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	b300      	cbz	r0, 8001b0c <lv_disp_load_scr+0x4e>

    lv_obj_t * old_scr = d->act_scr;
 8001aca:	6906      	ldr	r6, [r0, #16]

    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8001acc:	b15e      	cbz	r6, 8001ae6 <lv_disp_load_scr+0x28>
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2125      	movs	r1, #37	; 0x25
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f000 f8c4 	bl	8001c60 <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8001ad8:	692b      	ldr	r3, [r5, #16]
 8001ada:	b123      	cbz	r3, 8001ae6 <lv_disp_load_scr+0x28>
 8001adc:	2200      	movs	r2, #0
 8001ade:	2126      	movs	r1, #38	; 0x26
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f000 f8bd 	bl	8001c60 <lv_event_send>

    d->act_scr = scr;
 8001ae6:	612c      	str	r4, [r5, #16]

    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 8001ae8:	b15c      	cbz	r4, 8001b02 <lv_disp_load_scr+0x44>
 8001aea:	2200      	movs	r2, #0
 8001aec:	2127      	movs	r1, #39	; 0x27
 8001aee:	4620      	mov	r0, r4
 8001af0:	f000 f8b6 	bl	8001c60 <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8001af4:	692b      	ldr	r3, [r5, #16]
 8001af6:	b123      	cbz	r3, 8001b02 <lv_disp_load_scr+0x44>
 8001af8:	2200      	movs	r2, #0
 8001afa:	2128      	movs	r1, #40	; 0x28
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f8af 	bl	8001c60 <lv_event_send>

    lv_obj_invalidate(scr);
 8001b02:	4620      	mov	r0, r4
}
 8001b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(scr);
 8001b08:	f001 be39 	b.w	800377e <lv_obj_invalidate>
}
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}

08001b0e <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8001b0e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001b10:	b910      	cbnz	r0, 8001b18 <lv_disp_get_layer_top+0xa>
 8001b12:	f00d fb67 	bl	800f1e4 <lv_disp_get_default>
    if(!disp) {
 8001b16:	b100      	cbz	r0, 8001b1a <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8001b18:	69c0      	ldr	r0, [r0, #28]
}
 8001b1a:	bd08      	pop	{r3, pc}

08001b1c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001b1c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001b1e:	b910      	cbnz	r0, 8001b26 <lv_disp_get_layer_sys+0xa>
 8001b20:	f00d fb60 	bl	800f1e4 <lv_disp_get_default>
    if(!disp) {
 8001b24:	b100      	cbz	r0, 8001b28 <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8001b26:	6a00      	ldr	r0, [r0, #32]
}
 8001b28:	bd08      	pop	{r3, pc}

08001b2a <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8001b2a:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8001b2c:	b908      	cbnz	r0, 8001b32 <lv_disp_get_theme+0x8>
 8001b2e:	f00d fb59 	bl	800f1e4 <lv_disp_get_default>
    return disp->theme;
}
 8001b32:	6880      	ldr	r0, [r0, #8]
 8001b34:	bd08      	pop	{r3, pc}

08001b36 <lv_obj_event_base>:
    return res;
}


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8001b36:	b510      	push	{r4, lr}
 8001b38:	460c      	mov	r4, r1
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8001b3a:	b968      	cbnz	r0, 8001b58 <lv_obj_event_base+0x22>
 8001b3c:	684b      	ldr	r3, [r1, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
    else base = class_p->base_class;

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8001b40:	b160      	cbz	r0, 8001b5c <lv_obj_event_base+0x26>
 8001b42:	6903      	ldr	r3, [r0, #16]
 8001b44:	b143      	cbz	r3, 8001b58 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
    if(base->event_cb == NULL) return LV_RES_OK;

    /*Call the actual event callback*/
    e->user_data = NULL;
 8001b46:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001b48:	4621      	mov	r1, r4
    e->user_data = NULL;
 8001b4a:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8001b4c:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8001b4e:	7e20      	ldrb	r0, [r4, #24]
 8001b50:	43c0      	mvns	r0, r0
 8001b52:	f000 0001 	and.w	r0, r0, #1
 8001b56:	e002      	b.n	8001b5e <lv_obj_event_base+0x28>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001b58:	6800      	ldr	r0, [r0, #0]
 8001b5a:	e7f1      	b.n	8001b40 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 8001b5c:	2001      	movs	r0, #1

    return res;
}
 8001b5e:	bd10      	pop	{r4, pc}

08001b60 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8001b64:	f000 fa1e 	bl	8001fa4 <lv_indev_get_act>
    if(indev_act) {
 8001b68:	b120      	cbz	r0, 8001b74 <event_send_core+0x14>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001b6a:	6800      	ldr	r0, [r0, #0]
 8001b6c:	6883      	ldr	r3, [r0, #8]
 8001b6e:	b10b      	cbz	r3, 8001b74 <event_send_core+0x14>
 8001b70:	7a21      	ldrb	r1, [r4, #8]
 8001b72:	4798      	blx	r3
    }

    lv_res_t res = LV_RES_OK;
    res = lv_obj_event_base(NULL, e);
 8001b74:	4621      	mov	r1, r4
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff ffdd 	bl	8001b36 <lv_obj_event_base>

    lv_event_dsc_t * event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	b150      	cbz	r0, 8001b96 <event_send_core+0x36>
 8001b80:	6863      	ldr	r3, [r4, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001b84:	b34b      	cbz	r3, 8001bda <event_send_core+0x7a>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001b86:	7e9a      	ldrb	r2, [r3, #26]
 8001b88:	b33a      	cbz	r2, 8001bda <event_send_core+0x7a>
    return &obj->spec_attr->event_dsc[id];
 8001b8a:	2600      	movs	r6, #0
 8001b8c:	270c      	movs	r7, #12
 8001b8e:	68db      	ldr	r3, [r3, #12]

    uint32_t i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8001b90:	b31b      	cbz	r3, 8001bda <event_send_core+0x7a>
 8001b92:	2d01      	cmp	r5, #1
 8001b94:	d001      	beq.n	8001b9a <event_send_core+0x3a>
        if(res != LV_RES_OK) return LV_RES_INV;

    }

    return res;
}
 8001b96:	4628      	mov	r0, r5
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	b942      	cbnz	r2, 8001bb0 <event_send_core+0x50>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001b9e:	6863      	ldr	r3, [r4, #4]
        i++;
 8001ba0:	3601      	adds	r6, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001ba2:	689b      	ldr	r3, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001ba4:	b993      	cbnz	r3, 8001bcc <event_send_core+0x6c>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8001ba6:	6860      	ldr	r0, [r4, #4]
 8001ba8:	6843      	ldr	r3, [r0, #4]
 8001baa:	b9cb      	cbnz	r3, 8001be0 <event_send_core+0x80>
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;

    switch(e->code) {
 8001bac:	2501      	movs	r5, #1
 8001bae:	e7f2      	b.n	8001b96 <event_send_core+0x36>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001bb0:	7a19      	ldrb	r1, [r3, #8]
 8001bb2:	b111      	cbz	r1, 8001bba <event_send_core+0x5a>
 8001bb4:	7a20      	ldrb	r0, [r4, #8]
 8001bb6:	4288      	cmp	r0, r1
 8001bb8:	d1f1      	bne.n	8001b9e <event_send_core+0x3e>
            e->user_data = event_dsc->user_data;
 8001bba:	685b      	ldr	r3, [r3, #4]
            event_dsc->cb(e);
 8001bbc:	4620      	mov	r0, r4
            e->user_data = event_dsc->user_data;
 8001bbe:	60e3      	str	r3, [r4, #12]
            event_dsc->cb(e);
 8001bc0:	4790      	blx	r2
            if(e->deleted) return LV_RES_INV;
 8001bc2:	7e23      	ldrb	r3, [r4, #24]
 8001bc4:	07da      	lsls	r2, r3, #31
 8001bc6:	d5ea      	bpl.n	8001b9e <event_send_core+0x3e>
 8001bc8:	2500      	movs	r5, #0
 8001bca:	e7e4      	b.n	8001b96 <event_send_core+0x36>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001bcc:	7e9a      	ldrb	r2, [r3, #26]
 8001bce:	4296      	cmp	r6, r2
 8001bd0:	d2e9      	bcs.n	8001ba6 <event_send_core+0x46>
    return &obj->spec_attr->event_dsc[id];
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	fb07 3306 	mla	r3, r7, r6, r3
 8001bd8:	e7da      	b.n	8001b90 <event_send_core+0x30>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8001bda:	2d01      	cmp	r5, #1
 8001bdc:	d1db      	bne.n	8001b96 <event_send_core+0x36>
 8001bde:	e7e2      	b.n	8001ba6 <event_send_core+0x46>
    switch(e->code) {
 8001be0:	7a23      	ldrb	r3, [r4, #8]
 8001be2:	3b23      	subs	r3, #35	; 0x23
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d90a      	bls.n	8001bfe <event_send_core+0x9e>
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8001be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bec:	f000 fe18 	bl	8002820 <lv_obj_has_flag>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d0db      	beq.n	8001bac <event_send_core+0x4c>
    switch(e->code) {
 8001bf4:	7a23      	ldrb	r3, [r4, #8]
 8001bf6:	2b1b      	cmp	r3, #27
 8001bf8:	d80b      	bhi.n	8001c12 <event_send_core+0xb2>
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d8d6      	bhi.n	8001bac <event_send_core+0x4c>
        e->current_target = e->current_target->parent;
 8001bfe:	6863      	ldr	r3, [r4, #4]
        res = event_send_core(e);
 8001c00:	4620      	mov	r0, r4
        e->current_target = e->current_target->parent;
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 8001c06:	f7ff ffab 	bl	8001b60 <event_send_core>
            if(e->deleted) return LV_RES_INV;
 8001c0a:	1e43      	subs	r3, r0, #1
 8001c0c:	425d      	negs	r5, r3
 8001c0e:	415d      	adcs	r5, r3
 8001c10:	e7c1      	b.n	8001b96 <event_send_core+0x36>
    switch(e->code) {
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	2a0e      	cmp	r2, #14
 8001c18:	d8f1      	bhi.n	8001bfe <event_send_core+0x9e>
 8001c1a:	2b0e      	cmp	r3, #14
 8001c1c:	d8ef      	bhi.n	8001bfe <event_send_core+0x9e>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <event_send_core+0xc4>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001bad 	.word	0x08001bad
 8001c28:	08001bff 	.word	0x08001bff
 8001c2c:	08001bff 	.word	0x08001bff
 8001c30:	08001bad 	.word	0x08001bad
 8001c34:	08001bad 	.word	0x08001bad
 8001c38:	08001bad 	.word	0x08001bad
 8001c3c:	08001bad 	.word	0x08001bad
 8001c40:	08001bff 	.word	0x08001bff
 8001c44:	08001bff 	.word	0x08001bff
 8001c48:	08001bff 	.word	0x08001bff
 8001c4c:	08001bff 	.word	0x08001bff
 8001c50:	08001bad 	.word	0x08001bad
 8001c54:	08001bad 	.word	0x08001bad
 8001c58:	08001bff 	.word	0x08001bff
 8001c5c:	08001bad 	.word	0x08001bad

08001c60 <lv_event_send>:
{
 8001c60:	b510      	push	{r4, lr}
 8001c62:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8001c64:	b1b8      	cbz	r0, 8001c96 <lv_event_send+0x36>
    e.code = event_code;
 8001c66:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8001c6a:	2100      	movs	r1, #0
    e.deleted = 0;
 8001c6c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.prev = event_head;
 8001c70:	4c0a      	ldr	r4, [pc, #40]	; (8001c9c <lv_event_send+0x3c>)
    e.deleted = 0;
 8001c72:	f361 0300 	bfi	r3, r1, #0, #1
 8001c76:	f88d 301c 	strb.w	r3, [sp, #28]
    e.prev = event_head;
 8001c7a:	6823      	ldr	r3, [r4, #0]
    e.current_target = obj;
 8001c7c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    event_head = &e;
 8001c80:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8001c82:	9306      	str	r3, [sp, #24]
    e.param = param;
 8001c84:	e9cd 1204 	strd	r1, r2, [sp, #16]
    event_head = &e;
 8001c88:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8001c8a:	f7ff ff69 	bl	8001b60 <event_send_core>
    event_head = e.prev;
 8001c8e:	9b06      	ldr	r3, [sp, #24]
 8001c90:	6023      	str	r3, [r4, #0]
}
 8001c92:	b008      	add	sp, #32
 8001c94:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8001c96:	2001      	movs	r0, #1
 8001c98:	e7fb      	b.n	8001c92 <lv_event_send+0x32>
 8001c9a:	bf00      	nop
 8001c9c:	20001a6c 	.word	0x20001a6c

08001ca0 <lv_event_get_target>:
}
 8001ca0:	6800      	ldr	r0, [r0, #0]
 8001ca2:	4770      	bx	lr

08001ca4 <lv_event_get_current_target>:
}
 8001ca4:	6840      	ldr	r0, [r0, #4]
 8001ca6:	4770      	bx	lr

08001ca8 <lv_event_get_code>:
}
 8001ca8:	7a00      	ldrb	r0, [r0, #8]
 8001caa:	4770      	bx	lr

08001cac <lv_event_get_param>:
}
 8001cac:	6900      	ldr	r0, [r0, #16]
 8001cae:	4770      	bx	lr

08001cb0 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_lv_event_mark_deleted+0x20>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8001cb4:	b903      	cbnz	r3, 8001cb8 <_lv_event_mark_deleted+0x8>
}
 8001cb6:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4282      	cmp	r2, r0
 8001cbc:	d002      	beq.n	8001cc4 <_lv_event_mark_deleted+0x14>
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4282      	cmp	r2, r0
 8001cc2:	d103      	bne.n	8001ccc <_lv_event_mark_deleted+0x1c>
 8001cc4:	7e1a      	ldrb	r2, [r3, #24]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	e7f1      	b.n	8001cb4 <_lv_event_mark_deleted+0x4>
 8001cd0:	20001a6c 	.word	0x20001a6c

08001cd4 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 8001cd4:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b0f      	cmp	r3, #15
    return e->param;
 8001cda:	bf94      	ite	ls
 8001cdc:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 8001cde:	2000      	movhi	r0, #0
}
 8001ce0:	4770      	bx	lr

08001ce2 <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001ce2:	7a03      	ldrb	r3, [r0, #8]
 8001ce4:	3b14      	subs	r3, #20
 8001ce6:	2b05      	cmp	r3, #5
    return e->param;
 8001ce8:	bf94      	ite	ls
 8001cea:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 8001cec:	2000      	movhi	r0, #0
}
 8001cee:	4770      	bx	lr

08001cf0 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001cf0:	7a02      	ldrb	r2, [r0, #8]
{
 8001cf2:	460b      	mov	r3, r1
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001cf4:	2a13      	cmp	r2, #19
 8001cf6:	d106      	bne.n	8001d06 <lv_event_set_ext_draw_size+0x16>
    return e->param;
 8001cf8:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8001cfa:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	bfb8      	it	lt
 8001d02:	4619      	movlt	r1, r3
 8001d04:	8011      	strh	r1, [r2, #0]
}
 8001d06:	4770      	bx	lr

08001d08 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	4607      	mov	r7, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f00d faa5 	bl	800f25c <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 8001d12:	2600      	movs	r6, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001d14:	4604      	mov	r4, r0
    lv_indev_t * indev_encoder = NULL;
 8001d16:	4635      	mov	r5, r6
    while(indev) {
 8001d18:	b934      	cbnz	r4, 8001d28 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 8001d1a:	b9bd      	cbnz	r5, 8001d4c <get_indev+0x44>
    if(indev_group) return indev_group;
 8001d1c:	b9c6      	cbnz	r6, 8001d50 <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8001d1e:	4630      	mov	r0, r6
}
 8001d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 8001d24:	f00d ba9a 	b.w	800f25c <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f000 f941 	bl	8001fb0 <lv_indev_get_type>
        if(indev->group == g) {
 8001d2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d30:	42bb      	cmp	r3, r7
 8001d32:	d105      	bne.n	8001d40 <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d008      	beq.n	8001d4a <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001d38:	4626      	mov	r6, r4
 8001d3a:	2804      	cmp	r0, #4
 8001d3c:	bf08      	it	eq
 8001d3e:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f00d fa8b 	bl	800f25c <lv_indev_get_next>
 8001d46:	4604      	mov	r4, r0
 8001d48:	e7e6      	b.n	8001d18 <get_indev+0x10>
 8001d4a:	4625      	mov	r5, r4
}
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d50:	4635      	mov	r5, r6
 8001d52:	e7fb      	b.n	8001d4c <get_indev+0x44>

08001d54 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d58:	4605      	mov	r5, r0
 8001d5a:	468a      	mov	sl, r1
 8001d5c:	4690      	mov	r8, r2
    bool can_begin           = true;
 8001d5e:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
 8001d62:	2600      	movs	r6, #0
    lv_obj_t ** obj_next     = group->obj_focus;
 8001d64:	68c4      	ldr	r4, [r0, #12]
        if(obj_next == NULL) {
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	d157      	bne.n	8001e1a <focus_next_core.part.0+0xc6>
            if(group->wrap || obj_sentinel == NULL) {
 8001d6a:	7e2b      	ldrb	r3, [r5, #24]
 8001d6c:	071a      	lsls	r2, r3, #28
 8001d6e:	d401      	bmi.n	8001d74 <focus_next_core.part.0+0x20>
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	d15b      	bne.n	8001e2c <focus_next_core.part.0+0xd8>
                if(!can_begin) return;
 8001d74:	f1b9 0f00 	cmp.w	r9, #0
 8001d78:	d058      	beq.n	8001e2c <focus_next_core.part.0+0xd8>
                obj_next  = begin(&group->obj_ll);
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	47d0      	blx	sl
 8001d7e:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d134      	bne.n	8001dee <focus_next_core.part.0+0x9a>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001d84:	2800      	cmp	r0, #0
 8001d86:	d051      	beq.n	8001e2c <focus_next_core.part.0+0xd8>
 8001d88:	4606      	mov	r6, r0
                can_begin = false;
 8001d8a:	f04f 0900 	mov.w	r9, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001d8e:	6820      	ldr	r0, [r4, #0]
 8001d90:	f000 fd53 	bl	800283a <lv_obj_get_state>
 8001d94:	0603      	lsls	r3, r0, #24
 8001d96:	d4e6      	bmi.n	8001d66 <focus_next_core.part.0+0x12>
        lv_obj_t * parent = *obj_next;
 8001d98:	6827      	ldr	r7, [r4, #0]
        while(parent) {
 8001d9a:	bb6f      	cbnz	r7, 8001df8 <focus_next_core.part.0+0xa4>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001d9c:	68eb      	ldr	r3, [r5, #12]
 8001d9e:	42a3      	cmp	r3, r4
 8001da0:	d044      	beq.n	8001e2c <focus_next_core.part.0+0xd8>
    if(group->obj_focus) {
 8001da2:	b173      	cbz	r3, 8001dc2 <focus_next_core.part.0+0x6e>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001da4:	4628      	mov	r0, r5
 8001da6:	681e      	ldr	r6, [r3, #0]
 8001da8:	f7ff ffae 	bl	8001d08 <get_indev>
 8001dac:	210f      	movs	r1, #15
 8001dae:	4602      	mov	r2, r0
 8001db0:	4630      	mov	r0, r6
 8001db2:	f7ff ff55 	bl	8001c60 <lv_event_send>
        if(res != LV_RES_OK) return;
 8001db6:	2801      	cmp	r0, #1
 8001db8:	d138      	bne.n	8001e2c <focus_next_core.part.0+0xd8>
        lv_obj_invalidate(*group->obj_focus);
 8001dba:	68eb      	ldr	r3, [r5, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f001 fcde 	bl	800377e <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8001dc2:	60ec      	str	r4, [r5, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	6824      	ldr	r4, [r4, #0]
 8001dc8:	f7ff ff9e 	bl	8001d08 <get_indev>
 8001dcc:	210e      	movs	r1, #14
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff ff45 	bl	8001c60 <lv_event_send>
    if(res != LV_RES_OK) return;
 8001dd6:	2801      	cmp	r0, #1
 8001dd8:	d128      	bne.n	8001e2c <focus_next_core.part.0+0xd8>
    lv_obj_invalidate(*group->obj_focus);
 8001dda:	68eb      	ldr	r3, [r5, #12]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f001 fcce 	bl	800377e <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8001de2:	692b      	ldr	r3, [r5, #16]
 8001de4:	b313      	cbz	r3, 8001e2c <focus_next_core.part.0+0xd8>
 8001de6:	4628      	mov	r0, r5
}
 8001de8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8001dec:	4718      	bx	r3
                can_begin = false;
 8001dee:	f04f 0900 	mov.w	r9, #0
        if(obj_next == NULL) continue;
 8001df2:	2c00      	cmp	r4, #0
 8001df4:	d1cb      	bne.n	8001d8e <focus_next_core.part.0+0x3a>
 8001df6:	e7b8      	b.n	8001d6a <focus_next_core.part.0+0x16>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	f000 fd10 	bl	8002820 <lv_obj_has_flag>
 8001e00:	b920      	cbnz	r0, 8001e0c <focus_next_core.part.0+0xb8>
            parent = lv_obj_get_parent(parent);
 8001e02:	4638      	mov	r0, r7
 8001e04:	f004 f894 	bl	8005f30 <lv_obj_get_parent>
 8001e08:	4607      	mov	r7, r0
 8001e0a:	e7c6      	b.n	8001d9a <focus_next_core.part.0+0x46>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4638      	mov	r0, r7
 8001e10:	f000 fd06 	bl	8002820 <lv_obj_has_flag>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d0c1      	beq.n	8001d9c <focus_next_core.part.0+0x48>
 8001e18:	e7a5      	b.n	8001d66 <focus_next_core.part.0+0x12>
            obj_next = move(&group->obj_ll, obj_next);
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	4628      	mov	r0, r5
        if(obj_sentinel == NULL) {
 8001e1e:	2e00      	cmp	r6, #0
 8001e20:	bf08      	it	eq
 8001e22:	4626      	moveq	r6, r4
            obj_next = move(&group->obj_ll, obj_next);
 8001e24:	47c0      	blx	r8
            if(obj_next == obj_sentinel) return;
 8001e26:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8001e28:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 8001e2a:	d1e2      	bne.n	8001df2 <focus_next_core.part.0+0x9e>
}
 8001e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001e30 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001e30:	211c      	movs	r1, #28
 8001e32:	4801      	ldr	r0, [pc, #4]	; (8001e38 <_lv_group_init+0x8>)
 8001e34:	f00d bebb 	b.w	800fbae <_lv_ll_init>
 8001e38:	200047f8 	.word	0x200047f8

08001e3c <lv_group_get_default>:
}
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <lv_group_get_default+0x8>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20001a70 	.word	0x20001a70

08001e48 <lv_group_focus_next>:
    if(group->frozen) return;
 8001e48:	7e03      	ldrb	r3, [r0, #24]
 8001e4a:	07db      	lsls	r3, r3, #31
 8001e4c:	d403      	bmi.n	8001e56 <lv_group_focus_next+0xe>
 8001e4e:	4a02      	ldr	r2, [pc, #8]	; (8001e58 <lv_group_focus_next+0x10>)
 8001e50:	4902      	ldr	r1, [pc, #8]	; (8001e5c <lv_group_focus_next+0x14>)
 8001e52:	f7ff bf7f 	b.w	8001d54 <focus_next_core.part.0>
}
 8001e56:	4770      	bx	lr
 8001e58:	0800fc8b 	.word	0x0800fc8b
 8001e5c:	0800fc7f 	.word	0x0800fc7f

08001e60 <lv_group_focus_prev>:
    if(group->frozen) return;
 8001e60:	7e03      	ldrb	r3, [r0, #24]
 8001e62:	07db      	lsls	r3, r3, #31
 8001e64:	d403      	bmi.n	8001e6e <lv_group_focus_prev+0xe>
 8001e66:	4a02      	ldr	r2, [pc, #8]	; (8001e70 <lv_group_focus_prev+0x10>)
 8001e68:	4902      	ldr	r1, [pc, #8]	; (8001e74 <lv_group_focus_prev+0x14>)
 8001e6a:	f7ff bf73 	b.w	8001d54 <focus_next_core.part.0>
}
 8001e6e:	4770      	bx	lr
 8001e70:	0800fc93 	.word	0x0800fc93
 8001e74:	0800fc85 	.word	0x0800fc85

08001e78 <lv_group_refocus>:
{
 8001e78:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8001e7a:	7e03      	ldrb	r3, [r0, #24]
{
 8001e7c:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8001e7e:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001e88:	075b      	lsls	r3, r3, #29
 8001e8a:	d406      	bmi.n	8001e9a <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8001e8c:	f7ff ffdc 	bl	8001e48 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8001e90:	7e23      	ldrb	r3, [r4, #24]
 8001e92:	f365 03c3 	bfi	r3, r5, #3, #1
 8001e96:	7623      	strb	r3, [r4, #24]
}
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8001e9a:	f7ff ffe1 	bl	8001e60 <lv_group_focus_prev>
 8001e9e:	e7f7      	b.n	8001e90 <lv_group_refocus+0x18>

08001ea0 <lv_group_add_obj>:
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	460c      	mov	r4, r1
    if(group == NULL) return;
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	b378      	cbz	r0, 8001f08 <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8001ea8:	f00d fee9 	bl	800fc7e <_lv_ll_get_head>
 8001eac:	4601      	mov	r1, r0
 8001eae:	b9c8      	cbnz	r0, 8001ee4 <lv_group_add_obj+0x44>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f000 fcc4 	bl	800283e <lv_obj_get_group>
    if(group_cur) {
 8001eb6:	b140      	cbz	r0, 8001eca <lv_group_add_obj+0x2a>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8001eb8:	68a3      	ldr	r3, [r4, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	b153      	cbz	r3, 8001ed4 <lv_group_add_obj+0x34>
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	42a3      	cmp	r3, r4
 8001ec4:	d106      	bne.n	8001ed4 <lv_group_add_obj+0x34>
            lv_group_refocus(group_cur);
 8001ec6:	f7ff ffd7 	bl	8001e78 <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8001eca:	68a3      	ldr	r3, [r4, #8]
 8001ecc:	b913      	cbnz	r3, 8001ed4 <lv_group_add_obj+0x34>
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 fe88 	bl	8002be4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8001ed4:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8001ed6:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 8001ed8:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8001eda:	f00d fe8b 	bl	800fbf4 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 8001ede:	4606      	mov	r6, r0
 8001ee0:	b938      	cbnz	r0, 8001ef2 <lv_group_add_obj+0x52>
 8001ee2:	e7fe      	b.n	8001ee2 <lv_group_add_obj+0x42>
        if((*obj_i) == obj) {
 8001ee4:	680b      	ldr	r3, [r1, #0]
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	d00e      	beq.n	8001f08 <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8001eea:	4628      	mov	r0, r5
 8001eec:	f00d fecd 	bl	800fc8a <_lv_ll_get_next>
 8001ef0:	e7dc      	b.n	8001eac <lv_group_add_obj+0xc>
    *next = obj;
 8001ef2:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f00d fec2 	bl	800fc7e <_lv_ll_get_head>
 8001efa:	4286      	cmp	r6, r0
 8001efc:	d104      	bne.n	8001f08 <lv_group_add_obj+0x68>
        lv_group_refocus(group);
 8001efe:	4628      	mov	r0, r5
}
 8001f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8001f04:	f7ff bfb8 	b.w	8001e78 <lv_group_refocus>
}
 8001f08:	bd70      	pop	{r4, r5, r6, pc}

08001f0a <lv_group_remove_obj>:
{
 8001f0a:	b570      	push	{r4, r5, r6, lr}
 8001f0c:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8001f0e:	f000 fc96 	bl	800283e <lv_obj_get_group>
    if(g == NULL) return;
 8001f12:	4604      	mov	r4, r0
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d038      	beq.n	8001f8a <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 8001f18:	68c3      	ldr	r3, [r0, #12]
 8001f1a:	b1e3      	cbz	r3, 8001f56 <lv_group_remove_obj+0x4c>
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	42b3      	cmp	r3, r6
 8001f20:	d119      	bne.n	8001f56 <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 8001f22:	7e03      	ldrb	r3, [r0, #24]
 8001f24:	07da      	lsls	r2, r3, #31
 8001f26:	bf44      	itt	mi
 8001f28:	f36f 0300 	bfcmi	r3, #0, #1
 8001f2c:	7603      	strbmi	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8001f2e:	f00d fea6 	bl	800fc7e <_lv_ll_get_head>
 8001f32:	68e3      	ldr	r3, [r4, #12]
 8001f34:	4283      	cmp	r3, r0
 8001f36:	d129      	bne.n	8001f8c <lv_group_remove_obj+0x82>
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f00d fea3 	bl	800fc84 <_lv_ll_get_tail>
 8001f3e:	68e3      	ldr	r3, [r4, #12]
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d123      	bne.n	8001f8c <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8001f44:	6805      	ldr	r5, [r0, #0]
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fede 	bl	8001d08 <get_indev>
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4628      	mov	r0, r5
 8001f52:	f7ff fe85 	bl	8001c60 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 8001f56:	68e3      	ldr	r3, [r4, #12]
 8001f58:	b123      	cbz	r3, 8001f64 <lv_group_remove_obj+0x5a>
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 8001f5e:	bf04      	itt	eq
 8001f60:	2300      	moveq	r3, #0
 8001f62:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 8001f64:	4620      	mov	r0, r4
 8001f66:	f00d fe8a 	bl	800fc7e <_lv_ll_get_head>
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	b168      	cbz	r0, 8001f8a <lv_group_remove_obj+0x80>
        if(*i == obj) {
 8001f6e:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 8001f70:	4629      	mov	r1, r5
        if(*i == obj) {
 8001f72:	42b3      	cmp	r3, r6
            _lv_ll_remove(&g->obj_ll, i);
 8001f74:	4620      	mov	r0, r4
        if(*i == obj) {
 8001f76:	d10d      	bne.n	8001f94 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 8001f78:	f00d fe58 	bl	800fc2c <_lv_ll_remove>
            lv_mem_free(i);
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f00d ff13 	bl	800fda8 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8001f82:	68b3      	ldr	r3, [r6, #8]
 8001f84:	b10b      	cbz	r3, 8001f8a <lv_group_remove_obj+0x80>
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff ff73 	bl	8001e78 <lv_group_refocus>
 8001f92:	e7e0      	b.n	8001f56 <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 8001f94:	f00d fe79 	bl	800fc8a <_lv_ll_get_next>
 8001f98:	e7e7      	b.n	8001f6a <lv_group_remove_obj+0x60>

08001f9a <lv_group_get_editing>:
    if(!group) return false;
 8001f9a:	b110      	cbz	r0, 8001fa2 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 8001f9c:	7e00      	ldrb	r0, [r0, #24]
 8001f9e:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8001fa2:	4770      	bx	lr

08001fa4 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <lv_indev_get_act+0x8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20001a74 	.word	0x20001a74

08001fb0 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8001fb0:	b108      	cbz	r0, 8001fb6 <lv_indev_get_type+0x6>

    return indev->driver->type;
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	7818      	ldrb	r0, [r3, #0]
}
 8001fb6:	4770      	bx	lr

08001fb8 <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 8001fb8:	b158      	cbz	r0, 8001fd2 <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d104      	bne.n	8001fd0 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 8001fc6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001fca:	f000 000f 	and.w	r0, r0, #15
 8001fce:	4770      	bx	lr
    if(indev == NULL) return false;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	4770      	bx	lr

08001fd4 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
 8001fd4:	b140      	cbz	r0, 8001fe8 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8001fd6:	6803      	ldr	r3, [r0, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 8001fe2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001fe4:	4770      	bx	lr
    if(indev == NULL) return NULL;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	4770      	bx	lr

08001fea <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8001fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->state == new_state) return;
 8001fee:	8c03      	ldrh	r3, [r0, #32]
{
 8001ff0:	b08d      	sub	sp, #52	; 0x34
    if(obj->state == new_state) return;
 8001ff2:	428b      	cmp	r3, r1
{
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
 8001ff8:	9304      	str	r3, [sp, #16]
 8001ffa:	f000 80e5 	beq.w	80021c8 <lv_obj_set_state+0x1de>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8001ffe:	460a      	mov	r2, r1
    obj->state = new_state;
 8002000:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8002002:	4619      	mov	r1, r3
 8002004:	f003 fe14 	bl	8005c30 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8002008:	9003      	str	r0, [sp, #12]
 800200a:	2800      	cmp	r0, #0
 800200c:	f000 80dc 	beq.w	80021c8 <lv_obj_set_state+0x1de>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8002010:	f44f 7020 	mov.w	r0, #640	; 0x280
 8002014:	f00e f87e 	bl	8010114 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8002018:	f04f 0900 	mov.w	r9, #0
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800201c:	f44f 7120 	mov.w	r1, #640	; 0x280
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8002020:	4607      	mov	r7, r0
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8002022:	f00e f8c5 	bl	80101b0 <lv_memset_00>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8002026:	ea6f 0308 	mvn.w	r3, r8
    uint32_t tsi = 0;
 800202a:	464d      	mov	r5, r9
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 800202c:	9308      	str	r3, [sp, #32]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800202e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8002030:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002034:	454b      	cmp	r3, r9
 8002036:	d901      	bls.n	800203c <lv_obj_set_state+0x52>
 8002038:	2d1f      	cmp	r5, #31
 800203a:	d913      	bls.n	8002064 <lv_obj_set_state+0x7a>
 800203c:	2314      	movs	r3, #20
 800203e:	463e      	mov	r6, r7
 8002040:	fb03 7505 	mla	r5, r3, r5, r7
                tsi++;
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 8002044:	42ae      	cmp	r6, r5
 8002046:	f040 809a 	bne.w	800217e <lv_obj_set_state+0x194>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
    }

    lv_mem_buf_release(ts);
 800204a:	4638      	mov	r0, r7
 800204c:	f00d feba 	bl	800fdc4 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 809f 	bne.w	8002196 <lv_obj_set_state+0x1ac>
        lv_obj_invalidate(obj);
 8002058:	4620      	mov	r0, r4
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 800205a:	b00d      	add	sp, #52	; 0x34
 800205c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 8002060:	f001 bb8d 	b.w	800377e <lv_obj_invalidate>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8002064:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8002068:	ea4f 06c9 	mov.w	r6, r9, lsl #3
 800206c:	eb0a 0bc9 	add.w	fp, sl, r9, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8002070:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002074:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002078:	f003 fefe 	bl	8005e78 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800207c:	68e3      	ldr	r3, [r4, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800207e:	9005      	str	r0, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8002080:	4433      	add	r3, r6
 8002082:	6858      	ldr	r0, [r3, #4]
 8002084:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002088:	f003 fef8 	bl	8005e7c <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 800208c:	9b08      	ldr	r3, [sp, #32]
 800208e:	9a05      	ldr	r2, [sp, #20]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8002090:	9006      	str	r0, [sp, #24]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8002092:	4213      	tst	r3, r2
 8002094:	d10d      	bne.n	80020b2 <lv_obj_set_state+0xc8>
        if(obj_style->is_trans) continue;
 8002096:	f89b 3007 	ldrb.w	r3, [fp, #7]
 800209a:	f013 0302 	ands.w	r3, r3, #2
 800209e:	d108      	bne.n	80020b2 <lv_obj_set_state+0xc8>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) == false) continue;
 80020a0:	f85a 1006 	ldr.w	r1, [sl, r6]
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                 lv_style_value_t * value)
{
    if(style->is_const) {
 80020a4:	f991 2005 	ldrsb.w	r2, [r1, #5]
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	da16      	bge.n	80020da <lv_obj_set_state+0xf0>
        const lv_style_const_prop_t * const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 80020ac:	680b      	ldr	r3, [r1, #0]
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	b912      	cbnz	r2, 80020b8 <lv_obj_set_state+0xce>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80020b2:	f109 0901 	add.w	r9, r9, #1
 80020b6:	e7ba      	b.n	800202e <lv_obj_set_state+0x44>
            if(const_prop->prop == prop) {
 80020b8:	2a67      	cmp	r2, #103	; 0x67
 80020ba:	d10c      	bne.n	80020d6 <lv_obj_set_state+0xec>
                *value = const_prop->value;
 80020bc:	685e      	ldr	r6, [r3, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80020be:	f04f 0a00 	mov.w	sl, #0
 80020c2:	6833      	ldr	r3, [r6, #0]
 80020c4:	f833 300a 	ldrh.w	r3, [r3, sl]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f2      	beq.n	80020b2 <lv_obj_set_state+0xc8>
 80020cc:	2d1f      	cmp	r5, #31
 80020ce:	d8f0      	bhi.n	80020b2 <lv_obj_set_state+0xc8>
 80020d0:	463a      	mov	r2, r7
            for(t = 0; t < tsi; t++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	e039      	b.n	800214a <lv_obj_set_state+0x160>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 80020d6:	3308      	adds	r3, #8
 80020d8:	e7e9      	b.n	80020ae <lv_obj_set_state+0xc4>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
 80020da:	79ca      	ldrb	r2, [r1, #7]
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d0e8      	beq.n	80020b2 <lv_obj_set_state+0xc8>

    if(style->prop_cnt > 1) {
 80020e0:	2a01      	cmp	r2, #1
 80020e2:	d90d      	bls.n	8002100 <lv_obj_set_state+0x116>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80020e4:	6809      	ldr	r1, [r1, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80020e6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
            if(props[i] == prop) {
 80020ea:	f830 6b02 	ldrh.w	r6, [r0], #2
 80020ee:	2e67      	cmp	r6, #103	; 0x67
 80020f0:	d102      	bne.n	80020f8 <lv_obj_set_state+0x10e>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
 80020f2:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
                return LV_RES_OK;
 80020f6:	e7e2      	b.n	80020be <lv_obj_set_state+0xd4>
        for(i = 0; i < style->prop_cnt; i++) {
 80020f8:	3301      	adds	r3, #1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d8f5      	bhi.n	80020ea <lv_obj_set_state+0x100>
 80020fe:	e7d8      	b.n	80020b2 <lv_obj_set_state+0xc8>
            }
        }
    }
    else if(style->prop1 == prop) {
 8002100:	888b      	ldrh	r3, [r1, #4]
 8002102:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002106:	2b67      	cmp	r3, #103	; 0x67
 8002108:	d1d3      	bne.n	80020b2 <lv_obj_set_state+0xc8>
        *value = style->v_p.value1;
 800210a:	680e      	ldr	r6, [r1, #0]
        return LV_RES_OK;
 800210c:	e7d7      	b.n	80020be <lv_obj_set_state+0xd4>
                lv_style_selector_t selector = ts[t].selector;
 800210e:	6851      	ldr	r1, [r2, #4]
 8002110:	930b      	str	r3, [sp, #44]	; 0x2c
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8002112:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 8002114:	920a      	str	r2, [sp, #40]	; 0x28
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8002116:	9109      	str	r1, [sp, #36]	; 0x24
 8002118:	f003 feae 	bl	8005e78 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 800211c:	9909      	ldr	r1, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 800211e:	9007      	str	r0, [sp, #28]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8002120:	4608      	mov	r0, r1
 8002122:	f003 feab 	bl	8005e7c <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8002126:	6831      	ldr	r1, [r6, #0]
 8002128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800212a:	f831 100a 	ldrh.w	r1, [r1, sl]
 800212e:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8002132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002134:	458c      	cmp	ip, r1
 8002136:	d106      	bne.n	8002146 <lv_obj_set_state+0x15c>
 8002138:	9906      	ldr	r1, [sp, #24]
 800213a:	4281      	cmp	r1, r0
 800213c:	d103      	bne.n	8002146 <lv_obj_set_state+0x15c>
 800213e:	9905      	ldr	r1, [sp, #20]
 8002140:	9807      	ldr	r0, [sp, #28]
 8002142:	4281      	cmp	r1, r0
 8002144:	d918      	bls.n	8002178 <lv_obj_set_state+0x18e>
            for(t = 0; t < tsi; t++) {
 8002146:	3301      	adds	r3, #1
 8002148:	3214      	adds	r2, #20
 800214a:	429d      	cmp	r5, r3
 800214c:	d1df      	bne.n	800210e <lv_obj_set_state+0x124>
                ts[tsi].time = tr->time;
 800214e:	2314      	movs	r3, #20
 8002150:	436b      	muls	r3, r5
 8002152:	68f0      	ldr	r0, [r6, #12]
 8002154:	6831      	ldr	r1, [r6, #0]
 8002156:	18fa      	adds	r2, r7, r3
 8002158:	52f8      	strh	r0, [r7, r3]
                ts[tsi].delay = tr->delay;
 800215a:	6933      	ldr	r3, [r6, #16]
                tsi++;
 800215c:	3501      	adds	r5, #1
                ts[tsi].delay = tr->delay;
 800215e:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8002160:	68b3      	ldr	r3, [r6, #8]
 8002162:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 8002164:	f831 300a 	ldrh.w	r3, [r1, sl]
 8002168:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 800216a:	6873      	ldr	r3, [r6, #4]
 800216c:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 800216e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002172:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8002176:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8002178:	f10a 0a02 	add.w	sl, sl, #2
 800217c:	e7a1      	b.n	80020c2 <lv_obj_set_state+0xd8>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800217e:	6870      	ldr	r0, [r6, #4]
 8002180:	f003 fe7c 	bl	8005e7c <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8002184:	9600      	str	r6, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8002186:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8002188:	4643      	mov	r3, r8
 800218a:	4620      	mov	r0, r4
 800218c:	9a04      	ldr	r2, [sp, #16]
 800218e:	f003 fcb5 	bl	8005afc <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8002192:	3614      	adds	r6, #20
 8002194:	e756      	b.n	8002044 <lv_obj_set_state+0x5a>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8002196:	9b03      	ldr	r3, [sp, #12]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d109      	bne.n	80021b0 <lv_obj_set_state+0x1c6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800219c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a0:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80021a4:	4620      	mov	r0, r4
}
 80021a6:	b00d      	add	sp, #52	; 0x34
 80021a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80021ac:	f003 b9d0 	b.w	8005550 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 80021b0:	9b03      	ldr	r3, [sp, #12]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d108      	bne.n	80021c8 <lv_obj_set_state+0x1de>
        lv_obj_invalidate(obj);
 80021b6:	4620      	mov	r0, r4
 80021b8:	f001 fae1 	bl	800377e <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 80021bc:	4620      	mov	r0, r4
}
 80021be:	b00d      	add	sp, #52	; 0x34
 80021c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 80021c4:	f001 b853 	b.w	800326e <lv_obj_refresh_ext_draw_size>
}
 80021c8:	b00d      	add	sp, #52	; 0x34
 80021ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021ce <lv_obj_constructor>:
{
 80021ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 80021d2:	684e      	ldr	r6, [r1, #4]
{
 80021d4:	460c      	mov	r4, r1
    if(parent) {
 80021d6:	b39e      	cbz	r6, 8002240 <lv_obj_constructor+0x72>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80021d8:	4630      	mov	r0, r6
 80021da:	f002 f8d7 	bl	800438c <lv_obj_get_scroll_left>
 80021de:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80021e0:	4630      	mov	r0, r6
 80021e2:	f002 f87c 	bl	80042de <lv_obj_get_scroll_top>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80021e6:	f641 0210 	movw	r2, #6160	; 0x1810
 80021ea:	4605      	mov	r5, r0
 80021ec:	2100      	movs	r1, #0
 80021ee:	4630      	mov	r0, r6
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80021f0:	8af7      	ldrh	r7, [r6, #22]
 80021f2:	f003 f8c9 	bl	8005388 <lv_obj_get_style_prop>
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	1b5b      	subs	r3, r3, r5
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 80021fe:	3b01      	subs	r3, #1
 8002200:	8363      	strh	r3, [r4, #26]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002202:	f641 0212 	movw	r2, #6162	; 0x1812
 8002206:	2100      	movs	r1, #0
 8002208:	4630      	mov	r0, r6
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800220a:	8ab5      	ldrh	r5, [r6, #20]
 800220c:	f003 f8bc 	bl	8005388 <lv_obj_get_style_prop>
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8002210:	f641 1302 	movw	r3, #6402	; 0x1902
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8002214:	4405      	add	r5, r0
 8002216:	eba5 0008 	sub.w	r0, r5, r8
 800221a:	b280      	uxth	r0, r0
 800221c:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 800221e:	3801      	subs	r0, #1
 8002220:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8002222:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8002224:	69e3      	ldr	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8002226:	b936      	cbnz	r6, 8002236 <lv_obj_constructor+0x68>
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8002228:	f443 638e 	orr.w	r3, r3, #1136	; 0x470
 800222c:	f043 0304 	orr.w	r3, r3, #4
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8002230:	61e3      	str	r3, [r4, #28]
}
 8002232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8002236:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800223a:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 800223e:	e7f7      	b.n	8002230 <lv_obj_constructor+0x62>
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8002240:	f640 0302 	movw	r3, #2050	; 0x802
 8002244:	e7ed      	b.n	8002222 <lv_obj_constructor+0x54>
	...

08002248 <lv_obj_draw>:
{
 8002248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800224c:	b0a4      	sub	sp, #144	; 0x90
 800224e:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8002250:	f7ff fd2a 	bl	8001ca8 <lv_event_get_code>
 8002254:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8002256:	4628      	mov	r0, r5
 8002258:	f7ff fd22 	bl	8001ca0 <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 800225c:	2e12      	cmp	r6, #18
    lv_obj_t * obj = lv_event_get_target(e);
 800225e:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8002260:	d15e      	bne.n	8002320 <lv_obj_draw+0xd8>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8002262:	4628      	mov	r0, r5
 8002264:	f7ff fd22 	bl	8001cac <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8002268:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 800226a:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 800226c:	2b02      	cmp	r3, #2
 800226e:	d008      	beq.n	8002282 <lv_obj_draw+0x3a>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8002270:	2261      	movs	r2, #97	; 0x61
 8002272:	2100      	movs	r1, #0
 8002274:	4620      	mov	r0, r4
 8002276:	f003 f887 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800227a:	4606      	mov	r6, r0
 800227c:	b120      	cbz	r0, 8002288 <lv_obj_draw+0x40>
            info->res = LV_COVER_RES_MASKED;
 800227e:	2302      	movs	r3, #2
            info->res = LV_COVER_RES_NOT_COVER;
 8002280:	702b      	strb	r3, [r5, #0]
}
 8002282:	b024      	add	sp, #144	; 0x90
 8002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8002288:	4601      	mov	r1, r0
 800228a:	2260      	movs	r2, #96	; 0x60
 800228c:	4620      	mov	r0, r4
 800228e:	f003 f87b 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002292:	f640 020a 	movw	r2, #2058	; 0x80a
 8002296:	4631      	mov	r1, r6
    return (lv_coord_t)v.num;
 8002298:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800229c:	4620      	mov	r0, r4
 800229e:	f003 f873 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80022a2:	f640 020b 	movw	r2, #2059	; 0x80b
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80022a6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80022a8:	4631      	mov	r1, r6
 80022aa:	4620      	mov	r0, r4
 80022ac:	f003 f86c 	bl	8005388 <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 80022b0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 80022b4:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 80022b8:	8aa1      	ldrh	r1, [r4, #20]
    dest->x2 = src->x2;
 80022ba:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 80022be:	b2bb      	uxth	r3, r7
        coords.y1 -= h;
 80022c0:	b280      	uxth	r0, r0
        coords.x1 -= w;
 80022c2:	1ac9      	subs	r1, r1, r3
        coords.y1 -= h;
 80022c4:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 80022c6:	4460      	add	r0, ip
        coords.x1 -= w;
 80022c8:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        coords.x2 += w;
 80022cc:	4473      	add	r3, lr
        coords.y1 -= h;
 80022ce:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        coords.y2 += h;
 80022d2:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80022d6:	4642      	mov	r2, r8
 80022d8:	6868      	ldr	r0, [r5, #4]
 80022da:	a912      	add	r1, sp, #72	; 0x48
        coords.x2 += w;
 80022dc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80022e0:	f00d fb01 	bl	800f8e6 <_lv_area_is_in>
 80022e4:	b908      	cbnz	r0, 80022ea <lv_obj_draw+0xa2>
            info->res = LV_COVER_RES_NOT_COVER;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e7ca      	b.n	8002280 <lv_obj_draw+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80022ea:	2221      	movs	r2, #33	; 0x21
 80022ec:	4631      	mov	r1, r6
 80022ee:	4620      	mov	r0, r4
 80022f0:	f003 f84a 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80022f4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80022f6:	28fc      	cmp	r0, #252	; 0xfc
 80022f8:	d9f5      	bls.n	80022e6 <lv_obj_draw+0x9e>
    return (const lv_style_transition_dsc_t *)v.ptr;
}

static inline lv_blend_mode_t lv_obj_get_style_blend_mode(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80022fa:	4631      	mov	r1, r6
 80022fc:	2268      	movs	r2, #104	; 0x68
 80022fe:	4620      	mov	r0, r4
 8002300:	f003 f842 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_blend_mode(obj, LV_PART_MAIN) != LV_BLEND_MODE_NORMAL) {
 8002304:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8002308:	d1ed      	bne.n	80022e6 <lv_obj_draw+0x9e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800230a:	f240 4262 	movw	r2, #1122	; 0x462
 800230e:	4631      	mov	r1, r6
 8002310:	4620      	mov	r0, r4
 8002312:	f003 f839 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002316:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8002318:	28fc      	cmp	r0, #252	; 0xfc
 800231a:	d9e4      	bls.n	80022e6 <lv_obj_draw+0x9e>
        info->res = LV_COVER_RES_COVER;
 800231c:	702e      	strb	r6, [r5, #0]
 800231e:	e7b0      	b.n	8002282 <lv_obj_draw+0x3a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8002320:	2e15      	cmp	r6, #21
 8002322:	d178      	bne.n	8002416 <lv_obj_draw+0x1ce>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8002324:	4628      	mov	r0, r5
 8002326:	f7ff fcdc 	bl	8001ce2 <lv_event_get_draw_ctx>
        lv_draw_rect_dsc_init(&draw_dsc);
 800232a:	af05      	add	r7, sp, #20
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800232c:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 800232e:	4638      	mov	r0, r7
 8002330:	f006 f884 	bl	800843c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8002334:	2234      	movs	r2, #52	; 0x34
 8002336:	2100      	movs	r1, #0
 8002338:	4620      	mov	r0, r4
 800233a:	f003 f825 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800233e:	b128      	cbz	r0, 800234c <lv_obj_draw+0x104>
            draw_dsc.border_post = 1;
 8002340:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800234c:	463a      	mov	r2, r7
 800234e:	2100      	movs	r1, #0
 8002350:	4620      	mov	r0, r4
 8002352:	f000 fd3a 	bl	8002dca <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002356:	f640 020a 	movw	r2, #2058	; 0x80a
 800235a:	2100      	movs	r1, #0
 800235c:	4620      	mov	r0, r4
 800235e:	f003 f813 	bl	8005388 <lv_obj_get_style_prop>
 8002362:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8002364:	f640 020b 	movw	r2, #2059	; 0x80b
 8002368:	2100      	movs	r1, #0
 800236a:	4620      	mov	r0, r4
 800236c:	f003 f80c 	bl	8005388 <lv_obj_get_style_prop>
        coords.x1 -= w;
 8002370:	b2ab      	uxth	r3, r5
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8002372:	2500      	movs	r5, #0
 8002374:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8002378:	8aa1      	ldrh	r1, [r4, #20]
    dest->y2 = src->y2;
 800237a:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 800237e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8002382:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 8002384:	4473      	add	r3, lr
 8002386:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.y1 -= h;
 800238a:	b283      	uxth	r3, r0
 800238c:	1ad2      	subs	r2, r2, r3
        coords.x1 -= w;
 800238e:	f8ad 100c 	strh.w	r1, [sp, #12]
        coords.y2 += h;
 8002392:	4463      	add	r3, ip
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8002394:	4631      	mov	r1, r6
 8002396:	a812      	add	r0, sp, #72	; 0x48
        coords.y1 -= h;
 8002398:	f8ad 200e 	strh.w	r2, [sp, #14]
        coords.y2 += h;
 800239c:	f8ad 3012 	strh.w	r3, [sp, #18]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80023a0:	f000 ff58 	bl	8003254 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80023a4:	4bc2      	ldr	r3, [pc, #776]	; (80026b0 <lv_obj_draw+0x468>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80023a6:	211a      	movs	r1, #26
        part_dsc.draw_area = &coords;
 80023a8:	f10d 080c 	add.w	r8, sp, #12
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80023ac:	aa12      	add	r2, sp, #72	; 0x48
 80023ae:	4620      	mov	r0, r4
        part_dsc.class_p = MY_CLASS;
 80023b0:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80023b2:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 80023b4:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 80023b6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 80023ba:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80023bc:	f7ff fc50 	bl	8001c60 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80023c0:	4642      	mov	r2, r8
 80023c2:	4639      	mov	r1, r7
 80023c4:	4630      	mov	r0, r6
 80023c6:	f006 f85b 	bl	8008480 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80023ca:	211b      	movs	r1, #27
 80023cc:	aa12      	add	r2, sp, #72	; 0x48
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fc46 	bl	8001c60 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80023d4:	2261      	movs	r2, #97	; 0x61
 80023d6:	4629      	mov	r1, r5
 80023d8:	4620      	mov	r0, r4
 80023da:	f002 ffd5 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80023de:	2800      	cmp	r0, #0
 80023e0:	f43f af4f 	beq.w	8002282 <lv_obj_draw+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80023e4:	2260      	movs	r2, #96	; 0x60
 80023e6:	4629      	mov	r1, r5
 80023e8:	4620      	mov	r0, r4
 80023ea:	f002 ffcd 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80023ee:	b206      	sxth	r6, r0
            if(r != 0) {
 80023f0:	2e00      	cmp	r6, #0
 80023f2:	f43f af46 	beq.w	8002282 <lv_obj_draw+0x3a>
                lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 80023f6:	2018      	movs	r0, #24
 80023f8:	f00d fe8c 	bl	8010114 <lv_mem_buf_get>
 80023fc:	4607      	mov	r7, r0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 80023fe:	f104 0114 	add.w	r1, r4, #20
 8002402:	462b      	mov	r3, r5
 8002404:	4632      	mov	r2, r6
 8002406:	f005 fe05 	bl	8008014 <lv_draw_mask_radius_init>
                lv_draw_mask_add(mp, obj + 8);
 800240a:	4638      	mov	r0, r7
 800240c:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8002410:	f005 fc54 	bl	8007cbc <lv_draw_mask_add>
 8002414:	e735      	b.n	8002282 <lv_obj_draw+0x3a>
    else if(code == LV_EVENT_DRAW_POST) {
 8002416:	2e18      	cmp	r6, #24
 8002418:	f47f af33 	bne.w	8002282 <lv_obj_draw+0x3a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800241c:	4628      	mov	r0, r5
 800241e:	f7ff fc60 	bl	8001ce2 <lv_event_get_draw_ctx>
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002422:	ad01      	add	r5, sp, #4
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8002424:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002426:	4629      	mov	r1, r5
 8002428:	4620      	mov	r0, r4
 800242a:	aa03      	add	r2, sp, #12
 800242c:	f002 fb07 	bl	8004a3e <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8002430:	4628      	mov	r0, r5
 8002432:	f00d f92c 	bl	800f68e <lv_area_get_size>
 8002436:	2800      	cmp	r0, #0
 8002438:	f000 80c0 	beq.w	80025bc <lv_obj_draw+0x374>
    lv_draw_rect_dsc_init(dsc);
 800243c:	af05      	add	r7, sp, #20
 800243e:	4638      	mov	r0, r7
 8002440:	f005 fffc 	bl	800843c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800244a:	4620      	mov	r0, r4
 800244c:	f002 ff9c 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002450:	b2c0      	uxtb	r0, r0
    if(dsc->bg_opa > LV_OPA_MIN) {
 8002452:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8002454:	f88d 001e 	strb.w	r0, [sp, #30]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8002458:	d907      	bls.n	800246a <lv_obj_draw+0x222>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 800245a:	2220      	movs	r2, #32
 800245c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002460:	4620      	mov	r0, r4
 8002462:	f002 ff91 	bl	8005388 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8002466:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800246a:	2231      	movs	r2, #49	; 0x31
 800246c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002470:	4620      	mov	r0, r4
 8002472:	f002 ff89 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002476:	b2c0      	uxtb	r0, r0
    if(dsc->border_opa > LV_OPA_MIN) {
 8002478:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 800247a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 800247e:	d914      	bls.n	80024aa <lv_obj_draw+0x262>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8002480:	f241 0232 	movw	r2, #4146	; 0x1032
 8002484:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002488:	4620      	mov	r0, r4
 800248a:	f002 ff7d 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800248e:	b200      	sxth	r0, r0
        if(dsc->border_width > 0) {
 8002490:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8002492:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 8002496:	f340 8102 	ble.w	800269e <lv_obj_draw+0x456>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 800249a:	2230      	movs	r2, #48	; 0x30
 800249c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80024a0:	4620      	mov	r0, r4
 80024a2:	f002 ff71 	bl	8005388 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 80024a6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80024aa:	f640 0245 	movw	r2, #2117	; 0x845
 80024ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80024b2:	4620      	mov	r0, r4
 80024b4:	f002 ff68 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80024b8:	b2c0      	uxtb	r0, r0
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80024ba:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80024bc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80024c0:	d91d      	bls.n	80024fe <lv_obj_draw+0x2b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80024c2:	f44f 6204 	mov.w	r2, #2112	; 0x840
 80024c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80024ca:	4620      	mov	r0, r4
 80024cc:	f002 ff5c 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80024d0:	b200      	sxth	r0, r0
        if(dsc->shadow_width > 0) {
 80024d2:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 80024d4:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 80024d8:	f340 80e5 	ble.w	80026a6 <lv_obj_draw+0x45e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80024dc:	f640 0243 	movw	r2, #2115	; 0x843
 80024e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80024e4:	4620      	mov	r0, r4
 80024e6:	f002 ff4f 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 80024ea:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 80024ec:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 80024f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80024f4:	4620      	mov	r0, r4
 80024f6:	f002 ff47 	bl	8005388 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 80024fa:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80024fe:	f240 4262 	movw	r2, #1122	; 0x462
 8002502:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002506:	4620      	mov	r0, r4
 8002508:	f002 ff3e 	bl	8005388 <lv_obj_get_style_prop>
    if(opa < LV_OPA_MAX) {
 800250c:	b2c3      	uxtb	r3, r0
 800250e:	2bfc      	cmp	r3, #252	; 0xfc
 8002510:	d80b      	bhi.n	800252a <lv_obj_draw+0x2e2>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8002512:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8002516:	4358      	muls	r0, r3
 8002518:	1200      	asrs	r0, r0, #8
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 800251a:	4343      	muls	r3, r0
 800251c:	0a1b      	lsrs	r3, r3, #8
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 800251e:	f88d 001e 	strb.w	r0, [sp, #30]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8002522:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8002526:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 800252a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800252e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002532:	4313      	orrs	r3, r2
 8002534:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8002538:	4313      	orrs	r3, r2
 800253a:	d045      	beq.n	80025c8 <lv_obj_draw+0x380>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800253c:	2260      	movs	r2, #96	; 0x60
 800253e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002542:	4620      	mov	r0, r4
 8002544:	f002 ff20 	bl	8005388 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8002548:	4631      	mov	r1, r6
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 800254a:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800254e:	a812      	add	r0, sp, #72	; 0x48
 8002550:	f000 fe80 	bl	8003254 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <lv_obj_draw+0x468>)
    if(lv_area_get_size(&hor_area) > 0) {
 8002556:	4628      	mov	r0, r5
    part_dsc.class_p = MY_CLASS;
 8002558:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 800255a:	2302      	movs	r3, #2
 800255c:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 800255e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    part_dsc.rect_dsc = &draw_dsc;
 8002562:	9716      	str	r7, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
 8002564:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 8002566:	f00d f892 	bl	800f68e <lv_area_get_size>
 800256a:	b178      	cbz	r0, 800258c <lv_obj_draw+0x344>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800256c:	211a      	movs	r1, #26
 800256e:	aa12      	add	r2, sp, #72	; 0x48
 8002570:	4620      	mov	r0, r4
        part_dsc.draw_area = &hor_area;
 8002572:	9515      	str	r5, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002574:	f7ff fb74 	bl	8001c60 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8002578:	462a      	mov	r2, r5
 800257a:	4639      	mov	r1, r7
 800257c:	4630      	mov	r0, r6
 800257e:	f005 ff7f 	bl	8008480 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8002582:	211b      	movs	r1, #27
 8002584:	4620      	mov	r0, r4
 8002586:	aa12      	add	r2, sp, #72	; 0x48
 8002588:	f7ff fb6a 	bl	8001c60 <lv_event_send>
    if(lv_area_get_size(&ver_area) > 0) {
 800258c:	a803      	add	r0, sp, #12
 800258e:	f00d f87e 	bl	800f68e <lv_area_get_size>
 8002592:	b1c8      	cbz	r0, 80025c8 <lv_obj_draw+0x380>
        part_dsc.draw_area = &ver_area;
 8002594:	ab03      	add	r3, sp, #12
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002596:	aa12      	add	r2, sp, #72	; 0x48
 8002598:	211a      	movs	r1, #26
 800259a:	4620      	mov	r0, r4
        part_dsc.draw_area = &ver_area;
 800259c:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800259e:	f7ff fb5f 	bl	8001c60 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80025a2:	ab03      	add	r3, sp, #12
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80025a4:	461a      	mov	r2, r3
 80025a6:	4639      	mov	r1, r7
 80025a8:	4630      	mov	r0, r6
        part_dsc.draw_area = &ver_area;
 80025aa:	9315      	str	r3, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80025ac:	f005 ff68 	bl	8008480 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80025b0:	211b      	movs	r1, #27
 80025b2:	4620      	mov	r0, r4
 80025b4:	aa12      	add	r2, sp, #72	; 0x48
 80025b6:	f7ff fb53 	bl	8001c60 <lv_event_send>
 80025ba:	e005      	b.n	80025c8 <lv_obj_draw+0x380>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 80025bc:	a803      	add	r0, sp, #12
 80025be:	f00d f866 	bl	800f68e <lv_area_get_size>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	f47f af3a 	bne.w	800243c <lv_obj_draw+0x1f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80025c8:	2261      	movs	r2, #97	; 0x61
 80025ca:	2100      	movs	r1, #0
 80025cc:	4620      	mov	r0, r4
 80025ce:	f002 fedb 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80025d2:	b150      	cbz	r0, 80025ea <lv_obj_draw+0x3a2>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80025d4:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80025d8:	f005 fbba 	bl	8007d50 <lv_draw_mask_remove_custom>
            if(param) {
 80025dc:	4605      	mov	r5, r0
 80025de:	b120      	cbz	r0, 80025ea <lv_obj_draw+0x3a2>
                lv_draw_mask_free_param(param);
 80025e0:	f005 fbcc 	bl	8007d7c <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 80025e4:	4628      	mov	r0, r5
 80025e6:	f00d fbed 	bl	800fdc4 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80025ea:	2234      	movs	r2, #52	; 0x34
 80025ec:	2100      	movs	r1, #0
 80025ee:	4620      	mov	r0, r4
 80025f0:	f002 feca 	bl	8005388 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80025f4:	2800      	cmp	r0, #0
 80025f6:	f43f ae44 	beq.w	8002282 <lv_obj_draw+0x3a>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80025fa:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 80025fc:	f10d 0814 	add.w	r8, sp, #20
 8002600:	4640      	mov	r0, r8
 8002602:	f005 ff1b 	bl	800843c <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8002606:	4642      	mov	r2, r8
 8002608:	4629      	mov	r1, r5
 800260a:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 800260c:	f88d 501e 	strb.w	r5, [sp, #30]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8002610:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8002614:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8002618:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800261c:	f000 fbd5 	bl	8002dca <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002620:	4629      	mov	r1, r5
 8002622:	f640 020a 	movw	r2, #2058	; 0x80a
 8002626:	4620      	mov	r0, r4
 8002628:	f002 feae 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800262c:	4629      	mov	r1, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800262e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8002630:	f640 020b 	movw	r2, #2059	; 0x80b
 8002634:	4620      	mov	r0, r4
 8002636:	f002 fea7 	bl	8005388 <lv_obj_get_style_prop>
    dest->y2 = src->y2;
 800263a:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
    dest->y1 = src->y1;
 800263e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            coords.x1 -= w;
 8002642:	8aa1      	ldrh	r1, [r4, #20]
    dest->x2 = src->x2;
 8002644:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
 8002648:	b2bb      	uxth	r3, r7
            coords.y1 -= h;
 800264a:	b280      	uxth	r0, r0
 800264c:	1a12      	subs	r2, r2, r0
            coords.x1 -= w;
 800264e:	1ac9      	subs	r1, r1, r3
            coords.y2 += h;
 8002650:	4460      	add	r0, ip
            coords.x2 += w;
 8002652:	4473      	add	r3, lr
            coords.x1 -= w;
 8002654:	f8ad 100c 	strh.w	r1, [sp, #12]
            coords.y2 += h;
 8002658:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800265c:	4631      	mov	r1, r6
 800265e:	a812      	add	r0, sp, #72	; 0x48
            coords.x2 += w;
 8002660:	f8ad 3010 	strh.w	r3, [sp, #16]
            coords.y1 -= h;
 8002664:	f8ad 200e 	strh.w	r2, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8002668:	f000 fdf4 	bl	8003254 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <lv_obj_draw+0x468>)
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800266e:	aa12      	add	r2, sp, #72	; 0x48
            part_dsc.class_p = MY_CLASS;
 8002670:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8002672:	2301      	movs	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002674:	211a      	movs	r1, #26
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8002676:	9314      	str	r3, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002678:	4620      	mov	r0, r4
            part_dsc.draw_area = &coords;
 800267a:	ab03      	add	r3, sp, #12
 800267c:	9315      	str	r3, [sp, #84]	; 0x54
            part_dsc.rect_dsc = &draw_dsc;
 800267e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
            part_dsc.part = LV_PART_MAIN;
 8002682:	951f      	str	r5, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8002684:	f7ff faec 	bl	8001c60 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8002688:	4641      	mov	r1, r8
 800268a:	4630      	mov	r0, r6
 800268c:	aa03      	add	r2, sp, #12
 800268e:	f005 fef7 	bl	8008480 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8002692:	211b      	movs	r1, #27
 8002694:	4620      	mov	r0, r4
 8002696:	aa12      	add	r2, sp, #72	; 0x48
 8002698:	f7ff fae2 	bl	8001c60 <lv_event_send>
 800269c:	e5f1      	b.n	8002282 <lv_obj_draw+0x3a>
            dsc->border_opa = LV_OPA_TRANSP;
 800269e:	2300      	movs	r3, #0
 80026a0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80026a4:	e701      	b.n	80024aa <lv_obj_draw+0x262>
            dsc->shadow_opa = LV_OPA_TRANSP;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80026ac:	e727      	b.n	80024fe <lv_obj_draw+0x2b6>
 80026ae:	bf00      	nop
 80026b0:	0801a354 	.word	0x0801a354

080026b4 <lv_init>:
{
 80026b4:	b510      	push	{r4, lr}
    if(lv_initialized) {
 80026b6:	4c11      	ldr	r4, [pc, #68]	; (80026fc <lv_init+0x48>)
 80026b8:	7823      	ldrb	r3, [r4, #0]
 80026ba:	b9f3      	cbnz	r3, 80026fa <lv_init+0x46>
    lv_mem_init();
 80026bc:	f00d fb66 	bl	800fd8c <lv_mem_init>
    _lv_timer_core_init();
 80026c0:	f00e fb5a 	bl	8010d78 <_lv_timer_core_init>
    _lv_fs_init();
 80026c4:	f00d f9d2 	bl	800fa6c <_lv_fs_init>
    _lv_anim_core_init();
 80026c8:	f00c fed0 	bl	800f46c <_lv_anim_core_init>
    _lv_group_init();
 80026cc:	f7ff fbb0 	bl	8001e30 <_lv_group_init>
    lv_draw_init();
 80026d0:	f004 fa6c 	bl	8006bac <lv_draw_init>
    _lv_obj_style_init();
 80026d4:	f002 fe4c 	bl	8005370 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80026d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <lv_init+0x4c>)
 80026de:	f00d fa66 	bl	800fbae <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80026e2:	2158      	movs	r1, #88	; 0x58
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <lv_init+0x50>)
 80026e6:	f00d fa62 	bl	800fbae <_lv_ll_init>
    _lv_refr_init();
 80026ea:	f003 fe79 	bl	80063e0 <_lv_refr_init>
    _lv_img_decoder_init();
 80026ee:	f006 ff07 	bl	8009500 <_lv_img_decoder_init>
    lv_extra_init();
 80026f2:	f00c fb57 	bl	800eda4 <lv_extra_init>
    lv_initialized = true;
 80026f6:	2301      	movs	r3, #1
 80026f8:	7023      	strb	r3, [r4, #0]
}
 80026fa:	bd10      	pop	{r4, pc}
 80026fc:	20001a78 	.word	0x20001a78
 8002700:	20004708 	.word	0x20004708
 8002704:	200046f0 	.word	0x200046f0

08002708 <lv_obj_create>:
{
 8002708:	4601      	mov	r1, r0
 800270a:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <lv_obj_create+0x14>)
 800270e:	f000 fa97 	bl	8002c40 <lv_obj_class_create_obj>
 8002712:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8002714:	f000 fb12 	bl	8002d3c <lv_obj_class_init_obj>
}
 8002718:	4620      	mov	r0, r4
 800271a:	bd10      	pop	{r4, pc}
 800271c:	0801a354 	.word	0x0801a354

08002720 <lv_obj_add_flag>:
{
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	460d      	mov	r5, r1
 8002724:	b085      	sub	sp, #20
 8002726:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8002728:	f000 fe74 	bl	8003414 <lv_obj_is_layout_positioned>
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 800272c:	f015 0701 	ands.w	r7, r5, #1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8002730:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8002732:	d002      	beq.n	800273a <lv_obj_add_flag+0x1a>
 8002734:	4620      	mov	r0, r4
 8002736:	f001 f822 	bl	800377e <lv_obj_invalidate>
    obj->flags |= f;
 800273a:	69e3      	ldr	r3, [r4, #28]
 800273c:	432b      	orrs	r3, r5
 800273e:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8002740:	b117      	cbz	r7, 8002748 <lv_obj_add_flag+0x28>
        lv_obj_invalidate(obj);
 8002742:	4620      	mov	r0, r4
 8002744:	f001 f81b 	bl	800377e <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8002748:	4620      	mov	r0, r4
 800274a:	f000 fe63 	bl	8003414 <lv_obj_is_layout_positioned>
 800274e:	42b0      	cmp	r0, r6
 8002750:	d102      	bne.n	8002758 <lv_obj_add_flag+0x38>
 8002752:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8002756:	d007      	beq.n	8002768 <lv_obj_add_flag+0x48>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8002758:	4620      	mov	r0, r4
 800275a:	f003 fbe9 	bl	8005f30 <lv_obj_get_parent>
 800275e:	f000 fe73 	bl	8003448 <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 8002762:	4620      	mov	r0, r4
 8002764:	f000 fe70 	bl	8003448 <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8002768:	06eb      	lsls	r3, r5, #27
 800276a:	d50c      	bpl.n	8002786 <lv_obj_add_flag+0x66>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800276c:	4669      	mov	r1, sp
 800276e:	4620      	mov	r0, r4
 8002770:	aa02      	add	r2, sp, #8
 8002772:	f002 f964 	bl	8004a3e <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8002776:	4669      	mov	r1, sp
 8002778:	4620      	mov	r0, r4
 800277a:	f000 ffe6 	bl	800374a <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 800277e:	4620      	mov	r0, r4
 8002780:	a902      	add	r1, sp, #8
 8002782:	f000 ffe2 	bl	800374a <lv_obj_invalidate_area>
}
 8002786:	b005      	add	sp, #20
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800278a <lv_obj_clear_flag>:
{
 800278a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800278c:	460d      	mov	r5, r1
 800278e:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8002790:	f000 fe40 	bl	8003414 <lv_obj_is_layout_positioned>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8002794:	06ea      	lsls	r2, r5, #27
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8002796:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8002798:	d50c      	bpl.n	80027b4 <lv_obj_clear_flag+0x2a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800279a:	4669      	mov	r1, sp
 800279c:	4620      	mov	r0, r4
 800279e:	aa02      	add	r2, sp, #8
 80027a0:	f002 f94d 	bl	8004a3e <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 80027a4:	4669      	mov	r1, sp
 80027a6:	4620      	mov	r0, r4
 80027a8:	f000 ffcf 	bl	800374a <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 80027ac:	4620      	mov	r0, r4
 80027ae:	a902      	add	r1, sp, #8
 80027b0:	f000 ffcb 	bl	800374a <lv_obj_invalidate_area>
    obj->flags &= (~f);
 80027b4:	69e3      	ldr	r3, [r4, #28]
 80027b6:	ea23 0305 	bic.w	r3, r3, r5
 80027ba:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 80027bc:	07eb      	lsls	r3, r5, #31
 80027be:	d50e      	bpl.n	80027de <lv_obj_clear_flag+0x54>
        lv_obj_invalidate(obj);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 ffdc 	bl	800377e <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 80027c6:	4620      	mov	r0, r4
 80027c8:	f000 fe24 	bl	8003414 <lv_obj_is_layout_positioned>
 80027cc:	b138      	cbz	r0, 80027de <lv_obj_clear_flag+0x54>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80027ce:	4620      	mov	r0, r4
 80027d0:	f003 fbae 	bl	8005f30 <lv_obj_get_parent>
 80027d4:	f000 fe38 	bl	8003448 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fe35 	bl	8003448 <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 fe18 	bl	8003414 <lv_obj_is_layout_positioned>
 80027e4:	42b0      	cmp	r0, r6
 80027e6:	d102      	bne.n	80027ee <lv_obj_clear_flag+0x64>
 80027e8:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 80027ec:	d004      	beq.n	80027f8 <lv_obj_clear_flag+0x6e>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80027ee:	4620      	mov	r0, r4
 80027f0:	f003 fb9e 	bl	8005f30 <lv_obj_get_parent>
 80027f4:	f000 fe28 	bl	8003448 <lv_obj_mark_layout_as_dirty>
}
 80027f8:	b004      	add	sp, #16
 80027fa:	bd70      	pop	{r4, r5, r6, pc}

080027fc <lv_obj_add_state>:
{
 80027fc:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
 80027fe:	8c02      	ldrh	r2, [r0, #32]
    if(obj->state != new_state) {
 8002800:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
 8002802:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
 8002806:	d001      	beq.n	800280c <lv_obj_add_state+0x10>
        lv_obj_set_state(obj, new_state);
 8002808:	f7ff bbef 	b.w	8001fea <lv_obj_set_state>
}
 800280c:	4770      	bx	lr

0800280e <lv_obj_clear_state>:
{
 800280e:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 8002810:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 8002812:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 8002814:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 8002818:	d001      	beq.n	800281e <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 800281a:	f7ff bbe6 	b.w	8001fea <lv_obj_set_state>
}
 800281e:	4770      	bx	lr

08002820 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8002820:	69c3      	ldr	r3, [r0, #28]
 8002822:	ea31 0303 	bics.w	r3, r1, r3
}
 8002826:	bf0c      	ite	eq
 8002828:	2001      	moveq	r0, #1
 800282a:	2000      	movne	r0, #0
 800282c:	4770      	bx	lr

0800282e <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 800282e:	69c3      	ldr	r3, [r0, #28]
 8002830:	4219      	tst	r1, r3
}
 8002832:	bf14      	ite	ne
 8002834:	2001      	movne	r0, #1
 8002836:	2000      	moveq	r0, #0
 8002838:	4770      	bx	lr

0800283a <lv_obj_get_state>:
}
 800283a:	8c00      	ldrh	r0, [r0, #32]
 800283c:	4770      	bx	lr

0800283e <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 800283e:	6880      	ldr	r0, [r0, #8]
 8002840:	b100      	cbz	r0, 8002844 <lv_obj_get_group+0x6>
 8002842:	6880      	ldr	r0, [r0, #8]
}
 8002844:	4770      	bx	lr

08002846 <lv_obj_event>:
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8002848:	4608      	mov	r0, r1
{
 800284a:	b085      	sub	sp, #20
 800284c:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 800284e:	f7ff fa2b 	bl	8001ca8 <lv_event_get_code>
 8002852:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 8002854:	4630      	mov	r0, r6
 8002856:	f7ff fa25 	bl	8001ca4 <lv_event_get_current_target>
    if(code == LV_EVENT_PRESSED) {
 800285a:	2d01      	cmp	r5, #1
    lv_obj_t * obj = lv_event_get_current_target(e);
 800285c:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 800285e:	d103      	bne.n	8002868 <lv_obj_event+0x22>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8002860:	2120      	movs	r1, #32
            lv_obj_add_state(obj, state);
 8002862:	f7ff ffcb 	bl	80027fc <lv_obj_add_state>
 8002866:	e02b      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_RELEASED) {
 8002868:	2d08      	cmp	r5, #8
 800286a:	d11b      	bne.n	80028a4 <lv_obj_event+0x5e>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800286c:	2120      	movs	r1, #32
 800286e:	f7ff ffce 	bl	800280e <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8002872:	4630      	mov	r0, r6
 8002874:	f7ff fa1a 	bl	8001cac <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8002878:	f7ff fbac 	bl	8001fd4 <lv_indev_get_scroll_obj>
 800287c:	bb00      	cbnz	r0, 80028c0 <lv_obj_event+0x7a>
    return (obj->flags & f)  == f ? true : false;
 800287e:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8002880:	071f      	lsls	r7, r3, #28
 8002882:	d51d      	bpl.n	80028c0 <lv_obj_event+0x7a>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8002884:	8c23      	ldrh	r3, [r4, #32]
 8002886:	2101      	movs	r1, #1
 8002888:	07de      	lsls	r6, r3, #31
 800288a:	4620      	mov	r0, r4
 800288c:	d402      	bmi.n	8002894 <lv_obj_event+0x4e>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 800288e:	f7ff ffb5 	bl	80027fc <lv_obj_add_state>
            if(c != LV_KEY_ENTER) {
 8002892:	e001      	b.n	8002898 <lv_obj_event+0x52>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8002894:	f7ff ffbb 	bl	800280e <lv_obj_clear_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8002898:	2200      	movs	r2, #0
 800289a:	211c      	movs	r1, #28
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff f9df 	bl	8001c60 <lv_event_send>
                if(res != LV_RES_OK) return;
 80028a2:	e00d      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_PRESS_LOST) {
 80028a4:	2d03      	cmp	r5, #3
 80028a6:	d103      	bne.n	80028b0 <lv_obj_event+0x6a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80028a8:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80028aa:	f7ff ffb0 	bl	800280e <lv_obj_clear_state>
 80028ae:	e007      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80028b0:	2d2a      	cmp	r5, #42	; 0x2a
 80028b2:	d10f      	bne.n	80028d4 <lv_obj_event+0x8e>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80028b4:	f003 fb4e 	bl	8005f54 <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80028b8:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80028ba:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 80028bc:	42b5      	cmp	r5, r6
 80028be:	d101      	bne.n	80028c4 <lv_obj_event+0x7e>
}
 80028c0:	b005      	add	sp, #20
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_obj_t * child = obj->spec_attr->children[i];
 80028c4:	68a3      	ldr	r3, [r4, #8]
 80028c6:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 80028c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80028cc:	f000 fdbc 	bl	8003448 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80028d0:	3501      	adds	r5, #1
 80028d2:	e7f3      	b.n	80028bc <lv_obj_event+0x76>
    else if(code == LV_EVENT_KEY) {
 80028d4:	2d0d      	cmp	r5, #13
 80028d6:	f040 8093 	bne.w	8002a00 <lv_obj_event+0x1ba>
    return (obj->flags & f)  == f ? true : false;
 80028da:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80028dc:	071d      	lsls	r5, r3, #28
 80028de:	d515      	bpl.n	800290c <lv_obj_event+0xc6>
            char c = *((char *)lv_event_get_param(e));
 80028e0:	4630      	mov	r0, r6
 80028e2:	f7ff f9e3 	bl	8001cac <lv_event_get_param>
 80028e6:	7805      	ldrb	r5, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80028e8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80028ec:	2b11      	cmp	r3, #17
 80028ee:	d102      	bne.n	80028f6 <lv_obj_event+0xb0>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 80028f0:	2101      	movs	r1, #1
 80028f2:	4620      	mov	r0, r4
 80028f4:	e7cb      	b.n	800288e <lv_obj_event+0x48>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80028f6:	2d14      	cmp	r5, #20
 80028f8:	d001      	beq.n	80028fe <lv_obj_event+0xb8>
 80028fa:	2d12      	cmp	r5, #18
 80028fc:	d103      	bne.n	8002906 <lv_obj_event+0xc0>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80028fe:	2101      	movs	r1, #1
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff ff84 	bl	800280e <lv_obj_clear_state>
            if(c != LV_KEY_ENTER) {
 8002906:	2d0a      	cmp	r5, #10
 8002908:	d0da      	beq.n	80028c0 <lv_obj_event+0x7a>
 800290a:	e7c5      	b.n	8002898 <lv_obj_event+0x52>
    return (obj->flags & f)  == f ? true : false;
 800290c:	f403 6382 	and.w	r3, r3, #1040	; 0x410
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8002910:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002914:	d1d4      	bne.n	80028c0 <lv_obj_event+0x7a>
 8002916:	f000 f9fd 	bl	8002d14 <lv_obj_is_editable>
 800291a:	2800      	cmp	r0, #0
 800291c:	d1d0      	bne.n	80028c0 <lv_obj_event+0x7a>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800291e:	4620      	mov	r0, r4
 8002920:	f001 fd34 	bl	800438c <lv_obj_get_scroll_left>
 8002924:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8002926:	4620      	mov	r0, r4
 8002928:	f001 fd9c 	bl	8004464 <lv_obj_get_scroll_right>
 800292c:	4605      	mov	r5, r0
            char c = *((char *)lv_event_get_param(e));
 800292e:	4630      	mov	r0, r6
 8002930:	f7ff f9bc 	bl	8001cac <lv_event_get_param>
 8002934:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 8002936:	2b12      	cmp	r3, #18
 8002938:	d10d      	bne.n	8002956 <lv_obj_event+0x110>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 800293a:	4620      	mov	r0, r4
 800293c:	f001 fcbd 	bl	80042ba <lv_obj_get_scroll_y>
 8002940:	4605      	mov	r5, r0
 8002942:	4620      	mov	r0, r4
 8002944:	f000 fdd7 	bl	80034f6 <lv_obj_get_height>
 8002948:	2800      	cmp	r0, #0
 800294a:	4601      	mov	r1, r0
 800294c:	da00      	bge.n	8002950 <lv_obj_event+0x10a>
 800294e:	1cc1      	adds	r1, r0, #3
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8002950:	eb05 01a1 	add.w	r1, r5, r1, asr #2
 8002954:	e00d      	b.n	8002972 <lv_obj_event+0x12c>
            else if(c == LV_KEY_UP) {
 8002956:	2b11      	cmp	r3, #17
 8002958:	d111      	bne.n	800297e <lv_obj_event+0x138>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 800295a:	4620      	mov	r0, r4
 800295c:	f001 fcad 	bl	80042ba <lv_obj_get_scroll_y>
 8002960:	4605      	mov	r5, r0
 8002962:	4620      	mov	r0, r4
 8002964:	f000 fdc7 	bl	80034f6 <lv_obj_get_height>
 8002968:	1e01      	subs	r1, r0, #0
 800296a:	da00      	bge.n	800296e <lv_obj_event+0x128>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 800296c:	3103      	adds	r1, #3
 800296e:	eba5 01a1 	sub.w	r1, r5, r1, asr #2
 8002972:	2200      	movs	r2, #0
 8002974:	4620      	mov	r0, r4
 8002976:	b209      	sxth	r1, r1
 8002978:	f002 f810 	bl	800499c <lv_obj_scroll_to_y>
 800297c:	e7a0      	b.n	80028c0 <lv_obj_event+0x7a>
            else if(c == LV_KEY_RIGHT) {
 800297e:	2b13      	cmp	r3, #19
 8002980:	d125      	bne.n	80029ce <lv_obj_event+0x188>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8002982:	4620      	mov	r0, r4
 8002984:	f001 fc73 	bl	800426e <lv_obj_get_scroll_dir>
 8002988:	0780      	lsls	r0, r0, #30
 800298a:	d003      	beq.n	8002994 <lv_obj_event+0x14e>
 800298c:	2f00      	cmp	r7, #0
 800298e:	dc0c      	bgt.n	80029aa <lv_obj_event+0x164>
 8002990:	2d00      	cmp	r5, #0
 8002992:	dc0a      	bgt.n	80029aa <lv_obj_event+0x164>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8002994:	4620      	mov	r0, r4
 8002996:	f001 fc90 	bl	80042ba <lv_obj_get_scroll_y>
 800299a:	4605      	mov	r5, r0
 800299c:	4620      	mov	r0, r4
 800299e:	f000 fdaa 	bl	80034f6 <lv_obj_get_height>
 80029a2:	1e01      	subs	r1, r0, #0
 80029a4:	bfb8      	it	lt
 80029a6:	3103      	addlt	r1, #3
 80029a8:	e7d2      	b.n	8002950 <lv_obj_event+0x10a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 80029aa:	4620      	mov	r0, r4
 80029ac:	f001 fc73 	bl	8004296 <lv_obj_get_scroll_x>
 80029b0:	4605      	mov	r5, r0
 80029b2:	4620      	mov	r0, r4
 80029b4:	f000 fd99 	bl	80034ea <lv_obj_get_width>
 80029b8:	1e01      	subs	r1, r0, #0
 80029ba:	bfb8      	it	lt
 80029bc:	3103      	addlt	r1, #3
 80029be:	eb05 01a1 	add.w	r1, r5, r1, asr #2
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80029c2:	2200      	movs	r2, #0
 80029c4:	4620      	mov	r0, r4
 80029c6:	b209      	sxth	r1, r1
 80029c8:	f001 ffa8 	bl	800491c <lv_obj_scroll_to_x>
 80029cc:	e778      	b.n	80028c0 <lv_obj_event+0x7a>
            else if(c == LV_KEY_LEFT) {
 80029ce:	2b14      	cmp	r3, #20
 80029d0:	f47f af76 	bne.w	80028c0 <lv_obj_event+0x7a>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80029d4:	4620      	mov	r0, r4
 80029d6:	f001 fc4a 	bl	800426e <lv_obj_get_scroll_dir>
 80029da:	0781      	lsls	r1, r0, #30
 80029dc:	d0bd      	beq.n	800295a <lv_obj_event+0x114>
 80029de:	2f00      	cmp	r7, #0
 80029e0:	dc01      	bgt.n	80029e6 <lv_obj_event+0x1a0>
 80029e2:	2d00      	cmp	r5, #0
 80029e4:	ddb9      	ble.n	800295a <lv_obj_event+0x114>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f001 fc55 	bl	8004296 <lv_obj_get_scroll_x>
 80029ec:	4605      	mov	r5, r0
 80029ee:	4620      	mov	r0, r4
 80029f0:	f000 fd7b 	bl	80034ea <lv_obj_get_width>
 80029f4:	1e01      	subs	r1, r0, #0
 80029f6:	bfb8      	it	lt
 80029f8:	3103      	addlt	r1, #3
 80029fa:	eba5 01a1 	sub.w	r1, r5, r1, asr #2
 80029fe:	e7e0      	b.n	80029c2 <lv_obj_event+0x17c>
    else if(code == LV_EVENT_FOCUSED) {
 8002a00:	2d0e      	cmp	r5, #14
 8002a02:	d126      	bne.n	8002a52 <lv_obj_event+0x20c>
    return (obj->flags & f)  == f ? true : false;
 8002a04:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8002a06:	059a      	lsls	r2, r3, #22
 8002a08:	d502      	bpl.n	8002a10 <lv_obj_event+0x1ca>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f001 fffc 	bl	8004a08 <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7ff ff14 	bl	800283e <lv_obj_get_group>
 8002a16:	f7ff fac0 	bl	8001f9a <lv_group_get_editing>
 8002a1a:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 8002a1c:	f7ff fac2 	bl	8001fa4 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8002a20:	b910      	cbnz	r0, 8002a28 <lv_obj_event+0x1e2>
 8002a22:	4630      	mov	r0, r6
 8002a24:	f7ff f956 	bl	8001cd4 <lv_event_get_indev>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002a28:	f7ff fac2 	bl	8001fb0 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	d008      	beq.n	8002a42 <lv_obj_event+0x1fc>
        lv_state_t state = LV_STATE_FOCUSED;
 8002a30:	2804      	cmp	r0, #4
 8002a32:	bf0c      	ite	eq
 8002a34:	2106      	moveq	r1, #6
 8002a36:	2102      	movne	r1, #2
        if(editing) {
 8002a38:	b12d      	cbz	r5, 8002a46 <lv_obj_event+0x200>
            lv_obj_add_state(obj, state);
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f041 0108 	orr.w	r1, r1, #8
 8002a40:	e70f      	b.n	8002862 <lv_obj_event+0x1c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8002a42:	2106      	movs	r1, #6
 8002a44:	e7f8      	b.n	8002a38 <lv_obj_event+0x1f2>
            lv_obj_add_state(obj, state);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff fed8 	bl	80027fc <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	4620      	mov	r0, r4
 8002a50:	e72b      	b.n	80028aa <lv_obj_event+0x64>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8002a52:	2d09      	cmp	r5, #9
 8002a54:	d101      	bne.n	8002a5a <lv_obj_event+0x214>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	e703      	b.n	8002862 <lv_obj_event+0x1c>
    else if(code == LV_EVENT_SCROLL_END) {
 8002a5a:	2d0a      	cmp	r5, #10
 8002a5c:	d116      	bne.n	8002a8c <lv_obj_event+0x246>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8002a5e:	2140      	movs	r1, #64	; 0x40
 8002a60:	f7ff fed5 	bl	800280e <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8002a64:	4620      	mov	r0, r4
 8002a66:	f001 fbfa 	bl	800425e <lv_obj_get_scrollbar_mode>
 8002a6a:	2802      	cmp	r0, #2
 8002a6c:	f47f af28 	bne.w	80028c0 <lv_obj_event+0x7a>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8002a70:	4669      	mov	r1, sp
 8002a72:	4620      	mov	r0, r4
 8002a74:	aa02      	add	r2, sp, #8
 8002a76:	f001 ffe2 	bl	8004a3e <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8002a7a:	4669      	mov	r1, sp
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 fe64 	bl	800374a <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8002a82:	4620      	mov	r0, r4
 8002a84:	a902      	add	r1, sp, #8
 8002a86:	f000 fe60 	bl	800374a <lv_obj_invalidate_area>
 8002a8a:	e719      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_DEFOCUSED) {
 8002a8c:	2d0f      	cmp	r5, #15
 8002a8e:	d101      	bne.n	8002a94 <lv_obj_event+0x24e>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8002a90:	210e      	movs	r1, #14
 8002a92:	e70a      	b.n	80028aa <lv_obj_event+0x64>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8002a94:	2d29      	cmp	r5, #41	; 0x29
 8002a96:	d123      	bne.n	8002ae0 <lv_obj_event+0x29a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002a98:	f241 0209 	movw	r2, #4105	; 0x1009
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f002 fc73 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002aa2:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002aa6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f002 fc6c 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8002ab0:	b280      	uxth	r0, r0
        if(layout || align) {
 8002ab2:	b910      	cbnz	r0, 8002aba <lv_obj_event+0x274>
 8002ab4:	f015 0fff 	tst.w	r5, #255	; 0xff
 8002ab8:	d002      	beq.n	8002ac0 <lv_obj_event+0x27a>
            lv_obj_mark_layout_as_dirty(obj);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f000 fcc4 	bl	8003448 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f003 fa47 	bl	8005f54 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 8002ac6:	2500      	movs	r5, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8002ac8:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 8002aca:	42b5      	cmp	r5, r6
 8002acc:	f43f aef8 	beq.w	80028c0 <lv_obj_event+0x7a>
            lv_obj_t * child = obj->spec_attr->children[i];
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8002ad4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002ad8:	f000 fcb6 	bl	8003448 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8002adc:	3501      	adds	r5, #1
 8002ade:	e7f4      	b.n	8002aca <lv_obj_event+0x284>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8002ae0:	2d22      	cmp	r5, #34	; 0x22
 8002ae2:	d12b      	bne.n	8002b3c <lv_obj_event+0x2f6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8002ae4:	f241 0201 	movw	r2, #4097	; 0x1001
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f002 fc4d 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8002aee:	f241 0204 	movw	r2, #4100	; 0x1004
 8002af2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8002af4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8002af6:	4620      	mov	r0, r4
 8002af8:	f002 fc46 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002afc:	f241 0209 	movw	r2, #4105	; 0x1009
 8002b00:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8002b02:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002b04:	4620      	mov	r0, r4
 8002b06:	f002 fc3f 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002b0a:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8002b0e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8002b10:	2100      	movs	r1, #0
 8002b12:	4620      	mov	r0, r4
 8002b14:	f002 fc38 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8002b18:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8002b1a:	b958      	cbnz	r0, 8002b34 <lv_obj_event+0x2ee>
 8002b1c:	f017 0fff 	tst.w	r7, #255	; 0xff
 8002b20:	d108      	bne.n	8002b34 <lv_obj_event+0x2ee>
 8002b22:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8002b26:	b236      	sxth	r6, r6
 8002b28:	429e      	cmp	r6, r3
 8002b2a:	d003      	beq.n	8002b34 <lv_obj_event+0x2ee>
 8002b2c:	b22d      	sxth	r5, r5
 8002b2e:	429d      	cmp	r5, r3
 8002b30:	f47f aec6 	bne.w	80028c0 <lv_obj_event+0x7a>
            lv_obj_mark_layout_as_dirty(obj);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 fc87 	bl	8003448 <lv_obj_mark_layout_as_dirty>
 8002b3a:	e6c1      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8002b3c:	2d13      	cmp	r5, #19
 8002b3e:	d10e      	bne.n	8002b5e <lv_obj_event+0x318>
        lv_coord_t * s = lv_event_get_param(e);
 8002b40:	4630      	mov	r0, r6
 8002b42:	f7ff f8b3 	bl	8001cac <lv_event_get_param>
 8002b46:	4605      	mov	r5, r0
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f000 fb11 	bl	8003172 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, d);
 8002b50:	f9b5 3000 	ldrsh.w	r3, [r5]
 8002b54:	4283      	cmp	r3, r0
 8002b56:	bfb8      	it	lt
 8002b58:	4603      	movlt	r3, r0
 8002b5a:	802b      	strh	r3, [r5, #0]
 8002b5c:	e6b0      	b.n	80028c0 <lv_obj_event+0x7a>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8002b5e:	2d18      	cmp	r5, #24
 8002b60:	f63f aeae 	bhi.w	80028c0 <lv_obj_event+0x7a>
 8002b64:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8002b68:	fa20 f505 	lsr.w	r5, r0, r5
 8002b6c:	07eb      	lsls	r3, r5, #31
 8002b6e:	f57f aea7 	bpl.w	80028c0 <lv_obj_event+0x7a>
        lv_obj_draw(e);
 8002b72:	4630      	mov	r0, r6
 8002b74:	f7ff fb68 	bl	8002248 <lv_obj_draw>
 8002b78:	e6a2      	b.n	80028c0 <lv_obj_event+0x7a>
	...

08002b7c <lv_obj_destructor>:
{
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8002b80:	4608      	mov	r0, r1
 8002b82:	f7ff f895 	bl	8001cb0 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8002b86:	2000      	movs	r0, #0
 8002b88:	f002 fbf8 	bl	800537c <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <lv_obj_destructor+0x64>)
 8002b90:	4620      	mov	r0, r4
 8002b92:	f002 fe55 	bl	8005840 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f002 fbf0 	bl	800537c <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f00c fc98 	bl	800f4d4 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff fe4a 	bl	800283e <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8002baa:	b110      	cbz	r0, 8002bb2 <lv_obj_destructor+0x36>
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff f9ac 	bl	8001f0a <lv_group_remove_obj>
    if(obj->spec_attr) {
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	b19b      	cbz	r3, 8002bde <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	b120      	cbz	r0, 8002bc4 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 8002bba:	f00d f8f5 	bl	800fda8 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	68a3      	ldr	r3, [r4, #8]
 8002bc2:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	68d8      	ldr	r0, [r3, #12]
 8002bc8:	b120      	cbz	r0, 8002bd4 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 8002bca:	f00d f8ed 	bl	800fda8 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8002bce:	2200      	movs	r2, #0
 8002bd0:	68a3      	ldr	r3, [r4, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 8002bd4:	68a0      	ldr	r0, [r4, #8]
 8002bd6:	f00d f8e7 	bl	800fda8 <lv_mem_free>
        obj->spec_attr = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60a3      	str	r3, [r4, #8]
}
 8002bde:	bd10      	pop	{r4, pc}
 8002be0:	000fffff 	.word	0x000fffff

08002be4 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8002be4:	6883      	ldr	r3, [r0, #8]
{
 8002be6:	b510      	push	{r4, lr}
 8002be8:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 8002bea:	b99b      	cbnz	r3, 8002c14 <lv_obj_allocate_spec_attr+0x30>
        x++;
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <lv_obj_allocate_spec_attr+0x34>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8002bee:	201c      	movs	r0, #28
        x++;
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8002bf6:	f00d fa5d 	bl	80100b4 <lv_mem_alloc>
 8002bfa:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8002bfc:	b900      	cbnz	r0, 8002c00 <lv_obj_allocate_spec_attr+0x1c>
 8002bfe:	e7fe      	b.n	8002bfe <lv_obj_allocate_spec_attr+0x1a>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8002c00:	211c      	movs	r1, #28
 8002c02:	f00d fad5 	bl	80101b0 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8002c06:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8002c08:	8b13      	ldrh	r3, [r2, #24]
 8002c0a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002c0e:	f043 0303 	orr.w	r3, r3, #3
 8002c12:	8313      	strh	r3, [r2, #24]
}
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	bf00      	nop
 8002c18:	20001a7c 	.word	0x20001a7c

08002c1c <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8002c1c:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 8002c1e:	6805      	ldr	r5, [r0, #0]
{
 8002c20:	4604      	mov	r4, r0

    if(obj->class_p->base_class) {
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	b113      	cbz	r3, 8002c2c <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8002c26:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8002c28:	f7ff fff8 	bl	8002c1c <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8002c2c:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8002c2e:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8002c30:	b123      	cbz	r3, 8002c3c <lv_obj_construct+0x20>
 8002c32:	4621      	mov	r1, r4
 8002c34:	4628      	mov	r0, r5
}
 8002c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8002c3a:	4718      	bx	r3
}
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c40 <lv_obj_class_create_obj>:
{
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	460e      	mov	r6, r1
 8002c44:	4607      	mov	r7, r0

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8002c46:	4601      	mov	r1, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <lv_obj_class_create_obj+0xd0>)
 8002c4a:	b139      	cbz	r1, 8002c5c <lv_obj_class_create_obj+0x1c>
 8002c4c:	698d      	ldr	r5, [r1, #24]
 8002c4e:	422b      	tst	r3, r5
 8002c50:	d002      	beq.n	8002c58 <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 8002c52:	f3c5 150f 	ubfx	r5, r5, #4, #16
 8002c56:	e002      	b.n	8002c5e <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 8002c58:	6809      	ldr	r1, [r1, #0]
 8002c5a:	e7f6      	b.n	8002c4a <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8002c5c:	460d      	mov	r5, r1
    lv_obj_t * obj = lv_mem_alloc(s);
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f00d fa28 	bl	80100b4 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8002c64:	4604      	mov	r4, r0
 8002c66:	b910      	cbnz	r0, 8002c6e <lv_obj_class_create_obj+0x2e>
 8002c68:	2400      	movs	r4, #0
}
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_memset_00(obj, s);
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f00d fa9e 	bl	80101b0 <lv_memset_00>
    obj->parent = parent;
 8002c74:	e9c4 7600 	strd	r7, r6, [r4]
    if(parent == NULL) {
 8002c78:	bb46      	cbnz	r6, 8002ccc <lv_obj_class_create_obj+0x8c>
        lv_disp_t * disp = lv_disp_get_default();
 8002c7a:	f00c fab3 	bl	800f1e4 <lv_disp_get_default>
        if(!disp) {
 8002c7e:	4605      	mov	r5, r0
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d0f1      	beq.n	8002c68 <lv_obj_class_create_obj+0x28>
        if(disp->screens == NULL) {
 8002c84:	68c0      	ldr	r0, [r0, #12]
 8002c86:	b998      	cbnz	r0, 8002cb0 <lv_obj_class_create_obj+0x70>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8002c88:	2004      	movs	r0, #4
 8002c8a:	f00d fa13 	bl	80100b4 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8002c8e:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8002c90:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 8002c92:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 8002c94:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 8002c96:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8002c98:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8002c9a:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8002c9c:	f00c faa8 	bl	800f1f0 <lv_disp_get_hor_res>
 8002ca0:	3801      	subs	r0, #1
 8002ca2:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	f00c fab3 	bl	800f210 <lv_disp_get_ver_res>
 8002caa:	3801      	subs	r0, #1
 8002cac:	8360      	strh	r0, [r4, #26]
 8002cae:	e7dc      	b.n	8002c6a <lv_obj_class_create_obj+0x2a>
            disp->screen_cnt++;
 8002cb0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002cb2:	3101      	adds	r1, #1
 8002cb4:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8002cb6:	0089      	lsls	r1, r1, #2
 8002cb8:	f00d fa12 	bl	80100e0 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 8002cbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8002cbe:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8002cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002cca:	e7e4      	b.n	8002c96 <lv_obj_class_create_obj+0x56>
        if(parent->spec_attr == NULL) {
 8002ccc:	68b3      	ldr	r3, [r6, #8]
 8002cce:	b913      	cbnz	r3, 8002cd6 <lv_obj_class_create_obj+0x96>
            lv_obj_allocate_spec_attr(parent);
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ff87 	bl	8002be4 <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 8002cd6:	68b5      	ldr	r5, [r6, #8]
 8002cd8:	6828      	ldr	r0, [r5, #0]
 8002cda:	b948      	cbnz	r0, 8002cf0 <lv_obj_class_create_obj+0xb0>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8002cdc:	2004      	movs	r0, #4
 8002cde:	f00d f9e9 	bl	80100b4 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 8002ce2:	68b3      	ldr	r3, [r6, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8002ce4:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[0] = obj;
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 8002cea:	2201      	movs	r2, #1
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	e7bc      	b.n	8002c6a <lv_obj_class_create_obj+0x2a>
            parent->spec_attr->child_cnt++;
 8002cf0:	6869      	ldr	r1, [r5, #4]
 8002cf2:	3101      	adds	r1, #1
 8002cf4:	6069      	str	r1, [r5, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8002cf6:	0089      	lsls	r1, r1, #2
 8002cf8:	f00d f9f2 	bl	80100e0 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8002cfc:	68b2      	ldr	r2, [r6, #8]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8002cfe:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8002d00:	6853      	ldr	r3, [r2, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002d0e:	e7ac      	b.n	8002c6a <lv_obj_class_create_obj+0x2a>
 8002d10:	000ffff0 	.word	0x000ffff0

08002d14 <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8002d14:	6800      	ldr	r0, [r0, #0]
 8002d16:	b130      	cbz	r0, 8002d26 <lv_obj_is_editable+0x12>
 8002d18:	7e03      	ldrb	r3, [r0, #24]
 8002d1a:	f013 0303 	ands.w	r3, r3, #3
 8002d1e:	d0f9      	beq.n	8002d14 <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8002d20:	3b01      	subs	r3, #1
 8002d22:	4258      	negs	r0, r3
 8002d24:	4158      	adcs	r0, r3
}
 8002d26:	4770      	bx	lr

08002d28 <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8002d28:	6800      	ldr	r0, [r0, #0]
 8002d2a:	b130      	cbz	r0, 8002d3a <lv_obj_is_group_def+0x12>
 8002d2c:	7e03      	ldrb	r3, [r0, #24]
 8002d2e:	f013 030c 	ands.w	r3, r3, #12
 8002d32:	d0f9      	beq.n	8002d28 <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8002d34:	3b04      	subs	r3, #4
 8002d36:	4258      	negs	r0, r3
 8002d38:	4158      	adcs	r0, r3
}
 8002d3a:	4770      	bx	lr

08002d3c <lv_obj_class_init_obj>:
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8002d40:	f000 fb82 	bl	8003448 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f002 fb19 	bl	800537c <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f003 ff1a 	bl	8006b84 <lv_theme_apply>
    lv_obj_construct(obj);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7ff ff63 	bl	8002c1c <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f002 fb10 	bl	800537c <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8002d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d60:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002d64:	4620      	mov	r0, r4
 8002d66:	f002 fbf3 	bl	8005550 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 fc41 	bl	80035f2 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 8002d70:	f7ff f864 	bl	8001e3c <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8002d74:	4602      	mov	r2, r0
 8002d76:	b138      	cbz	r0, 8002d88 <lv_obj_class_init_obj+0x4c>
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff ffd5 	bl	8002d28 <lv_obj_is_group_def>
 8002d7e:	b118      	cbz	r0, 8002d88 <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 8002d80:	4621      	mov	r1, r4
 8002d82:	4610      	mov	r0, r2
 8002d84:	f7ff f88c 	bl	8001ea0 <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f003 f8d1 	bl	8005f30 <lv_obj_get_parent>
    if(parent) {
 8002d8e:	4605      	mov	r5, r0
 8002d90:	b168      	cbz	r0, 8002dae <lv_obj_class_init_obj+0x72>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8002d92:	4622      	mov	r2, r4
 8002d94:	2122      	movs	r1, #34	; 0x22
 8002d96:	f7fe ff63 	bl	8001c60 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	2123      	movs	r1, #35	; 0x23
 8002da0:	f7fe ff5e 	bl	8001c60 <lv_event_send>
        lv_obj_invalidate(obj);
 8002da4:	4620      	mov	r0, r4
}
 8002da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(obj);
 8002daa:	f000 bce8 	b.w	800377e <lv_obj_invalidate>
}
 8002dae:	bd38      	pop	{r3, r4, r5, pc}

08002db0 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8002db0:	f240 4262 	movw	r2, #1122	; 0x462
{
 8002db4:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8002db6:	f002 fae7 	bl	8005388 <lv_obj_get_style_prop>
}
 8002dba:	b2c0      	uxtb	r0, r0
 8002dbc:	bd08      	pop	{r3, pc}

08002dbe <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8002dbe:	2268      	movs	r2, #104	; 0x68
{
 8002dc0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8002dc2:	f002 fae1 	bl	8005388 <lv_obj_get_style_prop>
}
 8002dc6:	b2c0      	uxtb	r0, r0
 8002dc8:	bd08      	pop	{r3, pc}

08002dca <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8002dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dce:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8002dd0:	2260      	movs	r2, #96	; 0x60
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	460d      	mov	r5, r1
 8002dd6:	f002 fad7 	bl	8005388 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8002dda:	8020      	strh	r0, [r4, #0]

    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 8002ddc:	b1bd      	cbz	r5, 8002e0e <lv_obj_init_draw_rect_dsc+0x44>
 8002dde:	4629      	mov	r1, r5
 8002de0:	4630      	mov	r0, r6
 8002de2:	f7ff ffe5 	bl	8002db0 <lv_obj_get_style_opa>
 8002de6:	4680      	mov	r8, r0
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8002de8:	4629      	mov	r1, r5
 8002dea:	4630      	mov	r0, r6
 8002dec:	f7ff ffe0 	bl	8002db0 <lv_obj_get_style_opa>
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 8002df0:	2802      	cmp	r0, #2
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8002df2:	4607      	mov	r7, r0
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 8002df4:	d902      	bls.n	8002dfc <lv_obj_init_draw_rect_dsc+0x32>
 8002df6:	f1b8 0f02 	cmp.w	r8, #2
 8002dfa:	d80b      	bhi.n	8002e14 <lv_obj_init_draw_rect_dsc+0x4a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 8002e00:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8002e02:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = LV_OPA_TRANSP;
 8002e06:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
                }
            }
        }
    }
#endif
}
 8002e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 8002e0e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8002e12:	e7e9      	b.n	8002de8 <lv_obj_init_draw_rect_dsc+0x1e>
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8002e14:	4629      	mov	r1, r5
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7ff ffd1 	bl	8002dbe <lv_obj_get_style_blend_mode>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8002e1c:	7aa3      	ldrb	r3, [r4, #10]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8002e1e:	70a0      	strb	r0, [r4, #2]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8002e20:	b36b      	cbz	r3, 8002e7e <lv_obj_init_draw_rect_dsc+0xb4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8002e22:	2221      	movs	r2, #33	; 0x21
 8002e24:	4629      	mov	r1, r5
 8002e26:	4630      	mov	r0, r6
 8002e28:	f002 faae 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002e2c:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8002e2e:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8002e30:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8002e32:	d924      	bls.n	8002e7e <lv_obj_init_draw_rect_dsc+0xb4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR_FILTERED);
 8002e34:	f244 0220 	movw	r2, #16416	; 0x4020
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f002 faa4 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8002e40:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8002e42:	80a0      	strh	r0, [r4, #4]
 8002e44:	4629      	mov	r1, r5
 8002e46:	4630      	mov	r0, r6
 8002e48:	f002 fa9e 	bl	8005388 <lv_obj_get_style_prop>
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8002e4c:	7ae3      	ldrb	r3, [r4, #11]
 8002e4e:	f360 0302 	bfi	r3, r0, #0, #3
 8002e52:	72e3      	strb	r3, [r4, #11]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 8002e54:	075b      	lsls	r3, r3, #29
 8002e56:	d012      	beq.n	8002e7e <lv_obj_init_draw_rect_dsc+0xb4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR_FILTERED);
 8002e58:	f244 0222 	movw	r2, #16418	; 0x4022
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f002 fa92 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	4629      	mov	r1, r5
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8002e68:	80e0      	strh	r0, [r4, #6]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f002 fa8c 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8002e70:	2225      	movs	r2, #37	; 0x25
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8002e72:	7220      	strb	r0, [r4, #8]
 8002e74:	4629      	mov	r1, r5
 8002e76:	4630      	mov	r0, r6
 8002e78:	f002 fa86 	bl	8005388 <lv_obj_get_style_prop>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8002e7c:	7260      	strb	r0, [r4, #9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8002e7e:	f241 0232 	movw	r2, #4146	; 0x1032
 8002e82:	4629      	mov	r1, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	f002 fa7f 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e8a:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8002e8c:	83a0      	strh	r0, [r4, #28]
    if(draw_dsc->border_width) {
 8002e8e:	b1d0      	cbz	r0, 8002ec6 <lv_obj_init_draw_rect_dsc+0xfc>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8002e90:	7fa3      	ldrb	r3, [r4, #30]
 8002e92:	b1c3      	cbz	r3, 8002ec6 <lv_obj_init_draw_rect_dsc+0xfc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8002e94:	2231      	movs	r2, #49	; 0x31
 8002e96:	4629      	mov	r1, r5
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f002 fa75 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002e9e:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8002ea0:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8002ea2:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8002ea4:	d90f      	bls.n	8002ec6 <lv_obj_init_draw_rect_dsc+0xfc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8002ea6:	2233      	movs	r2, #51	; 0x33
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4630      	mov	r0, r6
 8002eac:	f002 fa6c 	bl	8005388 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8002eb0:	7fe3      	ldrb	r3, [r4, #31]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR_FILTERED);
 8002eb2:	f244 0230 	movw	r2, #16432	; 0x4030
 8002eb6:	f360 0345 	bfi	r3, r0, #1, #5
 8002eba:	4629      	mov	r1, r5
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	77e3      	strb	r3, [r4, #31]
 8002ec0:	f002 fa62 	bl	8005388 <lv_obj_get_style_prop>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8002ec4:	8360      	strh	r0, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8002ec6:	f640 023a 	movw	r2, #2106	; 0x83a
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f002 fa5b 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002ed2:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8002ed4:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->outline_width) {
 8002ed6:	b1d8      	cbz	r0, 8002f10 <lv_obj_init_draw_rect_dsc+0x146>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8002ed8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002edc:	b1c3      	cbz	r3, 8002f10 <lv_obj_init_draw_rect_dsc+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8002ede:	f640 023c 	movw	r2, #2108	; 0x83c
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f002 fa4f 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002eea:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8002eec:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8002eee:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8002ef2:	d90d      	bls.n	8002f10 <lv_obj_init_draw_rect_dsc+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8002ef4:	f640 023d 	movw	r2, #2109	; 0x83d
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4630      	mov	r0, r6
 8002efc:	f002 fa44 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR_FILTERED);
 8002f00:	f244 023b 	movw	r2, #16443	; 0x403b
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8002f04:	84a0      	strh	r0, [r4, #36]	; 0x24
 8002f06:	4629      	mov	r1, r5
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f002 fa3d 	bl	8005388 <lv_obj_get_style_prop>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8002f0e:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8002f10:	7da3      	ldrb	r3, [r4, #22]
 8002f12:	b31b      	cbz	r3, 8002f5c <lv_obj_init_draw_rect_dsc+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8002f14:	f640 0226 	movw	r2, #2086	; 0x826
 8002f18:	4629      	mov	r1, r5
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	f002 fa34 	bl	8005388 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8002f20:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
 8002f22:	b1d8      	cbz	r0, 8002f5c <lv_obj_init_draw_rect_dsc+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8002f24:	2227      	movs	r2, #39	; 0x27
 8002f26:	4629      	mov	r1, r5
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f002 fa2d 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002f2e:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8002f30:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8002f32:	75a0      	strb	r0, [r4, #22]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8002f34:	d912      	bls.n	8002f5c <lv_obj_init_draw_rect_dsc+0x192>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8002f36:	68e0      	ldr	r0, [r4, #12]
 8002f38:	f003 fe8a 	bl	8006c50 <lv_img_src_get_type>
 8002f3c:	2802      	cmp	r0, #2
 8002f3e:	d165      	bne.n	800300c <lv_obj_init_draw_rect_dsc+0x242>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8002f40:	f241 4259 	movw	r2, #5209	; 0x1459
 8002f44:	4629      	mov	r1, r5
 8002f46:	4630      	mov	r0, r6
 8002f48:	f002 fa1e 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 8002f4c:	f244 4257 	movw	r2, #17495	; 0x4457
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8002f50:	6120      	str	r0, [r4, #16]
 8002f52:	4629      	mov	r1, r5
 8002f54:	4630      	mov	r0, r6
 8002f56:	f002 fa17 	bl	8005388 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8002f5a:	82a0      	strh	r0, [r4, #20]
    if(draw_dsc->shadow_opa) {
 8002f5c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8002f60:	b39b      	cbz	r3, 8002fca <lv_obj_init_draw_rect_dsc+0x200>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8002f62:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8002f66:	4629      	mov	r1, r5
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f002 fa0d 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002f6e:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8002f70:	8560      	strh	r0, [r4, #42]	; 0x2a
        if(draw_dsc->shadow_width) {
 8002f72:	b350      	cbz	r0, 8002fca <lv_obj_init_draw_rect_dsc+0x200>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8002f74:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d926      	bls.n	8002fca <lv_obj_init_draw_rect_dsc+0x200>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8002f7c:	f640 0245 	movw	r2, #2117	; 0x845
 8002f80:	4629      	mov	r1, r5
 8002f82:	4630      	mov	r0, r6
 8002f84:	f002 fa00 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8002f88:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8002f8a:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8002f8c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8002f90:	d91b      	bls.n	8002fca <lv_obj_init_draw_rect_dsc+0x200>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8002f92:	f640 0241 	movw	r2, #2113	; 0x841
 8002f96:	4629      	mov	r1, r5
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f002 f9f5 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8002f9e:	f640 0242 	movw	r2, #2114	; 0x842
 8002fa2:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8002fa4:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f002 f9ee 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8002fac:	f640 0243 	movw	r2, #2115	; 0x843
 8002fb0:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8002fb2:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f002 f9e7 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR_FILTERED);
 8002fba:	f244 0244 	movw	r2, #16452	; 0x4044
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8002fbe:	8620      	strh	r0, [r4, #48]	; 0x30
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f002 f9e0 	bl	8005388 <lv_obj_get_style_prop>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8002fc8:	8520      	strh	r0, [r4, #40]	; 0x28
    if(main_opa < LV_OPA_MAX) {
 8002fca:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
 8002fce:	d834      	bhi.n	800303a <lv_obj_init_draw_rect_dsc+0x270>
        opa = (uint16_t)((uint16_t) main_opa * opa) >> 8;
 8002fd0:	fb08 f707 	mul.w	r7, r8, r7
 8002fd4:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 8002fd8:	7aa3      	ldrb	r3, [r4, #10]
 8002fda:	b2bf      	uxth	r7, r7
 8002fdc:	437b      	muls	r3, r7
 8002fde:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002fe2:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
 8002fe4:	7fa3      	ldrb	r3, [r4, #30]
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 8002fe6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
 8002fea:	437b      	muls	r3, r7
 8002fec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002ff0:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 8002ff2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8002ff6:	437b      	muls	r3, r7
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 8002ff8:	4347      	muls	r7, r0
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 8002ffa:	f3c3 2307 	ubfx	r3, r3, #8, #8
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 8002ffe:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 8003002:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 8003006:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
 800300a:	e6fe      	b.n	8002e0a <lv_obj_init_draw_rect_dsc+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_FILTERED);
 800300c:	f244 0228 	movw	r2, #16424	; 0x4028
 8003010:	4629      	mov	r1, r5
 8003012:	4630      	mov	r0, r6
 8003014:	f002 f9b8 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8003018:	2229      	movs	r2, #41	; 0x29
 800301a:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 800301c:	82a0      	strh	r0, [r4, #20]
 800301e:	4630      	mov	r0, r6
 8003020:	f002 f9b2 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8003024:	222a      	movs	r2, #42	; 0x2a
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8003026:	75e0      	strb	r0, [r4, #23]
 8003028:	4629      	mov	r1, r5
 800302a:	4630      	mov	r0, r6
 800302c:	f002 f9ac 	bl	8005388 <lv_obj_get_style_prop>
    return (bool)v.num;
 8003030:	3800      	subs	r0, #0
 8003032:	bf18      	it	ne
 8003034:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8003036:	7620      	strb	r0, [r4, #24]
 8003038:	e790      	b.n	8002f5c <lv_obj_init_draw_rect_dsc+0x192>
    if(opa < LV_OPA_MAX) {
 800303a:	2ffc      	cmp	r7, #252	; 0xfc
 800303c:	f63f aee5 	bhi.w	8002e0a <lv_obj_init_draw_rect_dsc+0x40>
 8003040:	e7ca      	b.n	8002fd8 <lv_obj_init_draw_rect_dsc+0x20e>

08003042 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8003046:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800304a:	4605      	mov	r5, r0
 800304c:	460e      	mov	r6, r1
 800304e:	f002 f99b 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003052:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8003054:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8003056:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8003058:	d942      	bls.n	80030e0 <lv_obj_init_draw_label_dsc+0x9e>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 800305a:	4631      	mov	r1, r6
 800305c:	4628      	mov	r0, r5
 800305e:	f7ff fea7 	bl	8002db0 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8003062:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 8003064:	bf9f      	itttt	ls
 8003066:	7ea3      	ldrbls	r3, [r4, #26]
 8003068:	4358      	mulls	r0, r3
 800306a:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 800306e:	76a0      	strbls	r0, [r4, #26]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8003070:	7ea3      	ldrb	r3, [r4, #26]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d934      	bls.n	80030e0 <lv_obj_init_draw_label_dsc+0x9e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 8003076:	f244 4257 	movw	r2, #17495	; 0x4457
 800307a:	4631      	mov	r1, r6
 800307c:	4628      	mov	r0, r5
 800307e:	f002 f983 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8003082:	f241 425a 	movw	r2, #5210	; 0x145a
 8003086:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8003088:	81a0      	strh	r0, [r4, #12]
 800308a:	4628      	mov	r0, r5
 800308c:	f002 f97c 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8003090:	f241 425b 	movw	r2, #5211	; 0x145b
 8003094:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8003096:	82a0      	strh	r0, [r4, #20]
 8003098:	4628      	mov	r0, r5
 800309a:	f002 f975 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 800309e:	f240 425c 	movw	r2, #1116	; 0x45c
 80030a2:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 80030a4:	8260      	strh	r0, [r4, #18]
 80030a6:	4628      	mov	r0, r5
 80030a8:	f002 f96e 	bl	8005388 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80030ac:	7fa3      	ldrb	r3, [r4, #30]
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80030ae:	4631      	mov	r1, r6
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80030b0:	f360 0302 	bfi	r3, r0, #0, #3
 80030b4:	77a3      	strb	r3, [r4, #30]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80030b6:	4628      	mov	r0, r5
 80030b8:	f7ff fe81 	bl	8002dbe <lv_obj_get_style_blend_mode>
 80030bc:	7fa3      	ldrb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80030be:	f241 4259 	movw	r2, #5209	; 0x1459
 80030c2:	f360 03c5 	bfi	r3, r0, #3, #3
 80030c6:	4631      	mov	r1, r6
 80030c8:	77a3      	strb	r3, [r4, #30]
 80030ca:	4628      	mov	r0, r5
 80030cc:	f002 f95c 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 80030d0:	f241 425d 	movw	r2, #5213	; 0x145d
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80030d4:	6020      	str	r0, [r4, #0]
 80030d6:	4631      	mov	r1, r6
 80030d8:	4628      	mov	r0, r5
 80030da:	f002 f955 	bl	8005388 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80030de:	7720      	strb	r0, [r4, #28]
}
 80030e0:	bd70      	pop	{r4, r5, r6, pc}

080030e2 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80030e2:	b570      	push	{r4, r5, r6, lr}
 80030e4:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80030e6:	2246      	movs	r2, #70	; 0x46
 80030e8:	4605      	mov	r5, r0
 80030ea:	460e      	mov	r6, r1
 80030ec:	f002 f94c 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80030f0:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80030f2:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 80030f4:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80030f6:	d93b      	bls.n	8003170 <lv_obj_init_draw_img_dsc+0x8e>

    lv_opa_t opa_scale = lv_obj_get_style_opa(obj, part);
 80030f8:	4631      	mov	r1, r6
 80030fa:	4628      	mov	r0, r5
 80030fc:	f7ff fe58 	bl	8002db0 <lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8003100:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8003102:	bf9f      	itttt	ls
 8003104:	7ae3      	ldrbls	r3, [r4, #11]
 8003106:	4358      	mulls	r0, r3
 8003108:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 800310c:	72e0      	strbls	r0, [r4, #11]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800310e:	7ae3      	ldrb	r3, [r4, #11]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d92d      	bls.n	8003170 <lv_obj_init_draw_img_dsc+0x8e>

    draw_dsc->angle = 0;
 8003114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003118:	6023      	str	r3, [r4, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800311a:	8b2b      	ldrh	r3, [r5, #24]
 800311c:	8aaa      	ldrh	r2, [r5, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8003122:	b21a      	sxth	r2, r3
 8003124:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8003128:	4413      	add	r3, r2
 800312a:	105b      	asrs	r3, r3, #1
 800312c:	80a3      	strh	r3, [r4, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800312e:	8b6b      	ldrh	r3, [r5, #26]
 8003130:	8aea      	ldrh	r2, [r5, #22]
 8003132:	3301      	adds	r3, #1
 8003134:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8003136:	b21a      	sxth	r2, r3
 8003138:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800313c:	4413      	add	r3, r2
 800313e:	105b      	asrs	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 8003140:	2248      	movs	r2, #72	; 0x48
 8003142:	4631      	mov	r1, r6
 8003144:	4628      	mov	r0, r5
 8003146:	80e3      	strh	r3, [r4, #6]
 8003148:	f002 f91e 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800314c:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 800314e:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8003150:	b130      	cbz	r0, 8003160 <lv_obj_init_draw_img_dsc+0x7e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_FILTERED);
 8003152:	f244 0247 	movw	r2, #16455	; 0x4047
 8003156:	4631      	mov	r1, r6
 8003158:	4628      	mov	r0, r5
 800315a:	f002 f915 	bl	8005388 <lv_obj_get_style_prop>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 800315e:	8120      	strh	r0, [r4, #8]
    }
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8003160:	4631      	mov	r1, r6
 8003162:	4628      	mov	r0, r5
 8003164:	f7ff fe2b 	bl	8002dbe <lv_obj_get_style_blend_mode>
 8003168:	7b23      	ldrb	r3, [r4, #12]
 800316a:	f360 0303 	bfi	r3, r0, #0, #4
 800316e:	7323      	strb	r3, [r4, #12]
#endif
}
 8003170:	bd70      	pop	{r4, r5, r6, pc}

08003172 <lv_obj_calculate_ext_draw_size>:
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8003172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8003174:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8003178:	4605      	mov	r5, r0
 800317a:	460e      	mov	r6, r1
 800317c:	f002 f904 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003180:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8003182:	bba4      	cbnz	r4, 80031ee <lv_obj_calculate_ext_draw_size+0x7c>
    lv_coord_t s = 0;
 8003184:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8003186:	f640 023a 	movw	r2, #2106	; 0x83a
 800318a:	4631      	mov	r1, r6
 800318c:	4628      	mov	r0, r5
 800318e:	f002 f8fb 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003192:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8003194:	b1a7      	cbz	r7, 80031c0 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8003196:	f640 023c 	movw	r2, #2108	; 0x83c
 800319a:	4631      	mov	r1, r6
 800319c:	4628      	mov	r0, r5
 800319e:	f002 f8f3 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80031a2:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 80031a4:	2802      	cmp	r0, #2
 80031a6:	d90b      	bls.n	80031c0 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80031a8:	f640 023d 	movw	r2, #2109	; 0x83d
 80031ac:	4631      	mov	r1, r6
 80031ae:	4628      	mov	r0, r5
 80031b0:	f002 f8ea 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80031b4:	b200      	sxth	r0, r0
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 80031b6:	4438      	add	r0, r7
 80031b8:	4284      	cmp	r4, r0
 80031ba:	bfb8      	it	lt
 80031bc:	4604      	movlt	r4, r0
 80031be:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80031c0:	4631      	mov	r1, r6
 80031c2:	f640 020a 	movw	r2, #2058	; 0x80a
 80031c6:	4628      	mov	r0, r5
 80031c8:	f002 f8de 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80031cc:	f640 020b 	movw	r2, #2059	; 0x80b
    return (lv_coord_t)v.num;
 80031d0:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80031d2:	4631      	mov	r1, r6
 80031d4:	4628      	mov	r0, r5
 80031d6:	f002 f8d7 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80031da:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 80031dc:	42b8      	cmp	r0, r7
 80031de:	bfb8      	it	lt
 80031e0:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 80031e2:	2800      	cmp	r0, #0
 80031e4:	bfc4      	itt	gt
 80031e6:	1824      	addgt	r4, r4, r0
 80031e8:	b224      	sxthgt	r4, r4

    return s;
}
 80031ea:	4620      	mov	r0, r4
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80031ee:	f640 0245 	movw	r2, #2117	; 0x845
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	f002 f8c7 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80031fa:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 80031fc:	2802      	cmp	r0, #2
 80031fe:	d9c1      	bls.n	8003184 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8003200:	f640 0243 	movw	r2, #2115	; 0x843
 8003204:	4631      	mov	r1, r6
 8003206:	4628      	mov	r0, r5
 8003208:	f002 f8be 	bl	8005388 <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 800320c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8003210:	3001      	adds	r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8003212:	f640 0241 	movw	r2, #2113	; 0x841
 8003216:	4631      	mov	r1, r6
 8003218:	eb00 0464 	add.w	r4, r0, r4, asr #1
 800321c:	4628      	mov	r0, r5
 800321e:	f002 f8b3 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8003222:	f640 0242 	movw	r2, #2114	; 0x842
    return (lv_coord_t)v.num;
 8003226:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8003228:	4631      	mov	r1, r6
 800322a:	4628      	mov	r0, r5
 800322c:	f002 f8ac 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003230:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8003232:	2800      	cmp	r0, #0
 8003234:	bfb8      	it	lt
 8003236:	4240      	neglt	r0, r0
 8003238:	2f00      	cmp	r7, #0
 800323a:	bfb8      	it	lt
 800323c:	427f      	neglt	r7, r7
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800323e:	b2a4      	uxth	r4, r4
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8003240:	b280      	uxth	r0, r0
 8003242:	b2bf      	uxth	r7, r7
 8003244:	42b8      	cmp	r0, r7
 8003246:	bf2c      	ite	cs
 8003248:	1824      	addcs	r4, r4, r0
 800324a:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 800324c:	b224      	sxth	r4, r4
 800324e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003252:	e798      	b.n	8003186 <lv_obj_calculate_ext_draw_size+0x14>

08003254 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4604      	mov	r4, r0
 8003258:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 800325a:	2148      	movs	r1, #72	; 0x48
 800325c:	f00c ffa8 	bl	80101b0 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8003260:	6025      	str	r5, [r4, #0]
}
 8003262:	bd38      	pop	{r3, r4, r5, pc}

08003264 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8003264:	6880      	ldr	r0, [r0, #8]
 8003266:	b108      	cbz	r0, 800326c <_lv_obj_get_ext_draw_size+0x8>
 8003268:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 800326c:	4770      	bx	lr

0800326e <lv_obj_refresh_ext_draw_size>:
{
 800326e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003270:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8003272:	f7ff fff7 	bl	8003264 <_lv_obj_get_ext_draw_size>
    lv_coord_t s_new = 0;
 8003276:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8003278:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800327a:	2113      	movs	r1, #19
 800327c:	4620      	mov	r0, r4
 800327e:	f10d 0206 	add.w	r2, sp, #6
    lv_coord_t s_new = 0;
 8003282:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8003286:	f7fe fceb 	bl	8001c60 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 800328a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800328e:	42ab      	cmp	r3, r5
 8003290:	d002      	beq.n	8003298 <lv_obj_refresh_ext_draw_size+0x2a>
 8003292:	4620      	mov	r0, r4
 8003294:	f000 fa73 	bl	800377e <lv_obj_invalidate>
    if(obj->spec_attr) {
 8003298:	68a2      	ldr	r2, [r4, #8]
 800329a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800329e:	b14a      	cbz	r2, 80032b4 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 80032a0:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 80032a2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80032a6:	42ab      	cmp	r3, r5
 80032a8:	d002      	beq.n	80032b0 <lv_obj_refresh_ext_draw_size+0x42>
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 fa67 	bl	800377e <lv_obj_invalidate>
}
 80032b0:	b003      	add	sp, #12
 80032b2:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f4      	beq.n	80032a2 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff fc93 	bl	8002be4 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80032be:	68a3      	ldr	r3, [r4, #8]
 80032c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032c4:	82da      	strh	r2, [r3, #22]
 80032c6:	e7ec      	b.n	80032a2 <lv_obj_refresh_ext_draw_size+0x34>

080032c8 <lv_obj_get_style_base_dir.constprop.0>:
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80032c8:	f241 426a 	movw	r2, #5226	; 0x146a
 80032cc:	2100      	movs	r1, #0
static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
 80032ce:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80032d0:	f002 f85a 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
}
 80032d4:	b2c0      	uxtb	r0, r0
 80032d6:	bd08      	pop	{r3, pc}

080032d8 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80032d8:	f241 0232 	movw	r2, #4146	; 0x1032
 80032dc:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 80032de:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80032e0:	f002 f852 	bl	8005388 <lv_obj_get_style_prop>
}
 80032e4:	b200      	sxth	r0, r0
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <lv_obj_get_style_pad_right.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80032e8:	f641 0213 	movw	r2, #6163	; 0x1813
 80032ec:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
 80032ee:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80032f0:	f002 f84a 	bl	8005388 <lv_obj_get_style_prop>
}
 80032f4:	b200      	sxth	r0, r0
 80032f6:	bd08      	pop	{r3, pc}

080032f8 <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80032f8:	f641 0212 	movw	r2, #6162	; 0x1812
 80032fc:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 80032fe:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003300:	f002 f842 	bl	8005388 <lv_obj_get_style_prop>
}
 8003304:	b200      	sxth	r0, r0
 8003306:	bd08      	pop	{r3, pc}

08003308 <lv_obj_get_style_pad_bottom.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003308:	f641 0211 	movw	r2, #6161	; 0x1811
 800330c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
 800330e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003310:	f002 f83a 	bl	8005388 <lv_obj_get_style_prop>
}
 8003314:	b200      	sxth	r0, r0
 8003316:	bd08      	pop	{r3, pc}

08003318 <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003318:	f641 0210 	movw	r2, #6160	; 0x1810
 800331c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 800331e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003320:	f002 f832 	bl	8005388 <lv_obj_get_style_prop>
}
 8003324:	b200      	sxth	r0, r0
 8003326:	bd08      	pop	{r3, pc}

08003328 <lv_obj_set_x>:
    lv_obj_set_x(obj, x);
    lv_obj_set_y(obj, y);
}

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8003328:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800332a:	2300      	movs	r3, #0
{
 800332c:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800332e:	aa01      	add	r2, sp, #4
 8003330:	f241 0107 	movw	r1, #4103	; 0x1007
{
 8003334:	4605      	mov	r5, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8003336:	f002 fbc6 	bl	8005ac6 <lv_obj_get_local_style_prop>

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800333a:	2801      	cmp	r0, #1
 800333c:	d104      	bne.n	8003348 <lv_obj_set_x+0x20>
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	42a3      	cmp	r3, r4
 8003342:	d103      	bne.n	800334c <lv_obj_set_x+0x24>
        lv_obj_set_style_x(obj, x, 0);
    }
}
 8003344:	b003      	add	sp, #12
 8003346:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8003348:	2800      	cmp	r0, #0
 800334a:	d1fb      	bne.n	8003344 <lv_obj_set_x+0x1c>
        lv_obj_set_style_x(obj, x, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f002 fdb5 	bl	8005ec0 <lv_obj_set_style_x>
}
 8003356:	e7f5      	b.n	8003344 <lv_obj_set_x+0x1c>

08003358 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8003358:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800335a:	2300      	movs	r3, #0
{
 800335c:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800335e:	aa01      	add	r2, sp, #4
 8003360:	f241 0108 	movw	r1, #4104	; 0x1008
{
 8003364:	4605      	mov	r5, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8003366:	f002 fbae 	bl	8005ac6 <lv_obj_get_local_style_prop>

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800336a:	2801      	cmp	r0, #1
 800336c:	d104      	bne.n	8003378 <lv_obj_set_y+0x20>
 800336e:	9b01      	ldr	r3, [sp, #4]
 8003370:	42a3      	cmp	r3, r4
 8003372:	d103      	bne.n	800337c <lv_obj_set_y+0x24>
        lv_obj_set_style_y(obj, y, 0);
    }
}
 8003374:	b003      	add	sp, #12
 8003376:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8003378:	2800      	cmp	r0, #0
 800337a:	d1fb      	bne.n	8003374 <lv_obj_set_y+0x1c>
        lv_obj_set_style_y(obj, y, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	4621      	mov	r1, r4
 8003380:	4628      	mov	r0, r5
 8003382:	f002 fda3 	bl	8005ecc <lv_obj_set_style_y>
}
 8003386:	e7f5      	b.n	8003374 <lv_obj_set_y+0x1c>

08003388 <lv_obj_set_pos>:
{
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 800338e:	f7ff ffcb 	bl	8003328 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8003392:	4629      	mov	r1, r5
 8003394:	4620      	mov	r0, r4
}
 8003396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 800339a:	f7ff bfdd 	b.w	8003358 <lv_obj_set_y>

0800339e <lv_obj_set_width>:
    lv_obj_set_width(obj, w);
    lv_obj_set_height(obj, h);
}

void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 800339e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_w;
    lv_style_value_t v_w;

    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80033a0:	2300      	movs	r3, #0
{
 80033a2:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80033a4:	aa01      	add	r2, sp, #4
 80033a6:	f241 0101 	movw	r1, #4097	; 0x1001
{
 80033aa:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80033ac:	f002 fb8b 	bl	8005ac6 <lv_obj_get_local_style_prop>

    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80033b0:	2801      	cmp	r0, #1
 80033b2:	d104      	bne.n	80033be <lv_obj_set_width+0x20>
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	42a3      	cmp	r3, r4
 80033b8:	d103      	bne.n	80033c2 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
    }
}
 80033ba:	b003      	add	sp, #12
 80033bc:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1fb      	bne.n	80033ba <lv_obj_set_width+0x1c>
        lv_obj_set_style_width(obj, w, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	4621      	mov	r1, r4
 80033c6:	4628      	mov	r0, r5
 80033c8:	f002 fd6e 	bl	8005ea8 <lv_obj_set_style_width>
}
 80033cc:	e7f5      	b.n	80033ba <lv_obj_set_width+0x1c>

080033ce <lv_obj_set_height>:

void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 80033ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_h;
    lv_style_value_t v_h;

    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 80033d0:	2300      	movs	r3, #0
{
 80033d2:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 80033d4:	aa01      	add	r2, sp, #4
 80033d6:	f241 0104 	movw	r1, #4100	; 0x1004
{
 80033da:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 80033dc:	f002 fb73 	bl	8005ac6 <lv_obj_get_local_style_prop>

    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 80033e0:	2801      	cmp	r0, #1
 80033e2:	d104      	bne.n	80033ee <lv_obj_set_height+0x20>
 80033e4:	9b01      	ldr	r3, [sp, #4]
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	d103      	bne.n	80033f2 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
    }
}
 80033ea:	b003      	add	sp, #12
 80033ec:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d1fb      	bne.n	80033ea <lv_obj_set_height+0x1c>
        lv_obj_set_style_height(obj, h, 0);
 80033f2:	2200      	movs	r2, #0
 80033f4:	4621      	mov	r1, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	f002 fd5c 	bl	8005eb4 <lv_obj_set_style_height>
}
 80033fc:	e7f5      	b.n	80033ea <lv_obj_set_height+0x1c>

080033fe <lv_obj_set_size>:
{
 80033fe:	b538      	push	{r3, r4, r5, lr}
 8003400:	4604      	mov	r4, r0
 8003402:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 8003404:	f7ff ffcb 	bl	800339e <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
}
 800340c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 8003410:	f7ff bfdd 	b.w	80033ce <lv_obj_set_height>

08003414 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8003414:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8003416:	490b      	ldr	r1, [pc, #44]	; (8003444 <lv_obj_is_layout_positioned+0x30>)
{
 8003418:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 800341a:	f7ff fa08 	bl	800282e <lv_obj_has_flag_any>
 800341e:	4604      	mov	r4, r0
 8003420:	b108      	cbz	r0, 8003426 <lv_obj_is_layout_positioned+0x12>
 8003422:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8003424:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8003426:	4628      	mov	r0, r5
 8003428:	f002 fd82 	bl	8005f30 <lv_obj_get_parent>
    if(parent == NULL) return false;
 800342c:	2800      	cmp	r0, #0
 800342e:	d0f8      	beq.n	8003422 <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003430:	f241 0269 	movw	r2, #4201	; 0x1069
 8003434:	4621      	mov	r1, r4
 8003436:	f001 ffa7 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 800343a:	b280      	uxth	r0, r0
    if(layout) return true;
 800343c:	3800      	subs	r0, #0
 800343e:	bf18      	it	ne
 8003440:	2001      	movne	r0, #1
 8003442:	e7ef      	b.n	8003424 <lv_obj_is_layout_positioned+0x10>
 8003444:	00030001 	.word	0x00030001

08003448 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
    obj->layout_inv = 1;
 8003448:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
{
 800344c:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8003456:	f002 fd45 	bl	8005ee4 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 800345a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800345e:	f042 0202 	orr.w	r2, r2, #2
 8003462:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8003466:	f002 fd43 	bl	8005ef0 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800346a:	6840      	ldr	r0, [r0, #4]
 800346c:	b118      	cbz	r0, 8003476 <lv_obj_mark_layout_as_dirty+0x2e>
}
 800346e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8003472:	f00d bd94 	b.w	8010f9e <lv_timer_resume>
}
 8003476:	bd08      	pop	{r3, pc}

08003478 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 800347a:	4e0c      	ldr	r6, [pc, #48]	; (80034ac <lv_layout_register+0x34>)
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 800347c:	4f0c      	ldr	r7, [pc, #48]	; (80034b0 <lv_layout_register+0x38>)
    layout_cnt++;
 800347e:	6833      	ldr	r3, [r6, #0]
{
 8003480:	4605      	mov	r5, r0
    layout_cnt++;
 8003482:	3301      	adds	r3, #1
{
 8003484:	460c      	mov	r4, r1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 800348a:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 800348c:	f00c fe28 	bl	80100e0 <lv_mem_realloc>
 8003490:	4603      	mov	r3, r0
 8003492:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8003494:	b900      	cbnz	r0, 8003498 <lv_layout_register+0x20>
 8003496:	e7fe      	b.n	8003496 <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8003498:	6830      	ldr	r0, [r6, #0]
 800349a:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800349e:	3a01      	subs	r2, #1
 80034a0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80034a4:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 80034a8:	604c      	str	r4, [r1, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 80034aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ac:	20001a80 	.word	0x20001a80
 80034b0:	2000475c 	.word	0x2000475c

080034b4 <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4604      	mov	r4, r0
 80034b8:	4615      	mov	r5, r2
 80034ba:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	f002 fd0b 	bl	8005ed8 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 80034c2:	4632      	mov	r2, r6
 80034c4:	4629      	mov	r1, r5
 80034c6:	4620      	mov	r0, r4
}
 80034c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 80034cc:	f7ff bf5c 	b.w	8003388 <lv_obj_set_pos>

080034d0 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 80034d0:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 80034d4:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 80034d6:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80034da:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 80034dc:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 80034e0:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 80034e2:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80034e6:	80cb      	strh	r3, [r1, #6]
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
}
 80034e8:	4770      	bx	lr

080034ea <lv_obj_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80034ea:	8b03      	ldrh	r3, [r0, #24]
 80034ec:	8a80      	ldrh	r0, [r0, #20]
 80034ee:	3301      	adds	r3, #1
 80034f0:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
 80034f2:	b200      	sxth	r0, r0
 80034f4:	4770      	bx	lr

080034f6 <lv_obj_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80034f6:	8b43      	ldrh	r3, [r0, #26]
 80034f8:	8ac0      	ldrh	r0, [r0, #22]
 80034fa:	3301      	adds	r3, #1
 80034fc:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
 80034fe:	b200      	sxth	r0, r0
 8003500:	4770      	bx	lr

08003502 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8003506:	f7ff fef7 	bl	80032f8 <lv_obj_get_style_pad_left.constprop.0>
 800350a:	4606      	mov	r6, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff feeb 	bl	80032e8 <lv_obj_get_style_pad_right.constprop.0>
 8003512:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff fedf 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800351a:	8b23      	ldrh	r3, [r4, #24]
 800351c:	8aa2      	ldrh	r2, [r4, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	1a9b      	subs	r3, r3, r2

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8003522:	1b9b      	subs	r3, r3, r6
 8003524:	1b5b      	subs	r3, r3, r5
 8003526:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 800352a:	b200      	sxth	r0, r0
 800352c:	bd70      	pop	{r4, r5, r6, pc}

0800352e <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 800352e:	b570      	push	{r4, r5, r6, lr}
 8003530:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8003532:	f7ff fef1 	bl	8003318 <lv_obj_get_style_pad_top.constprop.0>
 8003536:	4606      	mov	r6, r0
    lv_coord_t bottom =  lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff fee5 	bl	8003308 <lv_obj_get_style_pad_bottom.constprop.0>
 800353e:	4605      	mov	r5, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff fec9 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003546:	8b63      	ldrh	r3, [r4, #26]
 8003548:	8ae2      	ldrh	r2, [r4, #22]
 800354a:	3301      	adds	r3, #1
 800354c:	1a9b      	subs	r3, r3, r2

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800354e:	1b9b      	subs	r3, r3, r6
 8003550:	1b5b      	subs	r3, r3, r5
 8003552:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
}
 8003556:	b200      	sxth	r0, r0
 8003558:	bd70      	pop	{r4, r5, r6, pc}

0800355a <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 800355a:	b538      	push	{r3, r4, r5, lr}
 800355c:	4605      	mov	r5, r0
 800355e:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8003560:	f7ff feba 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
    dest->x1 = src->x1;
 8003564:	f9b5 3014 	ldrsh.w	r3, [r5, #20]

    lv_obj_get_coords(obj, area);
    lv_area_increase(area, -border_width, -border_width);
 8003568:	4242      	negs	r2, r0
 800356a:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 800356c:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8003570:	b212      	sxth	r2, r2
 8003572:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 8003574:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8003578:	4611      	mov	r1, r2
 800357a:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 800357c:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8003580:	4620      	mov	r0, r4
 8003582:	80e3      	strh	r3, [r4, #6]
 8003584:	f00c f891 	bl	800f6aa <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8003588:	4628      	mov	r0, r5
 800358a:	f7ff feb5 	bl	80032f8 <lv_obj_get_style_pad_left.constprop.0>
 800358e:	8823      	ldrh	r3, [r4, #0]
 8003590:	4418      	add	r0, r3
 8003592:	8020      	strh	r0, [r4, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8003594:	4628      	mov	r0, r5
 8003596:	f7ff fea7 	bl	80032e8 <lv_obj_get_style_pad_right.constprop.0>
 800359a:	88a3      	ldrh	r3, [r4, #4]
 800359c:	1a1b      	subs	r3, r3, r0
 800359e:	80a3      	strh	r3, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7ff feb9 	bl	8003318 <lv_obj_get_style_pad_top.constprop.0>
 80035a6:	8863      	ldrh	r3, [r4, #2]
 80035a8:	4418      	add	r0, r3
 80035aa:	8060      	strh	r0, [r4, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7ff feab 	bl	8003308 <lv_obj_get_style_pad_bottom.constprop.0>
 80035b2:	88e3      	ldrh	r3, [r4, #6]
 80035b4:	1a1b      	subs	r3, r3, r0
 80035b6:	80e3      	strh	r3, [r4, #6]

}
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080035bc <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 80035bc:	b507      	push	{r0, r1, r2, lr}
    lv_point_t p = {0, LV_COORD_MIN};
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <lv_obj_get_self_width+0x18>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 80035c4:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80035c6:	f7fe fb4b 	bl	8001c60 <lv_event_send>
    return p.x;
}
 80035ca:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80035ce:	b003      	add	sp, #12
 80035d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035d4:	e0010000 	.word	0xe0010000

080035d8 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
    lv_point_t p = {LV_COORD_MIN, 0};
 80035d8:	f24e 0301 	movw	r3, #57345	; 0xe001
{
 80035dc:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 80035e2:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80035e4:	f7fe fb3c 	bl	8001c60 <lv_event_send>
    return p.y;
}
 80035e8:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80035ec:	b003      	add	sp, #12
 80035ee:	f85d fb04 	ldr.w	pc, [sp], #4

080035f2 <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 80035f2:	b538      	push	{r3, r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80035f4:	f241 0201 	movw	r2, #4097	; 0x1001
 80035f8:	2100      	movs	r1, #0
 80035fa:	4604      	mov	r4, r0
 80035fc:	f001 fec4 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003600:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8003604:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003606:	2100      	movs	r1, #0
 8003608:	4620      	mov	r0, r4
 800360a:	f001 febd 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 800360e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8003612:	429d      	cmp	r5, r3
    return (lv_coord_t)v.num;
 8003614:	b200      	sxth	r0, r0
 8003616:	d001      	beq.n	800361c <lv_obj_refresh_self_size+0x2a>
 8003618:	4298      	cmp	r0, r3
 800361a:	d104      	bne.n	8003626 <lv_obj_refresh_self_size+0x34>

    lv_obj_mark_layout_as_dirty(obj);
 800361c:	4620      	mov	r0, r4
 800361e:	f7ff ff13 	bl	8003448 <lv_obj_mark_layout_as_dirty>
    return true;
 8003622:	2001      	movs	r0, #1
}
 8003624:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8003626:	2000      	movs	r0, #0
 8003628:	e7fc      	b.n	8003624 <lv_obj_refresh_self_size+0x32>

0800362a <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 800362a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362e:	460e      	mov	r6, r1
 8003630:	4617      	mov	r7, r2
 8003632:	4680      	mov	r8, r0
 8003634:	9301      	str	r3, [sp, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003636:	f002 fc8d 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800363a:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800363c:	4681      	mov	r9, r0
        lv_obj_t * child = obj->spec_attr->children[i];
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
        child->coords.x1 += x_diff;
 800363e:	fa1f fa86 	uxth.w	sl, r6
        child->coords.y1 += y_diff;
 8003642:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < child_cnt; i++) {
 8003646:	454d      	cmp	r5, r9
 8003648:	d102      	bne.n	8003650 <lv_obj_move_children_by+0x26>
        child->coords.x2 += x_diff;
        child->coords.y2 += y_diff;

        lv_obj_move_children_by(child, x_diff, y_diff, false);
    }
}
 800364a:	b003      	add	sp, #12
 800364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 8003650:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 800365a:	9b01      	ldr	r3, [sp, #4]
 800365c:	b99b      	cbnz	r3, 8003686 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 800365e:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8003660:	463a      	mov	r2, r7
        child->coords.x1 += x_diff;
 8003662:	4453      	add	r3, sl
 8003664:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8003666:	8ae3      	ldrh	r3, [r4, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8003668:	4631      	mov	r1, r6
        child->coords.y1 += y_diff;
 800366a:	445b      	add	r3, fp
 800366c:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 800366e:	8b23      	ldrh	r3, [r4, #24]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8003670:	4620      	mov	r0, r4
        child->coords.x2 += x_diff;
 8003672:	4453      	add	r3, sl
 8003674:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8003676:	8b63      	ldrh	r3, [r4, #26]
 8003678:	445b      	add	r3, fp
 800367a:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800367c:	2300      	movs	r3, #0
 800367e:	f7ff ffd4 	bl	800362a <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 8003682:	3501      	adds	r5, #1
 8003684:	e7df      	b.n	8003646 <lv_obj_move_children_by+0x1c>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8003686:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800368a:	4620      	mov	r0, r4
 800368c:	f7ff f8c8 	bl	8002820 <lv_obj_has_flag>
 8003690:	2800      	cmp	r0, #0
 8003692:	d0e4      	beq.n	800365e <lv_obj_move_children_by+0x34>
 8003694:	e7f5      	b.n	8003682 <lv_obj_move_children_by+0x58>

08003696 <lv_obj_area_is_visible>:
    lv_obj_invalidate_area(obj, &obj_coords);

}

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8003696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003698:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800369a:	2101      	movs	r1, #1
{
 800369c:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800369e:	f7ff f8bf 	bl	8002820 <lv_obj_has_flag>
 80036a2:	b118      	cbz	r0, 80036ac <lv_obj_area_is_visible+0x16>
    obj_coords.y2 += ext_size;

    bool is_common;

    is_common = _lv_area_intersect(area, area, &obj_coords);
    if(is_common == false) return false;  /*The area is not on the object*/
 80036a4:	2600      	movs	r6, #0

        par = lv_obj_get_parent(par);
    }

    return true;
}
 80036a6:	4630      	mov	r0, r6
 80036a8:	b003      	add	sp, #12
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80036ac:	4620      	mov	r0, r4
 80036ae:	f002 fc19 	bl	8005ee4 <lv_obj_get_screen>
 80036b2:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80036b4:	f002 fc1c 	bl	8005ef0 <lv_obj_get_disp>
 80036b8:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80036ba:	f7fe f9f2 	bl	8001aa2 <lv_disp_get_scr_act>
 80036be:	4286      	cmp	r6, r0
 80036c0:	d133      	bne.n	800372a <lv_obj_area_is_visible+0x94>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80036c2:	4620      	mov	r0, r4
 80036c4:	f7ff fdce 	bl	8003264 <_lv_obj_get_ext_draw_size>
 80036c8:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    dest->y1 = src->y1;
 80036cc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80036d0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    obj_coords.x1 -= ext_size;
 80036d4:	8aa1      	ldrh	r1, [r4, #20]
 80036d6:	b280      	uxth	r0, r0
 80036d8:	1a09      	subs	r1, r1, r0
    obj_coords.y1 -= ext_size;
 80036da:	1a12      	subs	r2, r2, r0
    obj_coords.x2 += ext_size;
 80036dc:	4403      	add	r3, r0
    obj_coords.y2 += ext_size;
 80036de:	4430      	add	r0, r6
    obj_coords.x1 -= ext_size;
 80036e0:	f8ad 1000 	strh.w	r1, [sp]
    obj_coords.y1 -= ext_size;
 80036e4:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.y2 += ext_size;
 80036e8:	f8ad 0006 	strh.w	r0, [sp, #6]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80036ec:	466a      	mov	r2, sp
 80036ee:	4629      	mov	r1, r5
 80036f0:	4628      	mov	r0, r5
    obj_coords.x2 += ext_size;
 80036f2:	f8ad 3004 	strh.w	r3, [sp, #4]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80036f6:	f00b fff6 	bl	800f6e6 <_lv_area_intersect>
    if(is_common == false) return false;  /*The area is not on the object*/
 80036fa:	4606      	mov	r6, r0
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d0d1      	beq.n	80036a4 <lv_obj_area_is_visible+0xe>
        par = lv_obj_get_parent(par);
 8003700:	4620      	mov	r0, r4
 8003702:	f002 fc15 	bl	8005f30 <lv_obj_get_parent>
 8003706:	4604      	mov	r4, r0
    while(par != NULL) {
 8003708:	2800      	cmp	r0, #0
 800370a:	d0cc      	beq.n	80036a6 <lv_obj_area_is_visible+0x10>
        is_common = _lv_area_intersect(area, area, &par->coords);
 800370c:	4629      	mov	r1, r5
 800370e:	4628      	mov	r0, r5
 8003710:	f104 0214 	add.w	r2, r4, #20
 8003714:	f00b ffe7 	bl	800f6e6 <_lv_area_intersect>
        if(is_common == false) return false;       /*If no common parts with parent break;*/
 8003718:	2800      	cmp	r0, #0
 800371a:	d0c3      	beq.n	80036a4 <lv_obj_area_is_visible+0xe>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return
 800371c:	2101      	movs	r1, #1
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff f87e 	bl	8002820 <lv_obj_has_flag>
 8003724:	2800      	cmp	r0, #0
 8003726:	d0eb      	beq.n	8003700 <lv_obj_area_is_visible+0x6a>
 8003728:	e7bc      	b.n	80036a4 <lv_obj_area_is_visible+0xe>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800372a:	4638      	mov	r0, r7
 800372c:	f7fe f9c0 	bl	8001ab0 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8003730:	4286      	cmp	r6, r0
 8003732:	d0c6      	beq.n	80036c2 <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8003734:	4638      	mov	r0, r7
 8003736:	f7fe f9ea 	bl	8001b0e <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800373a:	4286      	cmp	r6, r0
 800373c:	d0c1      	beq.n	80036c2 <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 800373e:	4638      	mov	r0, r7
 8003740:	f7fe f9ec 	bl	8001b1c <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8003744:	4286      	cmp	r6, r0
 8003746:	d1ad      	bne.n	80036a4 <lv_obj_area_is_visible+0xe>
 8003748:	e7bb      	b.n	80036c2 <lv_obj_area_is_visible+0x2c>

0800374a <lv_obj_invalidate_area>:
{
 800374a:	b513      	push	{r0, r1, r4, lr}
    dest->x1 = src->x1;
 800374c:	880b      	ldrh	r3, [r1, #0]
 800374e:	4604      	mov	r4, r0
 8003750:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8003754:	884b      	ldrh	r3, [r1, #2]
 8003756:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 800375a:	888b      	ldrh	r3, [r1, #4]
 800375c:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8003760:	88cb      	ldrh	r3, [r1, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8003762:	4669      	mov	r1, sp
 8003764:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003768:	f7ff ff95 	bl	8003696 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 800376c:	b128      	cbz	r0, 800377a <lv_obj_invalidate_area+0x30>
 800376e:	4620      	mov	r0, r4
 8003770:	f002 fbbe 	bl	8005ef0 <lv_obj_get_disp>
 8003774:	4669      	mov	r1, sp
 8003776:	f002 ff99 	bl	80066ac <_lv_inv_area>
}
 800377a:	b002      	add	sp, #8
 800377c:	bd10      	pop	{r4, pc}

0800377e <lv_obj_invalidate>:
{
 800377e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003780:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8003782:	f7ff fd6f 	bl	8003264 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8003786:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    obj_coords.x1 -= ext_size;
 800378a:	b283      	uxth	r3, r0
    dest->x2 = src->x2;
 800378c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8003790:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
 8003794:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.y1 -= ext_size;
 8003796:	1ac9      	subs	r1, r1, r3
    obj_coords.x2 += ext_size;
 8003798:	441a      	add	r2, r3
    obj_coords.x1 -= ext_size;
 800379a:	1aed      	subs	r5, r5, r3
    obj_coords.y1 -= ext_size;
 800379c:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.y2 += ext_size;
 80037a0:	4433      	add	r3, r6
    lv_obj_invalidate_area(obj, &obj_coords);
 80037a2:	4669      	mov	r1, sp
 80037a4:	4620      	mov	r0, r4
    obj_coords.x1 -= ext_size;
 80037a6:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.x2 += ext_size;
 80037aa:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 80037ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 80037b2:	f7ff ffca 	bl	800374a <lv_obj_invalidate_area>
}
 80037b6:	b002      	add	sp, #8
 80037b8:	bd70      	pop	{r4, r5, r6, pc}

080037ba <lv_obj_move_to>:
{
 80037ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 80037be:	6847      	ldr	r7, [r0, #4]
{
 80037c0:	4604      	mov	r4, r0
    if(parent) {
 80037c2:	b327      	cbz	r7, 800380e <lv_obj_move_to+0x54>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 80037c4:	4638      	mov	r0, r7
 80037c6:	b28e      	uxth	r6, r1
 80037c8:	fa1f f882 	uxth.w	r8, r2
 80037cc:	f7ff fd94 	bl	80032f8 <lv_obj_get_style_pad_left.constprop.0>
 80037d0:	4682      	mov	sl, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80037d2:	4638      	mov	r0, r7
 80037d4:	f7ff fda0 	bl	8003318 <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80037d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80037dc:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80037de:	4620      	mov	r0, r4
 80037e0:	f7ff f81e 	bl	8002820 <lv_obj_has_flag>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d06c      	beq.n	80038c2 <lv_obj_move_to+0x108>
            x += pad_left + parent->coords.x1;
 80037e8:	8ab9      	ldrh	r1, [r7, #20]
            y += pad_top + parent->coords.y1;
 80037ea:	8afa      	ldrh	r2, [r7, #22]
            x += pad_left + parent->coords.x1;
 80037ec:	4431      	add	r1, r6
            y += pad_top + parent->coords.y1;
 80037ee:	4490      	add	r8, r2
            x += pad_left + parent->coords.x1;
 80037f0:	eb01 050a 	add.w	r5, r1, sl
            y += pad_top + parent->coords.y1;
 80037f4:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1;
 80037f6:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1;
 80037f8:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80037fc:	4638      	mov	r0, r7
 80037fe:	f7ff fd6b 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 8003802:	b280      	uxth	r0, r0
 8003804:	1941      	adds	r1, r0, r5
        y += border_width;
 8003806:	eb00 0208 	add.w	r2, r0, r8
        x += border_width;
 800380a:	b209      	sxth	r1, r1
        y += border_width;
 800380c:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 800380e:	8aa3      	ldrh	r3, [r4, #20]
 8003810:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 8003812:	8ae3      	ldrh	r3, [r4, #22]
    diff.x = x - obj->coords.x1;
 8003814:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
 8003818:	1ad2      	subs	r2, r2, r3
 800381a:	fa1f fa82 	uxth.w	sl, r2
    if(diff.x == 0 && diff.y == 0) return;
 800381e:	ea58 030a 	orrs.w	r3, r8, sl
    diff.x = x - obj->coords.x1;
 8003822:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
 8003824:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
 8003826:	d049      	beq.n	80038bc <lv_obj_move_to+0x102>
    lv_obj_invalidate(obj);
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ffa8 	bl	800377e <lv_obj_invalidate>
    dest->x1 = src->x1;
 800382e:	8aa3      	ldrh	r3, [r4, #20]
 8003830:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8003834:	8ae3      	ldrh	r3, [r4, #22]
 8003836:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 800383a:	8b23      	ldrh	r3, [r4, #24]
 800383c:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8003840:	8b63      	ldrh	r3, [r4, #26]
 8003842:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 8003846:	2f00      	cmp	r7, #0
 8003848:	d04f      	beq.n	80038ea <lv_obj_move_to+0x130>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 800384a:	4638      	mov	r0, r7
 800384c:	a902      	add	r1, sp, #8
 800384e:	f7ff fe84 	bl	800355a <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	4668      	mov	r0, sp
 8003856:	a902      	add	r1, sp, #8
 8003858:	f00c f845 	bl	800f8e6 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 800385c:	4681      	mov	r9, r0
 800385e:	b910      	cbnz	r0, 8003866 <lv_obj_move_to+0xac>
 8003860:	4638      	mov	r0, r7
 8003862:	f001 fc59 	bl	8005118 <lv_obj_scrollbar_invalidate>
    obj->coords.x1 += diff.x;
 8003866:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8003868:	4632      	mov	r2, r6
    obj->coords.x1 += diff.x;
 800386a:	4443      	add	r3, r8
 800386c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 800386e:	8ae3      	ldrh	r3, [r4, #22]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8003870:	4629      	mov	r1, r5
    obj->coords.y1 += diff.y;
 8003872:	4453      	add	r3, sl
 8003874:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8003876:	8b23      	ldrh	r3, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8003878:	4620      	mov	r0, r4
    obj->coords.x2 += diff.x;
 800387a:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 800387c:	8b63      	ldrh	r3, [r4, #26]
    obj->coords.x2 += diff.x;
 800387e:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 8003882:	449a      	add	sl, r3
 8003884:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8003888:	2300      	movs	r3, #0
 800388a:	f7ff fece 	bl	800362a <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800388e:	b127      	cbz	r7, 800389a <lv_obj_move_to+0xe0>
 8003890:	4622      	mov	r2, r4
 8003892:	2122      	movs	r1, #34	; 0x22
 8003894:	4638      	mov	r0, r7
 8003896:	f7fe f9e3 	bl	8001c60 <lv_event_send>
    lv_obj_invalidate(obj);
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ff6f 	bl	800377e <lv_obj_invalidate>
    if(parent) {
 80038a0:	b167      	cbz	r7, 80038bc <lv_obj_move_to+0x102>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	a902      	add	r1, sp, #8
 80038a6:	f104 0014 	add.w	r0, r4, #20
 80038aa:	f00c f81c 	bl	800f8e6 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80038ae:	f1b9 0f00 	cmp.w	r9, #0
 80038b2:	d100      	bne.n	80038b6 <lv_obj_move_to+0xfc>
 80038b4:	b110      	cbz	r0, 80038bc <lv_obj_move_to+0x102>
 80038b6:	4638      	mov	r0, r7
 80038b8:	f001 fc2e 	bl	8005118 <lv_obj_scrollbar_invalidate>
}
 80038bc:	b004      	add	sp, #16
 80038be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80038c2:	4638      	mov	r0, r7
 80038c4:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 80038c8:	f000 fce5 	bl	8004296 <lv_obj_get_scroll_x>
 80038cc:	4455      	add	r5, sl
 80038ce:	1a2d      	subs	r5, r5, r0
 80038d0:	1971      	adds	r1, r6, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80038d2:	4638      	mov	r0, r7
 80038d4:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80038d8:	b20d      	sxth	r5, r1
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80038da:	f000 fcee 	bl	80042ba <lv_obj_get_scroll_y>
 80038de:	444e      	add	r6, r9
 80038e0:	1a32      	subs	r2, r6, r0
 80038e2:	4442      	add	r2, r8
 80038e4:	fa0f f882 	sxth.w	r8, r2
 80038e8:	e788      	b.n	80037fc <lv_obj_move_to+0x42>
    bool on1 = false;
 80038ea:	46b9      	mov	r9, r7
 80038ec:	e7bb      	b.n	8003866 <lv_obj_move_to+0xac>

080038ee <lv_obj_refr_pos>:
{
 80038ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f2:	b087      	sub	sp, #28
 80038f4:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 80038f6:	f7ff fd8d 	bl	8003414 <lv_obj_is_layout_positioned>
 80038fa:	4606      	mov	r6, r0
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f040 810c 	bne.w	8003b1a <lv_obj_refr_pos+0x22c>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8003902:	4640      	mov	r0, r8
 8003904:	f002 fb14 	bl	8005f30 <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8003908:	f241 0207 	movw	r2, #4103	; 0x1007
 800390c:	4631      	mov	r1, r6
 800390e:	9000      	str	r0, [sp, #0]
 8003910:	4640      	mov	r0, r8
 8003912:	f001 fd39 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8003916:	f241 0208 	movw	r2, #4104	; 0x1008
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800391a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800391c:	4631      	mov	r1, r6
    return (lv_coord_t)v.num;
 800391e:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8003920:	4640      	mov	r0, r8
 8003922:	f001 fd31 	bl	8005388 <lv_obj_get_style_prop>
    if(parent == NULL) {
 8003926:	9b00      	ldr	r3, [sp, #0]
 8003928:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800392a:	fa0f fa80 	sxth.w	sl, r0
 800392e:	b93b      	cbnz	r3, 8003940 <lv_obj_refr_pos+0x52>
        lv_obj_move_to(obj, x, y);
 8003930:	4652      	mov	r2, sl
        lv_obj_move_to(obj, x, y);
 8003932:	4621      	mov	r1, r4
 8003934:	4640      	mov	r0, r8
}
 8003936:	b007      	add	sp, #28
 8003938:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 800393c:	f7ff bf3d 	b.w	80037ba <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8003940:	9800      	ldr	r0, [sp, #0]
 8003942:	f7ff fdde 	bl	8003502 <lv_obj_get_content_width>
 8003946:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8003948:	9800      	ldr	r0, [sp, #0]
 800394a:	f7ff fdf0 	bl	800352e <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800394e:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
 8003952:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8003956:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8003958:	d10f      	bne.n	800397a <lv_obj_refr_pos+0x8c>
 800395a:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 800395e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003962:	dc0a      	bgt.n	800397a <lv_obj_refr_pos+0x8c>
 8003964:	461c      	mov	r4, r3
 8003966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800396a:	bfc8      	it	gt
 800396c:	f5c3 747a 	rsbgt	r4, r3, #1000	; 0x3e8
 8003970:	2364      	movs	r3, #100	; 0x64
 8003972:	437c      	muls	r4, r7
 8003974:	fb94 f4f3 	sdiv	r4, r4, r3
 8003978:	b224      	sxth	r4, r4
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800397a:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 800397e:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8003982:	d111      	bne.n	80039a8 <lv_obj_refr_pos+0xba>
 8003984:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 8003988:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 800398c:	dc0c      	bgt.n	80039a8 <lv_obj_refr_pos+0xba>
 800398e:	46aa      	mov	sl, r5
 8003990:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8003994:	bfc8      	it	gt
 8003996:	f5c5 7a7a 	rsbgt	sl, r5, #1000	; 0x3e8
 800399a:	2564      	movs	r5, #100	; 0x64
 800399c:	fb0a fa06 	mul.w	sl, sl, r6
 80039a0:	fb9a faf5 	sdiv	sl, sl, r5
 80039a4:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80039a8:	f243 020c 	movw	r2, #12300	; 0x300c
 80039ac:	2100      	movs	r1, #0
 80039ae:	4640      	mov	r0, r8
 80039b0:	f001 fcea 	bl	8005388 <lv_obj_get_style_prop>
 80039b4:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 80039b6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80039b8:	f243 020d 	movw	r2, #12301	; 0x300d
 80039bc:	2100      	movs	r1, #0
 80039be:	4640      	mov	r0, r8
    return (lv_coord_t)v.num;
 80039c0:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80039c2:	f001 fce1 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80039c6:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 80039ca:	f8b8 2018 	ldrh.w	r2, [r8, #24]
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	3201      	adds	r2, #1
 80039d2:	b293      	uxth	r3, r2
 80039d4:	9a01      	ldr	r2, [sp, #4]
 80039d6:	9303      	str	r3, [sp, #12]
 80039d8:	1a9a      	subs	r2, r3, r2
 80039da:	fa0f fb82 	sxth.w	fp, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80039de:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 80039e2:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	3201      	adds	r2, #1
 80039ea:	b293      	uxth	r3, r2
 80039ec:	9a02      	ldr	r2, [sp, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80039ee:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
 80039f2:	eba3 0902 	sub.w	r9, r3, r2
 80039f6:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80039fa:	9304      	str	r3, [sp, #16]
    return (lv_coord_t)v.num;
 80039fc:	fa0f fc80 	sxth.w	ip, r0
 8003a00:	9b05      	ldr	r3, [sp, #20]
 8003a02:	fa0f f989 	sxth.w	r9, r9
 8003a06:	d110      	bne.n	8003a2a <lv_obj_refr_pos+0x13c>
 8003a08:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 8003a0c:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8003a10:	dc0b      	bgt.n	8003a2a <lv_obj_refr_pos+0x13c>
 8003a12:	460b      	mov	r3, r1
 8003a14:	2264      	movs	r2, #100	; 0x64
 8003a16:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003a1a:	bfc8      	it	gt
 8003a1c:	f5c1 737a 	rsbgt	r3, r1, #1000	; 0x3e8
 8003a20:	fb03 f30b 	mul.w	r3, r3, fp
 8003a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a28:	b21b      	sxth	r3, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8003a2a:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8003a2e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003a32:	d110      	bne.n	8003a56 <lv_obj_refr_pos+0x168>
 8003a34:	f42c 42c0 	bic.w	r2, ip, #24576	; 0x6000
 8003a38:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8003a3c:	dc0b      	bgt.n	8003a56 <lv_obj_refr_pos+0x168>
 8003a3e:	2564      	movs	r5, #100	; 0x64
 8003a40:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003a44:	bfc8      	it	gt
 8003a46:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 8003a4a:	fb02 f209 	mul.w	r2, r2, r9
 8003a4e:	fb92 f2f5 	sdiv	r2, r2, r5
 8003a52:	fa0f fc82 	sxth.w	ip, r2
    x += tr_x;
 8003a56:	441c      	add	r4, r3
 8003a58:	b2a3      	uxth	r3, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003a5a:	f241 0209 	movw	r2, #4105	; 0x1009
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4640      	mov	r0, r8
    y += tr_y;
 8003a62:	eb0a 050c 	add.w	r5, sl, ip
    x += tr_x;
 8003a66:	9305      	str	r3, [sp, #20]
 8003a68:	f001 fc8e 	bl	8005388 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8003a6c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    y += tr_y;
 8003a70:	fa1f fa85 	uxth.w	sl, r5
    if(align == LV_ALIGN_DEFAULT) {
 8003a74:	9b05      	ldr	r3, [sp, #20]
    x += tr_x;
 8003a76:	b224      	sxth	r4, r4
    y += tr_y;
 8003a78:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 8003a7a:	d108      	bne.n	8003a8e <lv_obj_refr_pos+0x1a0>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8003a7c:	9800      	ldr	r0, [sp, #0]
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	f7ff fc22 	bl	80032c8 <lv_obj_get_style_base_dir.constprop.0>
 8003a84:	2801      	cmp	r0, #1
 8003a86:	9b02      	ldr	r3, [sp, #8]
 8003a88:	d016      	beq.n	8003ab8 <lv_obj_refr_pos+0x1ca>
        lv_obj_move_to(obj, x, y);
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	e751      	b.n	8003932 <lv_obj_refr_pos+0x44>
    if(align == LV_ALIGN_TOP_LEFT) {
 8003a8e:	2801      	cmp	r0, #1
 8003a90:	d0fb      	beq.n	8003a8a <lv_obj_refr_pos+0x19c>
        switch(align) {
 8003a92:	3802      	subs	r0, #2
 8003a94:	2807      	cmp	r0, #7
 8003a96:	d8f8      	bhi.n	8003a8a <lv_obj_refr_pos+0x19c>
 8003a98:	e8df f000 	tbb	[pc, r0]
 8003a9c:	131c0e04 	.word	0x131c0e04
 8003aa0:	37282e23 	.word	0x37282e23
                x += pw / 2 - w / 2;
 8003aa4:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8003aa8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003aac:	1064      	asrs	r4, r4, #1
 8003aae:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 8003ab2:	441c      	add	r4, r3
 8003ab4:	b224      	sxth	r4, r4
                break;
 8003ab6:	e7e8      	b.n	8003a8a <lv_obj_refr_pos+0x19c>
                x += pw - w;
 8003ab8:	9a01      	ldr	r2, [sp, #4]
 8003aba:	9903      	ldr	r1, [sp, #12]
 8003abc:	1a54      	subs	r4, r2, r1
 8003abe:	443c      	add	r4, r7
 8003ac0:	e7f7      	b.n	8003ab2 <lv_obj_refr_pos+0x1c4>
                x += pw / 2 - w / 2;
 8003ac2:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8003ac6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003aca:	1064      	asrs	r4, r4, #1
 8003acc:	ebc4 0467 	rsb	r4, r4, r7, asr #1
                x += pw - w;
 8003ad0:	441c      	add	r4, r3
 8003ad2:	b224      	sxth	r4, r4
                y += ph - h;
 8003ad4:	9b02      	ldr	r3, [sp, #8]
 8003ad6:	9a04      	ldr	r2, [sp, #16]
 8003ad8:	1a9d      	subs	r5, r3, r2
 8003ada:	4435      	add	r5, r6
                y += ph / 2 - h / 2;
 8003adc:	4455      	add	r5, sl
 8003ade:	b22d      	sxth	r5, r5
                break;
 8003ae0:	e7d3      	b.n	8003a8a <lv_obj_refr_pos+0x19c>
                x += pw - w;
 8003ae2:	9a01      	ldr	r2, [sp, #4]
 8003ae4:	9903      	ldr	r1, [sp, #12]
 8003ae6:	1a54      	subs	r4, r2, r1
 8003ae8:	443c      	add	r4, r7
 8003aea:	e7f1      	b.n	8003ad0 <lv_obj_refr_pos+0x1e2>
                x += pw - w;
 8003aec:	9a01      	ldr	r2, [sp, #4]
 8003aee:	9903      	ldr	r1, [sp, #12]
 8003af0:	1a54      	subs	r4, r2, r1
 8003af2:	443c      	add	r4, r7
                x += pw / 2 - w / 2;
 8003af4:	441c      	add	r4, r3
 8003af6:	b224      	sxth	r4, r4
                y += ph / 2 - h / 2;
 8003af8:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 8003afc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8003b00:	ea4f 0569 	mov.w	r5, r9, asr #1
 8003b04:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 8003b08:	e7e8      	b.n	8003adc <lv_obj_refr_pos+0x1ee>
                x += pw / 2 - w / 2;
 8003b0a:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8003b0e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003b12:	1064      	asrs	r4, r4, #1
 8003b14:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 8003b18:	e7ec      	b.n	8003af4 <lv_obj_refr_pos+0x206>
}
 8003b1a:	b007      	add	sp, #28
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b20 <lv_obj_get_click_area>:
    lv_obj_allocate_spec_attr(obj);
    obj->spec_attr->ext_click_pad = size;
}

void lv_obj_get_click_area(const lv_obj_t * obj, lv_area_t * area)
{
 8003b20:	b570      	push	{r4, r5, r6, lr}
    dest->y1 = src->y1;
 8003b22:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
    dest->x1 = src->x1;
 8003b26:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    dest->x2 = src->x2;
 8003b2a:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
    dest->y2 = src->y2;
 8003b2e:	f9b0 601a 	ldrsh.w	r6, [r0, #26]
    lv_area_copy(area, &obj->coords);
    if(obj->spec_attr) {
 8003b32:	6883      	ldr	r3, [r0, #8]
    dest->x1 = src->x1;
 8003b34:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 8003b36:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 8003b38:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 8003b3a:	80ce      	strh	r6, [r1, #6]
 8003b3c:	b143      	cbz	r3, 8003b50 <lv_obj_get_click_area+0x30>
        area->x1 -= obj->spec_attr->ext_click_pad;
 8003b3e:	8a9b      	ldrh	r3, [r3, #20]
 8003b40:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 8003b42:	441c      	add	r4, r3
        area->y1 -= obj->spec_attr->ext_click_pad;
 8003b44:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 8003b46:	4433      	add	r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 8003b48:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 8003b4a:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 8003b4c:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 8003b4e:	80cb      	strh	r3, [r1, #6]
    }
}
 8003b50:	bd70      	pop	{r4, r5, r6, pc}

08003b52 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 8003b52:	b530      	push	{r4, r5, lr}
 8003b54:	4605      	mov	r5, r0
 8003b56:	4608      	mov	r0, r1
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8003b58:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 8003b5c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003b60:	d10e      	bne.n	8003b80 <lv_clamp_width+0x2e>
 8003b62:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 8003b66:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8003b6a:	dc09      	bgt.n	8003b80 <lv_clamp_width+0x2e>
 8003b6c:	2064      	movs	r0, #100	; 0x64
 8003b6e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003b72:	bfc8      	it	gt
 8003b74:	f5c1 717a 	rsbgt	r1, r1, #1000	; 0x3e8
 8003b78:	4359      	muls	r1, r3
 8003b7a:	fb91 f1f0 	sdiv	r1, r1, r0
 8003b7e:	b208      	sxth	r0, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8003b80:	f402 41c0 	and.w	r1, r2, #24576	; 0x6000
 8003b84:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003b88:	d10e      	bne.n	8003ba8 <lv_clamp_width+0x56>
 8003b8a:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
 8003b8e:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8003b92:	dc09      	bgt.n	8003ba8 <lv_clamp_width+0x56>
 8003b94:	2264      	movs	r2, #100	; 0x64
 8003b96:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003b9a:	bfc8      	it	gt
 8003b9c:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
 8003ba0:	435c      	muls	r4, r3
 8003ba2:	fb94 f4f2 	sdiv	r4, r4, r2
 8003ba6:	b222      	sxth	r2, r4
    return LV_CLAMP(min_width, width, max_width);
 8003ba8:	42aa      	cmp	r2, r5
 8003baa:	bfa8      	it	ge
 8003bac:	462a      	movge	r2, r5
}
 8003bae:	4290      	cmp	r0, r2
 8003bb0:	bfb8      	it	lt
 8003bb2:	4610      	movlt	r0, r2
 8003bb4:	bd30      	pop	{r4, r5, pc}
	...

08003bb8 <lv_obj_refr_size>:
{
 8003bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(obj->w_layout && obj->h_layout) return false;
 8003bbc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
 8003bc0:	4604      	mov	r4, r0
    if(obj->w_layout && obj->h_layout) return false;
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	2b06      	cmp	r3, #6
{
 8003bc8:	b08f      	sub	sp, #60	; 0x3c
    if(obj->w_layout && obj->h_layout) return false;
 8003bca:	d003      	beq.n	8003bd4 <lv_obj_refr_size+0x1c>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8003bcc:	f002 f9b0 	bl	8005f30 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	b908      	cbnz	r0, 8003bd8 <lv_obj_refr_size+0x20>
    if(obj->w_layout && obj->h_layout) return false;
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e085      	b.n	8003ce4 <lv_obj_refr_size+0x12c>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fbd7 	bl	800438c <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 8003bde:	f894 6023 	ldrb.w	r6, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8003be2:	9005      	str	r0, [sp, #20]
    if(obj->w_layout) {
 8003be4:	f016 0604 	ands.w	r6, r6, #4
 8003be8:	d07f      	beq.n	8003cea <lv_obj_refr_size+0x132>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003bea:	8b26      	ldrh	r6, [r4, #24]
 8003bec:	8aa0      	ldrh	r0, [r4, #20]
 8003bee:	3601      	adds	r6, #1
 8003bf0:	1a36      	subs	r6, r6, r0
 8003bf2:	b233      	sxth	r3, r6
 8003bf4:	9302      	str	r3, [sp, #8]
    bool w_is_content = false;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9301      	str	r3, [sp, #4]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 fb6f 	bl	80042de <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8003c00:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8003c04:	9006      	str	r0, [sp, #24]
    if(obj->h_layout) {
 8003c06:	f015 0502 	ands.w	r5, r5, #2
 8003c0a:	f000 81a7 	beq.w	8003f5c <lv_obj_refr_size+0x3a4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003c0e:	8b65      	ldrh	r5, [r4, #26]
 8003c10:	8ae0      	ldrh	r0, [r4, #22]
 8003c12:	3501      	adds	r5, #1
    if(w_is_content || h_is_content) {
 8003c14:	9b01      	ldr	r3, [sp, #4]
 8003c16:	1a2d      	subs	r5, r5, r0
 8003c18:	b22d      	sxth	r5, r5
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 820e 	bne.w	800403c <lv_obj_refr_size+0x484>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003c20:	8b23      	ldrh	r3, [r4, #24]
 8003c22:	8aa2      	ldrh	r2, [r4, #20]
 8003c24:	3301      	adds	r3, #1
 8003c26:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8003c28:	9a02      	ldr	r2, [sp, #8]
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d106      	bne.n	8003c3e <lv_obj_refr_size+0x86>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003c30:	8b63      	ldrh	r3, [r4, #26]
 8003c32:	8ae2      	ldrh	r2, [r4, #22]
 8003c34:	3301      	adds	r3, #1
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	42ab      	cmp	r3, r5
 8003c3c:	d0ca      	beq.n	8003bd4 <lv_obj_refr_size+0x1c>
    lv_obj_invalidate(obj);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fd9d 	bl	800377e <lv_obj_invalidate>
    dest->x1 = src->x1;
 8003c44:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8003c46:	4638      	mov	r0, r7
 8003c48:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 8003c4c:	8ae3      	ldrh	r3, [r4, #22]
 8003c4e:	a90c      	add	r1, sp, #48	; 0x30
 8003c50:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 8003c54:	8b23      	ldrh	r3, [r4, #24]
    lv_area_copy(coords, &obj->coords);
 8003c56:	f104 0914 	add.w	r9, r4, #20
 8003c5a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8003c5e:	8b63      	ldrh	r3, [r4, #26]
 8003c60:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8003c64:	f7ff fc79 	bl	800355a <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	a90c      	add	r1, sp, #48	; 0x30
 8003c6c:	a80a      	add	r0, sp, #40	; 0x28
 8003c6e:	f00b fe3a 	bl	800f8e6 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8003c72:	4680      	mov	r8, r0
 8003c74:	b910      	cbnz	r0, 8003c7c <lv_obj_refr_size+0xc4>
 8003c76:	4638      	mov	r0, r7
 8003c78:	f001 fa4e 	bl	8005118 <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8003c7c:	8ae0      	ldrh	r0, [r4, #22]
 8003c7e:	3801      	subs	r0, #1
 8003c80:	4405      	add	r5, r0
 8003c82:	8365      	strh	r5, [r4, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7ff fb1f 	bl	80032c8 <lv_obj_get_style_base_dir.constprop.0>
 8003c8a:	2801      	cmp	r0, #1
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8003c8c:	bf0c      	ite	eq
 8003c8e:	8b20      	ldrheq	r0, [r4, #24]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003c90:	8aa0      	ldrhne	r0, [r4, #20]
 8003c92:	f8bd 6008 	ldrh.w	r6, [sp, #8]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8003c96:	bf0b      	itete	eq
 8003c98:	3001      	addeq	r0, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003c9a:	f100 30ff 	addne.w	r0, r0, #4294967295	; 0xffffffff
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8003c9e:	1b86      	subeq	r6, r0, r6
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003ca0:	1836      	addne	r6, r6, r0
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8003ca2:	bf0c      	ite	eq
 8003ca4:	82a6      	strheq	r6, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8003ca6:	8326      	strhne	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8003ca8:	2129      	movs	r1, #41	; 0x29
 8003caa:	aa0a      	add	r2, sp, #40	; 0x28
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7fd ffd7 	bl	8001c60 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	2122      	movs	r1, #34	; 0x22
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7fd ffd2 	bl	8001c60 <lv_event_send>
    lv_obj_invalidate(obj);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff fd5e 	bl	800377e <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f001 fa47 	bl	8005158 <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4648      	mov	r0, r9
 8003cce:	a90c      	add	r1, sp, #48	; 0x30
 8003cd0:	f00b fe09 	bl	800f8e6 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8003cd4:	f1b8 0f00 	cmp.w	r8, #0
 8003cd8:	d100      	bne.n	8003cdc <lv_obj_refr_size+0x124>
 8003cda:	b110      	cbz	r0, 8003ce2 <lv_obj_refr_size+0x12a>
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f001 fa1b 	bl	8005118 <lv_obj_scrollbar_invalidate>
    return true;
 8003ce2:	2001      	movs	r0, #1
}
 8003ce4:	b00f      	add	sp, #60	; 0x3c
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003cea:	f241 0201 	movw	r2, #4097	; 0x1001
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f001 fb49 	bl	8005388 <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8003cf6:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8003cfa:	b205      	sxth	r5, r0
 8003cfc:	1aea      	subs	r2, r5, r3
 8003cfe:	4253      	negs	r3, r2
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8003d00:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8003d04:	4153      	adcs	r3, r2
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8003d06:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8003d0a:	9301      	str	r3, [sp, #4]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8003d0c:	d106      	bne.n	8003d1c <lv_obj_refr_size+0x164>
 8003d0e:	f425 46c0 	bic.w	r6, r5, #24576	; 0x6000
 8003d12:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
 8003d16:	bfcc      	ite	gt
 8003d18:	2600      	movgt	r6, #0
 8003d1a:	2601      	movle	r6, #1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8003d1c:	4638      	mov	r0, r7
        if(w_is_content) {
 8003d1e:	f242 78d1 	movw	r8, #10193	; 0x27d1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8003d22:	f7ff fbee 	bl	8003502 <lv_obj_get_content_width>
        if(w_is_content) {
 8003d26:	4545      	cmp	r5, r8
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8003d28:	9002      	str	r0, [sp, #8]
        if(w_is_content) {
 8003d2a:	f040 80ea 	bne.w	8003f02 <lv_obj_refr_size+0x34a>
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4620      	mov	r0, r4
 8003d32:	4611      	mov	r1, r2
 8003d34:	f000 fdf2 	bl	800491c <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7ff facd 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
 8003d3e:	4680      	mov	r8, r0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff fad1 	bl	80032e8 <lv_obj_get_style_pad_right.constprop.0>
 8003d46:	fa1f f888 	uxth.w	r8, r8
 8003d4a:	eb08 0600 	add.w	r6, r8, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff fad2 	bl	80032f8 <lv_obj_get_style_pad_left.constprop.0>
 8003d54:	4480      	add	r8, r0

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff fc30 	bl	80035bc <lv_obj_get_self_width>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8003d5c:	b2b6      	uxth	r6, r6
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8003d5e:	fa1f f888 	uxth.w	r8, r8
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8003d62:	eb06 0508 	add.w	r5, r6, r8
 8003d66:	4405      	add	r5, r0

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f002 f8f3 	bl	8005f54 <lv_obj_get_child_cnt>
 8003d6e:	9003      	str	r0, [sp, #12]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7ff faa9 	bl	80032c8 <lv_obj_get_style_base_dir.constprop.0>
 8003d76:	2801      	cmp	r0, #1
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8003d78:	b22d      	sxth	r5, r5
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8003d7a:	d00e      	beq.n	8003d9a <lv_obj_refr_size+0x1e2>
            child_res += pad_left;
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8003d7c:	f04f 0a00 	mov.w	sl, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8003d80:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t child_res = LV_COORD_MIN;
 8003d84:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8004090 <lv_obj_refr_size+0x4d8>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8003d88:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	4553      	cmp	r3, sl
 8003d8e:	d170      	bne.n	8003e72 <lv_obj_refr_size+0x2ba>
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
            }
        }

        if(child_res != LV_COORD_MIN) {
 8003d90:	4bbf      	ldr	r3, [pc, #764]	; (8004090 <lv_obj_refr_size+0x4d8>)
 8003d92:	4599      	cmp	r9, r3
 8003d94:	d016      	beq.n	8003dc4 <lv_obj_refr_size+0x20c>
            child_res += pad_right;
 8003d96:	44b1      	add	r9, r6
 8003d98:	e00c      	b.n	8003db4 <lv_obj_refr_size+0x1fc>
        for(i = 0; i < child_cnt; i++) {
 8003d9a:	f04f 0a00 	mov.w	sl, #0
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8003d9e:	b233      	sxth	r3, r6
    lv_coord_t child_res = LV_COORD_MIN;
 8003da0:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8004090 <lv_obj_refr_size+0x4d8>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8003da4:	9304      	str	r3, [sp, #16]
        for(i = 0; i < child_cnt; i++) {
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	4553      	cmp	r3, sl
 8003daa:	d120      	bne.n	8003dee <lv_obj_refr_size+0x236>
        if(child_res != LV_COORD_MIN) {
 8003dac:	4bb8      	ldr	r3, [pc, #736]	; (8004090 <lv_obj_refr_size+0x4d8>)
 8003dae:	4599      	cmp	r9, r3
 8003db0:	d008      	beq.n	8003dc4 <lv_obj_refr_size+0x20c>
            child_res += pad_left;
 8003db2:	44c1      	add	r9, r8
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8003db4:	4bb6      	ldr	r3, [pc, #728]	; (8004090 <lv_obj_refr_size+0x4d8>)
            child_res += pad_right;
 8003db6:	fa0f f989 	sxth.w	r9, r9
    if(child_res == LV_COORD_MIN) return self_w;
 8003dba:	4599      	cmp	r9, r3
 8003dbc:	d002      	beq.n	8003dc4 <lv_obj_refr_size+0x20c>
    else return LV_MAX(child_res, self_w);
 8003dbe:	454d      	cmp	r5, r9
 8003dc0:	bfb8      	it	lt
 8003dc2:	464d      	movlt	r5, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8003dc4:	f241 0202 	movw	r2, #4098	; 0x1002
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f001 fadc 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8003dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dd4:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8003dd6:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f001 fad5 	bl	8005388 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8003dde:	9b02      	ldr	r3, [sp, #8]
 8003de0:	b202      	sxth	r2, r0
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7ff feb4 	bl	8003b52 <lv_clamp_width>
 8003dea:	9002      	str	r0, [sp, #8]
 8003dec:	e705      	b.n	8003bfa <lv_obj_refr_size+0x42>
            lv_obj_t * child = obj->spec_attr->children[i];
 8003dee:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003df0:	49a8      	ldr	r1, [pc, #672]	; (8004094 <lv_obj_refr_size+0x4dc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003df8:	4658      	mov	r0, fp
 8003dfa:	f7fe fd18 	bl	800282e <lv_obj_has_flag_any>
 8003dfe:	bb58      	cbnz	r0, 8003e58 <lv_obj_refr_size+0x2a0>
            if(!lv_obj_is_layout_positioned(child)) {
 8003e00:	4658      	mov	r0, fp
 8003e02:	f7ff fb07 	bl	8003414 <lv_obj_is_layout_positioned>
 8003e06:	4601      	mov	r1, r0
 8003e08:	bb48      	cbnz	r0, 8003e5e <lv_obj_refr_size+0x2a6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003e0a:	f241 0209 	movw	r2, #4105	; 0x1009
 8003e0e:	4658      	mov	r0, fp
 8003e10:	f001 faba 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8003e14:	b2c0      	uxtb	r0, r0
                switch(align) {
 8003e16:	2808      	cmp	r0, #8
 8003e18:	d806      	bhi.n	8003e28 <lv_obj_refr_size+0x270>
 8003e1a:	e8df f000 	tbb	[pc, r0]
 8003e1e:	0520      	.short	0x0520
 8003e20:	05052005 	.word	0x05052005
 8003e24:	0520      	.short	0x0520
 8003e26:	20          	.byte	0x20
 8003e27:	00          	.byte	0x00
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8003e28:	f241 0207 	movw	r2, #4103	; 0x1007
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4658      	mov	r0, fp
 8003e30:	f001 faaa 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003e34:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8003e36:	b978      	cbnz	r0, 8003e58 <lv_obj_refr_size+0x2a0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003e38:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8003e3c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003e40:	3201      	adds	r2, #1
 8003e42:	1ad3      	subs	r3, r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8003e44:	9904      	ldr	r1, [sp, #16]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	4599      	cmp	r9, r3
 8003e4e:	dc03      	bgt.n	8003e58 <lv_obj_refr_size+0x2a0>
 8003e50:	eb06 0902 	add.w	r9, r6, r2
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8003e54:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < child_cnt; i++) {
 8003e58:	f10a 0a01 	add.w	sl, sl, #1
 8003e5c:	e7a3      	b.n	8003da6 <lv_obj_refr_size+0x1ee>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8003e5e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8003e62:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4599      	cmp	r9, r3
 8003e6c:	bfb8      	it	lt
 8003e6e:	4699      	movlt	r9, r3
 8003e70:	e7f0      	b.n	8003e54 <lv_obj_refr_size+0x29c>
            lv_obj_t * child = obj->spec_attr->children[i];
 8003e72:	68a3      	ldr	r3, [r4, #8]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003e74:	4987      	ldr	r1, [pc, #540]	; (8004094 <lv_obj_refr_size+0x4dc>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003e7c:	4658      	mov	r0, fp
 8003e7e:	f7fe fcd6 	bl	800282e <lv_obj_has_flag_any>
 8003e82:	bba0      	cbnz	r0, 8003eee <lv_obj_refr_size+0x336>
            if(!lv_obj_is_layout_positioned(child)) {
 8003e84:	4658      	mov	r0, fp
 8003e86:	f7ff fac5 	bl	8003414 <lv_obj_is_layout_positioned>
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	bb90      	cbnz	r0, 8003ef4 <lv_obj_refr_size+0x33c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003e8e:	f241 0209 	movw	r2, #4105	; 0x1009
 8003e92:	4658      	mov	r0, fp
 8003e94:	f001 fa78 	bl	8005388 <lv_obj_get_style_prop>
                switch(align) {
 8003e98:	b2c0      	uxtb	r0, r0
 8003e9a:	2807      	cmp	r0, #7
 8003e9c:	d80f      	bhi.n	8003ebe <lv_obj_refr_size+0x306>
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	fa02 f000 	lsl.w	r0, r2, r0
 8003ea4:	f010 0f93 	tst.w	r0, #147	; 0x93
 8003ea8:	d009      	beq.n	8003ebe <lv_obj_refr_size+0x306>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003eaa:	f9bb 0018 	ldrsh.w	r0, [fp, #24]
 8003eae:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8003eb2:	1ac0      	subs	r0, r0, r3
 8003eb4:	4410      	add	r0, r2
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003eb6:	4581      	cmp	r9, r0
 8003eb8:	bfb8      	it	lt
 8003eba:	4681      	movlt	r9, r0
 8003ebc:	e015      	b.n	8003eea <lv_obj_refr_size+0x332>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8003ebe:	f241 0208 	movw	r2, #4104	; 0x1008
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4658      	mov	r0, fp
 8003ec6:	f001 fa5f 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003eca:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8003ecc:	b978      	cbnz	r0, 8003eee <lv_obj_refr_size+0x336>
 8003ece:	f8bb 2018 	ldrh.w	r2, [fp, #24]
 8003ed2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003ed6:	3201      	adds	r2, #1
 8003ed8:	1ad3      	subs	r3, r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8003eda:	9904      	ldr	r1, [sp, #16]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	b21b      	sxth	r3, r3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	4599      	cmp	r9, r3
 8003ee4:	dc03      	bgt.n	8003eee <lv_obj_refr_size+0x336>
 8003ee6:	eb08 0902 	add.w	r9, r8, r2
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003eea:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < child_cnt; i++) {
 8003eee:	f10a 0a01 	add.w	sl, sl, #1
 8003ef2:	e74a      	b.n	8003d8a <lv_obj_refr_size+0x1d2>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8003ef4:	f9bb 0018 	ldrsh.w	r0, [fp, #24]
 8003ef8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8003efc:	1ac0      	subs	r0, r0, r3
 8003efe:	3001      	adds	r0, #1
 8003f00:	e7d9      	b.n	8003eb6 <lv_obj_refr_size+0x2fe>
        else if(w_is_pct) {
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	f43f af5e 	beq.w	8003dc4 <lv_obj_refr_size+0x20c>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8003f08:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003f0c:	f011 0104 	ands.w	r1, r1, #4
 8003f10:	d117      	bne.n	8003f42 <lv_obj_refr_size+0x38a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003f12:	f241 0201 	movw	r2, #4097	; 0x1001
 8003f16:	4638      	mov	r0, r7
 8003f18:	f001 fa36 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003f1c:	b200      	sxth	r0, r0
 8003f1e:	4540      	cmp	r0, r8
 8003f20:	d10f      	bne.n	8003f42 <lv_obj_refr_size+0x38a>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7ff f9d8 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
 8003f28:	4606      	mov	r6, r0
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff f9e4 	bl	80032f8 <lv_obj_get_style_pad_left.constprop.0>
 8003f30:	1985      	adds	r5, r0, r6
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8003f32:	4620      	mov	r0, r4
 8003f34:	f7ff f9d8 	bl	80032e8 <lv_obj_get_style_pad_right.constprop.0>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8003f38:	b2ad      	uxth	r5, r5
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8003f3a:	4406      	add	r6, r0
 8003f3c:	4435      	add	r5, r6
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8003f3e:	b22d      	sxth	r5, r5
 8003f40:	e740      	b.n	8003dc4 <lv_obj_refr_size+0x20c>
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8003f48:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	bfc8      	it	gt
 8003f50:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8003f54:	435d      	muls	r5, r3
 8003f56:	fb95 f5f0 	sdiv	r5, r5, r0
 8003f5a:	e7f0      	b.n	8003f3e <lv_obj_refr_size+0x386>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003f5c:	f241 0204 	movw	r2, #4100	; 0x1004
 8003f60:	4629      	mov	r1, r5
 8003f62:	4620      	mov	r0, r4
 8003f64:	f001 fa10 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003f68:	fa0f f980 	sxth.w	r9, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8003f6c:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8003f70:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003f74:	d106      	bne.n	8003f84 <lv_obj_refr_size+0x3cc>
 8003f76:	f429 45c0 	bic.w	r5, r9, #24576	; 0x6000
 8003f7a:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8003f7e:	bfcc      	ite	gt
 8003f80:	2500      	movgt	r5, #0
 8003f82:	2501      	movle	r5, #1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8003f84:	4638      	mov	r0, r7
        if(h_is_content) {
 8003f86:	f242 78d1 	movw	r8, #10193	; 0x27d1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8003f8a:	f7ff fad0 	bl	800352e <lv_obj_get_content_height>
        if(h_is_content) {
 8003f8e:	45c1      	cmp	r9, r8
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8003f90:	4682      	mov	sl, r0
        if(h_is_content) {
 8003f92:	f040 809a 	bne.w	80040ca <lv_obj_refr_size+0x512>
}

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8003f96:	2200      	movs	r2, #0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	f000 fcfe 	bl	800499c <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7ff f999 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
 8003fa6:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff f9b5 	bl	8003318 <lv_obj_get_style_pad_top.constprop.0>
 8003fae:	fa1f f888 	uxth.w	r8, r8
 8003fb2:	4440      	add	r0, r8
 8003fb4:	b283      	uxth	r3, r0
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	b203      	sxth	r3, r0
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8003fba:	4620      	mov	r0, r4
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8003fbc:	9307      	str	r3, [sp, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8003fbe:	f7ff f9a3 	bl	8003308 <lv_obj_get_style_pad_bottom.constprop.0>
 8003fc2:	4480      	add	r8, r0
 8003fc4:	fa1f f388 	uxth.w	r3, r8

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8003fc8:	4620      	mov	r0, r4
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8003fca:	9304      	str	r3, [sp, #16]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8003fcc:	f7ff fb04 	bl	80035d8 <lv_obj_get_self_height>
 8003fd0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8003fd4:	189d      	adds	r5, r3, r2
 8003fd6:	4405      	add	r5, r0

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f001 ffbb 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8003fde:	f04f 0b00 	mov.w	fp, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8003fe2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004090 <lv_obj_refr_size+0x4d8>
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8003fe6:	b22d      	sxth	r5, r5
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8003fe8:	9008      	str	r0, [sp, #32]
    for(i = 0; i < child_cnt; i++) {
 8003fea:	9b08      	ldr	r3, [sp, #32]
 8003fec:	455b      	cmp	r3, fp
 8003fee:	d12c      	bne.n	800404a <lv_obj_refr_size+0x492>
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
        }
    }

    if(child_res != LV_COORD_MIN) {
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <lv_obj_refr_size+0x4d8>)
 8003ff2:	4598      	cmp	r8, r3
 8003ff4:	d006      	beq.n	8004004 <lv_obj_refr_size+0x44c>
        child_res += pad_bottom;
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	4443      	add	r3, r8
        return LV_MAX(child_res, self_h);
 8003ffa:	fa0f f883 	sxth.w	r8, r3
 8003ffe:	4545      	cmp	r5, r8
 8004000:	bfb8      	it	lt
 8004002:	4645      	movlt	r5, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8004004:	f241 0205 	movw	r2, #4101	; 0x1005
 8004008:	2100      	movs	r1, #0
 800400a:	4620      	mov	r0, r4
 800400c:	f001 f9bc 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8004010:	f241 0206 	movw	r2, #4102	; 0x1006
 8004014:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8004016:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800401a:	4620      	mov	r0, r4
 800401c:	f001 f9b4 	bl	8005388 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8004020:	4653      	mov	r3, sl
 8004022:	b202      	sxth	r2, r0
 8004024:	4641      	mov	r1, r8
 8004026:	4628      	mov	r0, r5
 8004028:	f7ff fd93 	bl	8003b52 <lv_clamp_width>
    if(w_is_content || h_is_content) {
 800402c:	9b01      	ldr	r3, [sp, #4]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 800402e:	4605      	mov	r5, r0
    if(w_is_content || h_is_content) {
 8004030:	b923      	cbnz	r3, 800403c <lv_obj_refr_size+0x484>
 8004032:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8004036:	4599      	cmp	r9, r3
 8004038:	f47f adf2 	bne.w	8003c20 <lv_obj_refr_size+0x68>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 800403c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8004040:	2300      	movs	r3, #0
 8004042:	4620      	mov	r0, r4
 8004044:	f000 fcd2 	bl	80049ec <lv_obj_scroll_to>
 8004048:	e5ea      	b.n	8003c20 <lv_obj_refr_size+0x68>
        lv_obj_t * child = obj->spec_attr->children[i];
 800404a:	68a3      	ldr	r3, [r4, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800404c:	4911      	ldr	r1, [pc, #68]	; (8004094 <lv_obj_refr_size+0x4dc>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004054:	4630      	mov	r0, r6
 8004056:	f7fe fbea 	bl	800282e <lv_obj_has_flag_any>
 800405a:	2800      	cmp	r0, #0
 800405c:	d132      	bne.n	80040c4 <lv_obj_refr_size+0x50c>
        if(!lv_obj_is_layout_positioned(child)) {
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff f9d8 	bl	8003414 <lv_obj_is_layout_positioned>
 8004064:	4601      	mov	r1, r0
 8004066:	b948      	cbnz	r0, 800407c <lv_obj_refr_size+0x4c4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004068:	9009      	str	r0, [sp, #36]	; 0x24
 800406a:	f241 0209 	movw	r2, #4105	; 0x1009
 800406e:	4630      	mov	r0, r6
 8004070:	f001 f98a 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8004074:	b2c0      	uxtb	r0, r0
            switch(align) {
 8004076:	2803      	cmp	r0, #3
 8004078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800407a:	d80d      	bhi.n	8004098 <lv_obj_refr_size+0x4e0>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800407c:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8004080:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	3301      	adds	r3, #1
 8004088:	4598      	cmp	r8, r3
 800408a:	bfb8      	it	lt
 800408c:	4698      	movlt	r8, r3
 800408e:	e017      	b.n	80040c0 <lv_obj_refr_size+0x508>
 8004090:	ffffe001 	.word	0xffffe001
 8004094:	00020001 	.word	0x00020001
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004098:	f241 0208 	movw	r2, #4104	; 0x1008
 800409c:	4630      	mov	r0, r6
 800409e:	f001 f973 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80040a2:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 80040a4:	b970      	cbnz	r0, 80040c4 <lv_obj_refr_size+0x50c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80040a6:	8b72      	ldrh	r2, [r6, #26]
 80040a8:	8af3      	ldrh	r3, [r6, #22]
 80040aa:	3201      	adds	r2, #1
 80040ac:	1ad3      	subs	r3, r2, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 80040ae:	9907      	ldr	r1, [sp, #28]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	b21b      	sxth	r3, r3
 80040b4:	440b      	add	r3, r1
 80040b6:	4598      	cmp	r8, r3
 80040b8:	dc04      	bgt.n	80040c4 <lv_obj_refr_size+0x50c>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	eb03 0802 	add.w	r8, r3, r2
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 80040c0:	fa0f f888 	sxth.w	r8, r8
    for(i = 0; i < child_cnt; i++) {
 80040c4:	f10b 0b01 	add.w	fp, fp, #1
 80040c8:	e78f      	b.n	8003fea <lv_obj_refr_size+0x432>
        else if(h_is_pct) {
 80040ca:	b355      	cbz	r5, 8004122 <lv_obj_refr_size+0x56a>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80040cc:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80040d0:	f011 0102 	ands.w	r1, r1, #2
 80040d4:	d118      	bne.n	8004108 <lv_obj_refr_size+0x550>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80040d6:	f241 0204 	movw	r2, #4100	; 0x1004
 80040da:	4638      	mov	r0, r7
 80040dc:	f001 f954 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80040e0:	b200      	sxth	r0, r0
 80040e2:	4540      	cmp	r0, r8
 80040e4:	d110      	bne.n	8004108 <lv_obj_refr_size+0x550>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7ff f8f6 	bl	80032d8 <lv_obj_get_style_border_width.constprop.0>
 80040ec:	4680      	mov	r8, r0
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff f912 	bl	8003318 <lv_obj_get_style_pad_top.constprop.0>
 80040f4:	eb00 0508 	add.w	r5, r0, r8
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff f905 	bl	8003308 <lv_obj_get_style_pad_bottom.constprop.0>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80040fe:	b2ad      	uxth	r5, r5
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8004100:	4480      	add	r8, r0
 8004102:	4445      	add	r5, r8
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8004104:	b22d      	sxth	r5, r5
 8004106:	e77d      	b.n	8004004 <lv_obj_refr_size+0x44c>
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	f429 45c0 	bic.w	r5, r9, #24576	; 0x6000
 800410e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8004112:	bfc8      	it	gt
 8004114:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8004118:	fb05 f50a 	mul.w	r5, r5, sl
 800411c:	fb95 f5f0 	sdiv	r5, r5, r0
 8004120:	e7f0      	b.n	8004104 <lv_obj_refr_size+0x54c>
 8004122:	464d      	mov	r5, r9
 8004124:	e76e      	b.n	8004004 <lv_obj_refr_size+0x44c>
 8004126:	bf00      	nop

08004128 <layout_update_core>:
    }

}

static void layout_update_core(lv_obj_t * obj)
{
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4604      	mov	r4, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800412c:	f001 ff12 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8004130:	2500      	movs	r5, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004132:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8004134:	42b5      	cmp	r5, r6
 8004136:	d128      	bne.n	800418a <layout_update_core+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 8004138:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800413c:	07da      	lsls	r2, r3, #31
 800413e:	d52c      	bpl.n	800419a <layout_update_core+0x72>

    obj->layout_inv = 0;
 8004140:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 8004144:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 8004146:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 800414a:	f7ff fd35 	bl	8003bb8 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff fbcd 	bl	80038ee <lv_obj_refr_pos>

    if(child_cnt > 0) {
 8004154:	b30d      	cbz	r5, 800419a <layout_update_core+0x72>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004156:	f241 0269 	movw	r2, #4201	; 0x1069
 800415a:	2100      	movs	r1, #0
 800415c:	4620      	mov	r0, r4
 800415e:	f001 f913 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004162:	b283      	uxth	r3, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8004164:	b1cb      	cbz	r3, 800419a <layout_update_core+0x72>
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <layout_update_core+0x74>)
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d315      	bcc.n	800419a <layout_update_core+0x72>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800416e:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <layout_update_core+0x78>)
 8004170:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800417c:	4620      	mov	r0, r4
        }
    }
}
 800417e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8004182:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004186:	6849      	ldr	r1, [r1, #4]
 8004188:	4718      	bx	r3
        lv_obj_t * child = obj->spec_attr->children[i];
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 800418e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004192:	f7ff ffc9 	bl	8004128 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8004196:	3501      	adds	r5, #1
 8004198:	e7cc      	b.n	8004134 <layout_update_core+0xc>
}
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	20001a80 	.word	0x20001a80
 80041a0:	2000475c 	.word	0x2000475c

080041a4 <lv_obj_update_layout>:
{
 80041a4:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 80041a6:	4c0b      	ldr	r4, [pc, #44]	; (80041d4 <lv_obj_update_layout+0x30>)
 80041a8:	7823      	ldrb	r3, [r4, #0]
 80041aa:	b953      	cbnz	r3, 80041c2 <lv_obj_update_layout+0x1e>
    mutex = true;
 80041ac:	2301      	movs	r3, #1
 80041ae:	7023      	strb	r3, [r4, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80041b0:	f001 fe98 	bl	8005ee4 <lv_obj_get_screen>
 80041b4:	4605      	mov	r5, r0
    while(scr->scr_layout_inv) {
 80041b6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80041ba:	f013 0202 	ands.w	r2, r3, #2
 80041be:	d101      	bne.n	80041c4 <lv_obj_update_layout+0x20>
    mutex = false;
 80041c0:	7022      	strb	r2, [r4, #0]
}
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 80041c4:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 80041c8:	4628      	mov	r0, r5
        scr->scr_layout_inv = 0;
 80041ca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        layout_update_core(scr);
 80041ce:	f7ff ffab 	bl	8004128 <layout_update_core>
 80041d2:	e7f0      	b.n	80041b6 <lv_obj_update_layout+0x12>
 80041d4:	20001a84 	.word	0x20001a84

080041d8 <lv_obj_get_style_base_dir>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80041d8:	f241 426a 	movw	r2, #5226	; 0x146a
{
 80041dc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80041de:	f001 f8d3 	bl	8005388 <lv_obj_get_style_prop>
}
 80041e2:	b2c0      	uxtb	r0, r0
 80041e4:	bd08      	pop	{r3, pc}

080041e6 <scroll_by_raw>:
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
    if(x == 0 && y == 0) return;
 80041e6:	ea51 0302 	orrs.w	r3, r1, r2
{
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	460d      	mov	r5, r1
 80041f0:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return;
 80041f2:	d01a      	beq.n	800422a <scroll_by_raw+0x44>

    lv_obj_allocate_spec_attr(obj);
 80041f4:	f7fe fcf6 	bl	8002be4 <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 80041f8:	68a3      	ldr	r3, [r4, #8]
    obj->spec_attr->scroll.y += y;

    lv_obj_move_children_by(obj, x, y, true);
 80041fa:	4629      	mov	r1, r5
    obj->spec_attr->scroll.x += x;
 80041fc:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 80041fe:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 8004200:	442a      	add	r2, r5
 8004202:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8004204:	8a5a      	ldrh	r2, [r3, #18]
 8004206:	4432      	add	r2, r6
 8004208:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 800420a:	2301      	movs	r3, #1
 800420c:	4632      	mov	r2, r6
 800420e:	f7ff fa0c 	bl	800362a <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8004212:	2200      	movs	r2, #0
 8004214:	210b      	movs	r1, #11
 8004216:	4620      	mov	r0, r4
 8004218:	f7fd fd22 	bl	8001c60 <lv_event_send>
    if(res != LV_RES_OK) return;
 800421c:	2801      	cmp	r0, #1
 800421e:	d104      	bne.n	800422a <scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 8004220:	4620      	mov	r0, r4
}
 8004222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 8004226:	f7ff baaa 	b.w	800377e <lv_obj_invalidate>
}
 800422a:	bd70      	pop	{r4, r5, r6, pc}

0800422c <scroll_anim_ready_cb>:
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800422c:	2200      	movs	r2, #0
 800422e:	210a      	movs	r1, #10
 8004230:	6800      	ldr	r0, [r0, #0]
 8004232:	f7fd bd15 	b.w	8001c60 <lv_event_send>

08004236 <lv_obj_set_scrollbar_mode>:
{
 8004236:	b538      	push	{r3, r4, r5, lr}
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 800423c:	f7fe fcd2 	bl	8002be4 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8004240:	68a2      	ldr	r2, [r4, #8]
 8004242:	7e13      	ldrb	r3, [r2, #24]
 8004244:	f003 0103 	and.w	r1, r3, #3
 8004248:	42a9      	cmp	r1, r5
 800424a:	d007      	beq.n	800425c <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 800424c:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 8004250:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 8004252:	7613      	strb	r3, [r2, #24]
}
 8004254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 8004258:	f7ff ba91 	b.w	800377e <lv_obj_invalidate>
}
 800425c:	bd38      	pop	{r3, r4, r5, pc}

0800425e <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800425e:	6883      	ldr	r3, [r0, #8]
 8004260:	b11b      	cbz	r3, 800426a <lv_obj_get_scrollbar_mode+0xc>
 8004262:	7e18      	ldrb	r0, [r3, #24]
 8004264:	f000 0003 	and.w	r0, r0, #3
 8004268:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 800426a:	2003      	movs	r0, #3
}
 800426c:	4770      	bx	lr

0800426e <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800426e:	6883      	ldr	r3, [r0, #8]
 8004270:	b11b      	cbz	r3, 800427a <lv_obj_get_scroll_dir+0xc>
 8004272:	7e58      	ldrb	r0, [r3, #25]
 8004274:	f000 000f 	and.w	r0, r0, #15
 8004278:	4770      	bx	lr
    else return LV_DIR_ALL;
 800427a:	200f      	movs	r0, #15
}
 800427c:	4770      	bx	lr

0800427e <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800427e:	6880      	ldr	r0, [r0, #8]
 8004280:	b110      	cbz	r0, 8004288 <lv_obj_get_scroll_snap_x+0xa>
 8004282:	7e00      	ldrb	r0, [r0, #24]
 8004284:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 8004288:	4770      	bx	lr

0800428a <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800428a:	6880      	ldr	r0, [r0, #8]
 800428c:	b110      	cbz	r0, 8004294 <lv_obj_get_scroll_snap_y+0xa>
 800428e:	7e00      	ldrb	r0, [r0, #24]
 8004290:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 8004294:	4770      	bx	lr

08004296 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8004296:	6880      	ldr	r0, [r0, #8]
 8004298:	b110      	cbz	r0, 80042a0 <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 800429a:	8a00      	ldrh	r0, [r0, #16]
 800429c:	4240      	negs	r0, r0
 800429e:	b200      	sxth	r0, r0
}
 80042a0:	4770      	bx	lr

080042a2 <scroll_x_anim>:
{
 80042a2:	b508      	push	{r3, lr}
 80042a4:	4603      	mov	r3, r0
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 80042a6:	f7ff fff6 	bl	8004296 <lv_obj_get_scroll_x>
 80042aa:	4401      	add	r1, r0
 80042ac:	2200      	movs	r2, #0
 80042ae:	4618      	mov	r0, r3
}
 80042b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 80042b4:	b209      	sxth	r1, r1
 80042b6:	f7ff bf96 	b.w	80041e6 <scroll_by_raw>

080042ba <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 80042ba:	6880      	ldr	r0, [r0, #8]
 80042bc:	b110      	cbz	r0, 80042c4 <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 80042be:	8a40      	ldrh	r0, [r0, #18]
 80042c0:	4240      	negs	r0, r0
 80042c2:	b200      	sxth	r0, r0
}
 80042c4:	4770      	bx	lr

080042c6 <scroll_y_anim>:
{
 80042c6:	b508      	push	{r3, lr}
 80042c8:	4603      	mov	r3, r0
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 80042ca:	f7ff fff6 	bl	80042ba <lv_obj_get_scroll_y>
 80042ce:	1842      	adds	r2, r0, r1
 80042d0:	b212      	sxth	r2, r2
 80042d2:	4618      	mov	r0, r3
}
 80042d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 80042d8:	2100      	movs	r1, #0
 80042da:	f7ff bf84 	b.w	80041e6 <scroll_by_raw>

080042de <lv_obj_get_scroll_top>:
 80042de:	f7ff bfec 	b.w	80042ba <lv_obj_get_scroll_y>
	...

080042e4 <lv_obj_get_scroll_bottom>:
{
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80042ea:	f001 fe33 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80042ee:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80042f0:	4607      	mov	r7, r0
    lv_coord_t child_res = LV_COORD_MIN;
 80042f2:	4d24      	ldr	r5, [pc, #144]	; (8004384 <lv_obj_get_scroll_bottom+0xa0>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80042f4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004388 <lv_obj_get_scroll_bottom+0xa4>
    for(i = 0; i < child_cnt; i++) {
 80042f8:	42bc      	cmp	r4, r7
 80042fa:	d133      	bne.n	8004364 <lv_obj_get_scroll_bottom+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80042fc:	f641 0210 	movw	r2, #6160	; 0x1810
 8004300:	2100      	movs	r1, #0
 8004302:	4630      	mov	r0, r6
 8004304:	f001 f840 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004308:	f641 0211 	movw	r2, #6161	; 0x1811
 800430c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800430e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004310:	4630      	mov	r0, r6
 8004312:	f001 f839 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004316:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800431a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800431c:	2100      	movs	r1, #0
 800431e:	4630      	mov	r0, r6
 8004320:	f001 f832 	bl	8005388 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <lv_obj_get_scroll_bottom+0xa0>)
 8004326:	4680      	mov	r8, r0
 8004328:	429d      	cmp	r5, r3
 800432a:	d004      	beq.n	8004336 <lv_obj_get_scroll_bottom+0x52>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800432c:	8b73      	ldrh	r3, [r6, #26]
 800432e:	183a      	adds	r2, r7, r0
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	4415      	add	r5, r2
 8004334:	b22d      	sxth	r5, r5
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff f94e 	bl	80035d8 <lv_obj_get_self_height>
 800433c:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff f8d9 	bl	80034f6 <lv_obj_get_height>
 8004344:	443c      	add	r4, r7
 8004346:	eb04 0348 	add.w	r3, r4, r8, lsl #1
 800434a:	444b      	add	r3, r9
 800434c:	1a1b      	subs	r3, r3, r0
    self_h -= lv_obj_get_scroll_y(obj);
 800434e:	4630      	mov	r0, r6
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8004350:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 8004352:	f7ff ffb2 	bl	80042ba <lv_obj_get_scroll_y>
 8004356:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 8004358:	b200      	sxth	r0, r0
}
 800435a:	42a8      	cmp	r0, r5
 800435c:	bfb8      	it	lt
 800435e:	4628      	movlt	r0, r5
 8004360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 8004364:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004366:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800436e:	4640      	mov	r0, r8
 8004370:	f7fe fa5d 	bl	800282e <lv_obj_has_flag_any>
 8004374:	b920      	cbnz	r0, 8004380 <lv_obj_get_scroll_bottom+0x9c>
        child_res = LV_MAX(child_res, child->coords.y2);
 8004376:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
 800437a:	429d      	cmp	r5, r3
 800437c:	bfb8      	it	lt
 800437e:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8004380:	3401      	adds	r4, #1
 8004382:	e7b9      	b.n	80042f8 <lv_obj_get_scroll_bottom+0x14>
 8004384:	ffffe001 	.word	0xffffe001
 8004388:	00020001 	.word	0x00020001

0800438c <lv_obj_get_scroll_left>:
{
 800438c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8004390:	2100      	movs	r1, #0
{
 8004392:	4605      	mov	r5, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8004394:	f7ff ff20 	bl	80041d8 <lv_obj_get_style_base_dir>
 8004398:	2801      	cmp	r0, #1
 800439a:	d006      	beq.n	80043aa <lv_obj_get_scroll_left+0x1e>
        if(obj->spec_attr == NULL) return 0;
 800439c:	68a8      	ldr	r0, [r5, #8]
 800439e:	b110      	cbz	r0, 80043a6 <lv_obj_get_scroll_left+0x1a>
        return -obj->spec_attr->scroll.x;
 80043a0:	8a00      	ldrh	r0, [r0, #16]
 80043a2:	4240      	negs	r0, r0
 80043a4:	b200      	sxth	r0, r0
}
 80043a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80043aa:	f641 0213 	movw	r2, #6163	; 0x1813
 80043ae:	2100      	movs	r1, #0
 80043b0:	4628      	mov	r0, r5
 80043b2:	f000 ffe9 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80043b6:	f641 0212 	movw	r2, #6162	; 0x1812
 80043ba:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80043bc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 ffe2 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80043c4:	2100      	movs	r1, #0
 80043c6:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80043ca:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80043cc:	4628      	mov	r0, r5
 80043ce:	f000 ffdb 	bl	8005388 <lv_obj_get_style_prop>
 80043d2:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80043d4:	4628      	mov	r0, r5
 80043d6:	f001 fdbd 	bl	8005f54 <lv_obj_get_child_cnt>
    lv_coord_t x1 = LV_COORD_MAX;
 80043da:	f641 79ff 	movw	r9, #8191	; 0x1fff
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80043de:	4604      	mov	r4, r0
    for(i = 0; i < child_cnt; i++) {
 80043e0:	2600      	movs	r6, #0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80043e2:	491e      	ldr	r1, [pc, #120]	; (800445c <lv_obj_get_scroll_left+0xd0>)
    for(i = 0; i < child_cnt; i++) {
 80043e4:	42b4      	cmp	r4, r6
 80043e6:	d128      	bne.n	800443a <lv_obj_get_scroll_left+0xae>
    if(x1 != LV_COORD_MAX) {
 80043e8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80043ec:	4599      	cmp	r9, r3
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 80043ee:	bf18      	it	ne
 80043f0:	8aa8      	ldrhne	r0, [r5, #20]
 80043f2:	fa1f f48a 	uxth.w	r4, sl
 80043f6:	fa1f f888 	uxth.w	r8, r8
 80043fa:	bf1e      	ittt	ne
 80043fc:	eb04 0608 	addne.w	r6, r4, r8
 8004400:	1836      	addne	r6, r6, r0
 8004402:	eba6 0609 	subne.w	r6, r6, r9
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8004406:	4628      	mov	r0, r5
        child_res = LV_COORD_MIN;
 8004408:	bf0c      	ite	eq
 800440a:	4e15      	ldreq	r6, [pc, #84]	; (8004460 <lv_obj_get_scroll_left+0xd4>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800440c:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800440e:	f7ff f8d5 	bl	80035bc <lv_obj_get_self_width>
 8004412:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8004414:	4628      	mov	r0, r5
 8004416:	f7ff f868 	bl	80034ea <lv_obj_get_width>
 800441a:	4603      	mov	r3, r0
    self_w += lv_obj_get_scroll_x(obj);
 800441c:	4628      	mov	r0, r5
 800441e:	f7ff ff3a 	bl	8004296 <lv_obj_get_scroll_x>
 8004422:	443c      	add	r4, r7
 8004424:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8004428:	444c      	add	r4, r9
 800442a:	b2a4      	uxth	r4, r4
 800442c:	4404      	add	r4, r0
 800442e:	1ae0      	subs	r0, r4, r3
    return LV_MAX(child_res, self_w);
 8004430:	b200      	sxth	r0, r0
 8004432:	42b0      	cmp	r0, r6
 8004434:	bfb8      	it	lt
 8004436:	4630      	movlt	r0, r6
 8004438:	e7b5      	b.n	80043a6 <lv_obj_get_scroll_left+0x1a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800443a:	68ab      	ldr	r3, [r5, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f853 b026 	ldr.w	fp, [r3, r6, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004442:	4658      	mov	r0, fp
 8004444:	f7fe f9f3 	bl	800282e <lv_obj_has_flag_any>
 8004448:	4904      	ldr	r1, [pc, #16]	; (800445c <lv_obj_get_scroll_left+0xd0>)
 800444a:	b920      	cbnz	r0, 8004456 <lv_obj_get_scroll_left+0xca>
        x1 = LV_MIN(x1, child->coords.x1);
 800444c:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8004450:	4599      	cmp	r9, r3
 8004452:	bfa8      	it	ge
 8004454:	4699      	movge	r9, r3
    for(i = 0; i < child_cnt; i++) {
 8004456:	3601      	adds	r6, #1
 8004458:	e7c4      	b.n	80043e4 <lv_obj_get_scroll_left+0x58>
 800445a:	bf00      	nop
 800445c:	00020001 	.word	0x00020001
 8004460:	ffffe001 	.word	0xffffe001

08004464 <lv_obj_get_scroll_right>:
{
 8004464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8004468:	2100      	movs	r1, #0
{
 800446a:	4606      	mov	r6, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800446c:	f7ff feb4 	bl	80041d8 <lv_obj_get_style_base_dir>
 8004470:	2801      	cmp	r0, #1
 8004472:	d105      	bne.n	8004480 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 8004474:	68b0      	ldr	r0, [r6, #8]
 8004476:	b108      	cbz	r0, 800447c <lv_obj_get_scroll_right+0x18>
        return obj->spec_attr->scroll.x;
 8004478:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
}
 800447c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004480:	4630      	mov	r0, r6
 8004482:	f001 fd67 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8004486:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004488:	4607      	mov	r7, r0
    lv_coord_t child_res = LV_COORD_MIN;
 800448a:	4d24      	ldr	r5, [pc, #144]	; (800451c <lv_obj_get_scroll_right+0xb8>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800448c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004520 <lv_obj_get_scroll_right+0xbc>
    for(i = 0; i < child_cnt; i++) {
 8004490:	42a7      	cmp	r7, r4
 8004492:	d132      	bne.n	80044fa <lv_obj_get_scroll_right+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004494:	f641 0213 	movw	r2, #6163	; 0x1813
 8004498:	2100      	movs	r1, #0
 800449a:	4630      	mov	r0, r6
 800449c:	f000 ff74 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80044a0:	f641 0212 	movw	r2, #6162	; 0x1812
 80044a4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80044a6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80044a8:	4630      	mov	r0, r6
 80044aa:	f000 ff6d 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80044ae:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80044b2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80044b4:	2100      	movs	r1, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 ff66 	bl	8005388 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <lv_obj_get_scroll_right+0xb8>)
 80044be:	4680      	mov	r8, r0
 80044c0:	429d      	cmp	r5, r3
 80044c2:	d004      	beq.n	80044ce <lv_obj_get_scroll_right+0x6a>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 80044c4:	1822      	adds	r2, r4, r0
 80044c6:	8b30      	ldrh	r0, [r6, #24]
 80044c8:	1a12      	subs	r2, r2, r0
 80044ca:	4415      	add	r5, r2
 80044cc:	b22d      	sxth	r5, r5
    self_w = lv_obj_get_self_width(obj);
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff f874 	bl	80035bc <lv_obj_get_self_width>
 80044d4:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 80044d6:	4630      	mov	r0, r6
 80044d8:	f7ff f807 	bl	80034ea <lv_obj_get_width>
 80044dc:	443c      	add	r4, r7
 80044de:	eb04 0348 	add.w	r3, r4, r8, lsl #1
 80044e2:	444b      	add	r3, r9
 80044e4:	1a1b      	subs	r3, r3, r0
    self_w -= lv_obj_get_scroll_x(obj);
 80044e6:	4630      	mov	r0, r6
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 80044e8:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 80044ea:	f7ff fed4 	bl	8004296 <lv_obj_get_scroll_x>
 80044ee:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 80044f0:	b200      	sxth	r0, r0
 80044f2:	42a8      	cmp	r0, r5
 80044f4:	bfb8      	it	lt
 80044f6:	4628      	movlt	r0, r5
 80044f8:	e7c0      	b.n	800447c <lv_obj_get_scroll_right+0x18>
        lv_obj_t * child = obj->spec_attr->children[i];
 80044fa:	68b3      	ldr	r3, [r6, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80044fc:	4649      	mov	r1, r9
        lv_obj_t * child = obj->spec_attr->children[i];
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004504:	4640      	mov	r0, r8
 8004506:	f7fe f992 	bl	800282e <lv_obj_has_flag_any>
 800450a:	b920      	cbnz	r0, 8004516 <lv_obj_get_scroll_right+0xb2>
        child_res = LV_MAX(child_res, child->coords.x2);
 800450c:	f9b8 3018 	ldrsh.w	r3, [r8, #24]
 8004510:	429d      	cmp	r5, r3
 8004512:	bfb8      	it	lt
 8004514:	461d      	movlt	r5, r3
    for(i = 0; i < child_cnt; i++) {
 8004516:	3401      	adds	r4, #1
 8004518:	e7ba      	b.n	8004490 <lv_obj_get_scroll_right+0x2c>
 800451a:	bf00      	nop
 800451c:	ffffe001 	.word	0xffffe001
 8004520:	00020001 	.word	0x00020001

08004524 <lv_obj_scroll_by>:
{
 8004524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004528:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return;
 800452a:	ea51 0206 	orrs.w	r2, r1, r6
{
 800452e:	4604      	mov	r4, r0
 8004530:	460d      	mov	r5, r1
 8004532:	b090      	sub	sp, #64	; 0x40
    if(x == 0 && y == 0) return;
 8004534:	d05d      	beq.n	80045f2 <lv_obj_scroll_by+0xce>
    if(anim_en == LV_ANIM_ON) {
 8004536:	2b01      	cmp	r3, #1
 8004538:	d15e      	bne.n	80045f8 <lv_obj_scroll_by+0xd4>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800453a:	f001 fcd9 	bl	8005ef0 <lv_obj_get_disp>
 800453e:	4607      	mov	r7, r0
        lv_anim_init(&a);
 8004540:	4668      	mov	r0, sp
 8004542:	f00a ffad 	bl	800f4a0 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <lv_obj_scroll_by+0x108>)
    a->var = var;
 8004548:	9400      	str	r4, [sp, #0]
    a->ready_cb = ready_cb;
 800454a:	9303      	str	r3, [sp, #12]
        if(x) {
 800454c:	b345      	cbz	r5, 80045a0 <lv_obj_scroll_by+0x7c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, x);
 800454e:	4638      	mov	r0, r7
 8004550:	f00a fe4e 	bl	800f1f0 <lv_disp_get_hor_res>
 8004554:	462a      	mov	r2, r5
 8004556:	2100      	movs	r1, #0
 8004558:	f340 005d 	sbfx	r0, r0, #1, #30
 800455c:	f00b f840 	bl	800f5e0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8004560:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8004564:	4603      	mov	r3, r0
 8004566:	bf28      	it	cs
 8004568:	f44f 73c8 	movcs.w	r3, #400	; 0x190
    a->time = duration;
 800456c:	2bc8      	cmp	r3, #200	; 0xc8
 800456e:	bf38      	it	cc
 8004570:	23c8      	movcc	r3, #200	; 0xc8
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8004572:	4620      	mov	r0, r4
 8004574:	930a      	str	r3, [sp, #40]	; 0x28
 8004576:	f7ff fe8e 	bl	8004296 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + x);
 800457a:	4243      	negs	r3, r0
    a->current_value = start;
 800457c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    a->exec_cb = exec_cb;
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <lv_obj_scroll_by+0x10c>)
 8004582:	1a2d      	subs	r5, r5, r0
 8004584:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <lv_obj_scroll_by+0x110>)
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8004588:	466a      	mov	r2, sp
 800458a:	2109      	movs	r1, #9
 800458c:	4620      	mov	r0, r4
    a->end_value = end;
 800458e:	9509      	str	r5, [sp, #36]	; 0x24
    a->path_cb = path_cb;
 8004590:	9306      	str	r3, [sp, #24]
 8004592:	f7fd fb65 	bl	8001c60 <lv_event_send>
            if(res != LV_RES_OK) return;
 8004596:	2801      	cmp	r0, #1
 8004598:	d12b      	bne.n	80045f2 <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 800459a:	4668      	mov	r0, sp
 800459c:	f00a ffc6 	bl	800f52c <lv_anim_start>
        if(y) {
 80045a0:	b33e      	cbz	r6, 80045f2 <lv_obj_scroll_by+0xce>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, y);
 80045a2:	4638      	mov	r0, r7
 80045a4:	f00a fe34 	bl	800f210 <lv_disp_get_ver_res>
 80045a8:	4632      	mov	r2, r6
 80045aa:	2100      	movs	r1, #0
 80045ac:	f340 005d 	sbfx	r0, r0, #1, #30
 80045b0:	f00b f816 	bl	800f5e0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 80045b4:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80045b8:	bf28      	it	cs
 80045ba:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 80045be:	28c8      	cmp	r0, #200	; 0xc8
 80045c0:	bf38      	it	cc
 80045c2:	20c8      	movcc	r0, #200	; 0xc8
 80045c4:	900a      	str	r0, [sp, #40]	; 0x28
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7ff fe77 	bl	80042ba <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + y);
 80045cc:	4243      	negs	r3, r0
    a->current_value = start;
 80045ce:	e9cd 3307 	strd	r3, r3, [sp, #28]
    a->exec_cb = exec_cb;
 80045d2:	4b19      	ldr	r3, [pc, #100]	; (8004638 <lv_obj_scroll_by+0x114>)
 80045d4:	1a30      	subs	r0, r6, r0
 80045d6:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <lv_obj_scroll_by+0x110>)
    a->end_value = end;
 80045da:	9009      	str	r0, [sp, #36]	; 0x24
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 80045dc:	466a      	mov	r2, sp
 80045de:	2109      	movs	r1, #9
 80045e0:	4620      	mov	r0, r4
    a->path_cb = path_cb;
 80045e2:	9306      	str	r3, [sp, #24]
 80045e4:	f7fd fb3c 	bl	8001c60 <lv_event_send>
            if(res != LV_RES_OK) return;
 80045e8:	2801      	cmp	r0, #1
 80045ea:	d102      	bne.n	80045f2 <lv_obj_scroll_by+0xce>
            lv_anim_start(&a);
 80045ec:	4668      	mov	r0, sp
 80045ee:	f00a ff9d 	bl	800f52c <lv_anim_start>
}
 80045f2:	b010      	add	sp, #64	; 0x40
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bool y_del = lv_anim_del(obj, scroll_y_anim);
 80045f8:	490f      	ldr	r1, [pc, #60]	; (8004638 <lv_obj_scroll_by+0x114>)
 80045fa:	f00a ff6b 	bl	800f4d4 <lv_anim_del>
        bool x_del = lv_anim_del(obj, scroll_x_anim);
 80045fe:	490c      	ldr	r1, [pc, #48]	; (8004630 <lv_obj_scroll_by+0x10c>)
        bool y_del = lv_anim_del(obj, scroll_y_anim);
 8004600:	4680      	mov	r8, r0
        bool x_del = lv_anim_del(obj, scroll_x_anim);
 8004602:	4620      	mov	r0, r4
 8004604:	f00a ff66 	bl	800f4d4 <lv_anim_del>
        scroll_by_raw(obj, x, y);
 8004608:	4632      	mov	r2, r6
        bool x_del = lv_anim_del(obj, scroll_x_anim);
 800460a:	4607      	mov	r7, r0
        scroll_by_raw(obj, x, y);
 800460c:	4629      	mov	r1, r5
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff fde9 	bl	80041e6 <scroll_by_raw>
        if(y_del || x_del) {
 8004614:	f1b8 0f00 	cmp.w	r8, #0
 8004618:	d101      	bne.n	800461e <lv_obj_scroll_by+0xfa>
 800461a:	2f00      	cmp	r7, #0
 800461c:	d0e9      	beq.n	80045f2 <lv_obj_scroll_by+0xce>
            res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800461e:	2200      	movs	r2, #0
 8004620:	210a      	movs	r1, #10
 8004622:	4620      	mov	r0, r4
 8004624:	f7fd fb1c 	bl	8001c60 <lv_event_send>
            if(res != LV_RES_OK) return;
 8004628:	e7e3      	b.n	80045f2 <lv_obj_scroll_by+0xce>
 800462a:	bf00      	nop
 800462c:	0800422d 	.word	0x0800422d
 8004630:	080042a3 	.word	0x080042a3
 8004634:	0800f5fd 	.word	0x0800f5fd
 8004638:	080042c7 	.word	0x080042c7

0800463c <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	4681      	mov	r9, r0
 8004642:	b08b      	sub	sp, #44	; 0x2c
    lv_obj_t * parent = lv_obj_get_parent(child);
 8004644:	4608      	mov	r0, r1
{
 8004646:	9103      	str	r1, [sp, #12]
 8004648:	4692      	mov	sl, r2
 800464a:	9305      	str	r3, [sp, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800464c:	f001 fc70 	bl	8005f30 <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8004650:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8004652:	4606      	mov	r6, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8004654:	f7fe f8e4 	bl	8002820 <lv_obj_has_flag>
 8004658:	2800      	cmp	r0, #0
 800465a:	f000 8155 	beq.w	8004908 <scroll_area_into_view+0x2cc>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff fe05 	bl	800426e <lv_obj_get_scroll_dir>
 8004664:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff fe0f 	bl	800428a <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800466c:	4683      	mov	fp, r0
 800466e:	2800      	cmp	r0, #0
 8004670:	f000 80e3 	beq.w	800483a <scroll_area_into_view+0x1fe>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	f103 0814 	add.w	r8, r3, #20
 800467a:	f241 0232 	movw	r2, #4146	; 0x1032
 800467e:	2100      	movs	r1, #0
 8004680:	4630      	mov	r0, r6
 8004682:	f000 fe81 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004686:	f641 0210 	movw	r2, #6160	; 0x1810
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800468a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800468c:	2100      	movs	r1, #0
 800468e:	4630      	mov	r0, r6
 8004690:	f000 fe7a 	bl	8005388 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8004694:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004696:	f641 0211 	movw	r2, #6161	; 0x1811
 800469a:	2100      	movs	r1, #0
 800469c:	1827      	adds	r7, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 fe72 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80046a4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80046a8:	8af1      	ldrh	r1, [r6, #22]
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 80046aa:	b2bf      	uxth	r7, r7
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80046ac:	1abd      	subs	r5, r7, r2
 80046ae:	440d      	add	r5, r1
 80046b0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 80046b4:	4420      	add	r0, r4
 80046b6:	b283      	uxth	r3, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80046b8:	1a6d      	subs	r5, r5, r1
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80046ba:	8b71      	ldrh	r1, [r6, #26]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 80046bc:	9302      	str	r3, [sp, #8]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80046be:	9104      	str	r1, [sp, #16]
 80046c0:	9902      	ldr	r1, [sp, #8]
 80046c2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80046c6:	440a      	add	r2, r1
 80046c8:	9904      	ldr	r1, [sp, #16]
 80046ca:	b292      	uxth	r2, r2
 80046cc:	1a51      	subs	r1, r2, r1
 80046ce:	4419      	add	r1, r3
 80046d0:	b209      	sxth	r1, r1
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80046d2:	4630      	mov	r0, r6
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 80046d4:	9209      	str	r2, [sp, #36]	; 0x24
 80046d6:	9308      	str	r3, [sp, #32]
 80046d8:	9107      	str	r1, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80046da:	f7fe ff0c 	bl	80034f6 <lv_obj_get_height>
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80046de:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 80046e2:	b22d      	sxth	r5, r5
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80046e8:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 80046ea:	f2c0 80a8 	blt.w	800483e <scroll_area_into_view+0x202>
 80046ee:	2900      	cmp	r1, #0
 80046f0:	da06      	bge.n	8004700 <scroll_area_into_view+0xc4>
    else if(top_diff > 0) {
 80046f2:	b12d      	cbz	r5, 8004700 <scroll_area_into_view+0xc4>
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff fde0 	bl	80042ba <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 80046fa:	1b40      	subs	r0, r0, r5
 80046fc:	2800      	cmp	r0, #0
 80046fe:	da00      	bge.n	8004702 <scroll_area_into_view+0xc6>
 8004700:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8004702:	f1bb 0f02 	cmp.w	fp, #2
 8004706:	f000 80a8 	beq.w	800485a <scroll_area_into_view+0x21e>
 800470a:	f1bb 0f03 	cmp.w	fp, #3
 800470e:	f000 80ab 	beq.w	8004868 <scroll_area_into_view+0x22c>
 8004712:	f1bb 0f01 	cmp.w	fp, #1
 8004716:	d105      	bne.n	8004724 <scroll_area_into_view+0xe8>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
            act = area_tmp->y1 + y_scroll;
            y_scroll += snap_goal - act;
 8004718:	8af5      	ldrh	r5, [r6, #22]
 800471a:	443d      	add	r5, r7
 800471c:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8004720:	1bed      	subs	r5, r5, r7
            y_scroll += snap_goal - act;
            break;
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
            y_scroll += snap_goal - act;
 8004722:	b22d      	sxth	r5, r5
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 8004724:	4630      	mov	r0, r6
 8004726:	f7ff fdaa 	bl	800427e <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800472a:	4683      	mov	fp, r0
 800472c:	b110      	cbz	r0, 8004734 <scroll_area_into_view+0xf8>
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	f103 0914 	add.w	r9, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004734:	f641 0212 	movw	r2, #6162	; 0x1812
 8004738:	2100      	movs	r1, #0
 800473a:	4630      	mov	r0, r6
 800473c:	f000 fe24 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004740:	f641 0213 	movw	r2, #6163	; 0x1813
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8004744:	eb04 0800 	add.w	r8, r4, r0
 8004748:	2100      	movs	r1, #0
 800474a:	4630      	mov	r0, r6
 800474c:	f000 fe1c 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8004750:	f8ba 3000 	ldrh.w	r3, [sl]
 8004754:	8ab2      	ldrh	r2, [r6, #20]
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8004756:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800475a:	1827      	adds	r7, r4, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800475c:	eba8 0403 	sub.w	r4, r8, r3
 8004760:	4414      	add	r4, r2
 8004762:	f8b9 2000 	ldrh.w	r2, [r9]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 8004766:	b2bf      	uxth	r7, r7
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8004768:	1aa4      	subs	r4, r4, r2
 800476a:	443b      	add	r3, r7
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800476c:	8b32      	ldrh	r2, [r6, #24]
 800476e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8004772:	b29b      	uxth	r3, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8004774:	b224      	sxth	r4, r4
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8004776:	1a98      	subs	r0, r3, r2
 8004778:	4408      	add	r0, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800477a:	2c00      	cmp	r4, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800477c:	b200      	sxth	r0, r0
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800477e:	f2c0 8090 	blt.w	80048a2 <scroll_area_into_view+0x266>
 8004782:	2800      	cmp	r0, #0
 8004784:	da06      	bge.n	8004794 <scroll_area_into_view+0x158>
    else if(left_diff > 0) {
 8004786:	b12c      	cbz	r4, 8004794 <scroll_area_into_view+0x158>
        x_scroll = left_diff;
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8004788:	4630      	mov	r0, r6
 800478a:	f7ff fdff 	bl	800438c <lv_obj_get_scroll_left>
        if(sl + x_scroll > 0) x_scroll = 0;
 800478e:	4420      	add	r0, r4
 8004790:	2800      	cmp	r0, #0
 8004792:	dd00      	ble.n	8004796 <scroll_area_into_view+0x15a>
 8004794:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8004796:	4630      	mov	r0, r6
 8004798:	f7fe fea7 	bl	80034ea <lv_obj_get_width>
    switch(snap_x) {
 800479c:	f1bb 0f02 	cmp.w	fp, #2
 80047a0:	f000 808c 	beq.w	80048bc <scroll_area_into_view+0x280>
 80047a4:	f1bb 0f03 	cmp.w	fp, #3
 80047a8:	f000 808e 	beq.w	80048c8 <scroll_area_into_view+0x28c>
 80047ac:	f1bb 0f01 	cmp.w	fp, #1
 80047b0:	d106      	bne.n	80047c0 <scroll_area_into_view+0x184>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
            act = area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 80047b2:	8ab4      	ldrh	r4, [r6, #20]
 80047b4:	4444      	add	r4, r8
 80047b6:	f8b9 8000 	ldrh.w	r8, [r9]
 80047ba:	eba4 0408 	sub.w	r4, r4, r8
            x_scroll += snap_goal - act;
            break;
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
            x_scroll += snap_goal - act;
 80047be:	b224      	sxth	r4, r4
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 80047c0:	4954      	ldr	r1, [pc, #336]	; (8004914 <scroll_area_into_view+0x2d8>)
 80047c2:	4630      	mov	r0, r6
 80047c4:	f00a fe86 	bl	800f4d4 <lv_anim_del>
 80047c8:	4607      	mov	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 80047ca:	4953      	ldr	r1, [pc, #332]	; (8004918 <scroll_area_into_view+0x2dc>)
 80047cc:	4630      	mov	r0, r6
 80047ce:	f00a fe81 	bl	800f4d4 <lv_anim_del>
    if(y_del || x_del) {
 80047d2:	2f00      	cmp	r7, #0
 80047d4:	f040 8090 	bne.w	80048f8 <scroll_area_into_view+0x2bc>
 80047d8:	2800      	cmp	r0, #0
 80047da:	f040 808d 	bne.w	80048f8 <scroll_area_into_view+0x2bc>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	07d8      	lsls	r0, r3, #31
 80047e2:	f140 8094 	bpl.w	800490e <scroll_area_into_view+0x2d2>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80047e6:	9b01      	ldr	r3, [sp, #4]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80047e8:	4630      	mov	r0, r6
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 80047ea:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	bf58      	it	pl
 80047f0:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
 80047f4:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 80047f6:	9b01      	ldr	r3, [sp, #4]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 80047f8:	9a05      	ldr	r2, [sp, #20]
 80047fa:	bf58      	it	pl
 80047fc:	ea25 75e5 	bicpl.w	r5, r5, r5, asr #31
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	bf58      	it	pl
 8004804:	ea05 75e5 	andpl.w	r5, r5, r5, asr #31
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8004808:	2a00      	cmp	r2, #0
 800480a:	bf14      	ite	ne
 800480c:	4622      	movne	r2, r4
 800480e:	2200      	moveq	r2, #0
 8004810:	f8ba 3000 	ldrh.w	r3, [sl]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8004814:	4621      	mov	r1, r4
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8004816:	4413      	add	r3, r2
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8004818:	bf14      	ite	ne
 800481a:	462a      	movne	r2, r5
 800481c:	2200      	moveq	r2, #0
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800481e:	f8aa 3000 	strh.w	r3, [sl]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8004822:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8004826:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8004828:	462a      	mov	r2, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800482a:	f8aa 3002 	strh.w	r3, [sl, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800482e:	9b05      	ldr	r3, [sp, #20]
}
 8004830:	b00b      	add	sp, #44	; 0x2c
 8004832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8004836:	f7ff be75 	b.w	8004524 <lv_obj_scroll_by>
    else area_tmp = area;
 800483a:	46c8      	mov	r8, r9
 800483c:	e71d      	b.n	800467a <scroll_area_into_view+0x3e>
    else if(bottom_diff > 0) {
 800483e:	2900      	cmp	r1, #0
 8004840:	f77f af5e 	ble.w	8004700 <scroll_area_into_view+0xc4>
        y_scroll = -bottom_diff;
 8004844:	9904      	ldr	r1, [sp, #16]
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8004846:	4630      	mov	r0, r6
        y_scroll = -bottom_diff;
 8004848:	1a8d      	subs	r5, r1, r2
 800484a:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800484c:	f7ff fd4a 	bl	80042e4 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 8004850:	b22d      	sxth	r5, r5
        if(sb + y_scroll < 0) y_scroll = 0;
 8004852:	42e8      	cmn	r0, r5
 8004854:	f57f af55 	bpl.w	8004702 <scroll_area_into_view+0xc6>
 8004858:	e752      	b.n	8004700 <scroll_area_into_view+0xc4>
            y_scroll += snap_goal - act;
 800485a:	9b02      	ldr	r3, [sp, #8]
 800485c:	8b75      	ldrh	r5, [r6, #26]
 800485e:	1aed      	subs	r5, r5, r3
 8004860:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004864:	1aed      	subs	r5, r5, r3
 8004866:	e75c      	b.n	8004722 <scroll_area_into_view+0xe6>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8004868:	9b02      	ldr	r3, [sp, #8]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800486a:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800486e:	443b      	add	r3, r7
 8004870:	4618      	mov	r0, r3
 8004872:	9b06      	ldr	r3, [sp, #24]
 8004874:	eba3 0b00 	sub.w	fp, r3, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8004878:	fa0f f58b 	sxth.w	r5, fp
 800487c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004880:	f3cb 3bc0 	ubfx	fp, fp, #15, #1
 8004884:	44ab      	add	fp, r5
            y_scroll += snap_goal - act;
 8004886:	8af5      	ldrh	r5, [r6, #22]
 8004888:	3301      	adds	r3, #1
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	443d      	add	r5, r7
 800488e:	1aad      	subs	r5, r5, r2
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8004890:	b21a      	sxth	r2, r3
 8004892:	f3c3 33c0 	ubfx	r3, r3, #15, #1
            y_scroll += snap_goal - act;
 8004896:	eb05 056b 	add.w	r5, r5, fp, asr #1
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800489a:	4413      	add	r3, r2
            y_scroll += snap_goal - act;
 800489c:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 80048a0:	e73f      	b.n	8004722 <scroll_area_into_view+0xe6>
    else if(right_diff > 0) {
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f77f af76 	ble.w	8004794 <scroll_area_into_view+0x158>
        x_scroll = -right_diff;
 80048a8:	1ad4      	subs	r4, r2, r3
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80048aa:	4630      	mov	r0, r6
        x_scroll = -right_diff;
 80048ac:	1a64      	subs	r4, r4, r1
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80048ae:	f7ff fdd9 	bl	8004464 <lv_obj_get_scroll_right>
        x_scroll = -right_diff;
 80048b2:	b224      	sxth	r4, r4
        if(sr + x_scroll < 0) x_scroll = 0;
 80048b4:	42e0      	cmn	r0, r4
 80048b6:	f57f af6e 	bpl.w	8004796 <scroll_area_into_view+0x15a>
 80048ba:	e76b      	b.n	8004794 <scroll_area_into_view+0x158>
            x_scroll += snap_goal - act;
 80048bc:	8b34      	ldrh	r4, [r6, #24]
 80048be:	1be4      	subs	r4, r4, r7
 80048c0:	f8b9 7004 	ldrh.w	r7, [r9, #4]
 80048c4:	1be4      	subs	r4, r4, r7
 80048c6:	e77a      	b.n	80047be <scroll_area_into_view+0x182>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80048c8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80048cc:	f8b9 2000 	ldrh.w	r2, [r9]
            x_scroll += snap_goal - act;
 80048d0:	8ab4      	ldrh	r4, [r6, #20]
 80048d2:	3301      	adds	r3, #1
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	4444      	add	r4, r8
 80048d8:	1aa4      	subs	r4, r4, r2
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80048da:	4447      	add	r7, r8
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 80048dc:	b21a      	sxth	r2, r3
 80048de:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80048e2:	4413      	add	r3, r2
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 80048e4:	1bc0      	subs	r0, r0, r7
            x_scroll += snap_goal - act;
 80048e6:	eba4 0463 	sub.w	r4, r4, r3, asr #1
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 80048ea:	b203      	sxth	r3, r0
 80048ec:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80048f0:	4418      	add	r0, r3
            x_scroll += snap_goal - act;
 80048f2:	eb04 0460 	add.w	r4, r4, r0, asr #1
 80048f6:	e762      	b.n	80047be <scroll_area_into_view+0x182>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 80048f8:	2200      	movs	r2, #0
 80048fa:	210a      	movs	r1, #10
 80048fc:	4630      	mov	r0, r6
 80048fe:	f7fd f9af 	bl	8001c60 <lv_event_send>
        if(res != LV_RES_OK) return;
 8004902:	2801      	cmp	r0, #1
 8004904:	f43f af6b 	beq.w	80047de <scroll_area_into_view+0x1a2>
}
 8004908:	b00b      	add	sp, #44	; 0x2c
 800490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004912:	e768      	b.n	80047e6 <scroll_area_into_view+0x1aa>
 8004914:	080042c7 	.word	0x080042c7
 8004918:	080042a3 	.word	0x080042a3

0800491c <lv_obj_scroll_to_x>:
{
 800491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	4605      	mov	r5, r0
 8004922:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 8004924:	491c      	ldr	r1, [pc, #112]	; (8004998 <lv_obj_scroll_to_x+0x7c>)
{
 8004926:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 8004928:	f00a fdd4 	bl	800f4d4 <lv_anim_del>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800492c:	2100      	movs	r1, #0
 800492e:	4628      	mov	r0, r5
 8004930:	f7ff fc52 	bl	80041d8 <lv_obj_get_style_base_dir>
 8004934:	2801      	cmp	r0, #1
 8004936:	d01b      	beq.n	8004970 <lv_obj_scroll_to_x+0x54>
        if(x > 0) {
 8004938:	2f00      	cmp	r7, #0
 800493a:	dd2b      	ble.n	8004994 <lv_obj_scroll_to_x+0x78>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800493c:	4628      	mov	r0, r5
 800493e:	f7ff fd25 	bl	800438c <lv_obj_get_scroll_left>
 8004942:	4604      	mov	r4, r0
 8004944:	4628      	mov	r0, r5
 8004946:	f7ff fd8d 	bl	8004464 <lv_obj_get_scroll_right>
 800494a:	4404      	add	r4, r0
 800494c:	b224      	sxth	r4, r4
            if(x > scroll_max) x = scroll_max;
 800494e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004952:	42a7      	cmp	r7, r4
 8004954:	bfa8      	it	ge
 8004956:	4627      	movge	r7, r4
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8004958:	4628      	mov	r0, r5
 800495a:	f7ff fc9c 	bl	8004296 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 800495e:	1bc1      	subs	r1, r0, r7
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 8004960:	4633      	mov	r3, r6
 8004962:	4628      	mov	r0, r5
}
 8004964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 8004968:	2200      	movs	r2, #0
 800496a:	b209      	sxth	r1, r1
 800496c:	f7ff bdda 	b.w	8004524 <lv_obj_scroll_by>
        if(x < 0) {
 8004970:	2f00      	cmp	r7, #0
 8004972:	da0f      	bge.n	8004994 <lv_obj_scroll_to_x+0x78>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8004974:	4628      	mov	r0, r5
 8004976:	f7ff fd09 	bl	800438c <lv_obj_get_scroll_left>
 800497a:	4604      	mov	r4, r0
 800497c:	4628      	mov	r0, r5
 800497e:	f7ff fd71 	bl	8004464 <lv_obj_get_scroll_right>
 8004982:	1823      	adds	r3, r4, r0
 8004984:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8004986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x < -scroll_max) x = -scroll_max;
 800498a:	425b      	negs	r3, r3
 800498c:	429f      	cmp	r7, r3
 800498e:	dae3      	bge.n	8004958 <lv_obj_scroll_to_x+0x3c>
 8004990:	b21f      	sxth	r7, r3
 8004992:	e7e1      	b.n	8004958 <lv_obj_scroll_to_x+0x3c>
 8004994:	2700      	movs	r7, #0
 8004996:	e7df      	b.n	8004958 <lv_obj_scroll_to_x+0x3c>
 8004998:	080042a3 	.word	0x080042a3

0800499c <lv_obj_scroll_to_y>:
{
 800499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a0:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_y_anim);
 80049a2:	4911      	ldr	r1, [pc, #68]	; (80049e8 <lv_obj_scroll_to_y+0x4c>)
{
 80049a4:	4605      	mov	r5, r0
 80049a6:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_y_anim);
 80049a8:	f00a fd94 	bl	800f4d4 <lv_anim_del>
    if(y > 0) {
 80049ac:	2f00      	cmp	r7, #0
 80049ae:	dd19      	ble.n	80049e4 <lv_obj_scroll_to_y+0x48>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 80049b0:	4628      	mov	r0, r5
 80049b2:	f7ff fc82 	bl	80042ba <lv_obj_get_scroll_y>
 80049b6:	4604      	mov	r4, r0
 80049b8:	4628      	mov	r0, r5
 80049ba:	f7ff fc93 	bl	80042e4 <lv_obj_get_scroll_bottom>
 80049be:	4404      	add	r4, r0
 80049c0:	b224      	sxth	r4, r4
        if(y > scroll_max) y = scroll_max;
 80049c2:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80049c6:	42b9      	cmp	r1, r7
 80049c8:	bfa8      	it	ge
 80049ca:	4639      	movge	r1, r7
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 80049cc:	4628      	mov	r0, r5
 80049ce:	f7ff fc74 	bl	80042ba <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 80049d2:	1a42      	subs	r2, r0, r1
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 80049d4:	4633      	mov	r3, r6
 80049d6:	4628      	mov	r0, r5
}
 80049d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 80049dc:	2100      	movs	r1, #0
 80049de:	b212      	sxth	r2, r2
 80049e0:	f7ff bda0 	b.w	8004524 <lv_obj_scroll_by>
 80049e4:	2100      	movs	r1, #0
 80049e6:	e7f1      	b.n	80049cc <lv_obj_scroll_to_y+0x30>
 80049e8:	080042c7 	.word	0x080042c7

080049ec <lv_obj_scroll_to>:
{
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4605      	mov	r5, r0
 80049f0:	4616      	mov	r6, r2
 80049f2:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 80049f4:	461a      	mov	r2, r3
 80049f6:	f7ff ff91 	bl	800491c <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 80049fa:	4622      	mov	r2, r4
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
}
 8004a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 8004a04:	f7ff bfca 	b.w	800499c <lv_obj_scroll_to_y>

08004a08 <lv_obj_scroll_to_view_recursive>:
{
 8004a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8004a0e:	f7ff fbc9 	bl	80041a4 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8004a12:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8004a14:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 8004a16:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8004a18:	f001 fa8a 	bl	8005f30 <lv_obj_get_parent>
 8004a1c:	4605      	mov	r5, r0
    lv_obj_t * child = obj;
 8004a1e:	4621      	mov	r1, r4
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8004a20:	3414      	adds	r4, #20
    while(parent) {
 8004a22:	b90d      	cbnz	r5, 8004a28 <lv_obj_scroll_to_view_recursive+0x20>
}
 8004a24:	b002      	add	sp, #8
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8004a28:	4633      	mov	r3, r6
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	aa01      	add	r2, sp, #4
 8004a2e:	f7ff fe05 	bl	800463c <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8004a32:	4628      	mov	r0, r5
 8004a34:	f001 fa7c 	bl	8005f30 <lv_obj_get_parent>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	e7f1      	b.n	8004a22 <lv_obj_scroll_to_view_recursive+0x1a>

08004a3e <lv_obj_get_scrollbar_area>:
{
 8004a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 8004a42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
 8004a46:	460d      	mov	r5, r1
 8004a48:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 8004a4a:	2200      	movs	r2, #0
{
 8004a4c:	b08f      	sub	sp, #60	; 0x3c
    lv_area_set(hor_area, 0, 0, -1, -1);
 8004a4e:	4611      	mov	r1, r2
{
 8004a50:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 8004a52:	463b      	mov	r3, r7
 8004a54:	4628      	mov	r0, r5
 8004a56:	9700      	str	r7, [sp, #0]
 8004a58:	f00a fe08 	bl	800f66c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	463b      	mov	r3, r7
 8004a60:	4611      	mov	r1, r2
 8004a62:	4630      	mov	r0, r6
 8004a64:	9700      	str	r7, [sp, #0]
 8004a66:	f00a fe01 	bl	800f66c <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7fd fed7 	bl	8002820 <lv_obj_has_flag>
 8004a72:	9002      	str	r0, [sp, #8]
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d045      	beq.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fbf0 	bl	800425e <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8004a7e:	4607      	mov	r7, r0
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d03f      	beq.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004a84:	2000      	movs	r0, #0
 8004a86:	f00a fbe9 	bl	800f25c <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8004a8a:	2f02      	cmp	r7, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004a8c:	4681      	mov	r9, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8004a8e:	d036      	beq.n	8004afe <lv_obj_get_scrollbar_area+0xc0>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff fc12 	bl	80042ba <lv_obj_get_scroll_y>
 8004a96:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff fc23 	bl	80042e4 <lv_obj_get_scroll_bottom>
 8004a9e:	9008      	str	r0, [sp, #32]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff fc73 	bl	800438c <lv_obj_get_scroll_left>
 8004aa6:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fcdb 	bl	8004464 <lv_obj_get_scroll_right>
 8004aae:	9009      	str	r0, [sp, #36]	; 0x24
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7ff fbdc 	bl	800426e <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 8004ab6:	f010 0b0c 	ands.w	fp, r0, #12
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8004aba:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 8004abc:	d00d      	beq.n	8004ada <lv_obj_get_scrollbar_area+0x9c>
 8004abe:	2f01      	cmp	r7, #1
 8004ac0:	d02f      	beq.n	8004b22 <lv_obj_get_scrollbar_area+0xe4>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8004ac2:	2f03      	cmp	r7, #3
 8004ac4:	d121      	bne.n	8004b0a <lv_obj_get_scrollbar_area+0xcc>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8004ac6:	f1b8 0f00 	cmp.w	r8, #0
 8004aca:	dc2a      	bgt.n	8004b22 <lv_obj_get_scrollbar_area+0xe4>
 8004acc:	9b08      	ldr	r3, [sp, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfd4      	ite	le
 8004ad2:	f04f 0b00 	movle.w	fp, #0
 8004ad6:	f04f 0b01 	movgt.w	fp, #1
    if((dir & LV_DIR_HOR) &&
 8004ada:	f01a 0f03 	tst.w	sl, #3
 8004ade:	d126      	bne.n	8004b2e <lv_obj_get_scrollbar_area+0xf0>
    if(!hor_draw && !ver_draw) return;
 8004ae0:	f1bb 0f00 	cmp.w	fp, #0
 8004ae4:	d00e      	beq.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9302      	str	r3, [sp, #8]
 8004aea:	e02b      	b.n	8004b44 <lv_obj_get_scrollbar_area+0x106>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8004aec:	4648      	mov	r0, r9
 8004aee:	f7fd fa71 	bl	8001fd4 <lv_indev_get_scroll_obj>
 8004af2:	4284      	cmp	r4, r0
 8004af4:	d0cc      	beq.n	8004a90 <lv_obj_get_scrollbar_area+0x52>
            indev = lv_indev_get_next(indev);
 8004af6:	4648      	mov	r0, r9
 8004af8:	f00a fbb0 	bl	800f25c <lv_indev_get_next>
 8004afc:	4681      	mov	r9, r0
        while(indev) {
 8004afe:	f1b9 0f00 	cmp.w	r9, #0
 8004b02:	d1f3      	bne.n	8004aec <lv_obj_get_scrollbar_area+0xae>
}
 8004b04:	b00f      	add	sp, #60	; 0x3c
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8004b0a:	2f02      	cmp	r7, #2
 8004b0c:	d10c      	bne.n	8004b28 <lv_obj_get_scrollbar_area+0xea>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8004b0e:	4648      	mov	r0, r9
 8004b10:	f7fd fa52 	bl	8001fb8 <lv_indev_get_scroll_dir>
 8004b14:	f1a0 030c 	sub.w	r3, r0, #12
 8004b18:	f1d3 0b00 	rsbs	fp, r3, #0
 8004b1c:	eb4b 0b03 	adc.w	fp, fp, r3
 8004b20:	e7db      	b.n	8004ada <lv_obj_get_scrollbar_area+0x9c>
        ver_draw = true;
 8004b22:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004b26:	e7d8      	b.n	8004ada <lv_obj_get_scrollbar_area+0x9c>
    bool ver_draw = false;
 8004b28:	f04f 0b00 	mov.w	fp, #0
 8004b2c:	e7d5      	b.n	8004ada <lv_obj_get_scrollbar_area+0x9c>
    if((dir & LV_DIR_HOR) &&
 8004b2e:	2f01      	cmp	r7, #1
 8004b30:	d008      	beq.n	8004b44 <lv_obj_get_scrollbar_area+0x106>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8004b32:	2f03      	cmp	r7, #3
 8004b34:	f040 80bd 	bne.w	8004cb2 <lv_obj_get_scrollbar_area+0x274>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8004b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dc02      	bgt.n	8004b44 <lv_obj_get_scrollbar_area+0x106>
 8004b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	ddcd      	ble.n	8004ae0 <lv_obj_get_scrollbar_area+0xa2>
    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 8004b44:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff fb45 	bl	80041d8 <lv_obj_get_style_base_dir>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004b4e:	f641 0210 	movw	r2, #6160	; 0x1810
 8004b52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b56:	9004      	str	r0, [sp, #16]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 fc15 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b5e:	f641 0213 	movw	r2, #6163	; 0x1813
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004b62:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004b68:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8004b6a:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b6e:	f000 fc0b 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004b72:	f241 0201 	movw	r2, #4097	; 0x1001
 8004b76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b7a:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 fc03 	bl	8005388 <lv_obj_get_style_prop>
 8004b82:	9006      	str	r0, [sp, #24]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7fe fcb6 	bl	80034f6 <lv_obj_get_height>
 8004b8a:	4681      	mov	r9, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7fe fcac 	bl	80034ea <lv_obj_get_width>
 8004b92:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 8004b94:	f1bb 0f00 	cmp.w	fp, #0
 8004b98:	f000 8095 	beq.w	8004cc6 <lv_obj_get_scrollbar_area+0x288>
 8004b9c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	9303      	str	r3, [sp, #12]
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 808f 	beq.w	8004ccc <lv_obj_get_scrollbar_area+0x28e>
 8004bae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004bb6:	2221      	movs	r2, #33	; 0x21
 8004bb8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	9305      	str	r3, [sp, #20]
 8004bc0:	f000 fbe2 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004bc4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8004bc6:	2801      	cmp	r0, #1
 8004bc8:	f240 8082 	bls.w	8004cd0 <lv_obj_get_scrollbar_area+0x292>
    if(ver_draw && content_h) {
 8004bcc:	f1bb 0f00 	cmp.w	fp, #0
 8004bd0:	f040 8089 	bne.w	8004ce6 <lv_obj_get_scrollbar_area+0x2a8>
    if(hor_draw && content_w) {
 8004bd4:	9b02      	ldr	r3, [sp, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d094      	beq.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
 8004bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_coord_t content_w = obj_w + sl + sr;
 8004bde:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 8004be2:	4413      	add	r3, r2
 8004be4:	b29f      	uxth	r7, r3
 8004be6:	eb06 0b07 	add.w	fp, r6, r7
 8004bea:	fa0f f28b 	sxth.w	r2, fp
    if(hor_draw && content_w) {
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	d088      	beq.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
        hor_area->y2 = obj->coords.y2 - side_space;
 8004bf2:	8b63      	ldrh	r3, [r4, #26]
 8004bf4:	9907      	ldr	r1, [sp, #28]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004bf6:	f04f 080a 	mov.w	r8, #10
        hor_area->y2 = obj->coords.y2 - side_space;
 8004bfa:	1a5b      	subs	r3, r3, r1
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8004bfc:	9906      	ldr	r1, [sp, #24]
        hor_area->y2 = obj->coords.y2 - side_space;
 8004bfe:	b29b      	uxth	r3, r3
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8004c00:	f1c1 0001 	rsb	r0, r1, #1
        hor_area->y2 = obj->coords.y2 - side_space;
 8004c04:	80eb      	strh	r3, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8004c06:	4403      	add	r3, r0
 8004c08:	806b      	strh	r3, [r5, #2]
        hor_area->x1 = obj->coords.x1;
 8004c0a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004c0e:	2000      	movs	r0, #0
        hor_area->x1 = obj->coords.x1;
 8004c10:	802b      	strh	r3, [r5, #0]
        hor_area->x2 = obj->coords.x2;
 8004c12:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8004c16:	80ab      	strh	r3, [r5, #4]
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	eba3 0b4a 	sub.w	fp, r3, sl, lsl #1
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	ebab 0b03 	sub.w	fp, fp, r3
 8004c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c26:	fb03 fb0b 	mul.w	fp, r3, fp
 8004c2a:	fb9b fbf2 	sdiv	fp, fp, r2
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004c2e:	f00a faff 	bl	800f230 <lv_disp_get_dpi>
 8004c32:	fb08 f000 	mul.w	r0, r8, r0
 8004c36:	28ef      	cmp	r0, #239	; 0xef
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
 8004c38:	fa0f fb8b 	sxth.w	fp, fp
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004c3c:	f340 8166 	ble.w	8004f0c <lv_obj_get_scrollbar_area+0x4ce>
 8004c40:	2000      	movs	r0, #0
 8004c42:	f00a faf5 	bl	800f230 <lv_disp_get_dpi>
 8004c46:	23a0      	movs	r3, #160	; 0xa0
 8004c48:	fb08 f000 	mul.w	r0, r8, r0
 8004c4c:	3050      	adds	r0, #80	; 0x50
 8004c4e:	fb90 f0f3 	sdiv	r0, r0, r3
 8004c52:	4583      	cmp	fp, r0
 8004c54:	dc15      	bgt.n	8004c82 <lv_obj_get_scrollbar_area+0x244>
 8004c56:	2000      	movs	r0, #0
 8004c58:	f00a faea 	bl	800f230 <lv_disp_get_dpi>
 8004c5c:	f04f 0b0a 	mov.w	fp, #10
 8004c60:	fb0b f000 	mul.w	r0, fp, r0
 8004c64:	28ef      	cmp	r0, #239	; 0xef
 8004c66:	f340 8153 	ble.w	8004f10 <lv_obj_get_scrollbar_area+0x4d2>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f00a fae0 	bl	800f230 <lv_disp_get_dpi>
 8004c70:	fb0b fb00 	mul.w	fp, fp, r0
 8004c74:	20a0      	movs	r0, #160	; 0xa0
 8004c76:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 8004c7a:	fb9b fbf0 	sdiv	fp, fp, r0
 8004c7e:	fa0f fb8b 	sxth.w	fp, fp
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 8004c82:	b23f      	sxth	r7, r7
        if(scroll_w <= 0) {
 8004c84:	2f00      	cmp	r7, #0
        rem = (obj_w - end_space * 2 - ver_reg_space) -
 8004c86:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 8004c8a:	f8bd 900c 	ldrh.w	r9, [sp, #12]
        if(scroll_w <= 0) {
 8004c8e:	8aa2      	ldrh	r2, [r4, #20]
 8004c90:	f300 814b 	bgt.w	8004f2a <lv_obj_get_scrollbar_area+0x4ec>
            if(rtl) {
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	8b20      	ldrh	r0, [r4, #24]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 813c 	bne.w	8004f16 <lv_obj_get_scrollbar_area+0x4d8>
                hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space - 1;
 8004c9e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8004ca2:	441a      	add	r2, r3
 8004ca4:	444a      	add	r2, r9
                hor_area->x2 = obj->coords.x2 - end_space;
 8004ca6:	eba0 0808 	sub.w	r8, r0, r8
                hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space - 1;
 8004caa:	802a      	strh	r2, [r5, #0]
                hor_area->x2 = obj->coords.x2 - end_space;
 8004cac:	f8a5 8004 	strh.w	r8, [r5, #4]
 8004cb0:	e728      	b.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8004cb2:	2f02      	cmp	r7, #2
 8004cb4:	f47f af14 	bne.w	8004ae0 <lv_obj_get_scrollbar_area+0xa2>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8004cb8:	4648      	mov	r0, r9
 8004cba:	f7fd f97d 	bl	8001fb8 <lv_indev_get_scroll_dir>
 8004cbe:	2803      	cmp	r0, #3
 8004cc0:	f47f af0e 	bne.w	8004ae0 <lv_obj_get_scrollbar_area+0xa2>
 8004cc4:	e73e      	b.n	8004b44 <lv_obj_get_scrollbar_area+0x106>
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 8004cc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8004cca:	e76c      	b.n	8004ba6 <lv_obj_get_scrollbar_area+0x168>
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 8004ccc:	9b02      	ldr	r3, [sp, #8]
 8004cce:	e772      	b.n	8004bb6 <lv_obj_get_scrollbar_area+0x178>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004cd0:	2231      	movs	r2, #49	; 0x31
 8004cd2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 fb56 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004cdc:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8004cde:	2801      	cmp	r0, #1
 8004ce0:	f63f af74 	bhi.w	8004bcc <lv_obj_get_scrollbar_area+0x18e>
 8004ce4:	e70e      	b.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
    lv_coord_t content_h = obj_h + st + sb;
 8004ce6:	fa1f f389 	uxth.w	r3, r9
 8004cea:	930d      	str	r3, [sp, #52]	; 0x34
 8004cec:	9b08      	ldr	r3, [sp, #32]
 8004cee:	4498      	add	r8, r3
 8004cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf2:	fa1f f888 	uxth.w	r8, r8
 8004cf6:	4443      	add	r3, r8
 8004cf8:	b21b      	sxth	r3, r3
    if(ver_draw && content_h) {
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f43f af6a 	beq.w	8004bd4 <lv_obj_get_scrollbar_area+0x196>
        ver_area->y1 = obj->coords.y1;
 8004d00:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
        if(rtl) {
 8004d04:	9904      	ldr	r1, [sp, #16]
        ver_area->y1 = obj->coords.y1;
 8004d06:	8072      	strh	r2, [r6, #2]
        ver_area->y2 = obj->coords.y2;
 8004d08:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(rtl) {
 8004d0c:	2901      	cmp	r1, #1
        ver_area->y2 = obj->coords.y2;
 8004d0e:	80f2      	strh	r2, [r6, #6]
        if(rtl) {
 8004d10:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004d14:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004d18:	d14d      	bne.n	8004db6 <lv_obj_get_scrollbar_area+0x378>
            ver_area->x1 = obj->coords.x1 + side_space;
 8004d1a:	8aa1      	ldrh	r1, [r4, #20]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8004d1c:	3801      	subs	r0, #1
            ver_area->x1 = obj->coords.x1 + side_space;
 8004d1e:	440a      	add	r2, r1
 8004d20:	b292      	uxth	r2, r2
 8004d22:	8032      	strh	r2, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8004d24:	4402      	add	r2, r0
 8004d26:	80b2      	strh	r2, [r6, #4]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8004d28:	9a05      	ldr	r2, [sp, #20]
 8004d2a:	eba9 004a 	sub.w	r0, r9, sl, lsl #1
 8004d2e:	1a80      	subs	r0, r0, r2
 8004d30:	fb09 f900 	mul.w	r9, r9, r0
 8004d34:	fb99 f3f3 	sdiv	r3, r9, r3
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f04f 090a 	mov.w	r9, #10
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8004d3e:	b21f      	sxth	r7, r3
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8004d40:	f00a fa76 	bl	800f230 <lv_disp_get_dpi>
 8004d44:	fb09 f000 	mul.w	r0, r9, r0
 8004d48:	28ef      	cmp	r0, #239	; 0xef
 8004d4a:	dd3d      	ble.n	8004dc8 <lv_obj_get_scrollbar_area+0x38a>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f00a fa6f 	bl	800f230 <lv_disp_get_dpi>
 8004d52:	22a0      	movs	r2, #160	; 0xa0
 8004d54:	fb09 f000 	mul.w	r0, r9, r0
 8004d58:	3050      	adds	r0, #80	; 0x50
 8004d5a:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d5e:	4287      	cmp	r7, r0
 8004d60:	dc13      	bgt.n	8004d8a <lv_obj_get_scrollbar_area+0x34c>
 8004d62:	2000      	movs	r0, #0
 8004d64:	f00a fa64 	bl	800f230 <lv_disp_get_dpi>
 8004d68:	f04f 090a 	mov.w	r9, #10
 8004d6c:	fb09 f000 	mul.w	r0, r9, r0
 8004d70:	28ef      	cmp	r0, #239	; 0xef
 8004d72:	dd2b      	ble.n	8004dcc <lv_obj_get_scrollbar_area+0x38e>
 8004d74:	2000      	movs	r0, #0
 8004d76:	f00a fa5b 	bl	800f230 <lv_disp_get_dpi>
 8004d7a:	fb09 f300 	mul.w	r3, r9, r0
 8004d7e:	f04f 09a0 	mov.w	r9, #160	; 0xa0
 8004d82:	3350      	adds	r3, #80	; 0x50
 8004d84:	fb93 f3f9 	sdiv	r3, r3, r9
 8004d88:	b21f      	sxth	r7, r3
        rem = (obj_h - end_space * 2 - hor_req_space) -
 8004d8a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 8004d8e:	8ae2      	ldrh	r2, [r4, #22]
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8004d90:	fa0f f888 	sxth.w	r8, r8
 8004d94:	444a      	add	r2, r9
        if(scroll_h <= 0) {
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
        rem = (obj_h - end_space * 2 - hor_req_space) -
 8004d9a:	f8bd b014 	ldrh.w	fp, [sp, #20]
        if(scroll_h <= 0) {
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	dc16      	bgt.n	8004dd0 <lv_obj_get_scrollbar_area+0x392>
            ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 8004da2:	ea6f 0909 	mvn.w	r9, r9
 8004da6:	8b63      	ldrh	r3, [r4, #26]
            ver_area->y1 = obj->coords.y1 + end_space;
 8004da8:	8072      	strh	r2, [r6, #2]
            ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 8004daa:	4499      	add	r9, r3
 8004dac:	eba9 0b0b 	sub.w	fp, r9, fp
 8004db0:	f8a6 b006 	strh.w	fp, [r6, #6]
 8004db4:	e70e      	b.n	8004bd4 <lv_obj_get_scrollbar_area+0x196>
            ver_area->x2 = obj->coords.x2 - side_space;
 8004db6:	8b21      	ldrh	r1, [r4, #24]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8004db8:	f1c0 0001 	rsb	r0, r0, #1
            ver_area->x2 = obj->coords.x2 - side_space;
 8004dbc:	1a8a      	subs	r2, r1, r2
 8004dbe:	b291      	uxth	r1, r2
 8004dc0:	80b1      	strh	r1, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8004dc2:	4401      	add	r1, r0
 8004dc4:	8031      	strh	r1, [r6, #0]
 8004dc6:	e7af      	b.n	8004d28 <lv_obj_get_scrollbar_area+0x2ea>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8004dc8:	2001      	movs	r0, #1
 8004dca:	e7c8      	b.n	8004d5e <lv_obj_get_scrollbar_area+0x320>
 8004dcc:	2701      	movs	r7, #1
 8004dce:	e7dc      	b.n	8004d8a <lv_obj_get_scrollbar_area+0x34c>
        rem = (obj_h - end_space * 2 - hor_req_space) -
 8004dd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dd2:	b2bb      	uxth	r3, r7
 8004dd4:	eba1 0749 	sub.w	r7, r1, r9, lsl #1
 8004dd8:	eba7 070b 	sub.w	r7, r7, fp
 8004ddc:	1aff      	subs	r7, r7, r3
 8004dde:	b2bf      	uxth	r7, r7
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8004de0:	9908      	ldr	r1, [sp, #32]
            ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8004de2:	443a      	add	r2, r7
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8004de4:	b23f      	sxth	r7, r7
 8004de6:	4379      	muls	r1, r7
 8004de8:	fb91 f8f8 	sdiv	r8, r1, r8
            ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8004dec:	eba2 0808 	sub.w	r8, r2, r8
 8004df0:	fa0f f288 	sxth.w	r2, r8
 8004df4:	8072      	strh	r2, [r6, #2]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8004df6:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4498      	add	r8, r3
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8004dfe:	eb07 030a 	add.w	r3, r7, sl
 8004e02:	429a      	cmp	r2, r3
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8004e04:	f8a6 8006 	strh.w	r8, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8004e08:	da32      	bge.n	8004e70 <lv_obj_get_scrollbar_area+0x432>
                ver_area->y1 = obj->coords.y1 + end_space;
 8004e0a:	444f      	add	r7, r9
 8004e0c:	b23f      	sxth	r7, r7
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2)ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8004e0e:	2000      	movs	r0, #0
                ver_area->y1 = obj->coords.y1 + end_space;
 8004e10:	8077      	strh	r7, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2)ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8004e12:	f00a fa0d 	bl	800f230 <lv_disp_get_dpi>
 8004e16:	f04f 080a 	mov.w	r8, #10
 8004e1a:	fb08 f000 	mul.w	r0, r8, r0
 8004e1e:	28ef      	cmp	r0, #239	; 0xef
 8004e20:	dd69      	ble.n	8004ef6 <lv_obj_get_scrollbar_area+0x4b8>
 8004e22:	2000      	movs	r0, #0
 8004e24:	f00a fa04 	bl	800f230 <lv_disp_get_dpi>
 8004e28:	fb08 f800 	mul.w	r8, r8, r0
 8004e2c:	20a0      	movs	r0, #160	; 0xa0
 8004e2e:	f108 0850 	add.w	r8, r8, #80	; 0x50
 8004e32:	fb98 f8f0 	sdiv	r8, r8, r0
 8004e36:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8004e3a:	4447      	add	r7, r8
 8004e3c:	429f      	cmp	r7, r3
 8004e3e:	dd17      	ble.n	8004e70 <lv_obj_get_scrollbar_area+0x432>
 8004e40:	2000      	movs	r0, #0
 8004e42:	f04f 080a 	mov.w	r8, #10
 8004e46:	8877      	ldrh	r7, [r6, #2]
 8004e48:	f00a f9f2 	bl	800f230 <lv_disp_get_dpi>
 8004e4c:	fb08 f000 	mul.w	r0, r8, r0
 8004e50:	28ef      	cmp	r0, #239	; 0xef
 8004e52:	dd53      	ble.n	8004efc <lv_obj_get_scrollbar_area+0x4be>
 8004e54:	2000      	movs	r0, #0
 8004e56:	f00a f9eb 	bl	800f230 <lv_disp_get_dpi>
 8004e5a:	fb08 f800 	mul.w	r8, r8, r0
 8004e5e:	20a0      	movs	r0, #160	; 0xa0
 8004e60:	f108 0850 	add.w	r8, r8, #80	; 0x50
 8004e64:	fb98 f8f0 	sdiv	r8, r8, r0
 8004e68:	fa1f f888 	uxth.w	r8, r8
 8004e6c:	4447      	add	r7, r8
 8004e6e:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - end_space) {
 8004e70:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8004e74:	9b05      	ldr	r3, [sp, #20]
 8004e76:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	eba3 030a 	sub.w	r3, r3, sl
 8004e80:	4299      	cmp	r1, r3
 8004e82:	f77f aea7 	ble.w	8004bd4 <lv_obj_get_scrollbar_area+0x196>
                ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8004e86:	eba2 0909 	sub.w	r9, r2, r9
 8004e8a:	eba9 0b0b 	sub.w	fp, r9, fp
 8004e8e:	fa0f fb8b 	sxth.w	fp, fp
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1)ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8004e92:	2000      	movs	r0, #0
                ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8004e94:	f8a6 b006 	strh.w	fp, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1)ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8004e98:	f00a f9ca 	bl	800f230 <lv_disp_get_dpi>
 8004e9c:	270a      	movs	r7, #10
 8004e9e:	4378      	muls	r0, r7
 8004ea0:	28ef      	cmp	r0, #239	; 0xef
 8004ea2:	dd2e      	ble.n	8004f02 <lv_obj_get_scrollbar_area+0x4c4>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f00a f9c3 	bl	800f230 <lv_disp_get_dpi>
 8004eaa:	4347      	muls	r7, r0
 8004eac:	20a0      	movs	r0, #160	; 0xa0
 8004eae:	3750      	adds	r7, #80	; 0x50
 8004eb0:	fb97 f7f0 	sdiv	r7, r7, r0
 8004eb4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8004eb8:	ebab 0b07 	sub.w	fp, fp, r7
 8004ebc:	459b      	cmp	fp, r3
 8004ebe:	f6bf ae89 	bge.w	8004bd4 <lv_obj_get_scrollbar_area+0x196>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f04f 080a 	mov.w	r8, #10
 8004ec8:	88f7      	ldrh	r7, [r6, #6]
 8004eca:	f00a f9b1 	bl	800f230 <lv_disp_get_dpi>
 8004ece:	fb08 f000 	mul.w	r0, r8, r0
 8004ed2:	28ef      	cmp	r0, #239	; 0xef
 8004ed4:	dd17      	ble.n	8004f06 <lv_obj_get_scrollbar_area+0x4c8>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f00a f9aa 	bl	800f230 <lv_disp_get_dpi>
 8004edc:	fb08 f800 	mul.w	r8, r8, r0
 8004ee0:	20a0      	movs	r0, #160	; 0xa0
 8004ee2:	f108 0850 	add.w	r8, r8, #80	; 0x50
 8004ee6:	fb98 f8f0 	sdiv	r8, r8, r0
 8004eea:	fa1f f888 	uxth.w	r8, r8
 8004eee:	eba7 0708 	sub.w	r7, r7, r8
 8004ef2:	8077      	strh	r7, [r6, #2]
 8004ef4:	e66e      	b.n	8004bd4 <lv_obj_get_scrollbar_area+0x196>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2)ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8004ef6:	f04f 0801 	mov.w	r8, #1
 8004efa:	e79c      	b.n	8004e36 <lv_obj_get_scrollbar_area+0x3f8>
 8004efc:	f04f 0801 	mov.w	r8, #1
 8004f00:	e7b4      	b.n	8004e6c <lv_obj_get_scrollbar_area+0x42e>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1)ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8004f02:	2701      	movs	r7, #1
 8004f04:	e7d6      	b.n	8004eb4 <lv_obj_get_scrollbar_area+0x476>
 8004f06:	f04f 0801 	mov.w	r8, #1
 8004f0a:	e7f0      	b.n	8004eee <lv_obj_get_scrollbar_area+0x4b0>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	e6a0      	b.n	8004c52 <lv_obj_get_scrollbar_area+0x214>
 8004f10:	f04f 0b01 	mov.w	fp, #1
 8004f14:	e6b5      	b.n	8004c82 <lv_obj_get_scrollbar_area+0x244>
                hor_area->x1 = obj->coords.x1 + end_space;
 8004f16:	4442      	add	r2, r8
                hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8004f18:	ea6f 0808 	mvn.w	r8, r8
 8004f1c:	4480      	add	r8, r0
 8004f1e:	eba8 0909 	sub.w	r9, r8, r9
                hor_area->x1 = obj->coords.x1 + end_space;
 8004f22:	802a      	strh	r2, [r5, #0]
                hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8004f24:	f8a5 9004 	strh.w	r9, [r5, #4]
 8004f28:	e5ec      	b.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
        rem = (obj_w - end_space * 2 - ver_reg_space) -
 8004f2a:	eba6 0648 	sub.w	r6, r6, r8, lsl #1
 8004f2e:	fa1f fb8b 	uxth.w	fp, fp
 8004f32:	eba6 0609 	sub.w	r6, r6, r9
 8004f36:	eba6 060b 	sub.w	r6, r6, fp
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	b230      	sxth	r0, r6
 8004f3e:	4343      	muls	r3, r0
 8004f40:	fb93 f7f7 	sdiv	r7, r3, r7
            sb_x = rem - sb_x;
 8004f44:	1bf3      	subs	r3, r6, r7
 8004f46:	4442      	add	r2, r8
 8004f48:	b29e      	uxth	r6, r3
            if(rtl) {
 8004f4a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004f4e:	fa1f fb83 	uxth.w	fp, r3
 8004f52:	b293      	uxth	r3, r2
 8004f54:	9a04      	ldr	r2, [sp, #16]
 8004f56:	2a01      	cmp	r2, #1
 8004f58:	d179      	bne.n	800504e <lv_obj_get_scrollbar_area+0x610>
                hor_area->x1 = obj->coords.x1 + sb_x + end_space + ver_reg_space;
 8004f5a:	444b      	add	r3, r9
 8004f5c:	4433      	add	r3, r6
 8004f5e:	b21a      	sxth	r2, r3
 8004f60:	802a      	strh	r2, [r5, #0]
                if(hor_area->x1 < obj->coords.x1 + end_space + ver_reg_space) {
 8004f62:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8004f66:	445b      	add	r3, fp
                if(hor_area->x1 < obj->coords.x1 + end_space + ver_reg_space) {
 8004f68:	9903      	ldr	r1, [sp, #12]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8004f6a:	80ab      	strh	r3, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + end_space + ver_reg_space) {
 8004f6c:	eb00 030a 	add.w	r3, r0, sl
 8004f70:	440b      	add	r3, r1
 8004f72:	429a      	cmp	r2, r3
 8004f74:	da2c      	bge.n	8004fd0 <lv_obj_get_scrollbar_area+0x592>
                    hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space;
 8004f76:	4440      	add	r0, r8
 8004f78:	4481      	add	r9, r0
 8004f7a:	fa0f f989 	sxth.w	r9, r9
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8004f7e:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space;
 8004f80:	f8a5 9000 	strh.w	r9, [r5]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8004f84:	f00a f954 	bl	800f230 <lv_disp_get_dpi>
 8004f88:	260a      	movs	r6, #10
 8004f8a:	4370      	muls	r0, r6
 8004f8c:	28ef      	cmp	r0, #239	; 0xef
 8004f8e:	dd58      	ble.n	8005042 <lv_obj_get_scrollbar_area+0x604>
 8004f90:	2000      	movs	r0, #0
 8004f92:	f00a f94d 	bl	800f230 <lv_disp_get_dpi>
 8004f96:	4346      	muls	r6, r0
 8004f98:	20a0      	movs	r0, #160	; 0xa0
 8004f9a:	3650      	adds	r6, #80	; 0x50
 8004f9c:	fb96 f0f0 	sdiv	r0, r6, r0
 8004fa0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004fa4:	4448      	add	r0, r9
 8004fa6:	4298      	cmp	r0, r3
 8004fa8:	dd12      	ble.n	8004fd0 <lv_obj_get_scrollbar_area+0x592>
 8004faa:	2000      	movs	r0, #0
 8004fac:	260a      	movs	r6, #10
 8004fae:	882f      	ldrh	r7, [r5, #0]
 8004fb0:	f00a f93e 	bl	800f230 <lv_disp_get_dpi>
 8004fb4:	4370      	muls	r0, r6
 8004fb6:	28ef      	cmp	r0, #239	; 0xef
 8004fb8:	dd45      	ble.n	8005046 <lv_obj_get_scrollbar_area+0x608>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f00a f938 	bl	800f230 <lv_disp_get_dpi>
 8004fc0:	4346      	muls	r6, r0
 8004fc2:	20a0      	movs	r0, #160	; 0xa0
 8004fc4:	3650      	adds	r6, #80	; 0x50
 8004fc6:	fb96 f6f0 	sdiv	r6, r6, r0
 8004fca:	b2b6      	uxth	r6, r6
 8004fcc:	443e      	add	r6, r7
 8004fce:	80ae      	strh	r6, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - end_space) {
 8004fd0:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
 8004fd4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004fd8:	eba4 0a0a 	sub.w	sl, r4, sl
 8004fdc:	4553      	cmp	r3, sl
 8004fde:	f77f ad91 	ble.w	8004b04 <lv_obj_get_scrollbar_area+0xc6>
                    hor_area->x2 = obj->coords.x2 - end_space;
 8004fe2:	eba4 0408 	sub.w	r4, r4, r8
 8004fe6:	fa0f f884 	sxth.w	r8, r4
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8004fea:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - end_space;
 8004fec:	f8a5 8004 	strh.w	r8, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8004ff0:	f00a f91e 	bl	800f230 <lv_disp_get_dpi>
 8004ff4:	240a      	movs	r4, #10
 8004ff6:	4360      	muls	r0, r4
 8004ff8:	28ef      	cmp	r0, #239	; 0xef
 8004ffa:	dd26      	ble.n	800504a <lv_obj_get_scrollbar_area+0x60c>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f00a f917 	bl	800f230 <lv_disp_get_dpi>
 8005002:	4344      	muls	r4, r0
 8005004:	20a0      	movs	r0, #160	; 0xa0
 8005006:	3450      	adds	r4, #80	; 0x50
 8005008:	fb94 f4f0 	sdiv	r4, r4, r0
 800500c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005010:	eba8 0404 	sub.w	r4, r8, r4
 8005014:	429c      	cmp	r4, r3
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005016:	f6bf ad75 	bge.w	8004b04 <lv_obj_get_scrollbar_area+0xc6>
 800501a:	2000      	movs	r0, #0
 800501c:	240a      	movs	r4, #10
 800501e:	88ae      	ldrh	r6, [r5, #4]
 8005020:	f00a f906 	bl	800f230 <lv_disp_get_dpi>
 8005024:	4360      	muls	r0, r4
 8005026:	28ef      	cmp	r0, #239	; 0xef
 8005028:	dd74      	ble.n	8005114 <lv_obj_get_scrollbar_area+0x6d6>
 800502a:	2000      	movs	r0, #0
 800502c:	f00a f900 	bl	800f230 <lv_disp_get_dpi>
 8005030:	4344      	muls	r4, r0
 8005032:	20a0      	movs	r0, #160	; 0xa0
 8005034:	3450      	adds	r4, #80	; 0x50
 8005036:	fb94 f4f0 	sdiv	r4, r4, r0
 800503a:	b2a4      	uxth	r4, r4
 800503c:	1b34      	subs	r4, r6, r4
 800503e:	802c      	strh	r4, [r5, #0]
 8005040:	e560      	b.n	8004b04 <lv_obj_get_scrollbar_area+0xc6>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005042:	9804      	ldr	r0, [sp, #16]
 8005044:	e7ac      	b.n	8004fa0 <lv_obj_get_scrollbar_area+0x562>
 8005046:	2601      	movs	r6, #1
 8005048:	e7c0      	b.n	8004fcc <lv_obj_get_scrollbar_area+0x58e>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800504a:	2401      	movs	r4, #1
 800504c:	e7de      	b.n	800500c <lv_obj_get_scrollbar_area+0x5ce>
                hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 800504e:	4433      	add	r3, r6
 8005050:	b21a      	sxth	r2, r3
 8005052:	802a      	strh	r2, [r5, #0]
                if(hor_area->x1 < obj->coords.x1 + end_space) {
 8005054:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8005058:	445b      	add	r3, fp
 800505a:	80ab      	strh	r3, [r5, #4]
                if(hor_area->x1 < obj->coords.x1 + end_space) {
 800505c:	eb06 030a 	add.w	r3, r6, sl
 8005060:	429a      	cmp	r2, r3
 8005062:	da29      	bge.n	80050b8 <lv_obj_get_scrollbar_area+0x67a>
                    hor_area->x1 = obj->coords.x1 + end_space;
 8005064:	4446      	add	r6, r8
 8005066:	b236      	sxth	r6, r6
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005068:	2000      	movs	r0, #0
                    hor_area->x1 = obj->coords.x1 + end_space;
 800506a:	802e      	strh	r6, [r5, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800506c:	f00a f8e0 	bl	800f230 <lv_disp_get_dpi>
 8005070:	270a      	movs	r7, #10
 8005072:	4378      	muls	r0, r7
 8005074:	28ef      	cmp	r0, #239	; 0xef
 8005076:	dd47      	ble.n	8005108 <lv_obj_get_scrollbar_area+0x6ca>
 8005078:	2000      	movs	r0, #0
 800507a:	f00a f8d9 	bl	800f230 <lv_disp_get_dpi>
 800507e:	4347      	muls	r7, r0
 8005080:	20a0      	movs	r0, #160	; 0xa0
 8005082:	3750      	adds	r7, #80	; 0x50
 8005084:	fb97 f7f0 	sdiv	r7, r7, r0
 8005088:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800508c:	443e      	add	r6, r7
 800508e:	429e      	cmp	r6, r3
 8005090:	dd12      	ble.n	80050b8 <lv_obj_get_scrollbar_area+0x67a>
 8005092:	2000      	movs	r0, #0
 8005094:	260a      	movs	r6, #10
 8005096:	882f      	ldrh	r7, [r5, #0]
 8005098:	f00a f8ca 	bl	800f230 <lv_disp_get_dpi>
 800509c:	4370      	muls	r0, r6
 800509e:	28ef      	cmp	r0, #239	; 0xef
 80050a0:	dd34      	ble.n	800510c <lv_obj_get_scrollbar_area+0x6ce>
 80050a2:	2000      	movs	r0, #0
 80050a4:	f00a f8c4 	bl	800f230 <lv_disp_get_dpi>
 80050a8:	4346      	muls	r6, r0
 80050aa:	20a0      	movs	r0, #160	; 0xa0
 80050ac:	3650      	adds	r6, #80	; 0x50
 80050ae:	fb96 f6f0 	sdiv	r6, r6, r0
 80050b2:	b2b6      	uxth	r6, r6
 80050b4:	4437      	add	r7, r6
 80050b6:	80af      	strh	r7, [r5, #4]
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - end_space) {
 80050b8:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80050c2:	1ac3      	subs	r3, r0, r3
 80050c4:	eba3 0a0a 	sub.w	sl, r3, sl
 80050c8:	4552      	cmp	r2, sl
 80050ca:	f77f ad1b 	ble.w	8004b04 <lv_obj_get_scrollbar_area+0xc6>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 80050ce:	eba0 0808 	sub.w	r8, r0, r8
 80050d2:	eba8 0909 	sub.w	r9, r8, r9
 80050d6:	fa0f f989 	sxth.w	r9, r9
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80050da:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 80050dc:	f8a5 9004 	strh.w	r9, [r5, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80050e0:	f00a f8a6 	bl	800f230 <lv_disp_get_dpi>
 80050e4:	240a      	movs	r4, #10
 80050e6:	4360      	muls	r0, r4
 80050e8:	28ef      	cmp	r0, #239	; 0xef
 80050ea:	dd11      	ble.n	8005110 <lv_obj_get_scrollbar_area+0x6d2>
 80050ec:	2000      	movs	r0, #0
 80050ee:	f00a f89f 	bl	800f230 <lv_disp_get_dpi>
 80050f2:	4344      	muls	r4, r0
 80050f4:	20a0      	movs	r0, #160	; 0xa0
 80050f6:	3450      	adds	r4, #80	; 0x50
 80050f8:	fb94 f4f0 	sdiv	r4, r4, r0
 80050fc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005100:	eba9 0904 	sub.w	r9, r9, r4
 8005104:	4599      	cmp	r9, r3
 8005106:	e786      	b.n	8005016 <lv_obj_get_scrollbar_area+0x5d8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8005108:	2701      	movs	r7, #1
 800510a:	e7bd      	b.n	8005088 <lv_obj_get_scrollbar_area+0x64a>
 800510c:	2601      	movs	r6, #1
 800510e:	e7d1      	b.n	80050b4 <lv_obj_get_scrollbar_area+0x676>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8005110:	2401      	movs	r4, #1
 8005112:	e7f3      	b.n	80050fc <lv_obj_get_scrollbar_area+0x6be>
 8005114:	2401      	movs	r4, #1
 8005116:	e791      	b.n	800503c <lv_obj_get_scrollbar_area+0x5fe>

08005118 <lv_obj_scrollbar_invalidate>:
{
 8005118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800511a:	4669      	mov	r1, sp
 800511c:	aa02      	add	r2, sp, #8
{
 800511e:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8005120:	f7ff fc8d 	bl	8004a3e <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8005124:	4668      	mov	r0, sp
 8005126:	f00a fab2 	bl	800f68e <lv_area_get_size>
 800512a:	b918      	cbnz	r0, 8005134 <lv_obj_scrollbar_invalidate+0x1c>
 800512c:	a802      	add	r0, sp, #8
 800512e:	f00a faae 	bl	800f68e <lv_area_get_size>
 8005132:	b178      	cbz	r0, 8005154 <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8005134:	4668      	mov	r0, sp
 8005136:	f00a faaa 	bl	800f68e <lv_area_get_size>
 800513a:	b118      	cbz	r0, 8005144 <lv_obj_scrollbar_invalidate+0x2c>
 800513c:	4669      	mov	r1, sp
 800513e:	4620      	mov	r0, r4
 8005140:	f7fe fb03 	bl	800374a <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8005144:	a802      	add	r0, sp, #8
 8005146:	f00a faa2 	bl	800f68e <lv_area_get_size>
 800514a:	b118      	cbz	r0, 8005154 <lv_obj_scrollbar_invalidate+0x3c>
 800514c:	4620      	mov	r0, r4
 800514e:	a902      	add	r1, sp, #8
 8005150:	f7fe fafb 	bl	800374a <lv_obj_invalidate_area>
}
 8005154:	b004      	add	sp, #16
 8005156:	bd10      	pop	{r4, pc}

08005158 <lv_obj_readjust_scroll>:
{
 8005158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515c:	4604      	mov	r4, r0
 800515e:	460e      	mov	r6, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 8005160:	f7ff f893 	bl	800428a <lv_obj_get_scroll_snap_y>
 8005164:	4605      	mov	r5, r0
 8005166:	b9a0      	cbnz	r0, 8005192 <lv_obj_readjust_scroll+0x3a>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005168:	4620      	mov	r0, r4
 800516a:	f7ff f8a6 	bl	80042ba <lv_obj_get_scroll_y>
 800516e:	4607      	mov	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8005170:	4620      	mov	r0, r4
 8005172:	f7ff f8b7 	bl	80042e4 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	da0b      	bge.n	8005192 <lv_obj_readjust_scroll+0x3a>
 800517a:	2f00      	cmp	r7, #0
 800517c:	dd09      	ble.n	8005192 <lv_obj_readjust_scroll+0x3a>
            sb = LV_MIN(st, -sb);
 800517e:	425a      	negs	r2, r3
 8005180:	42ba      	cmp	r2, r7
 8005182:	bfa8      	it	ge
 8005184:	463a      	movge	r2, r7
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 8005186:	4633      	mov	r3, r6
 8005188:	4629      	mov	r1, r5
 800518a:	4620      	mov	r0, r4
 800518c:	b212      	sxth	r2, r2
 800518e:	f7ff f9c9 	bl	8004524 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 8005192:	4620      	mov	r0, r4
 8005194:	f7ff f873 	bl	800427e <lv_obj_get_scroll_snap_x>
 8005198:	4680      	mov	r8, r0
 800519a:	bb28      	cbnz	r0, 80051e8 <lv_obj_readjust_scroll+0x90>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff f8f5 	bl	800438c <lv_obj_get_scroll_left>
 80051a2:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff f95d 	bl	8004464 <lv_obj_get_scroll_right>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80051aa:	4641      	mov	r1, r8
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80051ac:	4605      	mov	r5, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff f812 	bl	80041d8 <lv_obj_get_style_base_dir>
 80051b4:	2801      	cmp	r0, #1
 80051b6:	d00f      	beq.n	80051d8 <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	da15      	bge.n	80051e8 <lv_obj_readjust_scroll+0x90>
 80051bc:	2f00      	cmp	r7, #0
 80051be:	dd13      	ble.n	80051e8 <lv_obj_readjust_scroll+0x90>
                sr = LV_MIN(sl, -sr);
 80051c0:	426d      	negs	r5, r5
 80051c2:	42bd      	cmp	r5, r7
 80051c4:	bfa8      	it	ge
 80051c6:	463d      	movge	r5, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 80051c8:	4633      	mov	r3, r6
 80051ca:	4642      	mov	r2, r8
 80051cc:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 80051ce:	4620      	mov	r0, r4
}
 80051d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 80051d4:	f7ff b9a6 	b.w	8004524 <lv_obj_scroll_by>
            if(sl < 0 && sr > 0) {
 80051d8:	2f00      	cmp	r7, #0
 80051da:	da05      	bge.n	80051e8 <lv_obj_readjust_scroll+0x90>
 80051dc:	2d00      	cmp	r5, #0
 80051de:	dd03      	ble.n	80051e8 <lv_obj_readjust_scroll+0x90>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 80051e0:	4633      	mov	r3, r6
 80051e2:	4642      	mov	r2, r8
 80051e4:	4639      	mov	r1, r7
 80051e6:	e7f2      	b.n	80051ce <lv_obj_readjust_scroll+0x76>
}
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051ec <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 80051ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	4607      	mov	r7, r0
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80051f2:	4829      	ldr	r0, [pc, #164]	; (8005298 <trans_del+0xac>)
{
 80051f4:	4690      	mov	r8, r2
 80051f6:	460d      	mov	r5, r1
 80051f8:	4699      	mov	r9, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80051fa:	f00a fd43 	bl	800fc84 <_lv_ll_get_tail>
    bool removed = false;
 80051fe:	2200      	movs	r2, #0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8005200:	4604      	mov	r4, r0
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005202:	f8df b094 	ldr.w	fp, [pc, #148]	; 8005298 <trans_del+0xac>
    while(tr != NULL) {
 8005206:	b91c      	cbnz	r4, 8005210 <trans_del+0x24>

        }
        tr = tr_prev;
    }
    return removed;
}
 8005208:	4610      	mov	r0, r2
 800520a:	b003      	add	sp, #12
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 8005210:	454c      	cmp	r4, r9
 8005212:	d0f9      	beq.n	8005208 <trans_del+0x1c>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005214:	4621      	mov	r1, r4
 8005216:	4658      	mov	r0, fp
 8005218:	9201      	str	r2, [sp, #4]
 800521a:	f00a fd3a 	bl	800fc92 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800521e:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005220:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8005222:	42bb      	cmp	r3, r7
 8005224:	9a01      	ldr	r2, [sp, #4]
 8005226:	d135      	bne.n	8005294 <trans_del+0xa8>
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	42ab      	cmp	r3, r5
 800522c:	d002      	beq.n	8005234 <trans_del+0x48>
 800522e:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8005232:	d12f      	bne.n	8005294 <trans_del+0xa8>
 8005234:	88a3      	ldrh	r3, [r4, #4]
 8005236:	4543      	cmp	r3, r8
 8005238:	d003      	beq.n	8005242 <trans_del+0x56>
 800523a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800523e:	4598      	cmp	r8, r3
 8005240:	d128      	bne.n	8005294 <trans_del+0xa8>
 8005242:	2600      	movs	r6, #0
 8005244:	e021      	b.n	800528a <trans_del+0x9e>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 800524c:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 8005250:	79d9      	ldrb	r1, [r3, #7]
 8005252:	0789      	lsls	r1, r1, #30
 8005254:	d518      	bpl.n	8005288 <trans_del+0x9c>
 8005256:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800525a:	d004      	beq.n	8005266 <trans_del+0x7a>
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005262:	42ab      	cmp	r3, r5
 8005264:	d110      	bne.n	8005288 <trans_del+0x9c>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8005266:	f850 000c 	ldr.w	r0, [r0, ip]
 800526a:	88a1      	ldrh	r1, [r4, #4]
 800526c:	f00b fbf0 	bl	8010a50 <lv_style_remove_prop>
                    lv_anim_del(tr, NULL);
 8005270:	2100      	movs	r1, #0
 8005272:	4620      	mov	r0, r4
 8005274:	f00a f92e 	bl	800f4d4 <lv_anim_del>
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8005278:	4621      	mov	r1, r4
 800527a:	4658      	mov	r0, fp
 800527c:	f00a fcd6 	bl	800fc2c <_lv_ll_remove>
                    lv_mem_free(tr);
 8005280:	4620      	mov	r0, r4
 8005282:	f00a fd91 	bl	800fda8 <lv_mem_free>
                    removed = true;
 8005286:	2201      	movs	r2, #1
            for(i = 0; i < obj->style_cnt; i++) {
 8005288:	3601      	adds	r6, #1
 800528a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800528c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005290:	42b3      	cmp	r3, r6
 8005292:	d8d8      	bhi.n	8005246 <trans_del+0x5a>
 8005294:	4654      	mov	r4, sl
 8005296:	e7b6      	b.n	8005206 <trans_del+0x1a>
 8005298:	20004714 	.word	0x20004714

0800529c <refresh_children_style>:
{
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	4607      	mov	r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80052a0:	f000 fe58 	bl	8005f54 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80052a4:	2400      	movs	r4, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80052a6:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 80052a8:	42b4      	cmp	r4, r6
 80052aa:	d100      	bne.n	80052ae <refresh_children_style+0x12>
}
 80052ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * child = obj->spec_attr->children[i];
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    for(i = 0; i < child_cnt; i++) {
 80052b6:	3401      	adds	r4, #1
        lv_obj_invalidate(child);
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7fe fa60 	bl	800377e <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 80052be:	2200      	movs	r2, #0
 80052c0:	212a      	movs	r1, #42	; 0x2a
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fc fccc 	bl	8001c60 <lv_event_send>
        lv_obj_invalidate(child);
 80052c8:	4628      	mov	r0, r5
 80052ca:	f7fe fa58 	bl	800377e <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7ff ffe4 	bl	800529c <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 80052d4:	e7e8      	b.n	80052a8 <refresh_children_style+0xc>

080052d6 <get_trans_style>:
{
 80052d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 80052d8:	2200      	movs	r2, #0
{
 80052da:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 80052dc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 80052de:	4604      	mov	r4, r0
 80052e0:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 80052e2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d803      	bhi.n	80052f2 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 80052ea:	d00e      	beq.n	800530a <get_trans_style+0x34>
 80052ec:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 80052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 80052f2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80052f6:	79ce      	ldrb	r6, [r1, #7]
 80052f8:	07b6      	lsls	r6, r6, #30
 80052fa:	d504      	bpl.n	8005306 <get_trans_style+0x30>
 80052fc:	6849      	ldr	r1, [r1, #4]
 80052fe:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8005302:	42a9      	cmp	r1, r5
 8005304:	d0f2      	beq.n	80052ec <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 8005306:	3201      	adds	r2, #1
 8005308:	e7ed      	b.n	80052e6 <get_trans_style+0x10>
    obj->style_cnt++;
 800530a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800530c:	3301      	adds	r3, #1
 800530e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005312:	f363 02c8 	bfi	r2, r3, #3, #6
 8005316:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005318:	00d9      	lsls	r1, r3, #3
 800531a:	f00a fee1 	bl	80100e0 <lv_mem_realloc>
 800531e:	4602      	mov	r2, r0
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005320:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005322:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005324:	f3c3 03c5 	ubfx	r3, r3, #3, #6
        obj->styles[i] = obj->styles[i - 1];
 8005328:	f1a0 0708 	sub.w	r7, r0, #8
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800532c:	3b01      	subs	r3, #1
 800532e:	d116      	bne.n	800535e <get_trans_style+0x88>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8005330:	4610      	mov	r0, r2
 8005332:	2108      	movs	r1, #8
 8005334:	f00a ff3c 	bl	80101b0 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8005338:	2008      	movs	r0, #8
 800533a:	68e6      	ldr	r6, [r4, #12]
 800533c:	f00a feba 	bl	80100b4 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 8005340:	68e3      	ldr	r3, [r4, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8005342:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f00b fb65 	bl	8010a14 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800534a:	68e0      	ldr	r0, [r4, #12]
 800534c:	79c3      	ldrb	r3, [r0, #7]
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	71c3      	strb	r3, [r0, #7]
    obj->styles[0].selector = selector;
 8005354:	6843      	ldr	r3, [r0, #4]
 8005356:	f365 0317 	bfi	r3, r5, #0, #24
 800535a:	6043      	str	r3, [r0, #4]
    return &obj->styles[0];
 800535c:	e7c8      	b.n	80052f0 <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 800535e:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005362:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8005366:	c903      	ldmia	r1, {r0, r1}
 8005368:	e886 0003 	stmia.w	r6, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800536c:	e7de      	b.n	800532c <get_trans_style+0x56>
	...

08005370 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8005370:	2114      	movs	r1, #20
 8005372:	4801      	ldr	r0, [pc, #4]	; (8005378 <_lv_obj_style_init+0x8>)
 8005374:	f00a bc1b 	b.w	800fbae <_lv_ll_init>
 8005378:	20004714 	.word	0x20004714

0800537c <lv_obj_enable_style_refresh>:
    style_refr = en;
 800537c:	4b01      	ldr	r3, [pc, #4]	; (8005384 <lv_obj_enable_style_refresh+0x8>)
 800537e:	7018      	strb	r0, [r3, #0]
}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000000d 	.word	0x2000000d

08005388 <lv_obj_get_style_prop>:
{
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 800538c:	f3c2 2380 	ubfx	r3, r2, #10, #1
{
 8005390:	b087      	sub	sp, #28
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 8005392:	9301      	str	r3, [sp, #4]
    if(filter) {
 8005394:	f412 4f80 	tst.w	r2, #16384	; 0x4000
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 8005398:	f3c2 3380 	ubfx	r3, r2, #14, #1
{
 800539c:	4604      	mov	r4, r0
 800539e:	460e      	mov	r6, r1
 80053a0:	4693      	mov	fp, r2
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 80053a2:	9302      	str	r3, [sp, #8]
    if(filter) {
 80053a4:	d003      	beq.n	80053ae <lv_obj_get_style_prop+0x26>
        prop &= ~LV_STYLE_PROP_FILTER;
 80053a6:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 80053aa:	fa1f fb81 	uxth.w	fp, r1
    while(obj) {
 80053ae:	b92c      	cbnz	r4, 80053bc <lv_obj_get_style_prop+0x34>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80053b0:	2e00      	cmp	r6, #0
 80053b2:	d076      	beq.n	80054a2 <lv_obj_get_style_prop+0x11a>
            value_act = lv_style_prop_get_default(prop);
 80053b4:	4658      	mov	r0, fp
 80053b6:	f00b fbd9 	bl	8010b6c <lv_style_prop_get_default>
 80053ba:	e034      	b.n	8005426 <lv_obj_get_style_prop+0x9e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80053bc:	4658      	mov	r0, fp
 80053be:	f00b fc46 	bl	8010c4e <_lv_style_get_prop_group>
    lv_state_t state = obj->state;
 80053c2:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80053c6:	2301      	movs	r3, #1
    lv_state_t state_inv = ~state;
 80053c8:	ea6f 090a 	mvn.w	r9, sl
    for(i = 0; i < obj->style_cnt; i++) {
 80053cc:	2500      	movs	r5, #0
    bool skip_trans = obj->skip_trans;
 80053ce:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80053d2:	fa03 f700 	lsl.w	r7, r3, r0
 80053d6:	b2ff      	uxtb	r7, r7
    lv_state_t state_inv = ~state;
 80053d8:	fa1f f989 	uxth.w	r9, r9
    bool skip_trans = obj->skip_trans;
 80053dc:	f3c8 0880 	ubfx	r8, r8, #2, #1
    for(i = 0; i < obj->style_cnt; i++) {
 80053e0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80053e2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80053e6:	429d      	cmp	r5, r3
 80053e8:	d302      	bcc.n	80053f0 <lv_obj_get_style_prop+0x68>
 80053ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80053ee:	e045      	b.n	800547c <lv_obj_get_style_prop+0xf4>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80053f0:	68e2      	ldr	r2, [r4, #12]
 80053f2:	00e8      	lsls	r0, r5, #3
 80053f4:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
        if(obj_style->is_trans == false) break;
 80053f8:	f893 c007 	ldrb.w	ip, [r3, #7]
 80053fc:	f01c 0f02 	tst.w	ip, #2
 8005400:	d0f3      	beq.n	80053ea <lv_obj_get_style_prop+0x62>
        if(skip_trans) continue;
 8005402:	f1b8 0f00 	cmp.w	r8, #0
 8005406:	d117      	bne.n	8005438 <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8005408:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 800540a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800540e:	429e      	cmp	r6, r3
 8005410:	d112      	bne.n	8005438 <lv_obj_get_style_prop+0xb0>
        if((obj_style->style->has_group & group) == 0) continue;
 8005412:	5810      	ldr	r0, [r2, r0]
 8005414:	7983      	ldrb	r3, [r0, #6]
 8005416:	421f      	tst	r7, r3
 8005418:	d00e      	beq.n	8005438 <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800541a:	4659      	mov	r1, fp
 800541c:	aa05      	add	r2, sp, #20
 800541e:	f00b fb76 	bl	8010b0e <lv_style_get_prop>
        if(found) {
 8005422:	b148      	cbz	r0, 8005438 <lv_obj_get_style_prop+0xb0>
        *v = value_tmp;
 8005424:	9805      	ldr	r0, [sp, #20]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8005426:	9b02      	ldr	r3, [sp, #8]
 8005428:	b11b      	cbz	r3, 8005432 <lv_obj_get_style_prop+0xaa>
 800542a:	4605      	mov	r5, r0
    if(obj == NULL) return v;
 800542c:	2c00      	cmp	r4, #0
 800542e:	d152      	bne.n	80054d6 <lv_obj_get_style_prop+0x14e>
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8005430:	4628      	mov	r0, r5
}
 8005432:	b007      	add	sp, #28
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8005438:	3501      	adds	r5, #1
 800543a:	e7d1      	b.n	80053e0 <lv_obj_get_style_prop+0x58>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800543c:	68e0      	ldr	r0, [r4, #12]
 800543e:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 8005448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800544c:	429e      	cmp	r6, r3
 800544e:	d114      	bne.n	800547a <lv_obj_get_style_prop+0xf2>
        if((obj_style->style->has_group & group) == 0) continue;
 8005450:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 8005454:	7983      	ldrb	r3, [r0, #6]
 8005456:	421f      	tst	r7, r3
 8005458:	d00f      	beq.n	800547a <lv_obj_get_style_prop+0xf2>
        if((state_act & state_inv)) continue;
 800545a:	ea12 0f09 	tst.w	r2, r9
    return selector & 0xFFFF;
 800545e:	b293      	uxth	r3, r2
        if((state_act & state_inv)) continue;
 8005460:	d10b      	bne.n	800547a <lv_obj_get_style_prop+0xf2>
        if(state_act <= weight) continue;
 8005462:	4543      	cmp	r3, r8
 8005464:	9303      	str	r3, [sp, #12]
 8005466:	dd08      	ble.n	800547a <lv_obj_get_style_prop+0xf2>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8005468:	4659      	mov	r1, fp
 800546a:	aa05      	add	r2, sp, #20
 800546c:	f00b fb4f 	bl	8010b0e <lv_style_get_prop>
        if(found) {
 8005470:	b118      	cbz	r0, 800547a <lv_obj_get_style_prop+0xf2>
            if(state_act == state) {
 8005472:	9b03      	ldr	r3, [sp, #12]
 8005474:	459a      	cmp	sl, r3
 8005476:	d0d5      	beq.n	8005424 <lv_obj_get_style_prop+0x9c>
 8005478:	4698      	mov	r8, r3
    for(; i < obj->style_cnt; i++) {
 800547a:	3501      	adds	r5, #1
 800547c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800547e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005482:	429d      	cmp	r5, r3
 8005484:	d3da      	bcc.n	800543c <lv_obj_get_style_prop+0xb4>
    if(weight >= 0) {
 8005486:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800548a:	d1cb      	bne.n	8005424 <lv_obj_get_style_prop+0x9c>
        if(!inherit) break;
 800548c:	9b01      	ldr	r3, [sp, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d08e      	beq.n	80053b0 <lv_obj_get_style_prop+0x28>
        if(part != LV_PART_MAIN) {
 8005492:	b926      	cbnz	r6, 800549e <lv_obj_get_style_prop+0x116>
        obj = lv_obj_get_parent(obj);
 8005494:	4620      	mov	r0, r4
 8005496:	f000 fd4b 	bl	8005f30 <lv_obj_get_parent>
 800549a:	4604      	mov	r4, r0
 800549c:	e787      	b.n	80053ae <lv_obj_get_style_prop+0x26>
 800549e:	2600      	movs	r6, #0
 80054a0:	e785      	b.n	80053ae <lv_obj_get_style_prop+0x26>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80054a2:	f241 0301 	movw	r3, #4097	; 0x1001
 80054a6:	459b      	cmp	fp, r3
 80054a8:	d003      	beq.n	80054b2 <lv_obj_get_style_prop+0x12a>
 80054aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80054ae:	459b      	cmp	fp, r3
 80054b0:	d180      	bne.n	80053b4 <lv_obj_get_style_prop+0x2c>
            const lv_obj_class_t * cls = obj->class_p;
 80054b2:	f241 0201 	movw	r2, #4097	; 0x1001
 80054b6:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 80054b8:	b91b      	cbnz	r3, 80054c2 <lv_obj_get_style_prop+0x13a>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 80054ba:	4593      	cmp	fp, r2
 80054bc:	d125      	bne.n	800550a <lv_obj_get_style_prop+0x182>
 80054be:	8a9b      	ldrh	r3, [r3, #20]
 80054c0:	deff      	udf	#255	; 0xff
                if(prop == LV_STYLE_WIDTH) {
 80054c2:	4593      	cmp	fp, r2
                    if(cls->width_def != 0) break;
 80054c4:	bf0c      	ite	eq
 80054c6:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 80054ca:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d1a9      	bne.n	8005426 <lv_obj_get_style_prop+0x9e>
                cls = cls->base_class;
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	e7f0      	b.n	80054b8 <lv_obj_get_style_prop+0x130>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 80054d6:	2263      	movs	r2, #99	; 0x63
 80054d8:	4631      	mov	r1, r6
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ff54 	bl	8005388 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 80054e0:	4607      	mov	r7, r0
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d0a4      	beq.n	8005430 <lv_obj_get_style_prop+0xa8>
 80054e6:	6803      	ldr	r3, [r0, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0a1      	beq.n	8005430 <lv_obj_get_style_prop+0xa8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 80054ec:	2264      	movs	r2, #100	; 0x64
 80054ee:	4631      	mov	r1, r6
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7ff ff49 	bl	8005388 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 80054f6:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80054fa:	d099      	beq.n	8005430 <lv_obj_get_style_prop+0xa8>
 80054fc:	4629      	mov	r1, r5
 80054fe:	4638      	mov	r0, r7
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	4798      	blx	r3
 8005504:	f360 050f 	bfi	r5, r0, #0, #16
 8005508:	e792      	b.n	8005430 <lv_obj_get_style_prop+0xa8>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800550a:	8adb      	ldrh	r3, [r3, #22]
 800550c:	e7d8      	b.n	80054c0 <lv_obj_get_style_prop+0x138>

0800550e <trans_anim_start_cb>:
    }

}

static void trans_anim_start_cb(lv_anim_t * a)
{
 800550e:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 8005510:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 8005512:	68a5      	ldr	r5, [r4, #8]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 8005514:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 8005516:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800551a:	4629      	mov	r1, r5
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	f7ff ff33 	bl	8005388 <lv_obj_get_style_prop>

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
    tr->prop = LV_STYLE_PROP_INV;
 8005522:	2300      	movs	r3, #0
    lv_style_prop_t prop_tmp = tr->prop;
 8005524:	88a6      	ldrh	r6, [r4, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 8005526:	4629      	mov	r1, r5
 8005528:	4632      	mov	r2, r6
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800552a:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800552c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	4623      	mov	r3, r4
 8005532:	f7ff fe5b 	bl	80051ec <trans_del>

    tr->prop = prop_tmp;

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8005536:	68a1      	ldr	r1, [r4, #8]
 8005538:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 800553a:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800553c:	f7ff fecb 	bl	80052d6 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8005540:	68e2      	ldr	r2, [r4, #12]
 8005542:	88a1      	ldrh	r1, [r4, #4]
 8005544:	6800      	ldr	r0, [r0, #0]

}
 8005546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800554a:	f00b bb88 	b.w	8010c5e <lv_style_set_prop>
	...

08005550 <lv_obj_refresh_style>:
{
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!style_refr) return;
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <lv_obj_refresh_style+0xc0>)
{
 8005554:	4604      	mov	r4, r0
    if(!style_refr) return;
 8005556:	781b      	ldrb	r3, [r3, #0]
{
 8005558:	460e      	mov	r6, r1
 800555a:	4615      	mov	r5, r2
    if(!style_refr) return;
 800555c:	2b00      	cmp	r3, #0
 800555e:	d056      	beq.n	800560e <lv_obj_refresh_style+0xbe>
    lv_obj_invalidate(obj);
 8005560:	f7fe f90d 	bl	800377e <lv_obj_invalidate>
    if(prop & LV_STYLE_PROP_LAYOUT_REFR) {
 8005564:	04e8      	lsls	r0, r5, #19
    return selector & 0xFF0000;
 8005566:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    if(prop & LV_STYLE_PROP_LAYOUT_REFR) {
 800556a:	d50a      	bpl.n	8005582 <lv_obj_refresh_style+0x32>
        if(part == LV_PART_ANY ||
 800556c:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 8005570:	d127      	bne.n	80055c2 <lv_obj_refresh_style+0x72>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8005572:	2200      	movs	r2, #0
 8005574:	212a      	movs	r1, #42	; 0x2a
 8005576:	4620      	mov	r0, r4
 8005578:	f7fc fb72 	bl	8001c60 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800557c:	4620      	mov	r0, r4
 800557e:	f7fd ff63 	bl	8003448 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY ||
 8005582:	f5b6 2f70 	cmp.w	r6, #983040	; 0xf0000
 8005586:	d000      	beq.n	800558a <lv_obj_refresh_style+0x3a>
 8005588:	bb8e      	cbnz	r6, 80055ee <lv_obj_refresh_style+0x9e>
 800558a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800558e:	429d      	cmp	r5, r3
 8005590:	d035      	beq.n	80055fe <lv_obj_refresh_style+0xae>
 8005592:	04a9      	lsls	r1, r5, #18
 8005594:	d433      	bmi.n	80055fe <lv_obj_refresh_style+0xae>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8005596:	052a      	lsls	r2, r5, #20
 8005598:	d42d      	bmi.n	80055f6 <lv_obj_refresh_style+0xa6>
    lv_obj_invalidate(obj);
 800559a:	4620      	mov	r0, r4
 800559c:	f7fe f8ef 	bl	800377e <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY ||
 80055a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a4:	429d      	cmp	r5, r3
 80055a6:	d004      	beq.n	80055b2 <lv_obj_refresh_style+0x62>
 80055a8:	056b      	lsls	r3, r5, #21
 80055aa:	d530      	bpl.n	800560e <lv_obj_refresh_style+0xbe>
       ((prop & LV_STYLE_PROP_INHERIT) && ((prop & LV_STYLE_PROP_EXT_DRAW) || (prop & LV_STYLE_PROP_LAYOUT_REFR)))) {
 80055ac:	f415 5fc0 	tst.w	r5, #6144	; 0x1800
 80055b0:	d02d      	beq.n	800560e <lv_obj_refresh_style+0xbe>
        if(part != LV_PART_SCROLLBAR) {
 80055b2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80055b6:	d02a      	beq.n	800560e <lv_obj_refresh_style+0xbe>
            refresh_children_style(obj);
 80055b8:	4620      	mov	r0, r4
}
 80055ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            refresh_children_style(obj);
 80055be:	f7ff be6d 	b.w	800529c <refresh_children_style>
        if(part == LV_PART_ANY ||
 80055c2:	2e00      	cmp	r6, #0
 80055c4:	d0d5      	beq.n	8005572 <lv_obj_refresh_style+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80055c6:	f241 0204 	movw	r2, #4100	; 0x1004
 80055ca:	2100      	movs	r1, #0
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff fedb 	bl	8005388 <lv_obj_get_style_prop>
           part == LV_PART_MAIN ||
 80055d2:	f242 77d1 	movw	r7, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80055d6:	b200      	sxth	r0, r0
 80055d8:	42b8      	cmp	r0, r7
 80055da:	d0ca      	beq.n	8005572 <lv_obj_refresh_style+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80055dc:	f241 0201 	movw	r2, #4097	; 0x1001
 80055e0:	2100      	movs	r1, #0
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff fed0 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80055e8:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 80055ea:	42b8      	cmp	r0, r7
 80055ec:	d0c1      	beq.n	8005572 <lv_obj_refresh_style+0x22>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 80055ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f2:	429d      	cmp	r5, r3
 80055f4:	d1cf      	bne.n	8005596 <lv_obj_refresh_style+0x46>
        lv_obj_refresh_ext_draw_size(obj);
 80055f6:	4620      	mov	r0, r4
 80055f8:	f7fd fe39 	bl	800326e <lv_obj_refresh_ext_draw_size>
 80055fc:	e7cd      	b.n	800559a <lv_obj_refresh_style+0x4a>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 fc96 	bl	8005f30 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8005604:	2800      	cmp	r0, #0
 8005606:	d0f2      	beq.n	80055ee <lv_obj_refresh_style+0x9e>
 8005608:	f7fd ff1e 	bl	8003448 <lv_obj_mark_layout_as_dirty>
 800560c:	e7ef      	b.n	80055ee <lv_obj_refresh_style+0x9e>
}
 800560e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005610:	2000000d 	.word	0x2000000d

08005614 <lv_obj_add_style>:
{
 8005614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	4615      	mov	r5, r2
 800561a:	4604      	mov	r4, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800561c:	2700      	movs	r7, #0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800561e:	2300      	movs	r3, #0
{
 8005620:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8005622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005626:	4629      	mov	r1, r5
 8005628:	f7ff fde0 	bl	80051ec <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 800562c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800562e:	68e0      	ldr	r0, [r4, #12]
 8005630:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005634:	42bb      	cmp	r3, r7
 8005636:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800563a:	d829      	bhi.n	8005690 <lv_obj_add_style+0x7c>
    obj->style_cnt++;
 800563c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800563e:	3301      	adds	r3, #1
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	f363 02c8 	bfi	r2, r3, #3, #6
 8005648:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800564a:	00d9      	lsls	r1, r3, #3
 800564c:	f00a fd48 	bl	80100e0 <lv_mem_realloc>
 8005650:	4602      	mov	r2, r0
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8005652:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005654:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8005656:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800565a:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 800565c:	f1a0 0e08 	sub.w	lr, r0, #8
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8005660:	429f      	cmp	r7, r3
 8005662:	d31c      	bcc.n	800569e <lv_obj_add_style+0x8a>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8005664:	eb02 0008 	add.w	r0, r2, r8
 8005668:	2108      	movs	r1, #8
 800566a:	f00a fda1 	bl	80101b0 <lv_memset_00>
    obj->styles[i].style = style;
 800566e:	68e2      	ldr	r2, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8005670:	4629      	mov	r1, r5
    obj->styles[i].style = style;
 8005672:	eb02 0308 	add.w	r3, r2, r8
 8005676:	f842 6008 	str.w	r6, [r2, r8]
    obj->styles[i].selector = selector;
 800567a:	685a      	ldr	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800567c:	4620      	mov	r0, r4
    obj->styles[i].selector = selector;
 800567e:	f365 0217 	bfi	r2, r5, #0, #24
 8005682:	605a      	str	r2, [r3, #4]
}
 8005684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8005688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800568c:	f7ff bf60 	b.w	8005550 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 8005690:	eb00 0208 	add.w	r2, r0, r8
        if(obj->styles[i].is_local) continue;
 8005694:	79d2      	ldrb	r2, [r2, #7]
 8005696:	0792      	lsls	r2, r2, #30
 8005698:	d0d0      	beq.n	800563c <lv_obj_add_style+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 800569a:	3701      	adds	r7, #1
 800569c:	e7ca      	b.n	8005634 <lv_obj_add_style+0x20>
        obj->styles[j] = obj->styles[j - 1];
 800569e:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 80056a2:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 80056a6:	c903      	ldmia	r1, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80056a8:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 80056aa:	e88c 0003 	stmia.w	ip, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80056ae:	e7d7      	b.n	8005660 <lv_obj_add_style+0x4c>

080056b0 <trans_anim_cb>:
{
 80056b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	460b      	mov	r3, r1
 80056b6:	4604      	mov	r4, r0
    for(i = 0; i < obj->style_cnt; i++) {
 80056b8:	2200      	movs	r2, #0
    lv_obj_t * obj = tr->obj;
 80056ba:	6806      	ldr	r6, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 80056bc:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 80056be:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 80056c2:	4291      	cmp	r1, r2
 80056c4:	d942      	bls.n	800574c <trans_anim_cb+0x9c>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 80056c6:	68f1      	ldr	r1, [r6, #12]
 80056c8:	00d7      	lsls	r7, r2, #3
 80056ca:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 80056ce:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80056d2:	0789      	lsls	r1, r1, #30
 80056d4:	d506      	bpl.n	80056e4 <trans_anim_cb+0x34>
 80056d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80056da:	68a0      	ldr	r0, [r4, #8]
 80056dc:	f3c1 0117 	ubfx	r1, r1, #0, #24
 80056e0:	4281      	cmp	r1, r0
 80056e2:	d001      	beq.n	80056e8 <trans_anim_cb+0x38>
    for(i = 0; i < obj->style_cnt; i++) {
 80056e4:	3201      	adds	r2, #1
 80056e6:	e7e9      	b.n	80056bc <trans_anim_cb+0xc>
        switch(tr->prop) {
 80056e8:	88a1      	ldrh	r1, [r4, #4]
 80056ea:	2963      	cmp	r1, #99	; 0x63
 80056ec:	d04b      	beq.n	8005786 <trans_anim_cb+0xd6>
 80056ee:	d830      	bhi.n	8005752 <trans_anim_cb+0xa2>
 80056f0:	2920      	cmp	r1, #32
 80056f2:	d053      	beq.n	800579c <trans_anim_cb+0xec>
 80056f4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80056f8:	b290      	uxth	r0, r2
 80056fa:	2817      	cmp	r0, #23
 80056fc:	d82e      	bhi.n	800575c <trans_anim_cb+0xac>
 80056fe:	2201      	movs	r2, #1
 8005700:	4082      	lsls	r2, r0
 8005702:	484e      	ldr	r0, [pc, #312]	; (800583c <trans_anim_cb+0x18c>)
 8005704:	4202      	tst	r2, r0
 8005706:	d149      	bne.n	800579c <trans_anim_cb+0xec>
 8005708:	f012 0f18 	tst.w	r2, #24
 800570c:	d026      	beq.n	800575c <trans_anim_cb+0xac>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800570e:	2bfe      	cmp	r3, #254	; 0xfe
 8005710:	dc37      	bgt.n	8005782 <trans_anim_cb+0xd2>
 8005712:	68e5      	ldr	r5, [r4, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 8005714:	f8dc 0000 	ldr.w	r0, [ip]
 8005718:	aa01      	add	r2, sp, #4
 800571a:	f00b f9f8 	bl	8010b0e <lv_style_get_prop>
 800571e:	2800      	cmp	r0, #0
 8005720:	f000 8089 	beq.w	8005836 <trans_anim_cb+0x186>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	ebb3 0805 	subs.w	r8, r3, r5
 800572a:	bf18      	it	ne
 800572c:	f04f 0801 	movne.w	r8, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8005730:	68f3      	ldr	r3, [r6, #12]
 8005732:	462a      	mov	r2, r5
 8005734:	88a1      	ldrh	r1, [r4, #4]
 8005736:	59d8      	ldr	r0, [r3, r7]
 8005738:	f00b fa91 	bl	8010c5e <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800573c:	f1b8 0f00 	cmp.w	r8, #0
 8005740:	d004      	beq.n	800574c <trans_anim_cb+0x9c>
 8005742:	88a2      	ldrh	r2, [r4, #4]
 8005744:	68a1      	ldr	r1, [r4, #8]
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	f7ff ff02 	bl	8005550 <lv_obj_refresh_style>
}
 800574c:	b003      	add	sp, #12
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch(tr->prop) {
 8005752:	2968      	cmp	r1, #104	; 0x68
 8005754:	d0db      	beq.n	800570e <trans_anim_cb+0x5e>
 8005756:	d80c      	bhi.n	8005772 <trans_anim_cb+0xc2>
 8005758:	2967      	cmp	r1, #103	; 0x67
 800575a:	d0d8      	beq.n	800570e <trans_anim_cb+0x5e>
                if(v == 0) value_final.num = tr->start_value.num;
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0d8      	beq.n	8005712 <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 8005760:	2bff      	cmp	r3, #255	; 0xff
 8005762:	d00e      	beq.n	8005782 <trans_anim_cb+0xd2>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 8005764:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8005768:	1a15      	subs	r5, r2, r0
 800576a:	435d      	muls	r5, r3
 800576c:	eb00 2525 	add.w	r5, r0, r5, asr #8
 8005770:	e7d0      	b.n	8005714 <trans_anim_cb+0x64>
        switch(tr->prop) {
 8005772:	f240 4257 	movw	r2, #1111	; 0x457
 8005776:	4291      	cmp	r1, r2
 8005778:	d010      	beq.n	800579c <trans_anim_cb+0xec>
 800577a:	f241 4259 	movw	r2, #5209	; 0x1459
 800577e:	4291      	cmp	r1, r2
 8005780:	e7eb      	b.n	800575a <trans_anim_cb+0xaa>
                else value_final.ptr = tr->end_value.ptr;
 8005782:	6925      	ldr	r5, [r4, #16]
 8005784:	e7c6      	b.n	8005714 <trans_anim_cb+0x64>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8005786:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 800578a:	b90d      	cbnz	r5, 8005790 <trans_anim_cb+0xe0>
 800578c:	4615      	mov	r5, r2
 800578e:	e7c1      	b.n	8005714 <trans_anim_cb+0x64>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8005790:	2a00      	cmp	r2, #0
 8005792:	d0bf      	beq.n	8005714 <trans_anim_cb+0x64>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 8005794:	2b7f      	cmp	r3, #127	; 0x7f
 8005796:	bfc8      	it	gt
 8005798:	4615      	movgt	r5, r2
 800579a:	e7bb      	b.n	8005714 <trans_anim_cb+0x64>
                if(v <= 0) value_final.color = tr->start_value.color;
 800579c:	2b00      	cmp	r3, #0
 800579e:	dc04      	bgt.n	80057aa <trans_anim_cb+0xfa>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
 80057a2:	2500      	movs	r5, #0
 80057a4:	f363 050f 	bfi	r5, r3, #0, #16
 80057a8:	e7b4      	b.n	8005714 <trans_anim_cb+0x64>
 80057aa:	2bfe      	cmp	r3, #254	; 0xfe
 80057ac:	dd01      	ble.n	80057b2 <trans_anim_cb+0x102>
 80057ae:	8a23      	ldrh	r3, [r4, #16]
 80057b0:	e7f7      	b.n	80057a2 <trans_anim_cb+0xf2>
    ret.full = (uint16_t)((result >> 16) | result);
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80057b2:	7c20      	ldrb	r0, [r4, #16]
 80057b4:	7c65      	ldrb	r5, [r4, #17]
 80057b6:	f894 a00c 	ldrb.w	sl, [r4, #12]
 80057ba:	f894 900d 	ldrb.w	r9, [r4, #13]
 80057be:	f000 0e07 	and.w	lr, r0, #7
 80057c2:	096a      	lsrs	r2, r5, #5
 80057c4:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 80057c8:	f00a 0b07 	and.w	fp, sl, #7
 80057cc:	ea4f 1e59 	mov.w	lr, r9, lsr #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80057d0:	f1c3 08ff 	rsb	r8, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80057d4:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 80057d8:	fb08 fe0e 	mul.w	lr, r8, lr
 80057dc:	fb03 e202 	mla	r2, r3, r2, lr
 80057e0:	f248 0e81 	movw	lr, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80057e4:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80057e8:	f009 091f 	and.w	r9, r9, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80057ec:	fb08 fa0a 	mul.w	sl, r8, sl
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80057f0:	fb08 f809 	mul.w	r8, r8, r9
 80057f4:	f005 051f 	and.w	r5, r5, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80057f8:	08c0      	lsrs	r0, r0, #3
 80057fa:	fb03 a000 	mla	r0, r3, r0, sl
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80057fe:	fb03 8305 	mla	r3, r3, r5, r8
 8005802:	2500      	movs	r5, #0
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005804:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005806:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005808:	fb0e f202 	mul.w	r2, lr, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800580c:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005810:	3380      	adds	r3, #128	; 0x80
 8005812:	fb0e f303 	mul.w	r3, lr, r3
 8005816:	f3c2 6a82 	ubfx	sl, r2, #26, #3
 800581a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 800581e:	ea4a 00c0 	orr.w	r0, sl, r0, lsl #3
 8005822:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8005826:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800582a:	0dd2      	lsrs	r2, r2, #23
 800582c:	ea40 3042 	orr.w	r0, r0, r2, lsl #13
 8005830:	f360 050f 	bfi	r5, r0, #0, #16
 8005834:	e76e      	b.n	8005714 <trans_anim_cb+0x64>
        bool refr = true;
 8005836:	f04f 0801 	mov.w	r8, #1
 800583a:	e779      	b.n	8005730 <trans_anim_cb+0x80>
 800583c:	00900801 	.word	0x00900801

08005840 <lv_obj_remove_style>:
{
 8005840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	4604      	mov	r4, r0
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 8005846:	4688      	mov	r8, r1
    return selector & 0xFFFF;
 8005848:	fa1f fa82 	uxth.w	sl, r2
    return selector & 0xFF0000;
 800584c:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 8005850:	b1d1      	cbz	r1, 8005888 <lv_obj_remove_style+0x48>
 8005852:	79ce      	ldrb	r6, [r1, #7]
 8005854:	3e00      	subs	r6, #0
 8005856:	bf18      	it	ne
 8005858:	2601      	movne	r6, #1
 800585a:	4276      	negs	r6, r6
 800585c:	b2b6      	uxth	r6, r6
    bool deleted = false;
 800585e:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 8005860:	f64f 7bff 	movw	fp, #65535	; 0xffff
    uint32_t i = 0;
 8005864:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 8005866:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005868:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800586c:	42bb      	cmp	r3, r7
 800586e:	d80e      	bhi.n	800588e <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8005870:	2a00      	cmp	r2, #0
 8005872:	d064      	beq.n	800593e <lv_obj_remove_style+0xfe>
 8005874:	2e00      	cmp	r6, #0
 8005876:	d062      	beq.n	800593e <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 8005878:	4629      	mov	r1, r5
 800587a:	4620      	mov	r0, r4
}
 800587c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 8005880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005884:	f7ff be64 	b.w	8005550 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8005888:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800588c:	e7e7      	b.n	800585e <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800588e:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 8005890:	45da      	cmp	sl, fp
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8005892:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 8005896:	684b      	ldr	r3, [r1, #4]
 8005898:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800589c:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 80058a0:	d003      	beq.n	80058aa <lv_obj_remove_style+0x6a>
 80058a2:	fa1f fc83 	uxth.w	ip, r3
 80058a6:	45d4      	cmp	ip, sl
 80058a8:	d10d      	bne.n	80058c6 <lv_obj_remove_style+0x86>
 80058aa:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 80058ae:	d003      	beq.n	80058b8 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 80058b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	d106      	bne.n	80058c6 <lv_obj_remove_style+0x86>
 80058b8:	f1b8 0f00 	cmp.w	r8, #0
 80058bc:	d005      	beq.n	80058ca <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style)) {
 80058be:	f850 3009 	ldr.w	r3, [r0, r9]
 80058c2:	4543      	cmp	r3, r8
 80058c4:	d001      	beq.n	80058ca <lv_obj_remove_style+0x8a>
            i++;
 80058c6:	3701      	adds	r7, #1
            continue;
 80058c8:	e7cd      	b.n	8005866 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 80058ca:	79cb      	ldrb	r3, [r1, #7]
 80058cc:	0799      	lsls	r1, r3, #30
 80058ce:	d506      	bpl.n	80058de <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 80058d0:	2300      	movs	r3, #0
 80058d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d6:	4629      	mov	r1, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff fc87 	bl	80051ec <trans_del>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 80058de:	68e3      	ldr	r3, [r4, #12]
 80058e0:	eb03 0209 	add.w	r2, r3, r9
 80058e4:	79d2      	ldrb	r2, [r2, #7]
 80058e6:	0792      	lsls	r2, r2, #30
 80058e8:	d00c      	beq.n	8005904 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 80058ea:	f853 0009 	ldr.w	r0, [r3, r9]
 80058ee:	f00b f894 	bl	8010a1a <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	f853 0009 	ldr.w	r0, [r3, r9]
 80058f8:	f00a fa56 	bl	800fda8 <lv_mem_free>
            obj->styles[i].style = NULL;
 80058fc:	2200      	movs	r2, #0
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	f843 2009 	str.w	r2, [r3, r9]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8005904:	463a      	mov	r2, r7
 8005906:	e006      	b.n	8005916 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 8005908:	3201      	adds	r2, #1
 800590a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800590e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005912:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8005916:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8005918:	68e0      	ldr	r0, [r4, #12]
 800591a:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 800591e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8005922:	4594      	cmp	ip, r2
 8005924:	d8f0      	bhi.n	8005908 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 8005926:	313f      	adds	r1, #63	; 0x3f
 8005928:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800592c:	f361 03c8 	bfi	r3, r1, #3, #6
 8005930:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005932:	00c9      	lsls	r1, r1, #3
 8005934:	f00a fbd4 	bl	80100e0 <lv_mem_realloc>
        deleted = true;
 8005938:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800593a:	60e0      	str	r0, [r4, #12]
        deleted = true;
 800593c:	e793      	b.n	8005866 <lv_obj_remove_style+0x26>
}
 800593e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005944 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8005948:	6804      	ldr	r4, [r0, #0]
    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800594a:	4827      	ldr	r0, [pc, #156]	; (80059e8 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 800594c:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 800594e:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8005950:	f00a f995 	bl	800fc7e <_lv_ll_get_head>
 8005954:	4601      	mov	r1, r0
 8005956:	4e24      	ldr	r6, [pc, #144]	; (80059e8 <trans_anim_ready_cb+0xa4>)
 8005958:	b931      	cbnz	r1, 8005968 <trans_anim_ready_cb+0x24>
        }
    }

    if(!running) {
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800595a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 800595c:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8005960:	428a      	cmp	r2, r1
 8005962:	d814      	bhi.n	800598e <trans_anim_ready_cb+0x4a>
                }
                break;
            }
        }
    }
}
 8005964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8005968:	42a1      	cmp	r1, r4
 800596a:	d00b      	beq.n	8005984 <trans_anim_ready_cb+0x40>
 800596c:	680a      	ldr	r2, [r1, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d107      	bne.n	8005984 <trans_anim_ready_cb+0x40>
 8005974:	688a      	ldr	r2, [r1, #8]
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d103      	bne.n	8005984 <trans_anim_ready_cb+0x40>
 800597c:	888a      	ldrh	r2, [r1, #4]
 800597e:	88a3      	ldrh	r3, [r4, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d0ef      	beq.n	8005964 <trans_anim_ready_cb+0x20>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8005984:	4630      	mov	r0, r6
 8005986:	f00a f980 	bl	800fc8a <_lv_ll_get_next>
 800598a:	4601      	mov	r1, r0
 800598c:	e7e4      	b.n	8005958 <trans_anim_ready_cb+0x14>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800598e:	68eb      	ldr	r3, [r5, #12]
 8005990:	00ce      	lsls	r6, r1, #3
 8005992:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005996:	79d8      	ldrb	r0, [r3, #7]
 8005998:	0780      	lsls	r0, r0, #30
 800599a:	d523      	bpl.n	80059e4 <trans_anim_ready_cb+0xa0>
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68a0      	ldr	r0, [r4, #8]
 80059a0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80059a4:	4283      	cmp	r3, r0
 80059a6:	d11d      	bne.n	80059e4 <trans_anim_ready_cb+0xa0>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80059a8:	4621      	mov	r1, r4
 80059aa:	480f      	ldr	r0, [pc, #60]	; (80059e8 <trans_anim_ready_cb+0xa4>)
 80059ac:	f00a f93e 	bl	800fc2c <_lv_ll_remove>
                lv_mem_free(tr);
 80059b0:	4620      	mov	r0, r4
 80059b2:	f00a f9f9 	bl	800fda8 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 80059b6:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 80059b8:	4639      	mov	r1, r7
 80059ba:	59a0      	ldr	r0, [r4, r6]
 80059bc:	f00b f848 	bl	8010a50 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 80059c0:	68eb      	ldr	r3, [r5, #12]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 80059c2:	eb04 0806 	add.w	r8, r4, r6
                if(lv_style_is_empty(obj->styles[i].style)) {
 80059c6:	5998      	ldr	r0, [r3, r6]
 80059c8:	f00b f93c 	bl	8010c44 <lv_style_is_empty>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0c9      	beq.n	8005964 <trans_anim_ready_cb+0x20>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 80059d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80059d4:	4628      	mov	r0, r5
 80059d6:	59a1      	ldr	r1, [r4, r6]
 80059d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 80059dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 80059e0:	f7ff bf2e 	b.w	8005840 <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 80059e4:	3101      	adds	r1, #1
 80059e6:	e7bb      	b.n	8005960 <trans_anim_ready_cb+0x1c>
 80059e8:	20004714 	.word	0x20004714

080059ec <lv_obj_set_local_style_prop>:
{
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	461e      	mov	r6, r3
 80059f2:	4690      	mov	r8, r2
    for(i = 0; i < obj->style_cnt; i++) {
 80059f4:	2300      	movs	r3, #0
{
 80059f6:	460f      	mov	r7, r1
    for(i = 0; i < obj->style_cnt; i++) {
 80059f8:	8c41      	ldrh	r1, [r0, #34]	; 0x22
{
 80059fa:	4605      	mov	r5, r0
 80059fc:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 80059fe:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 8005a02:	428b      	cmp	r3, r1
 8005a04:	d30d      	bcc.n	8005a22 <lv_obj_set_local_style_prop+0x36>
    obj->style_cnt++;
 8005a06:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8005a08:	3101      	adds	r1, #1
 8005a0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005a0e:	f361 03c8 	bfi	r3, r1, #3, #6
 8005a12:	846b      	strh	r3, [r5, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8005a14:	00c9      	lsls	r1, r1, #3
 8005a16:	f00a fb63 	bl	80100e0 <lv_mem_realloc>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	60e8      	str	r0, [r5, #12]
    LV_ASSERT_MALLOC(obj->styles);
 8005a1e:	b9c0      	cbnz	r0, 8005a52 <lv_obj_set_local_style_prop+0x66>
 8005a20:	e7fe      	b.n	8005a20 <lv_obj_set_local_style_prop+0x34>
        if(obj->styles[i].is_local &&
 8005a22:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8005a26:	79d4      	ldrb	r4, [r2, #7]
 8005a28:	07e4      	lsls	r4, r4, #31
 8005a2a:	d510      	bpl.n	8005a4e <lv_obj_set_local_style_prop+0x62>
           obj->styles[i].selector == selector) {
 8005a2c:	6854      	ldr	r4, [r2, #4]
 8005a2e:	f3c4 0417 	ubfx	r4, r4, #0, #24
        if(obj->styles[i].is_local &&
 8005a32:	42a6      	cmp	r6, r4
 8005a34:	d10b      	bne.n	8005a4e <lv_obj_set_local_style_prop+0x62>
            return obj->styles[i].style;
 8005a36:	6810      	ldr	r0, [r2, #0]
    lv_style_set_prop(style, prop, value);
 8005a38:	4642      	mov	r2, r8
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f00b f90f 	bl	8010c5e <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 8005a40:	463a      	mov	r2, r7
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
}
 8005a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_refresh_style(obj, selector, prop);
 8005a4a:	f7ff bd81 	b.w	8005550 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 8005a4e:	3301      	adds	r3, #1
 8005a50:	e7d7      	b.n	8005a02 <lv_obj_set_local_style_prop+0x16>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005a52:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
 8005a54:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8005a58:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8005a5c:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 8005a60:	3c02      	subs	r4, #2
 8005a62:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005a66:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 8005a6a:	f1ba 0f00 	cmp.w	sl, #0
 8005a6e:	d11d      	bne.n	8005aac <lv_obj_set_local_style_prop+0xc0>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8005a70:	eb02 0009 	add.w	r0, r2, r9
 8005a74:	2108      	movs	r1, #8
 8005a76:	f00a fb9b 	bl	80101b0 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 8005a7a:	2008      	movs	r0, #8
 8005a7c:	68ec      	ldr	r4, [r5, #12]
 8005a7e:	f00a fb19 	bl	80100b4 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 8005a82:	68eb      	ldr	r3, [r5, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 8005a84:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
    lv_style_init(obj->styles[i].style);
 8005a88:	f853 003a 	ldr.w	r0, [r3, sl, lsl #3]
 8005a8c:	f00a ffc2 	bl	8010a14 <lv_style_init>
    obj->styles[i].is_local = 1;
 8005a90:	68e9      	ldr	r1, [r5, #12]
 8005a92:	eb01 0309 	add.w	r3, r1, r9
 8005a96:	79da      	ldrb	r2, [r3, #7]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	f366 0217 	bfi	r2, r6, #0, #24
 8005aa4:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 8005aa6:	f851 003a 	ldr.w	r0, [r1, sl, lsl #3]
 8005aaa:	e7c5      	b.n	8005a38 <lv_obj_set_local_style_prop+0x4c>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8005aac:	79e3      	ldrb	r3, [r4, #7]
 8005aae:	3c08      	subs	r4, #8
 8005ab0:	079b      	lsls	r3, r3, #30
 8005ab2:	d1dd      	bne.n	8005a70 <lv_obj_set_local_style_prop+0x84>
        obj->styles[i] = obj->styles[i - 1];
 8005ab4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005ab8:	eb02 0309 	add.w	r3, r2, r9
 8005abc:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8005ac0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ac4:	e7cf      	b.n	8005a66 <lv_obj_set_local_style_prop+0x7a>

08005ac6 <lv_obj_get_local_style_prop>:
{
 8005ac6:	b4f0      	push	{r4, r5, r6, r7}
    for(i = 0; i < obj->style_cnt; i++) {
 8005ac8:	2500      	movs	r5, #0
 8005aca:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 8005acc:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 8005ad0:	42ae      	cmp	r6, r5
 8005ad2:	d802      	bhi.n	8005ada <lv_obj_get_local_style_prop+0x14>
}
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ad8:	4770      	bx	lr
        if(obj->styles[i].is_local &&
 8005ada:	68c4      	ldr	r4, [r0, #12]
 8005adc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ae0:	79e7      	ldrb	r7, [r4, #7]
 8005ae2:	07ff      	lsls	r7, r7, #31
 8005ae4:	d508      	bpl.n	8005af8 <lv_obj_get_local_style_prop+0x32>
           obj->styles[i].selector ==  selector) {
 8005ae6:	6867      	ldr	r7, [r4, #4]
 8005ae8:	f3c7 0717 	ubfx	r7, r7, #0, #24
        if(obj->styles[i].is_local &&
 8005aec:	429f      	cmp	r7, r3
 8005aee:	d103      	bne.n	8005af8 <lv_obj_get_local_style_prop+0x32>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8005af0:	6820      	ldr	r0, [r4, #0]
}
 8005af2:	bcf0      	pop	{r4, r5, r6, r7}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8005af4:	f00b b80b 	b.w	8010b0e <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 8005af8:	3501      	adds	r5, #1
 8005afa:	e7e9      	b.n	8005ad0 <lv_obj_get_local_style_prop+0xa>

08005afc <_lv_obj_style_create_transition>:
{
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	461f      	mov	r7, r3
    obj->skip_trans = 1;
 8005b02:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 8005b06:	b090      	sub	sp, #64	; 0x40
    obj->skip_trans = 1;
 8005b08:	f043 0304 	orr.w	r3, r3, #4
{
 8005b0c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    obj->skip_trans = 1;
 8005b0e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    obj->state = prev_state;
 8005b12:	8402      	strh	r2, [r0, #32]
{
 8005b14:	4691      	mov	r9, r2
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b16:	892a      	ldrh	r2, [r5, #8]
{
 8005b18:	4604      	mov	r4, r0
 8005b1a:	4688      	mov	r8, r1
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b1c:	f7ff fc34 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b20:	4641      	mov	r1, r8
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b22:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b24:	892a      	ldrh	r2, [r5, #8]
 8005b26:	4620      	mov	r0, r4
    obj->state = new_state;
 8005b28:	8427      	strh	r7, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b2a:	f7ff fc2d 	bl	8005388 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 8005b2e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8005b32:	4582      	cmp	sl, r0
    obj->skip_trans = 0;
 8005b34:	f36f 0382 	bfc	r3, #2, #1
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b38:	4606      	mov	r6, r0
    obj->skip_trans = 0;
 8005b3a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 8005b3e:	d06c      	beq.n	8005c1a <_lv_obj_style_create_transition+0x11e>
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b40:	892a      	ldrh	r2, [r5, #8]
 8005b42:	4641      	mov	r1, r8
    obj->state = prev_state;
 8005b44:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7ff fc1d 	bl	8005388 <lv_obj_get_style_prop>
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8005b4e:	4641      	mov	r1, r8
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8005b50:	4681      	mov	r9, r0
    obj->state = new_state;
 8005b52:	8427      	strh	r7, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff fbbe 	bl	80052d6 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 8005b5a:	464a      	mov	r2, r9
 8005b5c:	8929      	ldrh	r1, [r5, #8]
 8005b5e:	6800      	ldr	r0, [r0, #0]
 8005b60:	f00b f87d 	bl	8010c5e <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 8005b64:	892b      	ldrh	r3, [r5, #8]
 8005b66:	2b60      	cmp	r3, #96	; 0x60
 8005b68:	d11e      	bne.n	8005ba8 <_lv_obj_style_create_transition+0xac>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 8005b6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005b6e:	4599      	cmp	r9, r3
 8005b70:	d001      	beq.n	8005b76 <_lv_obj_style_create_transition+0x7a>
 8005b72:	429e      	cmp	r6, r3
 8005b74:	d118      	bne.n	8005ba8 <_lv_obj_style_create_transition+0xac>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fd fcb7 	bl	80034ea <lv_obj_get_width>
 8005b7c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005b80:	f340 074f 	sbfx	r7, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7fd fcb0 	bl	80034ea <lv_obj_get_width>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8005b8a:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8005b8e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8005b92:	4591      	cmp	r9, r2
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8005b94:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8005b98:	d112      	bne.n	8005bc0 <_lv_obj_style_create_transition+0xc4>
 8005b9a:	429f      	cmp	r7, r3
 8005b9c:	da0a      	bge.n	8005bb4 <_lv_obj_style_create_transition+0xb8>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8005b9e:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8005ba0:	f107 0901 	add.w	r9, r7, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8005ba4:	d100      	bne.n	8005ba8 <_lv_obj_style_create_transition+0xac>
 8005ba6:	1c7e      	adds	r6, r7, #1
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8005ba8:	481d      	ldr	r0, [pc, #116]	; (8005c20 <_lv_obj_style_create_transition+0x124>)
 8005baa:	f00a f808 	bl	800fbbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 8005bae:	4607      	mov	r7, r0
 8005bb0:	b958      	cbnz	r0, 8005bca <_lv_obj_style_create_transition+0xce>
 8005bb2:	e7fe      	b.n	8005bb2 <_lv_obj_style_create_transition+0xb6>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8005bb4:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8005bb6:	f103 0901 	add.w	r9, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8005bba:	d1f5      	bne.n	8005ba8 <_lv_obj_style_create_transition+0xac>
 8005bbc:	1c5e      	adds	r6, r3, #1
 8005bbe:	e7f3      	b.n	8005ba8 <_lv_obj_style_create_transition+0xac>
 8005bc0:	4296      	cmp	r6, r2
 8005bc2:	d1f1      	bne.n	8005ba8 <_lv_obj_style_create_transition+0xac>
 8005bc4:	429f      	cmp	r7, r3
 8005bc6:	dbee      	blt.n	8005ba6 <_lv_obj_style_create_transition+0xaa>
 8005bc8:	e7f8      	b.n	8005bbc <_lv_obj_style_create_transition+0xc0>
        tr->prop = tr_dsc->prop;
 8005bca:	892b      	ldrh	r3, [r5, #8]
    tr->end_value = v2;
 8005bcc:	e9c0 9603 	strd	r9, r6, [r0, #12]
        tr->prop = tr_dsc->prop;
 8005bd0:	8083      	strh	r3, [r0, #4]
        tr->obj = obj;
 8005bd2:	6004      	str	r4, [r0, #0]
        tr->selector = part;
 8005bd4:	f8c0 8008 	str.w	r8, [r0, #8]
        lv_anim_init(&a);
 8005bd8:	4668      	mov	r0, sp
 8005bda:	f009 fc61 	bl	800f4a0 <lv_anim_init>
    a->end_value = end;
 8005bde:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8005be0:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <_lv_obj_style_create_transition+0x128>)
    a->end_value = end;
 8005be2:	9209      	str	r2, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8005be4:	9301      	str	r3, [sp, #4]
    a->start_cb = start_cb;
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <_lv_obj_style_create_transition+0x12c>)
    a->time = duration;
 8005be8:	882a      	ldrh	r2, [r5, #0]
    a->start_cb = start_cb;
 8005bea:	9302      	str	r3, [sp, #8]
    a->ready_cb = ready_cb;
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <_lv_obj_style_create_transition+0x130>)
    a->time = duration;
 8005bee:	920a      	str	r2, [sp, #40]	; 0x28
    a->ready_cb = ready_cb;
 8005bf0:	9303      	str	r3, [sp, #12]
    a->start_value = start;
 8005bf2:	2300      	movs	r3, #0
    a->act_time = -(int32_t)(delay);
 8005bf4:	886a      	ldrh	r2, [r5, #2]
    a->current_value = start;
 8005bf6:	e9cd 3307 	strd	r3, r3, [sp, #28]
    a->act_time = -(int32_t)(delay);
 8005bfa:	4252      	negs	r2, r2
 8005bfc:	920b      	str	r2, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 8005bfe:	68ea      	ldr	r2, [r5, #12]
        lv_anim_start(&a);
 8005c00:	4668      	mov	r0, sp
 8005c02:	9206      	str	r2, [sp, #24]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 8005c04:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    a->var = var;
 8005c08:	9700      	str	r7, [sp, #0]
    a->early_apply = en;
 8005c0a:	f363 0200 	bfi	r2, r3, #0, #1
        a.user_data = tr_dsc->user_data;
 8005c0e:	692b      	ldr	r3, [r5, #16]
 8005c10:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8005c14:	9305      	str	r3, [sp, #20]
        lv_anim_start(&a);
 8005c16:	f009 fc89 	bl	800f52c <lv_anim_start>
}
 8005c1a:	b010      	add	sp, #64	; 0x40
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	20004714 	.word	0x20004714
 8005c24:	080056b1 	.word	0x080056b1
 8005c28:	0800550f 	.word	0x0800550f
 8005c2c:	08005945 	.word	0x08005945

08005c30 <_lv_obj_style_state_compare>:
{
 8005c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8005c34:	2500      	movs	r5, #0
{
 8005c36:	4607      	mov	r7, r0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 8005c38:	462e      	mov	r6, r5
        bool valid1 = state_act & (~state1) ? false : true;
 8005c3a:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 8005c3e:	ea6f 0902 	mvn.w	r9, r2
    for(i = 0; i < obj->style_cnt; i++) {
 8005c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c44:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	f240 80ad 	bls.w	8005da8 <_lv_obj_style_state_compare+0x178>
        if(obj->styles[i].is_trans) continue;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	00e9      	lsls	r1, r5, #3
 8005c52:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8005c56:	79d0      	ldrb	r0, [r2, #7]
 8005c58:	0784      	lsls	r4, r0, #30
 8005c5a:	f100 80a2 	bmi.w	8005da2 <_lv_obj_style_state_compare+0x172>
        bool valid1 = state_act & (~state1) ? false : true;
 8005c5e:	8892      	ldrh	r2, [r2, #4]
 8005c60:	ea18 0f02 	tst.w	r8, r2
 8005c64:	bf0c      	ite	eq
 8005c66:	2001      	moveq	r0, #1
 8005c68:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 8005c6a:	ea19 0f02 	tst.w	r9, r2
        if(valid1 != valid2) {
 8005c6e:	bf0c      	ite	eq
 8005c70:	2201      	moveq	r2, #1
 8005c72:	2200      	movne	r2, #0
 8005c74:	4290      	cmp	r0, r2
 8005c76:	f000 8094 	beq.w	8005da2 <_lv_obj_style_state_compare+0x172>
            lv_style_t * style = obj->styles[i].style;
 8005c7a:	585c      	ldr	r4, [r3, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 8005c7c:	aa01      	add	r2, sp, #4
 8005c7e:	f641 0110 	movw	r1, #6160	; 0x1810
 8005c82:	4620      	mov	r0, r4
 8005c84:	f00a ff43 	bl	8010b0e <lv_style_get_prop>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	f040 808c 	bne.w	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 8005c8e:	f641 0111 	movw	r1, #6161	; 0x1811
 8005c92:	4620      	mov	r0, r4
 8005c94:	aa01      	add	r2, sp, #4
 8005c96:	f00a ff3a 	bl	8010b0e <lv_style_get_prop>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f040 8083 	bne.w	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 8005ca0:	f641 0112 	movw	r1, #6162	; 0x1812
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	aa01      	add	r2, sp, #4
 8005ca8:	f00a ff31 	bl	8010b0e <lv_style_get_prop>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d17a      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 8005cb0:	f641 0113 	movw	r1, #6163	; 0x1813
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	aa01      	add	r2, sp, #4
 8005cb8:	f00a ff29 	bl	8010b0e <lv_style_get_prop>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d172      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8005cc0:	f641 0115 	movw	r1, #6165	; 0x1815
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	aa01      	add	r2, sp, #4
 8005cc8:	f00a ff21 	bl	8010b0e <lv_style_get_prop>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d16a      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 8005cd0:	f641 0114 	movw	r1, #6164	; 0x1814
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	aa01      	add	r2, sp, #4
 8005cd8:	f00a ff19 	bl	8010b0e <lv_style_get_prop>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d162      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8005ce0:	f241 0169 	movw	r1, #4201	; 0x1069
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	aa01      	add	r2, sp, #4
 8005ce8:	f00a ff11 	bl	8010b0e <lv_style_get_prop>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d15a      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8005cf0:	f243 010c 	movw	r1, #12300	; 0x300c
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	aa01      	add	r2, sp, #4
 8005cf8:	f00a ff09 	bl	8010b0e <lv_style_get_prop>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d152      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 8005d00:	f243 010d 	movw	r1, #12301	; 0x300d
 8005d04:	4620      	mov	r0, r4
 8005d06:	aa01      	add	r2, sp, #4
 8005d08:	f00a ff01 	bl	8010b0e <lv_style_get_prop>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d14a      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 8005d10:	f241 0101 	movw	r1, #4097	; 0x1001
 8005d14:	4620      	mov	r0, r4
 8005d16:	aa01      	add	r2, sp, #4
 8005d18:	f00a fef9 	bl	8010b0e <lv_style_get_prop>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d142      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 8005d20:	f241 0104 	movw	r1, #4100	; 0x1004
 8005d24:	4620      	mov	r0, r4
 8005d26:	aa01      	add	r2, sp, #4
 8005d28:	f00a fef1 	bl	8010b0e <lv_style_get_prop>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d13a      	bne.n	8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 8005d30:	f241 0102 	movw	r1, #4098	; 0x1002
 8005d34:	4620      	mov	r0, r4
 8005d36:	aa01      	add	r2, sp, #4
 8005d38:	f00a fee9 	bl	8010b0e <lv_style_get_prop>
 8005d3c:	bb98      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 8005d3e:	f241 0103 	movw	r1, #4099	; 0x1003
 8005d42:	4620      	mov	r0, r4
 8005d44:	aa01      	add	r2, sp, #4
 8005d46:	f00a fee2 	bl	8010b0e <lv_style_get_prop>
 8005d4a:	bb60      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 8005d4c:	f241 0105 	movw	r1, #4101	; 0x1005
 8005d50:	4620      	mov	r0, r4
 8005d52:	aa01      	add	r2, sp, #4
 8005d54:	f00a fedb 	bl	8010b0e <lv_style_get_prop>
 8005d58:	bb28      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 8005d5a:	f241 0106 	movw	r1, #4102	; 0x1006
 8005d5e:	4620      	mov	r0, r4
 8005d60:	aa01      	add	r2, sp, #4
 8005d62:	f00a fed4 	bl	8010b0e <lv_style_get_prop>
 8005d66:	b9f0      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 8005d68:	f241 0132 	movw	r1, #4146	; 0x1032
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	aa01      	add	r2, sp, #4
 8005d70:	f00a fecd 	bl	8010b0e <lv_style_get_prop>
 8005d74:	b9b8      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 8005d76:	f643 010f 	movw	r1, #14351	; 0x380f
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	aa01      	add	r2, sp, #4
 8005d7e:	f00a fec6 	bl	8010b0e <lv_style_get_prop>
 8005d82:	b980      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 8005d84:	f643 010e 	movw	r1, #14350	; 0x380e
 8005d88:	4620      	mov	r0, r4
 8005d8a:	aa01      	add	r2, sp, #4
 8005d8c:	f00a febf 	bl	8010b0e <lv_style_get_prop>
 8005d90:	b948      	cbnz	r0, 8005da6 <_lv_obj_style_state_compare+0x176>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005d92:	f640 010a 	movw	r1, #2058	; 0x80a
 8005d96:	4620      	mov	r0, r4
 8005d98:	aa01      	add	r2, sp, #4
 8005d9a:	f00a feb8 	bl	8010b0e <lv_style_get_prop>
 8005d9e:	b138      	cbz	r0, 8005db0 <_lv_obj_style_state_compare+0x180>
 8005da0:	2602      	movs	r6, #2
    for(i = 0; i < obj->style_cnt; i++) {
 8005da2:	3501      	adds	r5, #1
 8005da4:	e74d      	b.n	8005c42 <_lv_obj_style_state_compare+0x12>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 8005da6:	2603      	movs	r6, #3
}
 8005da8:	4630      	mov	r0, r6
 8005daa:	b003      	add	sp, #12
 8005dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005db0:	f640 010b 	movw	r1, #2059	; 0x80b
 8005db4:	4620      	mov	r0, r4
 8005db6:	aa01      	add	r2, sp, #4
 8005db8:	f00a fea9 	bl	8010b0e <lv_style_get_prop>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d1ef      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005dc0:	f643 010f 	movw	r1, #14351	; 0x380f
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	aa01      	add	r2, sp, #4
 8005dc8:	f00a fea1 	bl	8010b0e <lv_style_get_prop>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1e7      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005dd0:	f643 010e 	movw	r1, #14350	; 0x380e
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	aa01      	add	r2, sp, #4
 8005dd8:	f00a fe99 	bl	8010b0e <lv_style_get_prop>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1df      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005de0:	f640 013c 	movw	r1, #2108	; 0x83c
 8005de4:	4620      	mov	r0, r4
 8005de6:	aa01      	add	r2, sp, #4
 8005de8:	f00a fe91 	bl	8010b0e <lv_style_get_prop>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d1d7      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005df0:	f640 013d 	movw	r1, #2109	; 0x83d
 8005df4:	4620      	mov	r0, r4
 8005df6:	aa01      	add	r2, sp, #4
 8005df8:	f00a fe89 	bl	8010b0e <lv_style_get_prop>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d1cf      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e00:	f640 013a 	movw	r1, #2106	; 0x83a
 8005e04:	4620      	mov	r0, r4
 8005e06:	aa01      	add	r2, sp, #4
 8005e08:	f00a fe81 	bl	8010b0e <lv_style_get_prop>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1c7      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e10:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8005e14:	4620      	mov	r0, r4
 8005e16:	aa01      	add	r2, sp, #4
 8005e18:	f00a fe79 	bl	8010b0e <lv_style_get_prop>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d1bf      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e20:	f640 0145 	movw	r1, #2117	; 0x845
 8005e24:	4620      	mov	r0, r4
 8005e26:	aa01      	add	r2, sp, #4
 8005e28:	f00a fe71 	bl	8010b0e <lv_style_get_prop>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1b7      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e30:	f640 0141 	movw	r1, #2113	; 0x841
 8005e34:	4620      	mov	r0, r4
 8005e36:	aa01      	add	r2, sp, #4
 8005e38:	f00a fe69 	bl	8010b0e <lv_style_get_prop>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1af      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e40:	f640 0142 	movw	r1, #2114	; 0x842
 8005e44:	4620      	mov	r0, r4
 8005e46:	aa01      	add	r2, sp, #4
 8005e48:	f00a fe61 	bl	8010b0e <lv_style_get_prop>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d1a7      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e50:	f640 0143 	movw	r1, #2115	; 0x843
 8005e54:	4620      	mov	r0, r4
 8005e56:	aa01      	add	r2, sp, #4
 8005e58:	f00a fe59 	bl	8010b0e <lv_style_get_prop>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d19f      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8005e60:	f640 0149 	movw	r1, #2121	; 0x849
 8005e64:	4620      	mov	r0, r4
 8005e66:	aa01      	add	r2, sp, #4
 8005e68:	f00a fe51 	bl	8010b0e <lv_style_get_prop>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d197      	bne.n	8005da0 <_lv_obj_style_state_compare+0x170>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 8005e70:	2e01      	cmp	r6, #1
 8005e72:	bf38      	it	cc
 8005e74:	2601      	movcc	r6, #1
 8005e76:	e794      	b.n	8005da2 <_lv_obj_style_state_compare+0x172>

08005e78 <lv_obj_style_get_selector_state>:
}
 8005e78:	b280      	uxth	r0, r0
 8005e7a:	4770      	bx	lr

08005e7c <lv_obj_style_get_selector_part>:
}
 8005e7c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8005e80:	4770      	bx	lr

08005e82 <lv_obj_calculate_style_text_align>:
{
 8005e82:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8005e84:	f241 425d 	movw	r2, #5213	; 0x145d
 8005e88:	4605      	mov	r5, r0
 8005e8a:	460e      	mov	r6, r1
 8005e8c:	f7ff fa7c 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005e90:	f241 426a 	movw	r2, #5226	; 0x146a
    return (lv_text_align_t)v.num;
 8005e94:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f7ff fa75 	bl	8005388 <lv_obj_get_style_prop>
}
 8005e9e:	2c01      	cmp	r4, #1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	bf38      	it	cc
 8005ea4:	2001      	movcc	r0, #1
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}

08005ea8 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8005ea8:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8005eaa:	460a      	mov	r2, r1
 8005eac:	f241 0101 	movw	r1, #4097	; 0x1001
 8005eb0:	f7ff bd9c 	b.w	80059ec <lv_obj_set_local_style_prop>

08005eb4 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8005eb4:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	f241 0104 	movw	r1, #4100	; 0x1004
 8005ebc:	f7ff bd96 	b.w	80059ec <lv_obj_set_local_style_prop>

08005ec0 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8005ec0:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8005ec2:	460a      	mov	r2, r1
 8005ec4:	f241 0107 	movw	r1, #4103	; 0x1007
 8005ec8:	f7ff bd90 	b.w	80059ec <lv_obj_set_local_style_prop>

08005ecc <lv_obj_set_style_y>:
}

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 8005ecc:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 8005ece:	460a      	mov	r2, r1
 8005ed0:	f241 0108 	movw	r1, #4104	; 0x1008
 8005ed4:	f7ff bd8a 	b.w	80059ec <lv_obj_set_local_style_prop>

08005ed8 <lv_obj_set_style_align>:
}

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 8005ed8:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8005eda:	460a      	mov	r2, r1
 8005edc:	f241 0109 	movw	r1, #4105	; 0x1009
 8005ee0:	f7ff bd84 	b.w	80059ec <lv_obj_set_local_style_prop>

08005ee4 <lv_obj_get_screen>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 8005ee4:	b108      	cbz	r0, 8005eea <lv_obj_get_screen+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 8005ee6:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 8005ee8:	b903      	cbnz	r3, 8005eec <lv_obj_get_screen+0x8>
}
 8005eea:	4770      	bx	lr
 8005eec:	4618      	mov	r0, r3
 8005eee:	e7f9      	b.n	8005ee4 <lv_obj_get_screen>

08005ef0 <lv_obj_get_disp>:
{
 8005ef0:	b538      	push	{r3, r4, r5, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8005ef2:	6843      	ldr	r3, [r0, #4]
{
 8005ef4:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8005ef6:	b113      	cbz	r3, 8005efe <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8005ef8:	f7ff fff4 	bl	8005ee4 <lv_obj_get_screen>
 8005efc:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8005efe:	480b      	ldr	r0, [pc, #44]	; (8005f2c <lv_obj_get_disp+0x3c>)
 8005f00:	f009 febd 	bl	800fc7e <_lv_ll_get_head>
 8005f04:	4d09      	ldr	r5, [pc, #36]	; (8005f2c <lv_obj_get_disp+0x3c>)
 8005f06:	b178      	cbz	r0, 8005f28 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005f0c:	e005      	b.n	8005f1a <lv_obj_get_disp+0x2a>
            if(d->screens[i] == scr) return d;
 8005f0e:	68c1      	ldr	r1, [r0, #12]
 8005f10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f14:	42a1      	cmp	r1, r4
 8005f16:	d007      	beq.n	8005f28 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8005f18:	3301      	adds	r3, #1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1f7      	bne.n	8005f0e <lv_obj_get_disp+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4628      	mov	r0, r5
 8005f22:	f009 feb2 	bl	800fc8a <_lv_ll_get_next>
 8005f26:	e7ee      	b.n	8005f06 <lv_obj_get_disp+0x16>
}
 8005f28:	bd38      	pop	{r3, r4, r5, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20004708 	.word	0x20004708

08005f30 <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 8005f30:	b100      	cbz	r0, 8005f34 <lv_obj_get_parent+0x4>
    return obj->parent;
 8005f32:	6840      	ldr	r0, [r0, #4]
}
 8005f34:	4770      	bx	lr

08005f36 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8005f36:	6880      	ldr	r0, [r0, #8]
 8005f38:	b158      	cbz	r0, 8005f52 <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	6843      	ldr	r3, [r0, #4]
 8005f3e:	da01      	bge.n	8005f44 <lv_obj_get_child+0xe>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
 8005f40:	18c9      	adds	r1, r1, r3
 8005f42:	d405      	bmi.n	8005f50 <lv_obj_get_child+0x1a>
    }
    else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d203      	bcs.n	8005f50 <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 8005f48:	6803      	ldr	r3, [r0, #0]
 8005f4a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005f4e:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 8005f50:	2000      	movs	r0, #0
}
 8005f52:	4770      	bx	lr

08005f54 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8005f54:	6880      	ldr	r0, [r0, #8]
 8005f56:	b100      	cbz	r0, 8005f5a <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 8005f58:	6840      	ldr	r0, [r0, #4]
}
 8005f5a:	4770      	bx	lr

08005f5c <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 8005f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 8005f5e:	8905      	ldrh	r5, [r0, #8]
 8005f60:	880c      	ldrh	r4, [r1, #0]
        .y1 = area->y1 + drv->offset_y,
 8005f62:	884e      	ldrh	r6, [r1, #2]
        .x1 = area->x1 + drv->offset_x,
 8005f64:	442c      	add	r4, r5
    lv_area_t offset_area = {
 8005f66:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 8005f6a:	8944      	ldrh	r4, [r0, #10]
        .x2 = area->x2 + drv->offset_x,
        .y2 = area->y2 + drv->offset_y
    };

    drv->flush_cb(drv, &offset_area, color_p);
 8005f6c:	6943      	ldr	r3, [r0, #20]
        .y1 = area->y1 + drv->offset_y,
 8005f6e:	4426      	add	r6, r4
    lv_area_t offset_area = {
 8005f70:	f8ad 6002 	strh.w	r6, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 8005f74:	888e      	ldrh	r6, [r1, #4]
        .y2 = area->y2 + drv->offset_y
 8005f76:	88c9      	ldrh	r1, [r1, #6]
        .x2 = area->x2 + drv->offset_x,
 8005f78:	4435      	add	r5, r6
        .y2 = area->y2 + drv->offset_y
 8005f7a:	440c      	add	r4, r1
    lv_area_t offset_area = {
 8005f7c:	f8ad 5004 	strh.w	r5, [sp, #4]
    drv->flush_cb(drv, &offset_area, color_p);
 8005f80:	4669      	mov	r1, sp
    lv_area_t offset_area = {
 8005f82:	f8ad 4006 	strh.w	r4, [sp, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 8005f86:	4798      	blx	r3
}
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}

08005f8c <lv_refr_get_top_obj>:
{
 8005f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f8e:	460d      	mov	r5, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8005f90:	2200      	movs	r2, #0
 8005f92:	3114      	adds	r1, #20
{
 8005f94:	4606      	mov	r6, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8005f96:	f009 fca6 	bl	800f8e6 <_lv_area_is_in>
 8005f9a:	b910      	cbnz	r0, 8005fa2 <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 8005f9c:	2000      	movs	r0, #0
}
 8005f9e:	b003      	add	sp, #12
 8005fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7fc fc3b 	bl	8002820 <lv_obj_has_flag>
 8005faa:	4604      	mov	r4, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d1f5      	bne.n	8005f9c <lv_refr_get_top_obj+0x10>
        info.res = LV_COVER_RES_COVER;
 8005fb0:	f88d 0000 	strb.w	r0, [sp]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8005fb4:	466a      	mov	r2, sp
 8005fb6:	2112      	movs	r1, #18
 8005fb8:	4628      	mov	r0, r5
        info.area = area_p;
 8005fba:	9601      	str	r6, [sp, #4]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8005fbc:	f7fb fe50 	bl	8001c60 <lv_event_send>
        if(info.res == LV_COVER_RES_MASKED) return NULL;
 8005fc0:	f89d 3000 	ldrb.w	r3, [sp]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d0e9      	beq.n	8005f9c <lv_refr_get_top_obj+0x10>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f7ff ffc3 	bl	8005f54 <lv_obj_get_child_cnt>
 8005fce:	4607      	mov	r7, r0
        for(i = 0; i < child_cnt; i++) {
 8005fd0:	42a7      	cmp	r7, r4
 8005fd2:	d106      	bne.n	8005fe2 <lv_refr_get_top_obj+0x56>
            if(info.res == LV_COVER_RES_COVER) {
 8005fd4:	f89d 3000 	ldrb.w	r3, [sp]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf0c      	ite	eq
 8005fdc:	4628      	moveq	r0, r5
 8005fde:	2000      	movne	r0, #0
 8005fe0:	e7dd      	b.n	8005f9e <lv_refr_get_top_obj+0x12>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005fe2:	68ab      	ldr	r3, [r5, #8]
            found_p = lv_refr_get_top_obj(area_p, child);
 8005fe4:	4630      	mov	r0, r6
            lv_obj_t * child = obj->spec_attr->children[i];
 8005fe6:	681b      	ldr	r3, [r3, #0]
            found_p = lv_refr_get_top_obj(area_p, child);
 8005fe8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8005fec:	f7ff ffce 	bl	8005f8c <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d1d4      	bne.n	8005f9e <lv_refr_get_top_obj+0x12>
        for(i = 0; i < child_cnt; i++) {
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	e7eb      	b.n	8005fd0 <lv_refr_get_top_obj+0x44>

08005ff8 <draw_buf_flush.isra.0>:
static void draw_buf_flush(lv_disp_t * disp)
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8005ffc:	4ca9      	ldr	r4, [pc, #676]	; (80062a4 <draw_buf_flush.isra.0+0x2ac>)
static void draw_buf_flush(lv_disp_t * disp)
 8005ffe:	b093      	sub	sp, #76	; 0x4c
 8006000:	9006      	str	r0, [sp, #24]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	f009 f927 	bl	800f256 <lv_disp_get_draw_buf>
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8006008:	9b06      	ldr	r3, [sp, #24]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800600a:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8006010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006012:	b10b      	cbz	r3, 8006018 <draw_buf_flush.isra.0+0x20>
 8006014:	4628      	mov	r0, r5
 8006016:	4798      	blx	r3
    if(draw_buf->buf1 && draw_buf->buf2) {
 8006018:	f8d8 3000 	ldr.w	r3, [r8]
 800601c:	b953      	cbnz	r3, 8006034 <draw_buf_flush.isra.0+0x3c>
    draw_buf->flushing = 1;
 800601e:	2301      	movs	r3, #1
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006020:	6820      	ldr	r0, [r4, #0]
    draw_buf->flushing = 1;
 8006022:	f8c8 3010 	str.w	r3, [r8, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006026:	6807      	ldr	r7, [r0, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	6991      	ldr	r1, [r2, #24]
 800602c:	07ce      	lsls	r6, r1, #31
 800602e:	d410      	bmi.n	8006052 <draw_buf_flush.isra.0+0x5a>
    else draw_buf->flushing_last = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	e011      	b.n	8006058 <draw_buf_flush.isra.0+0x60>
    if(draw_buf->buf1 && draw_buf->buf2) {
 8006034:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <draw_buf_flush.isra.0+0x26>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	6818      	ldr	r0, [r3, #0]
        while(draw_buf->flushing) {
 8006040:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ea      	beq.n	800601e <draw_buf_flush.isra.0+0x26>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006048:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f8      	beq.n	8006040 <draw_buf_flush.isra.0+0x48>
 800604e:	4798      	blx	r3
 8006050:	e7f4      	b.n	800603c <draw_buf_flush.isra.0+0x44>
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8006052:	6992      	ldr	r2, [r2, #24]
 8006054:	0794      	lsls	r4, r2, #30
 8006056:	d5eb      	bpl.n	8006030 <draw_buf_flush.isra.0+0x38>
    else draw_buf->flushing_last = 0;
 8006058:	f8c8 3014 	str.w	r3, [r8, #20]
    if(disp->driver->flush_cb) {
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	2a00      	cmp	r2, #0
 8006064:	f000 8097 	beq.w	8006196 <draw_buf_flush.isra.0+0x19e>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8006068:	7c1a      	ldrb	r2, [r3, #16]
 800606a:	686c      	ldr	r4, [r5, #4]
 800606c:	f012 0f30 	tst.w	r2, #48	; 0x30
 8006070:	682d      	ldr	r5, [r5, #0]
 8006072:	f000 81b1 	beq.w	80063d8 <draw_buf_flush.isra.0+0x3e0>
 8006076:	0751      	lsls	r1, r2, #29
 8006078:	f140 81ae 	bpl.w	80063d8 <draw_buf_flush.isra.0+0x3e0>
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800607c:	7c3b      	ldrb	r3, [r7, #16]
 800607e:	f003 0206 	and.w	r2, r3, #6
 8006082:	2a06      	cmp	r2, #6
 8006084:	f000 8087 	beq.w	8006196 <draw_buf_flush.isra.0+0x19e>
    if(drv->rotated == LV_DISP_ROT_180) {
 8006088:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800608c:	2a20      	cmp	r2, #32
 800608e:	d131      	bne.n	80060f4 <draw_buf_flush.isra.0+0xfc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006090:	88a1      	ldrh	r1, [r4, #4]
 8006092:	8822      	ldrh	r2, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006094:	88e6      	ldrh	r6, [r4, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006096:	1c4b      	adds	r3, r1, #1
 8006098:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800609a:	8860      	ldrh	r0, [r4, #2]
    uint32_t total = area_w * area_h;
 800609c:	fa0f fc83 	sxth.w	ip, r3
 80060a0:	1c73      	adds	r3, r6, #1
 80060a2:	1a1b      	subs	r3, r3, r0
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	fb03 f30c 	mul.w	r3, r3, ip
    uint32_t i = total - 1, j = 0;
 80060aa:	f04f 0c00 	mov.w	ip, #0
 80060ae:	3b01      	subs	r3, #1
    while(i > j) {
 80060b0:	4563      	cmp	r3, ip
 80060b2:	d813      	bhi.n	80060dc <draw_buf_flush.isra.0+0xe4>
    area->y2 = drv->ver_res - area->y1 - 1;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	1a18      	subs	r0, r3, r0
    area->y1 = drv->ver_res - tmp_coord - 1;
 80060bc:	1b9e      	subs	r6, r3, r6
 80060be:	883b      	ldrh	r3, [r7, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 80060c0:	80e0      	strh	r0, [r4, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29b      	uxth	r3, r3
    area->x2 = drv->hor_res - area->x1 - 1;
 80060c6:	1a9a      	subs	r2, r3, r2
 80060c8:	80a2      	strh	r2, [r4, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 80060ca:	1a5b      	subs	r3, r3, r1
        call_flush_cb(drv, area, color_p);
 80060cc:	462a      	mov	r2, r5
 80060ce:	4621      	mov	r1, r4
 80060d0:	4638      	mov	r0, r7
    area->y1 = drv->ver_res - tmp_coord - 1;
 80060d2:	8066      	strh	r6, [r4, #2]
    area->x1 = drv->hor_res - tmp_coord - 1;
 80060d4:	8023      	strh	r3, [r4, #0]
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 80060d6:	f7ff ff41 	bl	8005f5c <call_flush_cb>
 80060da:	e05c      	b.n	8006196 <draw_buf_flush.isra.0+0x19e>
        tmp = color_p[i];
 80060dc:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
        color_p[i] = color_p[j];
 80060e0:	f835 901c 	ldrh.w	r9, [r5, ip, lsl #1]
 80060e4:	f825 9013 	strh.w	r9, [r5, r3, lsl #1]
        color_p[j] = tmp;
 80060e8:	f825 e01c 	strh.w	lr, [r5, ip, lsl #1]
        i--;
 80060ec:	3b01      	subs	r3, #1
        j++;
 80060ee:	f10c 0c01 	add.w	ip, ip, #1
 80060f2:	e7dd      	b.n	80060b0 <draw_buf_flush.isra.0+0xb8>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 80060f4:	06da      	lsls	r2, r3, #27
 80060f6:	d54e      	bpl.n	8006196 <draw_buf_flush.isra.0+0x19e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80060f8:	f009 f8ad 	bl	800f256 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80060fc:	8823      	ldrh	r3, [r4, #0]
 80060fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	9000      	str	r0, [sp, #0]
 8006106:	1c53      	adds	r3, r2, #1
 8006108:	9804      	ldr	r0, [sp, #16]
 800610a:	b29b      	uxth	r3, r3
 800610c:	1a1e      	subs	r6, r3, r0
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	b2b3      	uxth	r3, r6
 8006112:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006114:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006118:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800611a:	930b      	str	r3, [sp, #44]	; 0x2c
 800611c:	8863      	ldrh	r3, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800611e:	f9b4 1000 	ldrsh.w	r1, [r4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	88e3      	ldrh	r3, [r4, #6]
 8006126:	9801      	ldr	r0, [sp, #4]
 8006128:	3301      	adds	r3, #1
 800612a:	1a1b      	subs	r3, r3, r0
 800612c:	b21b      	sxth	r3, r3
 800612e:	9302      	str	r3, [sp, #8]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 8006130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006134:	fbb3 f3f6 	udiv	r3, r3, r6
 8006138:	9802      	ldr	r0, [sp, #8]
 800613a:	4283      	cmp	r3, r0
 800613c:	bfa8      	it	ge
 800613e:	4603      	movge	r3, r0
 8006140:	930c      	str	r3, [sp, #48]	; 0x30
        if(drv->rotated == LV_DISP_ROT_90) {
 8006142:	7c3b      	ldrb	r3, [r7, #16]
 8006144:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006148:	2b10      	cmp	r3, #16
 800614a:	d13c      	bne.n	80061c6 <draw_buf_flush.isra.0+0x1ce>
            area->y2 = drv->ver_res - area->x1 - 1;
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	9904      	ldr	r1, [sp, #16]
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	1a52      	subs	r2, r2, r1
 8006154:	80e2      	strh	r2, [r4, #6]
            area->y1 = area->y2 - area_w + 1;
 8006156:	9a05      	ldr	r2, [sp, #20]
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	8063      	strh	r3, [r4, #2]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800615c:	f04f 0a00 	mov.w	sl, #0
 8006160:	46d3      	mov	fp, sl
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006162:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8006166:	105b      	asrs	r3, r3, #1
 8006168:	9311      	str	r3, [sp, #68]	; 0x44
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800616a:	1c73      	adds	r3, r6, #1
 800616c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006170:	105b      	asrs	r3, r3, #1
 8006172:	9310      	str	r3, [sp, #64]	; 0x40
 8006174:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	930e      	str	r3, [sp, #56]	; 0x38
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	3b01      	subs	r3, #1
 8006180:	b29b      	uxth	r3, r3
 8006182:	930a      	str	r3, [sp, #40]	; 0x28
        while(row < area_h) {
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	4553      	cmp	r3, sl
 8006188:	dc20      	bgt.n	80061cc <draw_buf_flush.isra.0+0x1d4>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800618a:	f1bb 0f00 	cmp.w	fp, #0
 800618e:	d002      	beq.n	8006196 <draw_buf_flush.isra.0+0x19e>
 8006190:	4658      	mov	r0, fp
 8006192:	f009 fe17 	bl	800fdc4 <lv_mem_buf_release>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || draw_buf->flushing_last)) {
 8006196:	f8d8 3000 	ldr.w	r3, [r8]
 800619a:	b18b      	cbz	r3, 80061c0 <draw_buf_flush.isra.0+0x1c8>
 800619c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80061a0:	b172      	cbz	r2, 80061c0 <draw_buf_flush.isra.0+0x1c8>
 80061a2:	9906      	ldr	r1, [sp, #24]
 80061a4:	6809      	ldr	r1, [r1, #0]
 80061a6:	7c09      	ldrb	r1, [r1, #16]
 80061a8:	07c9      	lsls	r1, r1, #31
 80061aa:	d502      	bpl.n	80061b2 <draw_buf_flush.isra.0+0x1ba>
 80061ac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80061b0:	b131      	cbz	r1, 80061c0 <draw_buf_flush.isra.0+0x1c8>
        if(draw_buf->buf_act == draw_buf->buf1)
 80061b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
            draw_buf->buf_act = draw_buf->buf2;
 80061b6:	428b      	cmp	r3, r1
 80061b8:	bf08      	it	eq
 80061ba:	4613      	moveq	r3, r2
 80061bc:	f8c8 3008 	str.w	r3, [r8, #8]
}
 80061c0:	b013      	add	sp, #76	; 0x4c
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 80061c6:	8061      	strh	r1, [r4, #2]
            area->y2 = area->y1 + area_w - 1;
 80061c8:	80e2      	strh	r2, [r4, #6]
 80061ca:	e7c7      	b.n	800615c <draw_buf_flush.isra.0+0x164>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061d0:	eba3 030a 	sub.w	r3, r3, sl
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfa8      	it	ge
 80061d8:	4613      	movge	r3, r2
 80061da:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	9a00      	ldr	r2, [sp, #0]
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 80061e0:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
            draw_buf->flushing = 1;
 80061e4:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 80061e6:	f1ba 0f00 	cmp.w	sl, #0
 80061ea:	f040 809c 	bne.w	8006326 <draw_buf_flush.isra.0+0x32e>
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	429e      	cmp	r6, r3
 80061f2:	f300 8098 	bgt.w	8006326 <draw_buf_flush.isra.0+0x32e>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 80061f6:	46d1      	mov	r9, sl
 80061f8:	4651      	mov	r1, sl
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 80061fa:	7c3b      	ldrb	r3, [r7, #16]
 80061fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006200:	930d      	str	r3, [sp, #52]	; 0x34
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006204:	b20b      	sxth	r3, r1
 8006206:	4293      	cmp	r3, r2
 8006208:	da4e      	bge.n	80062a8 <draw_buf_flush.isra.0+0x2b0>
 800620a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620c:	eba3 0c01 	sub.w	ip, r3, r1
 8006210:	fa0f f38c 	sxth.w	r3, ip
 8006214:	9308      	str	r3, [sp, #32]
                    &color_p[inv_i * w + inv_j],
 8006216:	4373      	muls	r3, r6
 8006218:	930f      	str	r3, [sp, #60]	; 0x3c
 800621a:	2300      	movs	r3, #0
 800621c:	e025      	b.n	800626a <draw_buf_flush.isra.0+0x272>
            if(is_270) {
 800621e:	9808      	ldr	r0, [sp, #32]
 8006220:	eb02 0c09 	add.w	ip, r2, r9
 8006224:	fb02 0206 	mla	r2, r2, r6, r0
 8006228:	980a      	ldr	r0, [sp, #40]	; 0x28
 800622a:	1ac3      	subs	r3, r0, r3
 800622c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800622e:	b21b      	sxth	r3, r3
 8006230:	eb00 0e03 	add.w	lr, r0, r3
 8006234:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006236:	fb03 1306 	mla	r3, r3, r6, r1
 800623a:	2830      	cmp	r0, #48	; 0x30
 800623c:	f835 001c 	ldrh.w	r0, [r5, ip, lsl #1]
 8006240:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8006244:	d11c      	bne.n	8006280 <draw_buf_flush.isra.0+0x288>
    *a = *b;
 8006246:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 800624a:	f825 001c 	strh.w	r0, [r5, ip, lsl #1]
    *b = *c;
 800624e:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 8006252:	f825 c013 	strh.w	ip, [r5, r3, lsl #1]
    *c = *d;
 8006256:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 800625a:	f825 301e 	strh.w	r3, [r5, lr, lsl #1]
    *d = tmp;
 800625e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006262:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8006270:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006272:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006276:	4282      	cmp	r2, r0
 8006278:	dbd1      	blt.n	800621e <draw_buf_flush.isra.0+0x226>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800627a:	3101      	adds	r1, #1
 800627c:	44b1      	add	r9, r6
 800627e:	e7c0      	b.n	8006202 <draw_buf_flush.isra.0+0x20a>
    *a = *b;
 8006280:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8006284:	f825 001c 	strh.w	r0, [r5, ip, lsl #1]
    *b = *c;
 8006288:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 800628c:	f825 c012 	strh.w	ip, [r5, r2, lsl #1]
    *c = *d;
 8006290:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8006294:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
    *d = tmp;
 8006298:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800629c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
}
 80062a0:	e7e1      	b.n	8006266 <draw_buf_flush.isra.0+0x26e>
 80062a2:	bf00      	nop
 80062a4:	20001a88 	.word	0x20001a88
                if(drv->rotated == LV_DISP_ROT_90) {
 80062a8:	7c3b      	ldrb	r3, [r7, #16]
 80062aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d12c      	bne.n	800630c <draw_buf_flush.isra.0+0x314>
                    area->x1 = init_y_off;
 80062b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    area->x2 = init_y_off + area_w - 1;
 80062b4:	9a07      	ldr	r2, [sp, #28]
                    area->x1 = init_y_off;
 80062b6:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + area_w - 1;
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 80062c0:	46b1      	mov	r9, r6
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 80062c2:	9a02      	ldr	r2, [sp, #8]
 80062c4:	eb0a 0309 	add.w	r3, sl, r9
 80062c8:	429a      	cmp	r2, r3
 80062ca:	dc7d      	bgt.n	80063c8 <draw_buf_flush.isra.0+0x3d0>
 80062cc:	9b00      	ldr	r3, [sp, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	07db      	lsls	r3, r3, #31
 80062d2:	d579      	bpl.n	80063c8 <draw_buf_flush.isra.0+0x3d0>
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	0798      	lsls	r0, r3, #30
 80062da:	d575      	bpl.n	80063c8 <draw_buf_flush.isra.0+0x3d0>
                draw_buf->flushing_last = 1;
 80062dc:	2301      	movs	r3, #1
                draw_buf->flushing_last = 0;
 80062de:	9a00      	ldr	r2, [sp, #0]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 80062e0:	4621      	mov	r1, r4
                draw_buf->flushing_last = 0;
 80062e2:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 80062e4:	4638      	mov	r0, r7
 80062e6:	f1bb 0f00 	cmp.w	fp, #0
 80062ea:	bf14      	ite	ne
 80062ec:	465a      	movne	r2, fp
 80062ee:	462a      	moveq	r2, r5
 80062f0:	f7ff fe34 	bl	8005f5c <call_flush_cb>
            while(draw_buf->flushing) {
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d167      	bne.n	80063cc <draw_buf_flush.isra.0+0x3d4>
            color_p += area_w * height;
 80062fc:	fb06 f309 	mul.w	r3, r6, r9
            row += height;
 8006300:	44d1      	add	r9, sl
            color_p += area_w * height;
 8006302:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 8006306:	fa0f fa89 	sxth.w	sl, r9
 800630a:	e73b      	b.n	8006184 <draw_buf_flush.isra.0+0x18c>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800630c:	883b      	ldrh	r3, [r7, #0]
 800630e:	9a01      	ldr	r2, [sp, #4]
 8006310:	3b01      	subs	r3, #1
 8006312:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 8006314:	9a04      	ldr	r2, [sp, #16]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8006316:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8006318:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800631a:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - area_w + 1;
 800631c:	4413      	add	r3, r2
 800631e:	9a05      	ldr	r2, [sp, #20]
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	8023      	strh	r3, [r4, #0]
 8006324:	e7cc      	b.n	80062c0 <draw_buf_flush.isra.0+0x2c8>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8006326:	f1bb 0f00 	cmp.w	fp, #0
 800632a:	d104      	bne.n	8006336 <draw_buf_flush.isra.0+0x33e>
 800632c:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006330:	f009 fef0 	bl	8010114 <lv_mem_buf_get>
 8006334:	4683      	mov	fp, r0
    for(lv_coord_t y = 0; y < area_h; y++) {
 8006336:	46ae      	mov	lr, r5
 8006338:	2100      	movs	r1, #0
    uint32_t invert = (area_w * area_h) - 1;
 800633a:	fb09 f306 	mul.w	r3, r9, r6
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800633e:	7c38      	ldrb	r0, [r7, #16]
    uint32_t initial_i = ((area_w - 1) * area_h);
 8006340:	eba3 0209 	sub.w	r2, r3, r9
 8006344:	3b01      	subs	r3, #1
 8006346:	1a9b      	subs	r3, r3, r2
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8006348:	f000 0030 	and.w	r0, r0, #48	; 0x30
    uint32_t initial_i = ((area_w - 1) * area_h);
 800634c:	9208      	str	r2, [sp, #32]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	b20a      	sxth	r2, r1
 8006352:	4591      	cmp	r9, r2
 8006354:	dc10      	bgt.n	8006378 <draw_buf_flush.isra.0+0x380>
                if(drv->rotated == LV_DISP_ROT_90) {
 8006356:	7c3b      	ldrb	r3, [r7, #16]
 8006358:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800635c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006360:	2b10      	cmp	r3, #16
 8006362:	fa1f f18a 	uxth.w	r1, sl
 8006366:	d124      	bne.n	80063b2 <draw_buf_flush.isra.0+0x3ba>
                    area->x1 = init_y_off + row;
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	440b      	add	r3, r1
 800636c:	b29b      	uxth	r3, r3
 800636e:	8023      	strh	r3, [r4, #0]
                    area->x2 = init_y_off + row + height - 1;
 8006370:	3b01      	subs	r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	80a3      	strh	r3, [r4, #4]
 8006376:	e7a4      	b.n	80062c2 <draw_buf_flush.isra.0+0x2ca>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8006378:	f04f 0c00 	mov.w	ip, #0
        if(invert_i)
 800637c:	2830      	cmp	r0, #48	; 0x30
 800637e:	9a08      	ldr	r2, [sp, #32]
 8006380:	bf08      	it	eq
 8006382:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 8006384:	440a      	add	r2, r1
            i = invert - i;
 8006386:	bf08      	it	eq
 8006388:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 800638a:	fa0f f38c 	sxth.w	r3, ip
 800638e:	42b3      	cmp	r3, r6
 8006390:	db03      	blt.n	800639a <draw_buf_flush.isra.0+0x3a2>
 8006392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006394:	3101      	adds	r1, #1
 8006396:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8006398:	e7da      	b.n	8006350 <draw_buf_flush.isra.0+0x358>
            rot_buf[i] = *(orig_color_p++);
 800639a:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 800639e:	2830      	cmp	r0, #48	; 0x30
            rot_buf[i] = *(orig_color_p++);
 80063a0:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 80063a4:	f10c 0c01 	add.w	ip, ip, #1
 80063a8:	bf0c      	ite	eq
 80063aa:	444a      	addeq	r2, r9
                i -= area_h;
 80063ac:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 80063b0:	e7eb      	b.n	800638a <draw_buf_flush.isra.0+0x392>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 80063b2:	883b      	ldrh	r3, [r7, #0]
 80063b4:	9801      	ldr	r0, [sp, #4]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	1a1b      	subs	r3, r3, r0
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	b29b      	uxth	r3, r3
 80063be:	80a3      	strh	r3, [r4, #4]
                    area->x1 = area->x2 - height + 1;
 80063c0:	3301      	adds	r3, #1
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	8023      	strh	r3, [r4, #0]
 80063c6:	e77c      	b.n	80062c2 <draw_buf_flush.isra.0+0x2ca>
                draw_buf->flushing_last = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	e788      	b.n	80062de <draw_buf_flush.isra.0+0x2e6>
                if(drv->wait_cb) drv->wait_cb(drv);
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d090      	beq.n	80062f4 <draw_buf_flush.isra.0+0x2fc>
 80063d2:	4638      	mov	r0, r7
 80063d4:	4798      	blx	r3
 80063d6:	e78d      	b.n	80062f4 <draw_buf_flush.isra.0+0x2fc>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 80063d8:	462a      	mov	r2, r5
 80063da:	4621      	mov	r1, r4
 80063dc:	4618      	mov	r0, r3
 80063de:	e67a      	b.n	80060d6 <draw_buf_flush.isra.0+0xde>

080063e0 <_lv_refr_init>:
}
 80063e0:	4770      	bx	lr

080063e2 <lv_refr_obj>:
{
 80063e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e6:	460d      	mov	r5, r1
 80063e8:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 80063ea:	2101      	movs	r1, #1
 80063ec:	4628      	mov	r0, r5
{
 80063ee:	b08b      	sub	sp, #44	; 0x2c
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 80063f0:	f7fc fa16 	bl	8002820 <lv_obj_has_flag>
 80063f4:	4606      	mov	r6, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d13d      	bne.n	8006476 <lv_refr_obj+0x94>
    lv_obj_get_coords(obj, &obj_coords_ext);
 80063fa:	4669      	mov	r1, sp
 80063fc:	4628      	mov	r0, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80063fe:	f8d4 8008 	ldr.w	r8, [r4, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 8006402:	f7fd f865 	bl	80034d0 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8006406:	4628      	mov	r0, r5
 8006408:	f7fc ff2c 	bl	8003264 <_lv_obj_get_ext_draw_size>
    if(!_lv_area_intersect(&obj_ext_clip_coords, clip_area_ori, &obj_coords_ext)) return;
 800640c:	af02      	add	r7, sp, #8
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800640e:	4602      	mov	r2, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8006410:	4601      	mov	r1, r0
 8006412:	4668      	mov	r0, sp
 8006414:	f009 f949 	bl	800f6aa <lv_area_increase>
    if(!_lv_area_intersect(&obj_ext_clip_coords, clip_area_ori, &obj_coords_ext)) return;
 8006418:	466a      	mov	r2, sp
 800641a:	4641      	mov	r1, r8
 800641c:	4638      	mov	r0, r7
 800641e:	f009 f962 	bl	800f6e6 <_lv_area_intersect>
 8006422:	b340      	cbz	r0, 8006476 <lv_refr_obj+0x94>
    lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 8006424:	4622      	mov	r2, r4
 8006426:	2114      	movs	r1, #20
 8006428:	4628      	mov	r0, r5
    draw_ctx->clip_area = &obj_ext_clip_coords;
 800642a:	60a7      	str	r7, [r4, #8]
    lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800642c:	f7fb fc18 	bl	8001c60 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 8006430:	4622      	mov	r2, r4
 8006432:	2115      	movs	r1, #21
 8006434:	4628      	mov	r0, r5
 8006436:	f7fb fc13 	bl	8001c60 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800643a:	4622      	mov	r2, r4
 800643c:	2116      	movs	r1, #22
 800643e:	4628      	mov	r0, r5
 8006440:	f7fb fc0e 	bl	8001c60 <lv_event_send>
    if(_lv_area_intersect(&obj_clip_coords, clip_area_ori, &obj->coords)) {
 8006444:	4641      	mov	r1, r8
 8006446:	f105 0214 	add.w	r2, r5, #20
 800644a:	a804      	add	r0, sp, #16
 800644c:	f009 f94b 	bl	800f6e6 <_lv_area_intersect>
 8006450:	b9a0      	cbnz	r0, 800647c <lv_refr_obj+0x9a>
    lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 8006452:	4622      	mov	r2, r4
 8006454:	2117      	movs	r1, #23
 8006456:	4628      	mov	r0, r5
    draw_ctx->clip_area = &obj_ext_clip_coords;
 8006458:	60a7      	str	r7, [r4, #8]
    lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800645a:	f7fb fc01 	bl	8001c60 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800645e:	4622      	mov	r2, r4
 8006460:	2118      	movs	r1, #24
 8006462:	4628      	mov	r0, r5
 8006464:	f7fb fbfc 	bl	8001c60 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 8006468:	4622      	mov	r2, r4
 800646a:	2119      	movs	r1, #25
 800646c:	4628      	mov	r0, r5
 800646e:	f7fb fbf7 	bl	8001c60 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 8006472:	f8c4 8008 	str.w	r8, [r4, #8]
}
 8006476:	b00b      	add	sp, #44	; 0x2c
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800647c:	4628      	mov	r0, r5
 800647e:	f7ff fd69 	bl	8005f54 <lv_obj_get_child_cnt>
 8006482:	4681      	mov	r9, r0
            if(_lv_area_intersect(&child_clip, &obj_clip_coords, &child_coords)) {
 8006484:	f10d 0b20 	add.w	fp, sp, #32
        for(i = 0; i < child_cnt; i++) {
 8006488:	454e      	cmp	r6, r9
 800648a:	d0e2      	beq.n	8006452 <lv_refr_obj+0x70>
            lv_obj_t * child = obj->spec_attr->children[i];
 800648c:	68ab      	ldr	r3, [r5, #8]
            lv_obj_get_coords(child, &child_coords);
 800648e:	a906      	add	r1, sp, #24
            lv_obj_t * child = obj->spec_attr->children[i];
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
            lv_obj_get_coords(child, &child_coords);
 8006496:	4650      	mov	r0, sl
 8006498:	f7fd f81a 	bl	80034d0 <lv_obj_get_coords>
            ext_draw_size = _lv_obj_get_ext_draw_size(child);
 800649c:	4650      	mov	r0, sl
 800649e:	f7fc fee1 	bl	8003264 <_lv_obj_get_ext_draw_size>
 80064a2:	4602      	mov	r2, r0
            lv_area_increase(&child_coords, ext_draw_size, ext_draw_size);
 80064a4:	4601      	mov	r1, r0
 80064a6:	a806      	add	r0, sp, #24
 80064a8:	f009 f8ff 	bl	800f6aa <lv_area_increase>
            if(_lv_area_intersect(&child_clip, &obj_clip_coords, &child_coords)) {
 80064ac:	4658      	mov	r0, fp
 80064ae:	aa06      	add	r2, sp, #24
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	f009 f918 	bl	800f6e6 <_lv_area_intersect>
 80064b6:	b128      	cbz	r0, 80064c4 <lv_refr_obj+0xe2>
                lv_refr_obj(draw_ctx, child);
 80064b8:	4651      	mov	r1, sl
 80064ba:	4620      	mov	r0, r4
                draw_ctx->clip_area = &child_clip;
 80064bc:	f8c4 b008 	str.w	fp, [r4, #8]
                lv_refr_obj(draw_ctx, child);
 80064c0:	f7ff ff8f 	bl	80063e2 <lv_refr_obj>
        for(i = 0; i < child_cnt; i++) {
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7df      	b.n	8006488 <lv_refr_obj+0xa6>

080064c8 <lv_refr_obj_and_children>:
{
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	4606      	mov	r6, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 80064ce:	460d      	mov	r5, r1
 80064d0:	b929      	cbnz	r1, 80064de <lv_refr_obj_and_children+0x16>
 80064d2:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <lv_refr_obj_and_children+0x88>)
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f7fb fae4 	bl	8001aa2 <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 80064da:	4605      	mov	r5, r0
 80064dc:	b140      	cbz	r0, 80064f0 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(draw_ctx, top_obj);
 80064de:	4630      	mov	r0, r6
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7ff ff7e 	bl	80063e2 <lv_refr_obj>
    parent = lv_obj_get_parent(top_obj);
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7ff fd22 	bl	8005f30 <lv_obj_get_parent>
        parent = lv_obj_get_parent(parent);
 80064ec:	4604      	mov	r4, r0
    while(parent != NULL) {
 80064ee:	b908      	cbnz	r0, 80064f4 <lv_refr_obj_and_children+0x2c>
}
 80064f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff fd2d 	bl	8005f54 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 80064fa:	2700      	movs	r7, #0
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 80064fc:	4680      	mov	r8, r0
        bool go = false;
 80064fe:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8006500:	4547      	cmp	r7, r8
 8006502:	d113      	bne.n	800652c <lv_refr_obj_and_children+0x64>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 8006504:	4632      	mov	r2, r6
 8006506:	2117      	movs	r1, #23
 8006508:	4620      	mov	r0, r4
 800650a:	f7fb fba9 	bl	8001c60 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800650e:	4632      	mov	r2, r6
 8006510:	2118      	movs	r1, #24
 8006512:	4620      	mov	r0, r4
 8006514:	f7fb fba4 	bl	8001c60 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 8006518:	4632      	mov	r2, r6
 800651a:	2119      	movs	r1, #25
 800651c:	4620      	mov	r0, r4
 800651e:	f7fb fb9f 	bl	8001c60 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff fd04 	bl	8005f30 <lv_obj_get_parent>
 8006528:	4625      	mov	r5, r4
 800652a:	e7df      	b.n	80064ec <lv_refr_obj_and_children+0x24>
            lv_obj_t * child = parent->spec_attr->children[i];
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
            if(!go) {
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	d106      	bne.n	8006548 <lv_refr_obj_and_children+0x80>
                if(child == border_p) go = true;
 800653a:	1a6b      	subs	r3, r5, r1
 800653c:	f1d3 0900 	rsbs	r9, r3, #0
 8006540:	eb49 0903 	adc.w	r9, r9, r3
        for(i = 0; i < child_cnt; i++) {
 8006544:	3701      	adds	r7, #1
 8006546:	e7db      	b.n	8006500 <lv_refr_obj_and_children+0x38>
                lv_refr_obj(draw_ctx, child);
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff ff4a 	bl	80063e2 <lv_refr_obj>
 800654e:	e7f9      	b.n	8006544 <lv_refr_obj_and_children+0x7c>
 8006550:	20001a88 	.word	0x20001a88

08006554 <lv_refr_area_part>:
{
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006558:	4d53      	ldr	r5, [pc, #332]	; (80066a8 <lv_refr_area_part+0x154>)
{
 800655a:	4604      	mov	r4, r0
 800655c:	b092      	sub	sp, #72	; 0x48
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800655e:	6828      	ldr	r0, [r5, #0]
 8006560:	f008 fe79 	bl	800f256 <lv_disp_get_draw_buf>
    if(draw_buf->buf1 && !draw_buf->buf2) {
 8006564:	6803      	ldr	r3, [r0, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8006566:	4606      	mov	r6, r0
    if(draw_buf->buf1 && !draw_buf->buf2) {
 8006568:	b973      	cbnz	r3, 8006588 <lv_refr_area_part+0x34>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800656a:	6828      	ldr	r0, [r5, #0]
 800656c:	6866      	ldr	r6, [r4, #4]
 800656e:	f7fb fa98 	bl	8001aa2 <lv_disp_get_scr_act>
 8006572:	4601      	mov	r1, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fd09 	bl	8005f8c <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 800657a:	682b      	ldr	r3, [r5, #0]
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800657c:	4607      	mov	r7, r0
    if(disp_refr->prev_scr) {
 800657e:	695e      	ldr	r6, [r3, #20]
 8006580:	b97e      	cbnz	r6, 80065a2 <lv_refr_area_part+0x4e>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8006582:	2800      	cmp	r0, #0
 8006584:	d12e      	bne.n	80065e4 <lv_refr_area_part+0x90>
 8006586:	e013      	b.n	80065b0 <lv_refr_area_part+0x5c>
    if(draw_buf->buf1 && !draw_buf->buf2) {
 8006588:	6843      	ldr	r3, [r0, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1ed      	bne.n	800656a <lv_refr_area_part+0x16>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800658e:	682a      	ldr	r2, [r5, #0]
        while(draw_buf->flushing) {
 8006590:	6933      	ldr	r3, [r6, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0e9      	beq.n	800656a <lv_refr_area_part+0x16>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8006596:	6810      	ldr	r0, [r2, #0]
 8006598:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f8      	beq.n	8006590 <lv_refr_area_part+0x3c>
 800659e:	4798      	blx	r3
 80065a0:	e7f5      	b.n	800658e <lv_refr_area_part+0x3a>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 80065a2:	4631      	mov	r1, r6
 80065a4:	6860      	ldr	r0, [r4, #4]
 80065a6:	f7ff fcf1 	bl	8005f8c <lv_refr_get_top_obj>
 80065aa:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80065ac:	b9d7      	cbnz	r7, 80065e4 <lv_refr_area_part+0x90>
 80065ae:	b9c8      	cbnz	r0, 80065e4 <lv_refr_area_part+0x90>
        if(draw_ctx->draw_bg) {
 80065b0:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80065b4:	f1b8 0f00 	cmp.w	r8, #0
 80065b8:	d03c      	beq.n	8006634 <lv_refr_area_part+0xe0>
            lv_draw_rect_dsc_init(&dsc);
 80065ba:	a805      	add	r0, sp, #20
 80065bc:	f001 ff3e 	bl	800843c <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 80065c0:	682b      	ldr	r3, [r5, #0]
            draw_ctx->draw_bg(draw_ctx, &dsc, draw_ctx->buf_area);
 80065c2:	4620      	mov	r0, r4
            dsc.bg_img_src = disp_refr->bg_img;
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            draw_ctx->draw_bg(draw_ctx, &dsc, draw_ctx->buf_area);
 80065c6:	a905      	add	r1, sp, #20
            dsc.bg_img_src = disp_refr->bg_img;
 80065c8:	9208      	str	r2, [sp, #32]
            dsc.bg_img_opa = disp_refr->bg_opa;
 80065ca:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80065ce:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            dsc.bg_color = disp_refr->bg_color;
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
            dsc.bg_opa = disp_refr->bg_opa;
 80065d4:	f88d 201e 	strb.w	r2, [sp, #30]
            dsc.bg_color = disp_refr->bg_color;
 80065d8:	f8ad 3018 	strh.w	r3, [sp, #24]
            draw_ctx->draw_bg(draw_ctx, &dsc, draw_ctx->buf_area);
 80065dc:	6862      	ldr	r2, [r4, #4]
 80065de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065e0:	4798      	blx	r3
                LV_LOG_WARN("Can't draw the background image");
 80065e2:	2600      	movs	r6, #0
    if(disp_refr->prev_scr) {
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	6959      	ldr	r1, [r3, #20]
 80065e8:	b129      	cbz	r1, 80065f6 <lv_refr_area_part+0xa2>
        lv_refr_obj_and_children(draw_ctx, top_prev_scr);
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	bf18      	it	ne
 80065ee:	4631      	movne	r1, r6
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff ff69 	bl	80064c8 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 80065f6:	b90f      	cbnz	r7, 80065fc <lv_refr_area_part+0xa8>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	691f      	ldr	r7, [r3, #16]
    lv_refr_obj_and_children(draw_ctx, top_act_scr);
 80065fc:	4639      	mov	r1, r7
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff ff62 	bl	80064c8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 8006604:	6828      	ldr	r0, [r5, #0]
 8006606:	f7fb fa82 	bl	8001b0e <lv_disp_get_layer_top>
 800660a:	4601      	mov	r1, r0
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ff5b 	bl	80064c8 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 8006612:	6828      	ldr	r0, [r5, #0]
 8006614:	f7fb fa82 	bl	8001b1c <lv_disp_get_layer_sys>
 8006618:	4601      	mov	r1, r0
 800661a:	4620      	mov	r0, r4
 800661c:	f7ff ff54 	bl	80064c8 <lv_refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 8006620:	6828      	ldr	r0, [r5, #0]
 8006622:	6803      	ldr	r3, [r0, #0]
 8006624:	7c1b      	ldrb	r3, [r3, #16]
 8006626:	079b      	lsls	r3, r3, #30
 8006628:	d401      	bmi.n	800662e <lv_refr_area_part+0xda>
        draw_buf_flush(disp_refr);
 800662a:	f7ff fce5 	bl	8005ff8 <draw_buf_flush.isra.0>
}
 800662e:	b012      	add	sp, #72	; 0x48
 8006630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(disp_refr->bg_img) {
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006638:	b32e      	cbz	r6, 8006686 <lv_refr_area_part+0x132>
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800663a:	4630      	mov	r0, r6
 800663c:	a902      	add	r1, sp, #8
 800663e:	f002 fea3 	bl	8009388 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8006642:	2801      	cmp	r0, #1
 8006644:	d1cd      	bne.n	80065e2 <lv_refr_area_part+0x8e>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 8006646:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800664a:	9b02      	ldr	r3, [sp, #8]
 800664c:	f3c1 114a 	ubfx	r1, r1, #5, #11
 8006650:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8006654:	3901      	subs	r1, #1
 8006656:	b209      	sxth	r1, r1
 8006658:	3b01      	subs	r3, #1
 800665a:	4642      	mov	r2, r8
 800665c:	9100      	str	r1, [sp, #0]
 800665e:	b21b      	sxth	r3, r3
 8006660:	4641      	mov	r1, r8
 8006662:	a803      	add	r0, sp, #12
 8006664:	f009 f802 	bl	800f66c <lv_area_set>
                lv_draw_img_dsc_init(&dsc);
 8006668:	a805      	add	r0, sp, #20
 800666a:	f000 fabe 	bl	8006bea <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800666e:	682b      	ldr	r3, [r5, #0]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006670:	4620      	mov	r0, r4
                dsc.opa = disp_refr->bg_opa;
 8006672:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8006676:	a905      	add	r1, sp, #20
                dsc.opa = disp_refr->bg_opa;
 8006678:	f88d 201f 	strb.w	r2, [sp, #31]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	aa03      	add	r2, sp, #12
 8006680:	f000 fb02 	bl	8006c88 <lv_draw_img>
 8006684:	e7ad      	b.n	80065e2 <lv_refr_area_part+0x8e>
            lv_draw_rect_dsc_init(&dsc);
 8006686:	a805      	add	r0, sp, #20
 8006688:	f001 fed8 	bl	800843c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800668c:	682b      	ldr	r3, [r5, #0]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800668e:	4620      	mov	r0, r4
            dsc.bg_color = disp_refr->bg_color;
 8006690:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8006692:	a905      	add	r1, sp, #20
            dsc.bg_color = disp_refr->bg_color;
 8006694:	f8ad 2018 	strh.w	r2, [sp, #24]
            dsc.bg_opa = disp_refr->bg_opa;
 8006698:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800669c:	6862      	ldr	r2, [r4, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 800669e:	f88d 301e 	strb.w	r3, [sp, #30]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 80066a2:	f001 feed 	bl	8008480 <lv_draw_rect>
 80066a6:	e79d      	b.n	80065e4 <lv_refr_area_part+0x90>
 80066a8:	20001a88 	.word	0x20001a88

080066ac <_lv_inv_area>:
{
 80066ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80066ae:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 80066b0:	4604      	mov	r4, r0
 80066b2:	b918      	cbnz	r0, 80066bc <_lv_inv_area+0x10>
 80066b4:	f008 fd96 	bl	800f1e4 <lv_disp_get_default>
    if(!disp) return;
 80066b8:	4604      	mov	r4, r0
 80066ba:	b110      	cbz	r0, 80066c2 <_lv_inv_area+0x16>
    if(area_p == NULL) {
 80066bc:	b91d      	cbnz	r5, 80066c6 <_lv_inv_area+0x1a>
        disp->inv_p = 0;
 80066be:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 80066c2:	b004      	add	sp, #16
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x1 = 0;
 80066c6:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80066c8:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 80066ca:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80066cc:	f008 fd90 	bl	800f1f0 <lv_disp_get_hor_res>
 80066d0:	3801      	subs	r0, #1
 80066d2:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80066d6:	4620      	mov	r0, r4
 80066d8:	f008 fd9a 	bl	800f210 <lv_disp_get_ver_res>
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80066dc:	466e      	mov	r6, sp
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80066de:	3801      	subs	r0, #1
 80066e0:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80066e4:	4632      	mov	r2, r6
 80066e6:	4629      	mov	r1, r5
 80066e8:	a802      	add	r0, sp, #8
 80066ea:	f008 fffc 	bl	800f6e6 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d0e7      	beq.n	80066c2 <_lv_inv_area+0x16>
    if(disp->driver->full_refresh) {
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	7c03      	ldrb	r3, [r0, #16]
 80066f6:	079b      	lsls	r3, r3, #30
 80066f8:	d50e      	bpl.n	8006718 <_lv_inv_area+0x6c>
        disp->inv_areas[0] = scr_area;
 80066fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80066fe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8006702:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8006706:	2301      	movs	r3, #1
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8006708:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 800670a:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800670e:	2800      	cmp	r0, #0
 8006710:	d0d7      	beq.n	80066c2 <_lv_inv_area+0x16>
 8006712:	f00a fc44 	bl	8010f9e <lv_timer_resume>
 8006716:	e7d4      	b.n	80066c2 <_lv_inv_area+0x16>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8006718:	6983      	ldr	r3, [r0, #24]
 800671a:	b10b      	cbz	r3, 8006720 <_lv_inv_area+0x74>
 800671c:	a902      	add	r1, sp, #8
 800671e:	4798      	blx	r3
{
 8006720:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 8006722:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8006726:	b2aa      	uxth	r2, r5
 8006728:	4293      	cmp	r3, r2
 800672a:	d813      	bhi.n	8006754 <_lv_inv_area+0xa8>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800672c:	2b1f      	cmp	r3, #31
 800672e:	d81d      	bhi.n	800676c <_lv_inv_area+0xc0>
    dest->x1 = src->x1;
 8006730:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8006734:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006738:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 800673a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800673e:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 8006740:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006744:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 8006746:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800674a:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 800674c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8006750:	3301      	adds	r3, #1
 8006752:	e7d9      	b.n	8006708 <_lv_inv_area+0x5c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8006754:	b2a9      	uxth	r1, r5
 8006756:	3106      	adds	r1, #6
 8006758:	2200      	movs	r2, #0
 800675a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800675e:	a802      	add	r0, sp, #8
 8006760:	f009 f8c1 	bl	800f8e6 <_lv_area_is_in>
 8006764:	3501      	adds	r5, #1
 8006766:	2800      	cmp	r0, #0
 8006768:	d0db      	beq.n	8006722 <_lv_inv_area+0x76>
 800676a:	e7aa      	b.n	80066c2 <_lv_inv_area+0x16>
        disp->inv_p = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 8006772:	f8bd 3000 	ldrh.w	r3, [sp]
 8006776:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 8006778:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800677c:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 800677e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006782:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 8006784:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006788:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800678a:	e7df      	b.n	800674c <_lv_inv_area+0xa0>

0800678c <_lv_refr_get_disp_refreshing>:
}
 800678c:	4b01      	ldr	r3, [pc, #4]	; (8006794 <_lv_refr_get_disp_refreshing+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20001a88 	.word	0x20001a88

08006798 <_lv_disp_refr_timer>:
{
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	b08d      	sub	sp, #52	; 0x34
 800679e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
 80067a0:	f008 fd72 	bl	800f288 <lv_tick_get>
    volatile uint32_t elaps = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	4c83      	ldr	r4, [pc, #524]	; (80069b4 <_lv_disp_refr_timer+0x21c>)
    uint32_t start = lv_tick_get();
 80067a8:	9004      	str	r0, [sp, #16]
    volatile uint32_t elaps = 0;
 80067aa:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 80067ac:	b1f5      	cbz	r5, 80067ec <_lv_disp_refr_timer+0x54>
        disp_refr = tmr->user_data;
 80067ae:	68eb      	ldr	r3, [r5, #12]
        lv_timer_pause(tmr);
 80067b0:	4628      	mov	r0, r5
        disp_refr = tmr->user_data;
 80067b2:	6023      	str	r3, [r4, #0]
        lv_timer_pause(tmr);
 80067b4:	f00a fbee 	bl	8010f94 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	6918      	ldr	r0, [r3, #16]
 80067bc:	f7fd fcf2 	bl	80041a4 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	6958      	ldr	r0, [r3, #20]
 80067c4:	b108      	cbz	r0, 80067ca <_lv_disp_refr_timer+0x32>
 80067c6:	f7fd fced 	bl	80041a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	69d8      	ldr	r0, [r3, #28]
 80067ce:	f7fd fce9 	bl	80041a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	6a18      	ldr	r0, [r3, #32]
 80067d6:	f7fd fce5 	bl	80041a4 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d16a      	bne.n	80068b8 <_lv_disp_refr_timer+0x120>
        disp_refr->inv_p = 0;
 80067e2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 80067e6:	b00d      	add	sp, #52	; 0x34
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr = lv_disp_get_default();
 80067ec:	f008 fcfa 	bl	800f1e4 <lv_disp_get_default>
 80067f0:	6020      	str	r0, [r4, #0]
 80067f2:	e7e1      	b.n	80067b8 <_lv_disp_refr_timer+0x20>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 80067f4:	443b      	add	r3, r7
 80067f6:	f893 6130 	ldrb.w	r6, [r3, #304]	; 0x130
 80067fa:	b1be      	cbz	r6, 800682c <_lv_disp_refr_timer+0x94>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80067fc:	3701      	adds	r7, #1
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8006804:	4297      	cmp	r7, r2
 8006806:	d3f5      	bcc.n	80067f4 <_lv_disp_refr_timer+0x5c>
    px_num = 0;
 8006808:	2000      	movs	r0, #0
 800680a:	496b      	ldr	r1, [pc, #428]	; (80069b8 <_lv_disp_refr_timer+0x220>)
 800680c:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 800680e:	2a00      	cmp	r2, #0
 8006810:	d156      	bne.n	80068c0 <_lv_disp_refr_timer+0x128>
    if(disp_refr->inv_p != 0) {
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 8171 	bne.w	8006b00 <_lv_disp_refr_timer+0x368>
    lv_mem_buf_free_all();
 800681e:	f009 fae5 	bl	800fdec <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 8006822:	f008 fc35 	bl	800f090 <_lv_font_clean_up_fmt_txt>
    _lv_draw_mask_cleanup();
 8006826:	f001 fabf 	bl	8007da8 <_lv_draw_mask_cleanup>
    REFR_TRACE("finished");
 800682a:	e7dc      	b.n	80067e6 <_lv_disp_refr_timer+0x4e>
 800682c:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
 8006830:	f10a 0930 	add.w	r9, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800683a:	429e      	cmp	r6, r3
 800683c:	d2de      	bcs.n	80067fc <_lv_disp_refr_timer+0x64>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800683e:	1983      	adds	r3, r0, r6
 8006840:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006844:	2b00      	cmp	r3, #0
 8006846:	d135      	bne.n	80068b4 <_lv_disp_refr_timer+0x11c>
 8006848:	42b7      	cmp	r7, r6
 800684a:	d033      	beq.n	80068b4 <_lv_disp_refr_timer+0x11c>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800684c:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 8006850:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8006854:	eb00 010b 	add.w	r1, r0, fp
 8006858:	4448      	add	r0, r9
 800685a:	f009 f827 	bl	800f8ac <_lv_area_is_on>
 800685e:	b348      	cbz	r0, 80068b4 <_lv_disp_refr_timer+0x11c>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8006860:	6821      	ldr	r1, [r4, #0]
 8006862:	a80a      	add	r0, sp, #40	; 0x28
 8006864:	eb01 020b 	add.w	r2, r1, fp
 8006868:	4449      	add	r1, r9
 800686a:	f008 ff67 	bl	800f73c <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800686e:	a80a      	add	r0, sp, #40	; 0x28
 8006870:	f008 ff0d 	bl	800f68e <lv_area_get_size>
 8006874:	9002      	str	r0, [sp, #8]
 8006876:	6820      	ldr	r0, [r4, #0]
 8006878:	4448      	add	r0, r9
 800687a:	f008 ff08 	bl	800f68e <lv_area_get_size>
 800687e:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	4458      	add	r0, fp
 8006884:	f008 ff03 	bl	800f68e <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	4405      	add	r5, r0
 800688c:	42ab      	cmp	r3, r5
 800688e:	d211      	bcs.n	80068b4 <_lv_disp_refr_timer+0x11c>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8006890:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 8006892:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8006896:	eb03 020a 	add.w	r2, r3, sl
 800689a:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 800689c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
                disp_refr->inv_area_joined[join_from] = 1;
 80068a0:	4433      	add	r3, r6
 80068a2:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 80068a4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80068a8:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 80068aa:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80068ae:	86d1      	strh	r1, [r2, #54]	; 0x36
 80068b0:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7bd      	b.n	8006834 <_lv_disp_refr_timer+0x9c>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80068b8:	2700      	movs	r7, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80068ba:	f04f 0801 	mov.w	r8, #1
 80068be:	e79e      	b.n	80067fe <_lv_disp_refr_timer+0x66>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80068c0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
        if(disp_refr->inv_area_joined[i] == 0) {
 80068c4:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80068c8:	f812 1009 	ldrb.w	r1, [r2, r9]
 80068cc:	b121      	cbz	r1, 80068d8 <_lv_disp_refr_timer+0x140>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80068ce:	f1b9 0901 	subs.w	r9, r9, #1
 80068d2:	d2f9      	bcs.n	80068c8 <_lv_disp_refr_timer+0x130>
    int32_t last_i = 0;
 80068d4:	f04f 0900 	mov.w	r9, #0
    disp_refr->driver->draw_buf->last_area = 0;
 80068d8:	681b      	ldr	r3, [r3, #0]
        draw_ctx->buf_area = &sub_area;
 80068da:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    disp_refr->driver->draw_buf->last_area = 0;
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	7e1a      	ldrb	r2, [r3, #24]
 80068e2:	f36f 0200 	bfc	r2, #0, #1
 80068e6:	761a      	strb	r2, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 80068e8:	7e1a      	ldrb	r2, [r3, #24]
 80068ea:	f36f 0241 	bfc	r2, #1, #1
 80068ee:	761a      	strb	r2, [r3, #24]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80068f0:	2300      	movs	r3, #0
 80068f2:	9302      	str	r3, [sp, #8]
 80068f4:	f8d4 8000 	ldr.w	r8, [r4]
 80068f8:	9a02      	ldr	r2, [sp, #8]
 80068fa:	f8b8 3150 	ldrh.w	r3, [r8, #336]	; 0x150
 80068fe:	429a      	cmp	r2, r3
 8006900:	da87      	bge.n	8006812 <_lv_disp_refr_timer+0x7a>
        if(disp_refr->inv_area_joined[i] == 0) {
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	4443      	add	r3, r8
 8006906:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800690a:	2b00      	cmp	r3, #0
 800690c:	d144      	bne.n	8006998 <_lv_disp_refr_timer+0x200>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800690e:	f8d8 1000 	ldr.w	r1, [r8]
 8006912:	9a02      	ldr	r2, [sp, #8]
 8006914:	68cb      	ldr	r3, [r1, #12]
 8006916:	454a      	cmp	r2, r9
 8006918:	bf02      	ittt	eq
 800691a:	7e1a      	ldrbeq	r2, [r3, #24]
 800691c:	f042 0201 	orreq.w	r2, r2, #1
 8006920:	761a      	strbeq	r2, [r3, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 8006922:	7e1a      	ldrb	r2, [r3, #24]
 8006924:	f36f 0241 	bfc	r2, #1, #1
 8006928:	761a      	strb	r2, [r3, #24]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800692a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800692c:	9a02      	ldr	r2, [sp, #8]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	00d6      	lsls	r6, r2, #3
 8006932:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8006934:	7c0b      	ldrb	r3, [r1, #16]
 8006936:	f106 0230 	add.w	r2, r6, #48	; 0x30
 800693a:	9203      	str	r2, [sp, #12]
 800693c:	079a      	lsls	r2, r3, #30
 800693e:	d03d      	beq.n	80069bc <_lv_disp_refr_timer+0x224>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8006940:	4640      	mov	r0, r8
 8006942:	f008 fc55 	bl	800f1f0 <lv_disp_get_hor_res>
 8006946:	4606      	mov	r6, r0
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	f008 fc61 	bl	800f210 <lv_disp_get_ver_res>
 800694e:	2200      	movs	r2, #0
 8006950:	3801      	subs	r0, #1
 8006952:	b200      	sxth	r0, r0
 8006954:	1e73      	subs	r3, r6, #1
 8006956:	4611      	mov	r1, r2
 8006958:	9000      	str	r0, [sp, #0]
 800695a:	b21b      	sxth	r3, r3
 800695c:	4650      	mov	r0, sl
 800695e:	f008 fe85 	bl	800f66c <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 8006962:	6823      	ldr	r3, [r4, #0]
        draw_ctx->buf_area = &disp_area;
 8006964:	f8c5 a004 	str.w	sl, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	7c1a      	ldrb	r2, [r3, #16]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f012 0f02 	tst.w	r2, #2
 8006972:	d015      	beq.n	80069a0 <_lv_disp_refr_timer+0x208>
            disp_refr->driver->draw_buf->last_part = 1;
 8006974:	7e1a      	ldrb	r2, [r3, #24]
 8006976:	f042 0202 	orr.w	r2, r2, #2
 800697a:	761a      	strb	r2, [r3, #24]
            draw_ctx->clip_area = &disp_area;
 800697c:	f8c5 a008 	str.w	sl, [r5, #8]
        lv_refr_area_part(draw_ctx);
 8006980:	4628      	mov	r0, r5
 8006982:	f7ff fde7 	bl	8006554 <lv_refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	4418      	add	r0, r3
 800698c:	f008 fe7f 	bl	800f68e <lv_area_get_size>
 8006990:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <_lv_disp_refr_timer+0x220>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	4403      	add	r3, r0
 8006996:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	3301      	adds	r3, #1
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	e7a9      	b.n	80068f4 <_lv_disp_refr_timer+0x15c>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	7e1a      	ldrb	r2, [r3, #24]
 80069a4:	f361 0241 	bfi	r2, r1, #1, #1
 80069a8:	761a      	strb	r2, [r3, #24]
            lv_refr_area(&disp_refr->inv_areas[i]);
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	4443      	add	r3, r8
            draw_ctx->clip_area = area_p;
 80069ae:	60ab      	str	r3, [r5, #8]
            lv_refr_area_part(draw_ctx);
 80069b0:	e7e6      	b.n	8006980 <_lv_disp_refr_timer+0x1e8>
 80069b2:	bf00      	nop
 80069b4:	20001a88 	.word	0x20001a88
 80069b8:	20001a8c 	.word	0x20001a8c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80069bc:	4446      	add	r6, r8
 80069be:	f8b6 b034 	ldrh.w	fp, [r6, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80069c2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80069c6:	8e37      	ldrh	r7, [r6, #48]	; 0x30
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80069c8:	8e72      	ldrh	r2, [r6, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80069ca:	f10b 0b01 	add.w	fp, fp, #1
 80069ce:	ebab 0b07 	sub.w	fp, fp, r7
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80069d2:	4640      	mov	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80069d4:	1c5f      	adds	r7, r3, #1
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	1abf      	subs	r7, r7, r2
 80069da:	f008 fc19 	bl	800f210 <lv_disp_get_ver_res>
 80069de:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80069e0:	fa0f fb8b 	sxth.w	fp, fp
 80069e4:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80069e6:	b23f      	sxth	r7, r7
 80069e8:	db55      	blt.n	8006a96 <_lv_disp_refr_timer+0x2fe>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	f008 fc10 	bl	800f210 <lv_disp_get_ver_res>
 80069f0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 80069f4:	fa0f f888 	sxth.w	r8, r8
    int32_t max_row = get_max_row(disp_refr, w, h);
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 80069fc:	68d3      	ldr	r3, [r2, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	fbb3 fbfb 	udiv	fp, r3, fp
    if(disp_refr->driver->rounder_cb) {
 8006a04:	6993      	ldr	r3, [r2, #24]
 8006a06:	455f      	cmp	r7, fp
 8006a08:	bfa8      	it	ge
 8006a0a:	465f      	movge	r7, fp
 8006a0c:	b303      	cbz	r3, 8006a50 <_lv_disp_refr_timer+0x2b8>
        tmp.x1 = 0;
 8006a0e:	2300      	movs	r3, #0
        lv_coord_t h_tmp = max_row;
 8006a10:	fa0f fb87 	sxth.w	fp, r7
        tmp.x1 = 0;
 8006a14:	930a      	str	r3, [sp, #40]	; 0x28
        tmp.x2 = 0;
 8006a16:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            tmp.y2 = h_tmp - 1;
 8006a1a:	465b      	mov	r3, fp
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a22:	6810      	ldr	r0, [r2, #0]
 8006a24:	fa0f fb8b 	sxth.w	fp, fp
 8006a28:	4651      	mov	r1, sl
 8006a2a:	6982      	ldr	r2, [r0, #24]
            tmp.y2 = h_tmp - 1;
 8006a2c:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	4790      	blx	r2
 8006a34:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8006a38:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006a3c:	3101      	adds	r1, #1
 8006a3e:	1a8a      	subs	r2, r1, r2
            if(lv_area_get_height(&tmp) <= max_row) break;
 8006a40:	b212      	sxth	r2, r2
 8006a42:	4297      	cmp	r7, r2
 8006a44:	9b05      	ldr	r3, [sp, #20]
 8006a46:	da29      	bge.n	8006a9c <_lv_disp_refr_timer+0x304>
        } while(h_tmp > 0);
 8006a48:	f1bb 0f00 	cmp.w	fp, #0
 8006a4c:	dce5      	bgt.n	8006a1a <_lv_disp_refr_timer+0x282>
            return 0;
 8006a4e:	2700      	movs	r7, #0
    lv_coord_t row_last = 0;
 8006a50:	2300      	movs	r3, #0
        sub_area.y2 = row + max_row - 1;
 8006a52:	b2ba      	uxth	r2, r7
 8006a54:	1e51      	subs	r1, r2, #1
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8006a56:	f9b6 b032 	ldrsh.w	fp, [r6, #50]	; 0x32
 8006a5a:	9105      	str	r1, [sp, #20]
 8006a5c:	eb0b 0007 	add.w	r0, fp, r7
 8006a60:	3801      	subs	r0, #1
 8006a62:	4540      	cmp	r0, r8
 8006a64:	6821      	ldr	r1, [r4, #0]
 8006a66:	dd1d      	ble.n	8006aa4 <_lv_disp_refr_timer+0x30c>
    if(y2 != row_last) {
 8006a68:	4598      	cmp	r8, r3
 8006a6a:	d08c      	beq.n	8006986 <_lv_disp_refr_timer+0x1ee>
        sub_area.x1 = area_p->x1;
 8006a6c:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8006a6e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 8006a72:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
        sub_area.y1 = row;
 8006a74:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
        sub_area.x2 = area_p->x2;
 8006a78:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006a7c:	680b      	ldr	r3, [r1, #0]
        sub_area.y2 = y2;
 8006a7e:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006a82:	68db      	ldr	r3, [r3, #12]
        draw_ctx->clip_area = &sub_area;
 8006a84:	e9c5 aa01 	strd	sl, sl, [r5, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 8006a8c:	7e1a      	ldrb	r2, [r3, #24]
 8006a8e:	f042 0202 	orr.w	r2, r2, #2
 8006a92:	761a      	strb	r2, [r3, #24]
 8006a94:	e774      	b.n	8006980 <_lv_disp_refr_timer+0x1e8>
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8006a96:	f9b6 8036 	ldrsh.w	r8, [r6, #54]	; 0x36
 8006a9a:	e7ad      	b.n	80069f8 <_lv_disp_refr_timer+0x260>
        if(h_tmp <= 0) {
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	ddd6      	ble.n	8006a4e <_lv_disp_refr_timer+0x2b6>
            max_row = tmp.y2 + 1;
 8006aa0:	460f      	mov	r7, r1
    return max_row;
 8006aa2:	e7d5      	b.n	8006a50 <_lv_disp_refr_timer+0x2b8>
        sub_area.x1 = area_p->x1;
 8006aa4:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8006aa6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.x2 = area_p->x2;
 8006aaa:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
        sub_area.y1 = row;
 8006aac:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
        sub_area.x2 = area_p->x2;
 8006ab0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        sub_area.y2 = row + max_row - 1;
 8006ab4:	9b05      	ldr	r3, [sp, #20]
 8006ab6:	fa1f fb8b 	uxth.w	fp, fp
 8006aba:	eb0b 0003 	add.w	r0, fp, r3
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006abe:	680b      	ldr	r3, [r1, #0]
 8006ac0:	b200      	sxth	r0, r0
 8006ac2:	68d9      	ldr	r1, [r3, #12]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 8006ac4:	4580      	cmp	r8, r0
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006ac6:	688b      	ldr	r3, [r1, #8]
        sub_area.y2 = row + max_row - 1;
 8006ac8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8006acc:	602b      	str	r3, [r5, #0]
        draw_ctx->clip_area = &sub_area;
 8006ace:	e9c5 aa01 	strd	sl, sl, [r5, #4]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 8006ad2:	bfb8      	it	lt
 8006ad4:	f8ad 802e 	strhlt.w	r8, [sp, #46]	; 0x2e
        row_last = sub_area.y2;
 8006ad8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8006adc:	4598      	cmp	r8, r3
 8006ade:	bf08      	it	eq
 8006ae0:	7e08      	ldrbeq	r0, [r1, #24]
 8006ae2:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8006ae6:	bf04      	itt	eq
 8006ae8:	f040 0002 	orreq.w	r0, r0, #2
 8006aec:	7608      	strbeq	r0, [r1, #24]
        lv_refr_area_part(draw_ctx);
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7ff fd30 	bl	8006554 <lv_refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	9b06      	ldr	r3, [sp, #24]
 8006af8:	4493      	add	fp, r2
 8006afa:	fa0f fb8b 	sxth.w	fp, fp
 8006afe:	e7ad      	b.n	8006a5c <_lv_disp_refr_timer+0x2c4>
        if(disp_refr->driver->full_refresh) {
 8006b00:	6803      	ldr	r3, [r0, #0]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	079b      	lsls	r3, r3, #30
 8006b06:	d501      	bpl.n	8006b0c <_lv_disp_refr_timer+0x374>
            draw_buf_flush(disp_refr);
 8006b08:	f7ff fa76 	bl	8005ff8 <draw_buf_flush.isra.0>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b12:	3030      	adds	r0, #48	; 0x30
 8006b14:	f009 fb4c 	bl	80101b0 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	2120      	movs	r1, #32
 8006b1c:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8006b20:	f009 fb46 	bl	80101b0 <lv_memset_00>
        disp_refr->inv_p = 0;
 8006b24:	2200      	movs	r2, #0
 8006b26:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8006b28:	9804      	ldr	r0, [sp, #16]
        disp_refr->inv_p = 0;
 8006b2a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8006b2e:	f008 fbb9 	bl	800f2a4 <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 8006b32:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8006b34:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f43f ae6f 	beq.w	800681e <_lv_disp_refr_timer+0x86>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8006b40:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <_lv_disp_refr_timer+0x3b4>)
 8006b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	4798      	blx	r3
 8006b48:	e669      	b.n	800681e <_lv_disp_refr_timer+0x86>
 8006b4a:	bf00      	nop
 8006b4c:	20001a8c 	.word	0x20001a8c

08006b50 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 8006b54:	6840      	ldr	r0, [r0, #4]
{
 8006b56:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8006b58:	b108      	cbz	r0, 8006b5e <apply_theme+0xe>
 8006b5a:	f7ff fff9 	bl	8006b50 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	b123      	cbz	r3, 8006b6c <apply_theme+0x1c>
 8006b62:	4629      	mov	r1, r5
 8006b64:	4620      	mov	r0, r4
}
 8006b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 8006b6a:	4718      	bx	r3
}
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}

08006b6e <lv_theme_get_from_obj>:
{
 8006b6e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8006b70:	b128      	cbz	r0, 8006b7e <lv_theme_get_from_obj+0x10>
 8006b72:	f7ff f9bd 	bl	8005ef0 <lv_obj_get_disp>
}
 8006b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 8006b7a:	f7fa bfd6 	b.w	8001b2a <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8006b7e:	f008 fb31 	bl	800f1e4 <lv_disp_get_default>
 8006b82:	e7f8      	b.n	8006b76 <lv_theme_get_from_obj+0x8>

08006b84 <lv_theme_apply>:
{
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8006b88:	f7ff fff1 	bl	8006b6e <lv_theme_get_from_obj>
    if(th == NULL) return;
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	b150      	cbz	r0, 8006ba6 <lv_theme_apply+0x22>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8006b90:	4628      	mov	r0, r5
 8006b92:	2100      	movs	r1, #0
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <lv_theme_apply+0x24>)
 8006b96:	f7fe fe53 	bl	8005840 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4620      	mov	r0, r4
}
 8006b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8006ba2:	f7ff bfd5 	b.w	8006b50 <apply_theme>
}
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	000fffff 	.word	0x000fffff

08006bac <lv_draw_init>:
    //    lv_draw_sw_init();
    //
    //#if LV_USE_GPU_STM32_DMA2D == 0
    //    lv_gpu_stm32_dma2d_init();
    //#endif
}
 8006bac:	4770      	bx	lr

08006bae <show_error>:
    return LV_RES_OK;
}


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 8006bae:	b570      	push	{r4, r5, r6, lr}
 8006bb0:	b098      	sub	sp, #96	; 0x60
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8006bb6:	a80b      	add	r0, sp, #44	; 0x2c
{
 8006bb8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 8006bba:	f001 fc3f 	bl	800843c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 8006bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	a90b      	add	r1, sp, #44	; 0x2c
 8006bc6:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 8006bc8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8006bcc:	f001 fc58 	bl	8008480 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8006bd0:	a803      	add	r0, sp, #12
 8006bd2:	f000 f96d 	bl	8006eb0 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	462a      	mov	r2, r5
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4633      	mov	r3, r6
 8006be0:	a903      	add	r1, sp, #12
 8006be2:	f000 f983 	bl	8006eec <lv_draw_label>
}
 8006be6:	b018      	add	sp, #96	; 0x60
 8006be8:	bd70      	pop	{r4, r5, r6, pc}

08006bea <lv_draw_img_dsc_init>:
{
 8006bea:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8006bec:	2118      	movs	r1, #24
{
 8006bee:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8006bf0:	f009 fade 	bl	80101b0 <lv_memset_00>
    dsc->recolor = lv_color_black();
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 8006bf8:	23ff      	movs	r3, #255	; 0xff
 8006bfa:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8006bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c00:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8006c02:	7d23      	ldrb	r3, [r4, #20]
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	7523      	strb	r3, [r4, #20]
}
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <lv_img_cf_get_px_size>:
    switch(cf) {
 8006c0c:	3804      	subs	r0, #4
 8006c0e:	b2c0      	uxtb	r0, r0
 8006c10:	280a      	cmp	r0, #10
 8006c12:	bf9a      	itte	ls
 8006c14:	4b01      	ldrls	r3, [pc, #4]	; (8006c1c <lv_img_cf_get_px_size+0x10>)
 8006c16:	5c18      	ldrbls	r0, [r3, r0]
{
 8006c18:	2000      	movhi	r0, #0
}
 8006c1a:	4770      	bx	lr
 8006c1c:	0801a378 	.word	0x0801a378

08006c20 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 8006c20:	2803      	cmp	r0, #3
 8006c22:	d005      	beq.n	8006c30 <lv_img_cf_is_chroma_keyed+0x10>
 8006c24:	3806      	subs	r0, #6
 8006c26:	2804      	cmp	r0, #4
 8006c28:	bf8c      	ite	hi
 8006c2a:	2000      	movhi	r0, #0
 8006c2c:	2001      	movls	r0, #1
 8006c2e:	4770      	bx	lr
            is_chroma_keyed = true;
 8006c30:	2001      	movs	r0, #1
}
 8006c32:	4770      	bx	lr

08006c34 <lv_img_cf_has_alpha>:
    switch(cf) {
 8006c34:	280e      	cmp	r0, #14
 8006c36:	d809      	bhi.n	8006c4c <lv_img_cf_has_alpha+0x18>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c3e:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8006c42:	4218      	tst	r0, r3
 8006c44:	bf14      	ite	ne
 8006c46:	2001      	movne	r0, #1
 8006c48:	2000      	moveq	r0, #0
 8006c4a:	4770      	bx	lr
{
 8006c4c:	2000      	movs	r0, #0
}
 8006c4e:	4770      	bx	lr

08006c50 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8006c50:	b150      	cbz	r0, 8006c68 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8006c52:	7803      	ldrb	r3, [r0, #0]
 8006c54:	f1a3 0220 	sub.w	r2, r3, #32
 8006c58:	2a5f      	cmp	r2, #95	; 0x5f
 8006c5a:	d907      	bls.n	8006c6c <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 8006c5c:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 8006c60:	bf14      	ite	ne
 8006c62:	2002      	movne	r0, #2
 8006c64:	2000      	moveq	r0, #0
 8006c66:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8006c68:	2003      	movs	r0, #3
 8006c6a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8006c6c:	2001      	movs	r0, #1
}
 8006c6e:	4770      	bx	lr

08006c70 <lv_draw_img_decoded>:
{
 8006c70:	b430      	push	{r4, r5}
    if(draw_ctx->draw_img_decoded == NULL) return;
 8006c72:	6944      	ldr	r4, [r0, #20]
{
 8006c74:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 8006c78:	b11c      	cbz	r4, 8006c82 <lv_draw_img_decoded+0x12>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 8006c7a:	46a4      	mov	ip, r4
 8006c7c:	9502      	str	r5, [sp, #8]
}
 8006c7e:	bc30      	pop	{r4, r5}
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 8006c80:	4760      	bx	ip
}
 8006c82:	bc30      	pop	{r4, r5}
 8006c84:	4770      	bx	lr
	...

08006c88 <lv_draw_img>:
{
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	460f      	mov	r7, r1
 8006c90:	4614      	mov	r4, r2
 8006c92:	b08d      	sub	sp, #52	; 0x34
    if(src == NULL) {
 8006c94:	b93b      	cbnz	r3, 8006ca6 <lv_draw_img+0x1e>
        show_error(draw_ctx, coords, "No\ndata");
 8006c96:	4621      	mov	r1, r4
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4a7b      	ldr	r2, [pc, #492]	; (8006e88 <lv_draw_img+0x200>)
 8006c9c:	f7ff ff87 	bl	8006bae <show_error>
}
 8006ca0:	b00d      	add	sp, #52	; 0x34
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 8006ca6:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8006caa:	f1bc 0f02 	cmp.w	ip, #2
 8006cae:	d9f7      	bls.n	8006ca0 <lv_draw_img+0x18>
    if(draw_ctx->draw_img) {
 8006cb0:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8006cb4:	f1b8 0f00 	cmp.w	r8, #0
 8006cb8:	d003      	beq.n	8006cc2 <lv_draw_img+0x3a>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8006cba:	47c0      	blx	r8
    if(res == LV_RES_INV) {
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1ef      	bne.n	8006ca0 <lv_draw_img+0x18>
 8006cc0:	e7e9      	b.n	8006c96 <lv_draw_img+0xe>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8006cc2:	690a      	ldr	r2, [r1, #16]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	8909      	ldrh	r1, [r1, #8]
 8006cc8:	f002 f86a 	bl	8008da0 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 8006ccc:	4605      	mov	r5, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0e1      	beq.n	8006c96 <lv_draw_img+0xe>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8006cd2:	7d03      	ldrb	r3, [r0, #20]
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ffa1 	bl	8006c20 <lv_img_cf_is_chroma_keyed>
 8006cde:	b988      	cbnz	r0, 8006d04 <lv_draw_img+0x7c>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff ffa7 	bl	8006c34 <lv_img_cf_has_alpha>
    else cf = LV_IMG_CF_TRUE_COLOR;
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2305      	movne	r3, #5
 8006cec:	2304      	moveq	r3, #4
    if(cdsc->dec_dsc.error_msg != NULL) {
 8006cee:	6a2a      	ldr	r2, [r5, #32]
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8006cf0:	9303      	str	r3, [sp, #12]
    if(cdsc->dec_dsc.error_msg != NULL) {
 8006cf2:	b14a      	cbz	r2, 8006d08 <lv_draw_img+0x80>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ff59 	bl	8006bae <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f002 fbdf 	bl	80094c0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 8006d02:	e7cd      	b.n	8006ca0 <lv_draw_img+0x18>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8006d04:	2306      	movs	r3, #6
 8006d06:	e7f2      	b.n	8006cee <lv_draw_img+0x66>
    else if(cdsc->dec_dsc.img_data) {
 8006d08:	69ab      	ldr	r3, [r5, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d053      	beq.n	8006db6 <lv_draw_img+0x12e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8006d0e:	683b      	ldr	r3, [r7, #0]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8006d10:	f9b4 1000 	ldrsh.w	r1, [r4]
    dest->y1 = src->y1;
 8006d14:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    dest->x2 = src->x2;
 8006d18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
    dest->y2 = src->y2;
 8006d1c:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8006d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x1 = src->x1;
 8006d24:	f8ad 1020 	strh.w	r1, [sp, #32]
    dest->y1 = src->y1;
 8006d28:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 8006d2c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 8006d30:	f8ad c026 	strh.w	ip, [sp, #38]	; 0x26
 8006d34:	d027      	beq.n	8006d86 <lv_draw_img+0xfe>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8006d36:	46be      	mov	lr, r7
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f93e 3b04 	ldrsh.w	r3, [lr], #4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006d3e:	f10c 0c01 	add.w	ip, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006d42:	1a41      	subs	r1, r0, r1
 8006d44:	8878      	ldrh	r0, [r7, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006d46:	ebac 0202 	sub.w	r2, ip, r2
 8006d4a:	9000      	str	r0, [sp, #0]
 8006d4c:	b212      	sxth	r2, r2
 8006d4e:	b209      	sxth	r1, r1
 8006d50:	f8cd e004 	str.w	lr, [sp, #4]
 8006d54:	a808      	add	r0, sp, #32
 8006d56:	f001 fd4e 	bl	80087f6 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8006d5a:	8822      	ldrh	r2, [r4, #0]
 8006d5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8006d60:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8006d64:	4413      	add	r3, r2
 8006d66:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8006d6a:	8863      	ldrh	r3, [r4, #2]
 8006d6c:	4419      	add	r1, r3
 8006d6e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8006d72:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006d76:	440a      	add	r2, r1
 8006d78:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8006d7c:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8006d80:	4413      	add	r3, r2
 8006d82:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8006d86:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	68b1      	ldr	r1, [r6, #8]
 8006d8e:	aa08      	add	r2, sp, #32
 8006d90:	f008 fca9 	bl	800f6e6 <_lv_area_intersect>
        if(union_ok == false) {
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d0b1      	beq.n	8006cfc <lv_draw_img+0x74>
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8006d98:	9b03      	ldr	r3, [sp, #12]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8006d9a:	f8d6 9008 	ldr.w	r9, [r6, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4622      	mov	r2, r4
 8006da2:	4639      	mov	r1, r7
 8006da4:	4630      	mov	r0, r6
 8006da6:	69ab      	ldr	r3, [r5, #24]
        draw_ctx->clip_area = &clip_com;
 8006da8:	f8c6 8008 	str.w	r8, [r6, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8006dac:	f7ff ff60 	bl	8006c70 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8006db0:	f8c6 9008 	str.w	r9, [r6, #8]
 8006db4:	e7a2      	b.n	8006cfc <lv_draw_img+0x74>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8006db6:	4622      	mov	r2, r4
 8006db8:	68b1      	ldr	r1, [r6, #8]
 8006dba:	a806      	add	r0, sp, #24
 8006dbc:	f008 fc93 	bl	800f6e6 <_lv_area_intersect>
        if(union_ok == false) {
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d09b      	beq.n	8006cfc <lv_draw_img+0x74>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006dc4:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 8006dc8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8006dcc:	f108 0801 	add.w	r8, r8, #1
 8006dd0:	eba8 0803 	sub.w	r8, r8, r3
 8006dd4:	fa0f f888 	sxth.w	r8, r8
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8006dd8:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 8006ddc:	f009 f99a 	bl	8010114 <lv_mem_buf_get>
    dest->x1 = src->x1;
 8006de0:	9b06      	ldr	r3, [sp, #24]
        lv_area_set_height(&line, 1);
 8006de2:	f10d 0a20 	add.w	sl, sp, #32
 8006de6:	9308      	str	r3, [sp, #32]
    dest->x2 = src->x2;
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8006dec:	4681      	mov	r9, r0
        lv_area_set_height(&line, 1);
 8006dee:	4650      	mov	r0, sl
 8006df0:	9309      	str	r3, [sp, #36]	; 0x24
 8006df2:	f008 fc47 	bl	800f684 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8006df6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8006dfa:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 8006dfe:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 8006e02:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8006e06:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 8006e08:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8006e0c:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 8006e0e:	9104      	str	r1, [sp, #16]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8006e10:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8006e12:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8006e16:	459b      	cmp	fp, r3
 8006e18:	dd03      	ble.n	8006e22 <lv_draw_img+0x19a>
        lv_mem_buf_release(buf);
 8006e1a:	4648      	mov	r0, r9
 8006e1c:	f008 ffd2 	bl	800fdc4 <lv_mem_buf_release>
 8006e20:	e76c      	b.n	8006cfc <lv_draw_img+0x74>
            union_ok = _lv_area_intersect(&mask_line, draw_ctx->clip_area, &line);
 8006e22:	4652      	mov	r2, sl
 8006e24:	68b1      	ldr	r1, [r6, #8]
 8006e26:	a80a      	add	r0, sp, #40	; 0x28
 8006e28:	f008 fc5d 	bl	800f6e6 <_lv_area_intersect>
            if(union_ok == false) continue;
 8006e2c:	b348      	cbz	r0, 8006e82 <lv_draw_img+0x1fa>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8006e2e:	4643      	mov	r3, r8
 8006e30:	4628      	mov	r0, r5
 8006e32:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8006e36:	9905      	ldr	r1, [sp, #20]
 8006e38:	f8cd 9000 	str.w	r9, [sp]
 8006e3c:	f002 fb30 	bl	80094a0 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8006e40:	2801      	cmp	r0, #1
 8006e42:	d009      	beq.n	8006e58 <lv_draw_img+0x1d0>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8006e44:	4628      	mov	r0, r5
 8006e46:	f002 fb3b 	bl	80094c0 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f008 ffba 	bl	800fdc4 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 8006e50:	4628      	mov	r0, r5
 8006e52:	f002 fb35 	bl	80094c0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 8006e56:	e71e      	b.n	8006c96 <lv_draw_img+0xe>
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4639      	mov	r1, r7
 8006e60:	464b      	mov	r3, r9
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff ff04 	bl	8006c70 <lv_draw_img_decoded>
            line.y1++;
 8006e68:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8006e72:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006e76:	3301      	adds	r3, #1
 8006e78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	9304      	str	r3, [sp, #16]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8006e82:	f10b 0b01 	add.w	fp, fp, #1
 8006e86:	e7c4      	b.n	8006e12 <lv_draw_img+0x18a>
 8006e88:	0801a370 	.word	0x0801a370

08006e8c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8006e8c:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8006e8e:	3830      	subs	r0, #48	; 0x30
 8006e90:	b2c0      	uxtb	r0, r0
 8006e92:	2809      	cmp	r0, #9
 8006e94:	d90b      	bls.n	8006eae <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8006e96:	2b60      	cmp	r3, #96	; 0x60
 8006e98:	bf84      	itt	hi
 8006e9a:	3b20      	subhi	r3, #32
 8006e9c:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 8006e9e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ea2:	2a05      	cmp	r2, #5
 8006ea4:	d802      	bhi.n	8006eac <hex_char_to_num+0x20>
 8006ea6:	3b37      	subs	r3, #55	; 0x37
 8006ea8:	b2d8      	uxtb	r0, r3
 8006eaa:	4770      	bx	lr
{
 8006eac:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 8006eae:	4770      	bx	lr

08006eb0 <lv_draw_label_dsc_init>:
{
 8006eb0:	b538      	push	{r3, r4, r5, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8006eb2:	2120      	movs	r1, #32
{
 8006eb4:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8006eb6:	f009 f97b 	bl	80101b0 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8006eba:	23ff      	movs	r3, #255	; 0xff
 8006ebc:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 8006ec0:	2500      	movs	r5, #0
    dsc->font = LV_FONT_DEFAULT;
 8006ec2:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8006ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8006ec8:	2005      	movs	r0, #5
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8006eca:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->color = lv_color_black();
 8006ece:	60e5      	str	r5, [r4, #12]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8006ed0:	f008 fdc2 	bl	800fa58 <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8006ed4:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8006ed6:	8220      	strh	r0, [r4, #16]
}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	08016f44 	.word	0x08016f44

08006ee0 <lv_draw_letter>:
{
 8006ee0:	b410      	push	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 8006ee2:	69c4      	ldr	r4, [r0, #28]
 8006ee4:	46a4      	mov	ip, r4
}
 8006ee6:	bc10      	pop	{r4}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 8006ee8:	4760      	bx	ip
	...

08006eec <lv_draw_label>:
{
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	b0b3      	sub	sp, #204	; 0xcc
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	930d      	str	r3, [sp, #52]	; 0x34
    if(dsc->opa <= LV_OPA_MIN) return;
 8006ef8:	7e8b      	ldrb	r3, [r1, #26]
{
 8006efa:	4682      	mov	sl, r0
    if(dsc->opa <= LV_OPA_MIN) return;
 8006efc:	2b02      	cmp	r3, #2
{
 8006efe:	460c      	mov	r4, r1
 8006f00:	4615      	mov	r5, r2
 8006f02:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
    if(dsc->opa <= LV_OPA_MIN) return;
 8006f06:	f240 80bc 	bls.w	8007082 <lv_draw_label+0x196>
    if(dsc->font == NULL) {
 8006f0a:	680f      	ldr	r7, [r1, #0]
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	f000 80b8 	beq.w	8007082 <lv_draw_label+0x196>
    if(draw_ctx->draw_letter == NULL) {
 8006f12:	69c3      	ldr	r3, [r0, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80b4 	beq.w	8007082 <lv_draw_label+0x196>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 8006f1a:	468c      	mov	ip, r1
 8006f1c:	ae1d      	add	r6, sp, #116	; 0x74
 8006f1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006f22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f24:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006f28:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    if(txt == NULL || txt[0] == '\0')
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a7 	beq.w	8007082 <lv_draw_label+0x196>
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 80a3 	beq.w	8007082 <lv_draw_label+0x196>
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006f42:	a816      	add	r0, sp, #88	; 0x58
 8006f44:	f008 fbcf 	bl	800f6e6 <_lv_area_intersect>
    if(!clip_ok) return;
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f000 809a 	beq.w	8007082 <lv_draw_label+0x196>
    lv_text_align_t align = dsc->align;
 8006f4e:	7f23      	ldrb	r3, [r4, #28]
 8006f50:	9308      	str	r3, [sp, #32]
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8006f52:	7f63      	ldrb	r3, [r4, #29]
 8006f54:	0798      	lsls	r0, r3, #30
 8006f56:	f100 8097 	bmi.w	8007088 <lv_draw_label+0x19c>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006f5a:	88ab      	ldrh	r3, [r5, #4]
 8006f5c:	882a      	ldrh	r2, [r5, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 8006f62:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 8006f64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    pos.y = coords->y1;
 8006f68:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 8006f6c:	9206      	str	r2, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 8006f6e:	9906      	ldr	r1, [sp, #24]
 8006f70:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8006f74:	440a      	add	r2, r1
 8006f76:	9209      	str	r2, [sp, #36]	; 0x24
    pos.x = coords->x1;
 8006f78:	882a      	ldrh	r2, [r5, #0]
    y_ofs = dsc->ofs_y;
 8006f7a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    pos.x = coords->x1;
 8006f7e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    x_ofs = dsc->ofs_x;
 8006f82:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8006f86:	9210      	str	r2, [sp, #64]	; 0x40
    pos.y += y_ofs;
 8006f88:	1842      	adds	r2, r0, r1
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8006f90:	f1b8 0f00 	cmp.w	r8, #0
 8006f94:	f040 8089 	bne.w	80070aa <lv_draw_label+0x1be>
    uint32_t line_start     = 0;
 8006f98:	2600      	movs	r6, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8006f9a:	f04f 0900 	mov.w	r9, #0
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa2:	9805      	ldr	r0, [sp, #20]
 8006fa4:	7f63      	ldrb	r3, [r4, #29]
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	f8cd 9000 	str.w	r9, [sp]
 8006fb4:	4430      	add	r0, r6
 8006fb6:	f00a fb9b 	bl	80116f0 <_lv_txt_get_next_line>
 8006fba:	1983      	adds	r3, r0, r6
 8006fbc:	9304      	str	r3, [sp, #16]
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8006fbe:	9a06      	ldr	r2, [sp, #24]
 8006fc0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006fca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8006fce:	4293      	cmp	r3, r2
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8006fd0:	9b05      	ldr	r3, [sp, #20]
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8006fd2:	f2c0 808b 	blt.w	80070ec <lv_draw_label+0x200>
    if(align == LV_TEXT_ALIGN_CENTER) {
 8006fd6:	1998      	adds	r0, r3, r6
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	f040 80b5 	bne.w	800714a <lv_draw_label+0x25e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8006fe0:	7f63      	ldrb	r3, [r4, #29]
 8006fe2:	9904      	ldr	r1, [sp, #16]
 8006fe4:	463a      	mov	r2, r7
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	1b89      	subs	r1, r1, r6
 8006fea:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8006fee:	f00a fca9 	bl	8011944 <lv_txt_get_width>
 8006ff2:	88ab      	ldrh	r3, [r5, #4]
 8006ff4:	882a      	ldrh	r2, [r5, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8006ffa:	b21b      	sxth	r3, r3
 8006ffc:	1a18      	subs	r0, r3, r0
 8006ffe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8007002:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007006:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800700a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    uint32_t sel_start = dsc->sel_start;
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	9307      	str	r3, [sp, #28]
    if(sel_start > sel_end) {
 8007016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800701a:	4293      	cmp	r3, r2
 800701c:	bf88      	it	hi
 800701e:	e9cd 2306 	strdhi	r2, r3, [sp, #24]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8007022:	7fa3      	ldrb	r3, [r4, #30]
 8007024:	0799      	lsls	r1, r3, #30
 8007026:	d018      	beq.n	800705a <lv_draw_label+0x16e>
        lv_draw_line_dsc_init(&line_dsc);
 8007028:	a81a      	add	r0, sp, #104	; 0x68
 800702a:	f000 fa27 	bl	800747c <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800702e:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.blend_mode = dsc->blend_mode;
 8007030:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
        line_dsc.color = dsc->color;
 8007034:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8007038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf08      	it	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        line_dsc.opa = dsc->opa;
 8007046:	7ea3      	ldrb	r3, [r4, #26]
 8007048:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        line_dsc.blend_mode = dsc->blend_mode;
 800704c:	7fa3      	ldrb	r3, [r4, #30]
 800704e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8007052:	f363 0201 	bfi	r2, r3, #0, #2
 8007056:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800705a:	f04f 0b00 	mov.w	fp, #0
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800705e:	a825      	add	r0, sp, #148	; 0x94
 8007060:	f001 f9ec 	bl	800843c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8007064:	8a23      	ldrh	r3, [r4, #16]
    uint32_t par_start = 0;
 8007066:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800706a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    int32_t pos_x_start = pos.x;
 800706e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8007072:	930e      	str	r3, [sp, #56]	; 0x38
    while(txt[line_start] != '\0') {
 8007074:	9b05      	ldr	r3, [sp, #20]
 8007076:	4433      	add	r3, r6
 8007078:	930f      	str	r3, [sp, #60]	; 0x3c
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	5d9b      	ldrb	r3, [r3, r6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d17c      	bne.n	800717c <lv_draw_label+0x290>
}
 8007082:	b033      	add	sp, #204	; 0xcc
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8007088:	9302      	str	r3, [sp, #8]
 800708a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	9905      	ldr	r1, [sp, #20]
 800709a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800709e:	a825      	add	r0, sp, #148	; 0x94
 80070a0:	f00a fc93 	bl	80119ca <lv_txt_get_size>
        w = p.x;
 80070a4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80070a8:	e75c      	b.n	8006f64 <lv_draw_label+0x78>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 80070aa:	2900      	cmp	r1, #0
 80070ac:	f47f af74 	bne.w	8006f98 <lv_draw_label+0xac>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f6bf af71 	bge.w	8006f98 <lv_draw_label+0xac>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 80070b6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80070ba:	1a09      	subs	r1, r1, r0
 80070bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070be:	2900      	cmp	r1, #0
 80070c0:	bfb8      	it	lt
 80070c2:	4249      	neglt	r1, r1
 80070c4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80070c8:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 80070cc:	bfc4      	itt	gt
 80070ce:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 80070d2:	f8c8 1000 	strgt.w	r1, [r8]
        last_line_start = hint->line_start;
 80070d6:	f8d8 6000 	ldr.w	r6, [r8]
    if(hint && last_line_start >= 0) {
 80070da:	2e00      	cmp	r6, #0
 80070dc:	f6ff af5c 	blt.w	8006f98 <lv_draw_label+0xac>
        pos.y += hint->y;
 80070e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070e4:	440a      	add	r2, r1
 80070e6:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80070ea:	e756      	b.n	8006f9a <lv_draw_label+0xae>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	4639      	mov	r1, r7
 80070f0:	eb03 0b02 	add.w	fp, r3, r2
 80070f4:	7f63      	ldrb	r3, [r4, #29]
 80070f6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80070fa:	e9cd 9300 	strd	r9, r3, [sp]
 80070fe:	4658      	mov	r0, fp
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	f00a faf5 	bl	80116f0 <_lv_txt_get_next_line>
 8007106:	9b04      	ldr	r3, [sp, #16]
        pos.y += line_height;
 8007108:	9a09      	ldr	r2, [sp, #36]	; 0x24
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800710a:	4418      	add	r0, r3
        pos.y += line_height;
 800710c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8007110:	4413      	add	r3, r2
 8007112:	b21b      	sxth	r3, r3
 8007114:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8007118:	f1b8 0f00 	cmp.w	r8, #0
 800711c:	d00e      	beq.n	800713c <lv_draw_label+0x250>
 800711e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8007122:	db0b      	blt.n	800713c <lv_draw_label+0x250>
 8007124:	f8d8 2000 	ldr.w	r2, [r8]
 8007128:	2a00      	cmp	r2, #0
 800712a:	da07      	bge.n	800713c <lv_draw_label+0x250>
            hint->line_start = line_start;
 800712c:	9a04      	ldr	r2, [sp, #16]
 800712e:	f8c8 2000 	str.w	r2, [r8]
            hint->y          = pos.y - coords->y1;
 8007132:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8007136:	1a9b      	subs	r3, r3, r2
            hint->coord_y    = coords->y1;
 8007138:	e9c8 3201 	strd	r3, r2, [r8, #4]
        if(txt[line_start] == '\0') return;
 800713c:	f89b 3000 	ldrb.w	r3, [fp]
 8007140:	9e04      	ldr	r6, [sp, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d09d      	beq.n	8007082 <lv_draw_label+0x196>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8007146:	9004      	str	r0, [sp, #16]
 8007148:	e739      	b.n	8006fbe <lv_draw_label+0xd2>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	2b03      	cmp	r3, #3
 800714e:	f47f af5e 	bne.w	800700e <lv_draw_label+0x122>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8007152:	7f63      	ldrb	r3, [r4, #29]
 8007154:	9904      	ldr	r1, [sp, #16]
 8007156:	463a      	mov	r2, r7
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	1b89      	subs	r1, r1, r6
 800715c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8007160:	f00a fbf0 	bl	8011944 <lv_txt_get_width>
 8007164:	88ab      	ldrh	r3, [r5, #4]
 8007166:	882a      	ldrh	r2, [r5, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800716c:	b21b      	sxth	r3, r3
 800716e:	1a1b      	subs	r3, r3, r0
 8007170:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8007174:	4403      	add	r3, r0
 8007176:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800717a:	e748      	b.n	800700e <lv_draw_label+0x122>
        pos.x += x_ofs;
 800717c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8007180:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007182:	4413      	add	r3, r2
 8007184:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        i         = 0;
 8007188:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 800718a:	4698      	mov	r8, r3
        i         = 0;
 800718c:	9313      	str	r3, [sp, #76]	; 0x4c
        while(i < line_end - line_start) {
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	1b9b      	subs	r3, r3, r6
 8007192:	9311      	str	r3, [sp, #68]	; 0x44
 8007194:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007198:	428b      	cmp	r3, r1
 800719a:	f200 8088 	bhi.w	80072ae <lv_draw_label+0x3c2>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800719e:	7fa3      	ldrb	r3, [r4, #30]
 80071a0:	079a      	lsls	r2, r3, #30
 80071a2:	d522      	bpl.n	80071ea <lv_draw_label+0x2fe>
            p1.x = pos_x_start;
 80071a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80071a6:	4650      	mov	r0, sl
            p1.x = pos_x_start;
 80071a8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80071ac:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80071b0:	a91a      	add	r1, sp, #104	; 0x68
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80071b2:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 80071b6:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            line_dsc.color = color;
 80071ba:	f8ad b068 	strh.w	fp, [sp, #104]	; 0x68
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80071be:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80071c8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80071cc:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 80071d0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.x = pos.x;
 80071da:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
 80071de:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80071e2:	aa15      	add	r2, sp, #84	; 0x54
 80071e4:	ab18      	add	r3, sp, #96	; 0x60
 80071e6:	f000 f955 	bl	8007494 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80071ea:	7fa3      	ldrb	r3, [r4, #30]
 80071ec:	07db      	lsls	r3, r3, #31
 80071ee:	d51d      	bpl.n	800722c <lv_draw_label+0x340>
            p1.x = pos_x_start;
 80071f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80071f2:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 80071f4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 80071f8:	8911      	ldrh	r1, [r2, #8]
 80071fa:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 80071fe:	8952      	ldrh	r2, [r2, #10]
 8007200:	440b      	add	r3, r1
 8007202:	1a9b      	subs	r3, r3, r2
 8007204:	f997 200d 	ldrsb.w	r2, [r7, #13]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007208:	4650      	mov	r0, sl
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800720a:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 800720c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 8007210:	b21b      	sxth	r3, r3
 8007212:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.x = pos.x;
 8007216:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
 800721a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800721e:	aa15      	add	r2, sp, #84	; 0x54
 8007220:	ab18      	add	r3, sp, #96	; 0x60
 8007222:	a91a      	add	r1, sp, #104	; 0x68
            line_dsc.color = color;
 8007224:	f8ad b068 	strh.w	fp, [sp, #104]	; 0x68
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8007228:	f000 f934 	bl	8007494 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800722c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007230:	189e      	adds	r6, r3, r2
 8007232:	7f63      	ldrb	r3, [r4, #29]
 8007234:	4639      	mov	r1, r7
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	2300      	movs	r3, #0
 800723a:	4630      	mov	r0, r6
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007244:	f00a fa54 	bl	80116f0 <_lv_txt_get_next_line>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	4601      	mov	r1, r0
 800724c:	eb03 0800 	add.w	r8, r3, r0
        pos.x = coords->x1;
 8007250:	882b      	ldrh	r3, [r5, #0]
 8007252:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(align == LV_TEXT_ALIGN_CENTER) {
 8007256:	9b08      	ldr	r3, [sp, #32]
 8007258:	2b02      	cmp	r3, #2
 800725a:	f040 80f4 	bne.w	8007446 <lv_draw_label+0x55a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800725e:	7f63      	ldrb	r3, [r4, #29]
 8007260:	463a      	mov	r2, r7
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4630      	mov	r0, r6
 8007266:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800726a:	f00a fb6b 	bl	8011944 <lv_txt_get_width>
 800726e:	88ab      	ldrh	r3, [r5, #4]
 8007270:	882a      	ldrh	r2, [r5, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8007276:	b21b      	sxth	r3, r3
 8007278:	1a18      	subs	r0, r3, r0
 800727a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800727e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007282:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8007286:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 800728a:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800728e:	9a09      	ldr	r2, [sp, #36]	; 0x24
        line_start = line_end;
 8007290:	9e04      	ldr	r6, [sp, #16]
        pos.y += line_height;
 8007292:	4413      	add	r3, r2
        if(pos.y > draw_ctx->clip_area->y2) return;
 8007294:	f8da 2008 	ldr.w	r2, [sl, #8]
        pos.y += line_height;
 8007298:	b21b      	sxth	r3, r3
        if(pos.y > draw_ctx->clip_area->y2) return;
 800729a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        pos.y += line_height;
 800729e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(pos.y > draw_ctx->clip_area->y2) return;
 80072a2:	429a      	cmp	r2, r3
 80072a4:	f6ff aeed 	blt.w	8007082 <lv_draw_label+0x196>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80072a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80072ac:	e6e2      	b.n	8007074 <lv_draw_label+0x188>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80072ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d01d      	beq.n	80072f4 <lv_draw_label+0x408>
 80072b8:	9b07      	ldr	r3, [sp, #28]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01a      	beq.n	80072f4 <lv_draw_label+0x408>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 80072be:	4b6e      	ldr	r3, [pc, #440]	; (8007478 <lv_draw_label+0x58c>)
 80072c0:	9805      	ldr	r0, [sp, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4431      	add	r1, r6
 80072c6:	4798      	blx	r3
 80072c8:	4681      	mov	r9, r0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80072ca:	ab13      	add	r3, sp, #76	; 0x4c
 80072cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80072ce:	aa15      	add	r2, sp, #84	; 0x54
 80072d0:	a914      	add	r1, sp, #80	; 0x50
 80072d2:	f00a fb1d 	bl	8011910 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80072d6:	7f63      	ldrb	r3, [r4, #29]
 80072d8:	f013 0301 	ands.w	r3, r3, #1
 80072dc:	f000 80ab 	beq.w	8007436 <lv_draw_label+0x54a>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80072e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072e2:	2a23      	cmp	r2, #35	; 0x23
 80072e4:	d113      	bne.n	800730e <lv_draw_label+0x422>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 80072e6:	f1b8 0f00 	cmp.w	r8, #0
 80072ea:	d106      	bne.n	80072fa <lv_draw_label+0x40e>
                        par_start = i;
 80072ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_PAR;
 80072ee:	4698      	mov	r8, r3
                        par_start = i;
 80072f0:	920c      	str	r2, [sp, #48]	; 0x30
                        continue;
 80072f2:	e74f      	b.n	8007194 <lv_draw_label+0x2a8>
            uint32_t logical_char_pos = 0;
 80072f4:	f04f 0900 	mov.w	r9, #0
 80072f8:	e7e7      	b.n	80072ca <lv_draw_label+0x3de>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 80072fa:	f1b8 0f01 	cmp.w	r8, #1
 80072fe:	d053      	beq.n	80073a8 <lv_draw_label+0x4bc>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8007300:	f1b8 0f02 	cmp.w	r8, #2
 8007304:	f040 8097 	bne.w	8007436 <lv_draw_label+0x54a>
                        cmd_state = CMD_STATE_WAIT;
 8007308:	f04f 0800 	mov.w	r8, #0
 800730c:	e742      	b.n	8007194 <lv_draw_label+0x2a8>
                if(cmd_state == CMD_STATE_PAR) {
 800730e:	f1b8 0f01 	cmp.w	r8, #1
 8007312:	f040 8090 	bne.w	8007436 <lv_draw_label+0x54a>
                    if(letter == ' ') {
 8007316:	2a20      	cmp	r2, #32
 8007318:	f47f af3c 	bne.w	8007194 <lv_draw_label+0x2a8>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800731c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800731e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	2b07      	cmp	r3, #7
 8007324:	d13e      	bne.n	80073a4 <lv_draw_label+0x4b8>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8007326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 8007328:	a918      	add	r1, sp, #96	; 0x60
 800732a:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	3305      	adds	r3, #5
        *d8 = *s8;
 8007330:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    while(len) {
 8007334:	4293      	cmp	r3, r2
        *d8 = *s8;
 8007336:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
 800733a:	d1f9      	bne.n	8007330 <lv_draw_label+0x444>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800733c:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 8007340:	f7ff fda4 	bl	8006e8c <hex_char_to_num>
 8007344:	4680      	mov	r8, r0
 8007346:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800734a:	f7ff fd9f 	bl	8006e8c <hex_char_to_num>
 800734e:	eb00 1808 	add.w	r8, r0, r8, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8007352:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
 8007356:	f7ff fd99 	bl	8006e8c <hex_char_to_num>
 800735a:	4601      	mov	r1, r0
 800735c:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 8007360:	f7ff fd94 	bl	8006e8c <hex_char_to_num>
 8007364:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8007368:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800736c:	f7ff fd8e 	bl	8006e8c <hex_char_to_num>
 8007370:	4681      	mov	r9, r0
 8007372:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 8007376:	f7ff fd89 	bl	8006e8c <hex_char_to_num>
 800737a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 800737e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 8007382:	f3c1 1342 	ubfx	r3, r1, #5, #3
 8007386:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800738a:	ea43 0308 	orr.w	r3, r3, r8
 800738e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007392:	f3c1 0085 	ubfx	r0, r1, #2, #6
 8007396:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 800739a:	b283      	uxth	r3, r0
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800739c:	f04f 0802 	mov.w	r8, #2
                            recolor.full = dsc->color.full;
 80073a0:	930d      	str	r3, [sp, #52]	; 0x34
 80073a2:	e6f7      	b.n	8007194 <lv_draw_label+0x2a8>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	e7f9      	b.n	800739c <lv_draw_label+0x4b0>
                        cmd_state = CMD_STATE_WAIT;
 80073a8:	f04f 0800 	mov.w	r8, #0
            color = dsc->color;
 80073ac:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80073b0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80073b4:	4638      	mov	r0, r7
 80073b6:	f007 fd1d 	bl	800edf4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80073ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073be:	9b06      	ldr	r3, [sp, #24]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80073c0:	900b      	str	r0, [sp, #44]	; 0x2c
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <lv_draw_label+0x520>
 80073c6:	9b07      	ldr	r3, [sp, #28]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01f      	beq.n	800740c <lv_draw_label+0x520>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	454b      	cmp	r3, r9
 80073d0:	d81c      	bhi.n	800740c <lv_draw_label+0x520>
 80073d2:	9b07      	ldr	r3, [sp, #28]
 80073d4:	454b      	cmp	r3, r9
 80073d6:	d919      	bls.n	800740c <lv_draw_label+0x520>
                    sel_coords.x1 = pos.x;
 80073d8:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80073dc:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 80073de:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80073e2:	3b01      	subs	r3, #1
 80073e4:	440b      	add	r3, r1
                    sel_coords.y1 = pos.y;
 80073e6:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 80073ea:	4403      	add	r3, r0
 80073ec:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    sel_coords.y1 = pos.y;
 80073f2:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.y2 = pos.y + line_height - 1;
 80073f6:	3a01      	subs	r2, #1
 80073f8:	441a      	add	r2, r3
 80073fa:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80073fe:	4650      	mov	r0, sl
 8007400:	aa18      	add	r2, sp, #96	; 0x60
 8007402:	a925      	add	r1, sp, #148	; 0x94
 8007404:	f001 f83c 	bl	8008480 <lv_draw_rect>
                    color = dsc->sel_color;
 8007408:	f8b4 b00e 	ldrh.w	fp, [r4, #14]
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800740c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800740e:	4650      	mov	r0, sl
 8007410:	aa12      	add	r2, sp, #72	; 0x48
 8007412:	a91d      	add	r1, sp, #116	; 0x74
            dsc_mod.color = color;
 8007414:	f8ad b080 	strh.w	fp, [sp, #128]	; 0x80
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8007418:	f7ff fd62 	bl	8006ee0 <lv_draw_letter>
            if(letter_w > 0) {
 800741c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f aeb8 	beq.w	8007194 <lv_draw_label+0x2a8>
                pos.x += letter_w + dsc->letter_space;
 8007424:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8007428:	8aa3      	ldrh	r3, [r4, #20]
 800742a:	4418      	add	r0, r3
 800742c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800742e:	4403      	add	r3, r0
 8007430:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8007434:	e6ae      	b.n	8007194 <lv_draw_label+0x2a8>
            color = dsc->color;
 8007436:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800743a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800743c:	f1b8 0f02 	cmp.w	r8, #2
 8007440:	bf08      	it	eq
 8007442:	469b      	moveq	fp, r3
 8007444:	e7b4      	b.n	80073b0 <lv_draw_label+0x4c4>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 8007446:	9b08      	ldr	r3, [sp, #32]
 8007448:	2b03      	cmp	r3, #3
 800744a:	f47f af1e 	bne.w	800728a <lv_draw_label+0x39e>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800744e:	7f63      	ldrb	r3, [r4, #29]
 8007450:	463a      	mov	r2, r7
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4630      	mov	r0, r6
 8007456:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800745a:	f00a fa73 	bl	8011944 <lv_txt_get_width>
 800745e:	88ab      	ldrh	r3, [r5, #4]
 8007460:	882a      	ldrh	r2, [r5, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8007466:	b21b      	sxth	r3, r3
 8007468:	1a1b      	subs	r3, r3, r0
 800746a:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800746e:	4403      	add	r3, r0
 8007470:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8007474:	e709      	b.n	800728a <lv_draw_label+0x39e>
 8007476:	bf00      	nop
 8007478:	2000001c 	.word	0x2000001c

0800747c <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800747c:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800747e:	210a      	movs	r1, #10
{
 8007480:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 8007482:	f008 fe95 	bl	80101b0 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800748a:	2300      	movs	r3, #0
 800748c:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800748e:	2301      	movs	r3, #1
 8007490:	8063      	strh	r3, [r4, #2]
}
 8007492:	bd10      	pop	{r4, pc}

08007494 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 8007494:	b470      	push	{r4, r5, r6}
    if(dsc->width == 0) return;
 8007496:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800749a:	b136      	cbz	r6, 80074aa <lv_draw_line+0x16>
    if(dsc->opa <= LV_OPA_MIN) return;
 800749c:	7a0c      	ldrb	r4, [r1, #8]
 800749e:	2c02      	cmp	r4, #2
 80074a0:	d903      	bls.n	80074aa <lv_draw_line+0x16>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80074a2:	6a04      	ldr	r4, [r0, #32]
 80074a4:	46a4      	mov	ip, r4
}
 80074a6:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80074a8:	4760      	bx	ip
}
 80074aa:	bc70      	pop	{r4, r5, r6}
 80074ac:	4770      	bx	lr

080074ae <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 80074ae:	29fc      	cmp	r1, #252	; 0xfc
 80074b0:	d809      	bhi.n	80074c6 <mask_mix+0x18>
    if(mask_new <= LV_OPA_MIN) return 0;
 80074b2:	2902      	cmp	r1, #2
 80074b4:	d906      	bls.n	80074c4 <mask_mix+0x16>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 80074b6:	4341      	muls	r1, r0
 80074b8:	f248 0081 	movw	r0, #32897	; 0x8081
 80074bc:	4348      	muls	r0, r1
 80074be:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 80074c2:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 80074c4:	2000      	movs	r0, #0
}
 80074c6:	4770      	bx	lr

080074c8 <lv_draw_mask_line>:
{
 80074c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074cc:	9d08      	ldr	r5, [sp, #32]
 80074ce:	4604      	mov	r4, r0
    abs_x -= p->origo.x;
 80074d0:	8a6f      	ldrh	r7, [r5, #18]
    abs_y -= p->origo.y;
 80074d2:	8aa8      	ldrh	r0, [r5, #20]
    abs_x -= p->origo.x;
 80074d4:	1bc9      	subs	r1, r1, r7
 80074d6:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
 80074da:	b20f      	sxth	r7, r1
    if(p->steep == 0) {
 80074dc:	6a29      	ldr	r1, [r5, #32]
    abs_y -= p->origo.y;
 80074de:	1a12      	subs	r2, r2, r0
 80074e0:	b212      	sxth	r2, r2
    if(p->steep == 0) {
 80074e2:	f006 0001 	and.w	r0, r6, #1
 80074e6:	bb99      	cbnz	r1, 8007550 <lv_draw_mask_line+0x88>
        if(p->flat) {
 80074e8:	7c2d      	ldrb	r5, [r5, #16]
 80074ea:	f005 0602 	and.w	r6, r5, #2
 80074ee:	b180      	cbz	r0, 8007512 <lv_draw_mask_line+0x4a>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80074f0:	b13e      	cbz	r6, 8007502 <lv_draw_mask_line+0x3a>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 80074f2:	f005 0503 	and.w	r5, r5, #3
 80074f6:	2d02      	cmp	r5, #2
 80074f8:	d105      	bne.n	8007506 <lv_draw_mask_line+0x3e>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80074fa:	3201      	adds	r2, #1
 80074fc:	bfac      	ite	ge
 80074fe:	2000      	movge	r0, #0
 8007500:	2001      	movlt	r0, #1
}
 8007502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8007506:	2d03      	cmp	r5, #3
 8007508:	d101      	bne.n	800750e <lv_draw_mask_line+0x46>
 800750a:	2a00      	cmp	r2, #0
 800750c:	dcf9      	bgt.n	8007502 <lv_draw_mask_line+0x3a>
                return LV_DRAW_MASK_RES_TRANSP;
 800750e:	2000      	movs	r0, #0
 8007510:	e7f7      	b.n	8007502 <lv_draw_mask_line+0x3a>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8007512:	2e00      	cmp	r6, #0
 8007514:	f040 816f 	bne.w	80077f6 <lv_draw_mask_line+0x32e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8007518:	f005 0003 	and.w	r0, r5, #3
 800751c:	2801      	cmp	r0, #1
 800751e:	d10a      	bne.n	8007536 <lv_draw_mask_line+0x6e>
 8007520:	2f00      	cmp	r7, #0
 8007522:	dcee      	bgt.n	8007502 <lv_draw_mask_line+0x3a>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8007524:	42df      	cmn	r7, r3
 8007526:	d4f2      	bmi.n	800750e <lv_draw_mask_line+0x46>
                    if(k < 0) k = 0;
 8007528:	2f00      	cmp	r7, #0
 800752a:	f300 8166 	bgt.w	80077fa <lv_draw_mask_line+0x332>
                    int32_t k = - abs_x;
 800752e:	4279      	negs	r1, r7
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 8007530:	428b      	cmp	r3, r1
 8007532:	ddec      	ble.n	800750e <lv_draw_mask_line+0x46>
 8007534:	e09e      	b.n	8007674 <lv_draw_mask_line+0x1ac>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8007536:	2800      	cmp	r0, #0
 8007538:	d1f4      	bne.n	8007524 <lv_draw_mask_line+0x5c>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800753a:	19d9      	adds	r1, r3, r7
 800753c:	f100 815b 	bmi.w	80077f6 <lv_draw_mask_line+0x32e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8007540:	2f00      	cmp	r7, #0
 8007542:	dce4      	bgt.n	800750e <lv_draw_mask_line+0x46>
                    int32_t k = - abs_x;
 8007544:	4278      	negs	r0, r7
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8007546:	4298      	cmp	r0, r3
 8007548:	f2c0 809f 	blt.w	800768a <lv_draw_mask_line+0x1c2>
    return LV_DRAW_MASK_RES_CHANGED;
 800754c:	2002      	movs	r0, #2
 800754e:	e7d8      	b.n	8007502 <lv_draw_mask_line+0x3a>
    if(p->flat) {
 8007550:	f006 0602 	and.w	r6, r6, #2
 8007554:	2800      	cmp	r0, #0
 8007556:	f000 809c 	beq.w	8007692 <lv_draw_mask_line+0x1ca>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800755a:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 800755e:	b2f0      	uxtb	r0, r6
 8007560:	fb07 f10c 	mul.w	r1, r7, ip
    if(p->yx_steep > 0) {
 8007564:	f1bc 0f00 	cmp.w	ip, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8007568:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800756c:	dd05      	ble.n	800757a <lv_draw_mask_line+0xb2>
        if(y_at_x > abs_y) {
 800756e:	4291      	cmp	r1, r2
 8007570:	dd05      	ble.n	800757e <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8007572:	3800      	subs	r0, #0
 8007574:	bf18      	it	ne
 8007576:	2001      	movne	r0, #1
 8007578:	e7c3      	b.n	8007502 <lv_draw_mask_line+0x3a>
        if(y_at_x < abs_y) {
 800757a:	4291      	cmp	r1, r2
 800757c:	dbf9      	blt.n	8007572 <lv_draw_mask_line+0xaa>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800757e:	19d9      	adds	r1, r3, r7
 8007580:	fb0c f101 	mul.w	r1, ip, r1
    if(p->yx_steep > 0) {
 8007584:	f1bc 0f00 	cmp.w	ip, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8007588:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800758c:	dd05      	ble.n	800759a <lv_draw_mask_line+0xd2>
        if(y_at_x < abs_y) {
 800758e:	4291      	cmp	r1, r2
 8007590:	da09      	bge.n	80075a6 <lv_draw_mask_line+0xde>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8007592:	fab0 f080 	clz	r0, r0
 8007596:	0940      	lsrs	r0, r0, #5
 8007598:	e7b3      	b.n	8007502 <lv_draw_mask_line+0x3a>
        if(y_at_x > abs_y) {
 800759a:	4291      	cmp	r1, r2
 800759c:	dcf9      	bgt.n	8007592 <lv_draw_mask_line+0xca>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800759e:	69a9      	ldr	r1, [r5, #24]
 80075a0:	fb02 1201 	mla	r2, r2, r1, r1
 80075a4:	e001      	b.n	80075aa <lv_draw_mask_line+0xe2>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 80075a6:	69a9      	ldr	r1, [r5, #24]
 80075a8:	434a      	muls	r2, r1
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80075aa:	f342 0295 	sbfx	r2, r2, #2, #22
    if(xef == 0) px_h = 255;
 80075ae:	f012 06ff 	ands.w	r6, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80075b2:	bf18      	it	ne
 80075b4:	6a69      	ldrne	r1, [r5, #36]	; 0x24
    int32_t xei = xe >> 8;
 80075b6:	ea4f 2c22 	mov.w	ip, r2, asr #8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80075ba:	bf1d      	ittte	ne
 80075bc:	f1c6 02ff 	rsbne	r2, r6, #255	; 0xff
 80075c0:	434a      	mulne	r2, r1
 80075c2:	1212      	asrne	r2, r2, #8
    if(xef == 0) px_h = 255;
 80075c4:	22ff      	moveq	r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80075c6:	bf18      	it	ne
 80075c8:	f1c2 02ff 	rsbne	r2, r2, #255	; 0xff
    int32_t k = xei - abs_x;
 80075cc:	ebac 0707 	sub.w	r7, ip, r7
    if(xef) {
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d051      	beq.n	8007678 <lv_draw_mask_line+0x1b0>
        if(k >= 0 && k < len) {
 80075d4:	2f00      	cmp	r7, #0
 80075d6:	db0f      	blt.n	80075f8 <lv_draw_mask_line+0x130>
 80075d8:	42bb      	cmp	r3, r7
 80075da:	dd0d      	ble.n	80075f8 <lv_draw_mask_line+0x130>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80075dc:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 80075e0:	f1c6 06ff 	rsb	r6, r6, #255	; 0xff
 80075e4:	434e      	muls	r6, r1
 80075e6:	f3c6 2147 	ubfx	r1, r6, #9, #8
            if(p->inv) m = 255 - m;
 80075ea:	b908      	cbnz	r0, 80075f0 <lv_draw_mask_line+0x128>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80075ec:	43c9      	mvns	r1, r1
 80075ee:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80075f0:	5de0      	ldrb	r0, [r4, r7]
 80075f2:	f7ff ff5c 	bl	80074ae <mask_mix>
 80075f6:	55e0      	strb	r0, [r4, r7]
        k++;
 80075f8:	1c7e      	adds	r6, r7, #1
    while(px_h > p->spx) {
 80075fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80075fc:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8007600:	428a      	cmp	r2, r1
 8007602:	f000 0002 	and.w	r0, r0, #2
 8007606:	dc16      	bgt.n	8007636 <lv_draw_mask_line+0x16e>
    if(k < len && k >= 0) {
 8007608:	42b3      	cmp	r3, r6
 800760a:	dd28      	ble.n	800765e <lv_draw_mask_line+0x196>
 800760c:	2e00      	cmp	r6, #0
 800760e:	db26      	blt.n	800765e <lv_draw_mask_line+0x196>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 8007610:	69a9      	ldr	r1, [r5, #24]
 8007612:	4351      	muls	r1, r2
 8007614:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 8007616:	4351      	muls	r1, r2
        if(p->yx_steep < 0) m = 255 - m;
 8007618:	69ea      	ldr	r2, [r5, #28]
        m = (x_inters * px_h) >> 9;
 800761a:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800761e:	2a00      	cmp	r2, #0
 8007620:	bfbc      	itt	lt
 8007622:	43c9      	mvnlt	r1, r1
 8007624:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 8007626:	b108      	cbz	r0, 800762c <lv_draw_mask_line+0x164>
 8007628:	43c9      	mvns	r1, r1
 800762a:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800762c:	5da0      	ldrb	r0, [r4, r6]
 800762e:	f7ff ff3e 	bl	80074ae <mask_mix>
 8007632:	55a0      	strb	r0, [r4, r6]
 8007634:	e013      	b.n	800765e <lv_draw_mask_line+0x196>
        if(k >= 0 && k < len) {
 8007636:	2e00      	cmp	r6, #0
 8007638:	db0b      	blt.n	8007652 <lv_draw_mask_line+0x18a>
 800763a:	42b3      	cmp	r3, r6
 800763c:	dd09      	ble.n	8007652 <lv_draw_mask_line+0x18a>
            m = px_h - (p->spx >> 1);
 800763e:	eba2 0161 	sub.w	r1, r2, r1, asr #1
 8007642:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 8007644:	b108      	cbz	r0, 800764a <lv_draw_mask_line+0x182>
 8007646:	43c9      	mvns	r1, r1
 8007648:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800764a:	5da0      	ldrb	r0, [r4, r6]
 800764c:	f7ff ff2f 	bl	80074ae <mask_mix>
 8007650:	55a0      	strb	r0, [r4, r6]
        px_h -= p->spx;
 8007652:	6a69      	ldr	r1, [r5, #36]	; 0x24
        k++;
 8007654:	3601      	adds	r6, #1
        if(k >= len) break;
 8007656:	42b3      	cmp	r3, r6
        px_h -= p->spx;
 8007658:	eba2 0201 	sub.w	r2, r2, r1
        if(k >= len) break;
 800765c:	dccd      	bgt.n	80075fa <lv_draw_mask_line+0x132>
    if(p->inv) {
 800765e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8007662:	0790      	lsls	r0, r2, #30
 8007664:	d50a      	bpl.n	800767c <lv_draw_mask_line+0x1b4>
        if(k > len) {
 8007666:	42bb      	cmp	r3, r7
 8007668:	f6ff af51 	blt.w	800750e <lv_draw_mask_line+0x46>
        if(k >= 0) {
 800766c:	2f00      	cmp	r7, #0
 800766e:	f6ff af6d 	blt.w	800754c <lv_draw_mask_line+0x84>
            lv_memset_00(&mask_buf[0], k);
 8007672:	4639      	mov	r1, r7
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8007674:	4620      	mov	r0, r4
 8007676:	e009      	b.n	800768c <lv_draw_mask_line+0x1c4>
    int32_t k = xei - abs_x;
 8007678:	463e      	mov	r6, r7
 800767a:	e7be      	b.n	80075fa <lv_draw_mask_line+0x132>
        if(k < 0) {
 800767c:	1c70      	adds	r0, r6, #1
 800767e:	f53f af46 	bmi.w	800750e <lv_draw_mask_line+0x46>
        if(k <= len) {
 8007682:	4283      	cmp	r3, r0
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8007684:	f6ff af62 	blt.w	800754c <lv_draw_mask_line+0x84>
 8007688:	1a19      	subs	r1, r3, r0
 800768a:	4420      	add	r0, r4
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800768c:	f008 fd90 	bl	80101b0 <lv_memset_00>
 8007690:	e75c      	b.n	800754c <lv_draw_mask_line+0x84>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8007692:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8007696:	b2f0      	uxtb	r0, r6
 8007698:	fb02 f20c 	mul.w	r2, r2, ip
    if(p->xy_steep > 0) x_at_y++;
 800769c:	f1bc 0f00 	cmp.w	ip, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80076a0:	ea4f 21a2 	mov.w	r1, r2, asr #10
 80076a4:	bfd4      	ite	le
 80076a6:	468e      	movle	lr, r1
    if(p->xy_steep > 0) x_at_y++;
 80076a8:	f101 0e01 	addgt.w	lr, r1, #1
    if(x_at_y < abs_x) {
 80076ac:	45be      	cmp	lr, r7
 80076ae:	f6ff af60 	blt.w	8007572 <lv_draw_mask_line+0xaa>
    if(x_at_y > abs_x + len) {
 80076b2:	19de      	adds	r6, r3, r7
 80076b4:	42b1      	cmp	r1, r6
 80076b6:	f73f af6c 	bgt.w	8007592 <lv_draw_mask_line+0xca>
    int32_t xsi = xs >> 8;
 80076ba:	f342 2e8d 	sbfx	lr, r2, #10, #14
    int32_t xsf = xs & 0xFF;
 80076be:	f3c2 0687 	ubfx	r6, r2, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80076c2:	4462      	add	r2, ip
    int32_t xei = xe >> 8;
 80076c4:	f342 288d 	sbfx	r8, r2, #10, #14
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80076c8:	45c6      	cmp	lr, r8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80076ca:	ea4f 2102 	mov.w	r1, r2, lsl #8
    k = xsi - abs_x;
 80076ce:	ebae 0207 	sub.w	r2, lr, r7
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80076d2:	f000 8096 	beq.w	8007802 <lv_draw_mask_line+0x33a>
 80076d6:	f1bc 0f00 	cmp.w	ip, #0
 80076da:	da53      	bge.n	8007784 <lv_draw_mask_line+0x2bc>
 80076dc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	f000 808c 	beq.w	80077fe <lv_draw_mask_line+0x336>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 80076e6:	69e9      	ldr	r1, [r5, #28]
            if(k >= 0 && k < len) {
 80076e8:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 80076ea:	f1c1 0100 	rsb	r1, r1, #0
 80076ee:	fb06 f101 	mul.w	r1, r6, r1
 80076f2:	ea4f 27a1 	mov.w	r7, r1, asr #10
            if(k >= 0 && k < len) {
 80076f6:	db0c      	blt.n	8007712 <lv_draw_mask_line+0x24a>
 80076f8:	4293      	cmp	r3, r2
 80076fa:	dd0a      	ble.n	8007712 <lv_draw_mask_line+0x24a>
                m = (y_inters * xsf) >> 9;
 80076fc:	fb07 f106 	mul.w	r1, r7, r6
 8007700:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 8007704:	b108      	cbz	r0, 800770a <lv_draw_mask_line+0x242>
 8007706:	43c9      	mvns	r1, r1
 8007708:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800770a:	5ca0      	ldrb	r0, [r4, r2]
 800770c:	f7ff fecf 	bl	80074ae <mask_mix>
 8007710:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	db17      	blt.n	8007748 <lv_draw_mask_line+0x280>
 8007718:	454b      	cmp	r3, r9
 800771a:	dd15      	ble.n	8007748 <lv_draw_mask_line+0x280>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800771c:	69a8      	ldr	r0, [r5, #24]
 800771e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8007722:	4240      	negs	r0, r0
 8007724:	4348      	muls	r0, r1
 8007726:	1280      	asrs	r0, r0, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8007728:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
 800772a:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800772e:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 8007732:	0786      	lsls	r6, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8007734:	bf58      	it	pl
 8007736:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8007738:	f814 0009 	ldrb.w	r0, [r4, r9]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800773c:	bf58      	it	pl
 800773e:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8007740:	f7ff feb5 	bl	80074ae <mask_mix>
 8007744:	f804 0009 	strb.w	r0, [r4, r9]
            if(p->inv) {
 8007748:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800774c:	078d      	lsls	r5, r1, #30
 800774e:	d514      	bpl.n	800777a <lv_draw_mask_line+0x2b2>
                if(k > len) k = len;
 8007750:	454b      	cmp	r3, r9
 8007752:	f6ff aefb 	blt.w	800754c <lv_draw_mask_line+0x84>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8007756:	f1b9 0f00 	cmp.w	r9, #0
 800775a:	f77f aef7 	ble.w	800754c <lv_draw_mask_line+0x84>
 800775e:	4649      	mov	r1, r9
 8007760:	e788      	b.n	8007674 <lv_draw_mask_line+0x1ac>
        k++;
 8007762:	3201      	adds	r2, #1
 8007764:	429a      	cmp	r2, r3
 8007766:	bfa8      	it	ge
 8007768:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800776a:	2a00      	cmp	r2, #0
 800776c:	f43f aecf 	beq.w	800750e <lv_draw_mask_line+0x46>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8007770:	f77f aeec 	ble.w	800754c <lv_draw_mask_line+0x84>
 8007774:	1a99      	subs	r1, r3, r2
 8007776:	18a0      	adds	r0, r4, r2
 8007778:	e788      	b.n	800768c <lv_draw_mask_line+0x1c4>
            k += 2;
 800777a:	1c50      	adds	r0, r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800777c:	4283      	cmp	r3, r0
 800777e:	db3a      	blt.n	80077f6 <lv_draw_mask_line+0x32e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8007780:	2800      	cmp	r0, #0
 8007782:	e77f      	b.n	8007684 <lv_draw_mask_line+0x1bc>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8007784:	69e9      	ldr	r1, [r5, #28]
 8007786:	f1c6 06ff 	rsb	r6, r6, #255	; 0xff
 800778a:	4371      	muls	r1, r6
            if(k >= 0 && k < len) {
 800778c:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800778e:	ea4f 27a1 	mov.w	r7, r1, asr #10
            if(k >= 0 && k < len) {
 8007792:	db0b      	blt.n	80077ac <lv_draw_mask_line+0x2e4>
 8007794:	4293      	cmp	r3, r2
 8007796:	dd09      	ble.n	80077ac <lv_draw_mask_line+0x2e4>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8007798:	437e      	muls	r6, r7
 800779a:	f3c6 2147 	ubfx	r1, r6, #9, #8
                if(p->inv) m = 255 - m;
 800779e:	b908      	cbnz	r0, 80077a4 <lv_draw_mask_line+0x2dc>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80077a0:	43c9      	mvns	r1, r1
 80077a2:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80077a4:	5ca0      	ldrb	r0, [r4, r2]
 80077a6:	f7ff fe82 	bl	80074ae <mask_mix>
 80077aa:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
 80077ac:	1c56      	adds	r6, r2, #1
 80077ae:	d414      	bmi.n	80077da <lv_draw_mask_line+0x312>
 80077b0:	42b3      	cmp	r3, r6
 80077b2:	dd12      	ble.n	80077da <lv_draw_mask_line+0x312>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 80077b4:	69a8      	ldr	r0, [r5, #24]
 80077b6:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 80077ba:	4348      	muls	r0, r1
 80077bc:	1280      	asrs	r0, r0, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 80077be:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
 80077c0:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
 80077c4:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 80077c8:	0780      	lsls	r0, r0, #30
 80077ca:	bf48      	it	mi
 80077cc:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80077ce:	5da0      	ldrb	r0, [r4, r6]
                if(p->inv) m = 255 - m;
 80077d0:	bf48      	it	mi
 80077d2:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80077d4:	f7ff fe6b 	bl	80074ae <mask_mix>
 80077d8:	55a0      	strb	r0, [r4, r6]
            if(p->inv) {
 80077da:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80077de:	0789      	lsls	r1, r1, #30
 80077e0:	d507      	bpl.n	80077f2 <lv_draw_mask_line+0x32a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 80077e2:	4293      	cmp	r3, r2
 80077e4:	f6ff ae93 	blt.w	800750e <lv_draw_mask_line+0x46>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	f6ff aeaf 	blt.w	800754c <lv_draw_mask_line+0x84>
 80077ee:	4611      	mov	r1, r2
 80077f0:	e740      	b.n	8007674 <lv_draw_mask_line+0x1ac>
            k++;
 80077f2:	3202      	adds	r2, #2
 80077f4:	e7b6      	b.n	8007764 <lv_draw_mask_line+0x29c>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 80077f6:	2001      	movs	r0, #1
 80077f8:	e683      	b.n	8007502 <lv_draw_mask_line+0x3a>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	e699      	b.n	8007532 <lv_draw_mask_line+0x6a>
 80077fe:	464a      	mov	r2, r9
        xsf = 0xFF;
 8007800:	26ff      	movs	r6, #255	; 0xff
        if(k >= 0 && k < len) {
 8007802:	2a00      	cmp	r2, #0
 8007804:	db0d      	blt.n	8007822 <lv_draw_mask_line+0x35a>
 8007806:	4293      	cmp	r3, r2
 8007808:	dd0b      	ble.n	8007822 <lv_draw_mask_line+0x35a>
    int32_t xef = xe & 0xFF;
 800780a:	f3c1 2187 	ubfx	r1, r1, #10, #8
            m = (xsf + xef) >> 1;
 800780e:	4431      	add	r1, r6
 8007810:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 8007814:	b108      	cbz	r0, 800781a <lv_draw_mask_line+0x352>
 8007816:	43c9      	mvns	r1, r1
 8007818:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800781a:	5ca0      	ldrb	r0, [r4, r2]
 800781c:	f7ff fe47 	bl	80074ae <mask_mix>
 8007820:	54a0      	strb	r0, [r4, r2]
        if(p->inv) {
 8007822:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8007826:	0789      	lsls	r1, r1, #30
 8007828:	d59b      	bpl.n	8007762 <lv_draw_mask_line+0x29a>
            k = xsi - abs_x;
 800782a:	eba8 0107 	sub.w	r1, r8, r7
            if(k >= len) {
 800782e:	428b      	cmp	r3, r1
 8007830:	f77f ae6d 	ble.w	800750e <lv_draw_mask_line+0x46>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8007834:	2900      	cmp	r1, #0
 8007836:	f6ff ae89 	blt.w	800754c <lv_draw_mask_line+0x84>
 800783a:	e71b      	b.n	8007674 <lv_draw_mask_line+0x1ac>

0800783c <lv_draw_mask_angle>:
{
 800783c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007842:	4606      	mov	r6, r0
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8007844:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
{
 8007848:	4691      	mov	r9, r2
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800784a:	eba2 0c00 	sub.w	ip, r2, r0
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800784e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8007852:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8007856:	2ab3      	cmp	r2, #179	; 0xb3
{
 8007858:	4688      	mov	r8, r1
 800785a:	461f      	mov	r7, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800785c:	eba1 0104 	sub.w	r1, r1, r4
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8007860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007864:	dc6c      	bgt.n	8007940 <lv_draw_mask_angle+0x104>
 8007866:	2bb3      	cmp	r3, #179	; 0xb3
 8007868:	f300 80cf 	bgt.w	8007a0a <lv_draw_mask_angle+0x1ce>
 800786c:	2a00      	cmp	r2, #0
 800786e:	f000 80cd 	beq.w	8007a0c <lv_draw_mask_angle+0x1d0>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80cf 	beq.w	8007a16 <lv_draw_mask_angle+0x1da>
 8007878:	429a      	cmp	r2, r3
 800787a:	f340 80cc 	ble.w	8007a16 <lv_draw_mask_angle+0x1da>
        if(abs_y < p->cfg.vertex_p.y) {
 800787e:	4548      	cmp	r0, r9
 8007880:	dd04      	ble.n	800788c <lv_draw_mask_angle+0x50>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8007882:	2501      	movs	r5, #1
}
 8007884:	4628      	mov	r0, r5
 8007886:	b002      	add	sp, #8
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800788c:	6d68      	ldr	r0, [r5, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800788e:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8007890:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8007894:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8007898:	b292      	uxth	r2, r2
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800789a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800789e:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 80078a2:	ea4f 20a0 	mov.w	r0, r0, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 80078a6:	ea4f 24a4 	mov.w	r4, r4, asr #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80078aa:	d83a      	bhi.n	8007922 <lv_draw_mask_angle+0xe6>
 80078ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80078b0:	b29b      	uxth	r3, r3
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80078b2:	1e5a      	subs	r2, r3, #1
 80078b4:	2a59      	cmp	r2, #89	; 0x59
 80078b6:	d83a      	bhi.n	800792e <lv_draw_mask_angle+0xf2>
 80078b8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 80078bc:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 80078be:	eb04 0460 	add.w	r4, r4, r0, asr #1
 80078c2:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 80078c4:	42bc      	cmp	r4, r7
 80078c6:	bfa8      	it	ge
 80078c8:	463c      	movge	r4, r7
        if(tmp > 0) {
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	dd35      	ble.n	800793a <lv_draw_mask_angle+0xfe>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 80078ce:	f105 0310 	add.w	r3, r5, #16
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	464a      	mov	r2, r9
 80078d6:	4641      	mov	r1, r8
 80078d8:	4630      	mov	r0, r6
 80078da:	b223      	sxth	r3, r4
 80078dc:	f7ff fdf4 	bl	80074c8 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 80078e0:	4682      	mov	sl, r0
 80078e2:	b918      	cbnz	r0, 80078ec <lv_draw_mask_angle+0xb0>
                lv_memset_00(&mask_buf[0], tmp);
 80078e4:	4621      	mov	r1, r4
 80078e6:	4630      	mov	r0, r6
 80078e8:	f008 fc62 	bl	80101b0 <lv_memset_00>
        if(tmp > len) tmp = len;
 80078ec:	42bc      	cmp	r4, r7
 80078ee:	bfa8      	it	ge
 80078f0:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 80078f2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 80078f6:	b2a1      	uxth	r1, r4
 80078f8:	1a7b      	subs	r3, r7, r1
 80078fa:	4426      	add	r6, r4
 80078fc:	4441      	add	r1, r8
 80078fe:	353c      	adds	r5, #60	; 0x3c
 8007900:	9500      	str	r5, [sp, #0]
 8007902:	464a      	mov	r2, r9
 8007904:	4630      	mov	r0, r6
 8007906:	b21b      	sxth	r3, r3
 8007908:	b209      	sxth	r1, r1
 800790a:	f7ff fddd 	bl	80074c8 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800790e:	4605      	mov	r5, r0
 8007910:	b918      	cbnz	r0, 800791a <lv_draw_mask_angle+0xde>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8007912:	4630      	mov	r0, r6
 8007914:	1b39      	subs	r1, r7, r4
 8007916:	f008 fc4b 	bl	80101b0 <lv_memset_00>
        if(res1 == res2) return res1;
 800791a:	45aa      	cmp	sl, r5
 800791c:	d0b2      	beq.n	8007884 <lv_draw_mask_angle+0x48>
        else return LV_DRAW_MASK_RES_CHANGED;
 800791e:	2502      	movs	r5, #2
 8007920:	e7b0      	b.n	8007884 <lv_draw_mask_angle+0x48>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8007922:	3a5b      	subs	r2, #91	; 0x5b
 8007924:	2ab2      	cmp	r2, #178	; 0xb2
 8007926:	bf98      	it	ls
 8007928:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800792c:	e7c0      	b.n	80078b0 <lv_draw_mask_angle+0x74>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800792e:	3b5b      	subs	r3, #91	; 0x5b
 8007930:	2bb2      	cmp	r3, #178	; 0xb2
 8007932:	bf98      	it	ls
 8007934:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 8007938:	e7c0      	b.n	80078bc <lv_draw_mask_angle+0x80>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800793a:	f04f 0a01 	mov.w	sl, #1
 800793e:	e7d5      	b.n	80078ec <lv_draw_mask_angle+0xb0>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8007940:	2ab4      	cmp	r2, #180	; 0xb4
 8007942:	d052      	beq.n	80079ea <lv_draw_mask_angle+0x1ae>
 8007944:	2bb4      	cmp	r3, #180	; 0xb4
 8007946:	dd73      	ble.n	8007a30 <lv_draw_mask_angle+0x1f4>
 8007948:	429a      	cmp	r2, r3
 800794a:	dd71      	ble.n	8007a30 <lv_draw_mask_angle+0x1f4>
        if(abs_y > p->cfg.vertex_p.y) {
 800794c:	4548      	cmp	r0, r9
 800794e:	db98      	blt.n	8007882 <lv_draw_mask_angle+0x46>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8007950:	6d68      	ldr	r0, [r5, #84]	; 0x54
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8007952:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8007954:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8007958:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800795c:	f46f 7c87 	mvn.w	ip, #270	; 0x10e
 8007960:	b292      	uxth	r2, r2
 8007962:	4494      	add	ip, r2
 8007964:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8007968:	ea4f 20a0 	mov.w	r0, r0, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800796c:	ea4f 24a4 	mov.w	r4, r4, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8007970:	d82c      	bhi.n	80079cc <lv_draw_mask_angle+0x190>
 8007972:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8007976:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800797a:	b29b      	uxth	r3, r3
 800797c:	189a      	adds	r2, r3, r2
 800797e:	2a58      	cmp	r2, #88	; 0x58
 8007980:	d82a      	bhi.n	80079d8 <lv_draw_mask_angle+0x19c>
 8007982:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8007986:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 8007988:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800798c:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800798e:	42bc      	cmp	r4, r7
 8007990:	bfa8      	it	ge
 8007992:	463c      	movge	r4, r7
        if(tmp > 0) {
 8007994:	2c00      	cmp	r4, #0
 8007996:	dd25      	ble.n	80079e4 <lv_draw_mask_angle+0x1a8>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8007998:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	464a      	mov	r2, r9
 80079a0:	4641      	mov	r1, r8
 80079a2:	4630      	mov	r0, r6
 80079a4:	b223      	sxth	r3, r4
 80079a6:	f7ff fd8f 	bl	80074c8 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 80079aa:	4682      	mov	sl, r0
 80079ac:	b918      	cbnz	r0, 80079b6 <lv_draw_mask_angle+0x17a>
                lv_memset_00(&mask_buf[0], tmp);
 80079ae:	4621      	mov	r1, r4
 80079b0:	4630      	mov	r0, r6
 80079b2:	f008 fbfd 	bl	80101b0 <lv_memset_00>
        if(tmp > len) tmp = len;
 80079b6:	42bc      	cmp	r4, r7
 80079b8:	bfa8      	it	ge
 80079ba:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 80079bc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 80079c0:	b2a1      	uxth	r1, r4
 80079c2:	1a7b      	subs	r3, r7, r1
 80079c4:	4426      	add	r6, r4
 80079c6:	4441      	add	r1, r8
 80079c8:	3510      	adds	r5, #16
 80079ca:	e799      	b.n	8007900 <lv_draw_mask_angle+0xc4>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 80079cc:	3a5b      	subs	r2, #91	; 0x5b
 80079ce:	2ab2      	cmp	r2, #178	; 0xb2
 80079d0:	bf98      	it	ls
 80079d2:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 80079d6:	e7ce      	b.n	8007976 <lv_draw_mask_angle+0x13a>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 80079d8:	3b5b      	subs	r3, #91	; 0x5b
 80079da:	2bb2      	cmp	r3, #178	; 0xb2
 80079dc:	bf98      	it	ls
 80079de:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 80079e2:	e7d0      	b.n	8007986 <lv_draw_mask_angle+0x14a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 80079e4:	f04f 0a01 	mov.w	sl, #1
 80079e8:	e7e5      	b.n	80079b6 <lv_draw_mask_angle+0x17a>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80079ea:	4548      	cmp	r0, r9
 80079ec:	bfcc      	ite	gt
 80079ee:	2401      	movgt	r4, #1
 80079f0:	2403      	movle	r4, #3
        if(p->cfg.end_angle == 180) {
 80079f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f6:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 80079fa:	2bb4      	cmp	r3, #180	; 0xb4
 80079fc:	d11c      	bne.n	8007a38 <lv_draw_mask_angle+0x1fc>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80079fe:	4548      	cmp	r0, r9
 8007a00:	bfcc      	ite	gt
 8007a02:	2003      	movgt	r0, #3
 8007a04:	2001      	movle	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8007a06:	bb5c      	cbnz	r4, 8007a60 <lv_draw_mask_angle+0x224>
 8007a08:	e02f      	b.n	8007a6a <lv_draw_mask_angle+0x22e>
        else if(p->cfg.start_angle == 0) {
 8007a0a:	b922      	cbnz	r2, 8007a16 <lv_draw_mask_angle+0x1da>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8007a0c:	4548      	cmp	r0, r9
 8007a0e:	bfcc      	ite	gt
 8007a10:	2403      	movgt	r4, #3
 8007a12:	2401      	movle	r4, #1
 8007a14:	e7ed      	b.n	80079f2 <lv_draw_mask_angle+0x1b6>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8007a16:	4548      	cmp	r0, r9
 8007a18:	dc0c      	bgt.n	8007a34 <lv_draw_mask_angle+0x1f8>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 8007a1a:	f105 0310 	add.w	r3, r5, #16
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	464a      	mov	r2, r9
 8007a22:	463b      	mov	r3, r7
 8007a24:	4641      	mov	r1, r8
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7ff fd4e 	bl	80074c8 <lv_draw_mask_line>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e7e0      	b.n	80079f2 <lv_draw_mask_angle+0x1b6>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8007a30:	4548      	cmp	r0, r9
 8007a32:	dcf2      	bgt.n	8007a1a <lv_draw_mask_angle+0x1de>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8007a34:	2403      	movs	r4, #3
 8007a36:	e7dc      	b.n	80079f2 <lv_draw_mask_angle+0x1b6>
        else if(p->cfg.end_angle == 0) {
 8007a38:	b923      	cbnz	r3, 8007a44 <lv_draw_mask_angle+0x208>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8007a3a:	4548      	cmp	r0, r9
 8007a3c:	bfd4      	ite	le
 8007a3e:	2003      	movle	r0, #3
 8007a40:	2001      	movgt	r0, #1
 8007a42:	e7e0      	b.n	8007a06 <lv_draw_mask_angle+0x1ca>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8007a44:	2bb3      	cmp	r3, #179	; 0xb3
 8007a46:	dc12      	bgt.n	8007a6e <lv_draw_mask_angle+0x232>
 8007a48:	4548      	cmp	r0, r9
 8007a4a:	dc12      	bgt.n	8007a72 <lv_draw_mask_angle+0x236>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 8007a4c:	353c      	adds	r5, #60	; 0x3c
 8007a4e:	463b      	mov	r3, r7
 8007a50:	464a      	mov	r2, r9
 8007a52:	4641      	mov	r1, r8
 8007a54:	4630      	mov	r0, r6
 8007a56:	9500      	str	r5, [sp, #0]
 8007a58:	f7ff fd36 	bl	80074c8 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8007a5c:	b12c      	cbz	r4, 8007a6a <lv_draw_mask_angle+0x22e>
 8007a5e:	b120      	cbz	r0, 8007a6a <lv_draw_mask_angle+0x22e>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 8007a60:	2c03      	cmp	r4, #3
 8007a62:	d108      	bne.n	8007a76 <lv_draw_mask_angle+0x23a>
 8007a64:	2803      	cmp	r0, #3
 8007a66:	f47f af5a 	bne.w	800791e <lv_draw_mask_angle+0xe2>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	e70a      	b.n	8007884 <lv_draw_mask_angle+0x48>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8007a6e:	4548      	cmp	r0, r9
 8007a70:	dcec      	bgt.n	8007a4c <lv_draw_mask_angle+0x210>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8007a72:	2003      	movs	r0, #3
 8007a74:	e7c7      	b.n	8007a06 <lv_draw_mask_angle+0x1ca>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 8007a76:	2c01      	cmp	r4, #1
 8007a78:	f47f af51 	bne.w	800791e <lv_draw_mask_angle+0xe2>
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	f47f af4e 	bne.w	800791e <lv_draw_mask_angle+0xe2>
 8007a82:	e6fe      	b.n	8007882 <lv_draw_mask_angle+0x46>

08007a84 <lv_draw_mask_radius>:
{
 8007a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4689      	mov	r9, r1
 8007a8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a8c:	4680      	mov	r8, r0
    bool outer = p->cfg.outer;
 8007a8e:	7c88      	ldrb	r0, [r1, #18]
{
 8007a90:	461d      	mov	r5, r3
    if(outer == false) {
 8007a92:	f010 0001 	ands.w	r0, r0, #1
    dest->y1 = src->y1;
 8007a96:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
    dest->y2 = src->y2;
 8007a9a:	f9b1 e00e 	ldrsh.w	lr, [r1, #14]
 8007a9e:	d136      	bne.n	8007b0e <lv_draw_mask_radius+0x8a>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	da03      	bge.n	8007aac <lv_draw_mask_radius+0x28>
            return LV_DRAW_MASK_RES_TRANSP;
 8007aa4:	2000      	movs	r0, #0
}
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8007aac:	4572      	cmp	r2, lr
 8007aae:	dcf9      	bgt.n	8007aa4 <lv_draw_mask_radius+0x20>
    dest->x1 = src->x1;
 8007ab0:	f9b1 6008 	ldrsh.w	r6, [r1, #8]
    int32_t radius = p->cfg.radius;
 8007ab4:	f9b1 a010 	ldrsh.w	sl, [r1, #16]
    dest->x2 = src->x2;
 8007ab8:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8007abc:	eb06 040a 	add.w	r4, r6, sl
 8007ac0:	45a1      	cmp	r9, r4
 8007ac2:	eba6 0409 	sub.w	r4, r6, r9
 8007ac6:	db05      	blt.n	8007ad4 <lv_draw_mask_radius+0x50>
 8007ac8:	eb09 0c05 	add.w	ip, r9, r5
 8007acc:	eba7 0b0a 	sub.w	fp, r7, sl
 8007ad0:	45dc      	cmp	ip, fp
 8007ad2:	dd07      	ble.n	8007ae4 <lv_draw_mask_radius+0x60>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8007ad4:	eb03 0c0a 	add.w	ip, r3, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8007ad8:	4562      	cmp	r2, ip
 8007ada:	db33      	blt.n	8007b44 <lv_draw_mask_radius+0xc0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8007adc:	ebae 0c0a 	sub.w	ip, lr, sl
 8007ae0:	4562      	cmp	r2, ip
 8007ae2:	dc2f      	bgt.n	8007b44 <lv_draw_mask_radius+0xc0>
        if(outer == false) {
 8007ae4:	b9f8      	cbnz	r0, 8007b26 <lv_draw_mask_radius+0xa2>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8007ae6:	42a5      	cmp	r5, r4
 8007ae8:	dbdc      	blt.n	8007aa4 <lv_draw_mask_radius+0x20>
            if(last >= 0) {
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	db03      	blt.n	8007af6 <lv_draw_mask_radius+0x72>
                lv_memset_00(&mask_buf[0], last);
 8007aee:	4621      	mov	r1, r4
 8007af0:	4640      	mov	r0, r8
 8007af2:	f008 fb5d 	bl	80101b0 <lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 8007af6:	eba7 0109 	sub.w	r1, r7, r9
 8007afa:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8007afc:	2800      	cmp	r0, #0
 8007afe:	ddd1      	ble.n	8007aa4 <lv_draw_mask_radius+0x20>
            else if(first < len) {
 8007b00:	4285      	cmp	r5, r0
 8007b02:	dd0b      	ble.n	8007b1c <lv_draw_mask_radius+0x98>
                lv_memset_00(&mask_buf[first], len - first);
 8007b04:	1a29      	subs	r1, r5, r0
                    lv_memset_00(&mask_buf[first], last);
 8007b06:	4440      	add	r0, r8
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8007b08:	f008 fb52 	bl	80101b0 <lv_memset_00>
 8007b0c:	e009      	b.n	8007b22 <lv_draw_mask_radius+0x9e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	da01      	bge.n	8007b16 <lv_draw_mask_radius+0x92>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8007b12:	2001      	movs	r0, #1
 8007b14:	e7c7      	b.n	8007aa6 <lv_draw_mask_radius+0x22>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8007b16:	4572      	cmp	r2, lr
 8007b18:	ddca      	ble.n	8007ab0 <lv_draw_mask_radius+0x2c>
 8007b1a:	e7fa      	b.n	8007b12 <lv_draw_mask_radius+0x8e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8007b1c:	b90c      	cbnz	r4, 8007b22 <lv_draw_mask_radius+0x9e>
 8007b1e:	4285      	cmp	r5, r0
 8007b20:	d0f7      	beq.n	8007b12 <lv_draw_mask_radius+0x8e>
    return LV_DRAW_MASK_RES_CHANGED;
 8007b22:	2002      	movs	r0, #2
 8007b24:	e7bf      	b.n	8007aa6 <lv_draw_mask_radius+0x22>
            if(first < 0) first = 0;
 8007b26:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
            if(first <= len) {
 8007b2a:	42a8      	cmp	r0, r5
 8007b2c:	dcf9      	bgt.n	8007b22 <lv_draw_mask_radius+0x9e>
                int32_t last =  rect.x2 - abs_x - first + 1;
 8007b2e:	eba7 0109 	sub.w	r1, r7, r9
 8007b32:	1a09      	subs	r1, r1, r0
 8007b34:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 8007b36:	1843      	adds	r3, r0, r1
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	bfc8      	it	gt
 8007b3c:	1a29      	subgt	r1, r5, r0
                if(last >= 0) {
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	dbef      	blt.n	8007b22 <lv_draw_mask_radius+0x9e>
 8007b42:	e7e0      	b.n	8007b06 <lv_draw_mask_radius+0x82>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007b44:	3701      	adds	r7, #1
    abs_y -= rect.y1;
 8007b46:	fa1f f982 	uxth.w	r9, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	1bbf      	subs	r7, r7, r6
 8007b4e:	eba9 0b03 	sub.w	fp, r9, r3
 8007b52:	b2be      	uxth	r6, r7
 8007b54:	9601      	str	r6, [sp, #4]
 8007b56:	fa1f f68b 	uxth.w	r6, fp
    if(abs_y < radius) {
 8007b5a:	fa0f fb8b 	sxth.w	fp, fp
 8007b5e:	45da      	cmp	sl, fp
        cir_y = radius - abs_y - 1;
 8007b60:	bfc8      	it	gt
 8007b62:	ea6f 0909 	mvngt.w	r9, r9
 8007b66:	fa1f f28a 	uxth.w	r2, sl
 8007b6a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8007b6e:	fa1f fc8c 	uxth.w	ip, ip
        cir_y = abs_y - (h - radius);
 8007b72:	bfd6      	itet	le
 8007b74:	4466      	addle	r6, ip
        cir_y = radius - abs_y - 1;
 8007b76:	189e      	addgt	r6, r3, r2
        cir_y = abs_y - (h - radius);
 8007b78:	18f6      	addle	r6, r6, r3
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8007b7a:	6949      	ldr	r1, [r1, #20]
        cir_y = abs_y - (h - radius);
 8007b7c:	bfd4      	ite	le
 8007b7e:	eba6 060e 	suble.w	r6, r6, lr
        cir_y = radius - abs_y - 1;
 8007b82:	44b1      	addgt	r9, r6
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8007b84:	f8d1 e00c 	ldr.w	lr, [r1, #12]
        cir_y = radius - abs_y - 1;
 8007b88:	bfcc      	ite	gt
 8007b8a:	fa0f f689 	sxthgt.w	r6, r9
        cir_y = abs_y - (h - radius);
 8007b8e:	b236      	sxthle	r6, r6
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8007b90:	f106 0901 	add.w	r9, r6, #1
 8007b94:	f83e 3016 	ldrh.w	r3, [lr, r6, lsl #1]
    *x_start = c->x_start_on_y[y];
 8007b98:	688f      	ldr	r7, [r1, #8]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8007b9a:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8007b9e:	6849      	ldr	r1, [r1, #4]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8007ba0:	eba9 0903 	sub.w	r9, r9, r3
    return &c->cir_opa[c->opa_start_on_y[y]];
 8007ba4:	440b      	add	r3, r1
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007ba6:	9901      	ldr	r1, [sp, #4]
    *x_start = c->x_start_on_y[y];
 8007ba8:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007bac:	b2a4      	uxth	r4, r4
 8007bae:	1a8a      	subs	r2, r1, r2
 8007bb0:	4422      	add	r2, r4
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8007bb2:	4464      	add	r4, ip
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007bb4:	4432      	add	r2, r6
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8007bb6:	1ba4      	subs	r4, r4, r6
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007bb8:	b291      	uxth	r1, r2
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8007bba:	b224      	sxth	r4, r4
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007bbc:	b212      	sxth	r2, r2
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8007bbe:	fa0f f989 	sxth.w	r9, r9
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8007bc2:	9101      	str	r1, [sp, #4]
 8007bc4:	eb08 0704 	add.w	r7, r8, r4
 8007bc8:	eb08 0602 	add.w	r6, r8, r2
    if(outer == false) {
 8007bcc:	b1b0      	cbz	r0, 8007bfc <lv_draw_mask_radius+0x178>
 8007bce:	f04f 0a00 	mov.w	sl, #0
 8007bd2:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8007bd6:	440b      	add	r3, r1
        for(i = 0; i < aa_len; i++) {
 8007bd8:	fa0f f18a 	sxth.w	r1, sl
 8007bdc:	4589      	cmp	r9, r1
 8007bde:	dc46      	bgt.n	8007c6e <lv_draw_mask_radius+0x1ea>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8007be0:	3401      	adds	r4, #1
 8007be2:	42ac      	cmp	r4, r5
 8007be4:	bfa8      	it	ge
 8007be6:	462c      	movge	r4, r5
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8007be8:	4295      	cmp	r5, r2
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8007bea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8007bee:	dd5d      	ble.n	8007cac <lv_draw_mask_radius+0x228>
 8007bf0:	1b12      	subs	r2, r2, r4
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	db60      	blt.n	8007cb8 <lv_draw_mask_radius+0x234>
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	1b19      	subs	r1, r3, r4
 8007bfa:	e059      	b.n	8007cb0 <lv_draw_mask_radius+0x22c>
    if(outer == false) {
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	444b      	add	r3, r9
        for(i = 0; i < aa_len; i++) {
 8007c00:	fa0f f18a 	sxth.w	r1, sl
 8007c04:	4549      	cmp	r1, r9
 8007c06:	db17      	blt.n	8007c38 <lv_draw_mask_radius+0x1b4>
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8007c08:	f1b9 0f00 	cmp.w	r9, #0
 8007c0c:	bfa8      	it	ge
 8007c0e:	444a      	addge	r2, r9
 8007c10:	42aa      	cmp	r2, r5
 8007c12:	bfa8      	it	ge
 8007c14:	462a      	movge	r2, r5
 8007c16:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 8007c1a:	1aa9      	subs	r1, r5, r2
 8007c1c:	eb08 0002 	add.w	r0, r8, r2
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 8007c20:	eba4 0409 	sub.w	r4, r4, r9
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 8007c24:	f008 fac4 	bl	80101b0 <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 8007c28:	1c61      	adds	r1, r4, #1
 8007c2a:	42a9      	cmp	r1, r5
 8007c2c:	bfa8      	it	ge
 8007c2e:	4629      	movge	r1, r5
        lv_memset_00(&mask_buf[0], cir_x_left);
 8007c30:	4640      	mov	r0, r8
 8007c32:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007c36:	e767      	b.n	8007b08 <lv_draw_mask_radius+0x84>
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8007c38:	eb12 010a 	adds.w	r1, r2, sl
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 8007c3c:	f813 bd01 	ldrb.w	fp, [r3, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8007c40:	d406      	bmi.n	8007c50 <lv_draw_mask_radius+0x1cc>
 8007c42:	42a9      	cmp	r1, r5
 8007c44:	da04      	bge.n	8007c50 <lv_draw_mask_radius+0x1cc>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8007c46:	7831      	ldrb	r1, [r6, #0]
 8007c48:	4658      	mov	r0, fp
 8007c4a:	f7ff fc30 	bl	80074ae <mask_mix>
 8007c4e:	7030      	strb	r0, [r6, #0]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8007c50:	ebb4 010a 	subs.w	r1, r4, sl
 8007c54:	d406      	bmi.n	8007c64 <lv_draw_mask_radius+0x1e0>
 8007c56:	42a9      	cmp	r1, r5
 8007c58:	da04      	bge.n	8007c64 <lv_draw_mask_radius+0x1e0>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8007c5a:	7839      	ldrb	r1, [r7, #0]
 8007c5c:	4658      	mov	r0, fp
 8007c5e:	f7ff fc26 	bl	80074ae <mask_mix>
 8007c62:	7038      	strb	r0, [r7, #0]
        for(i = 0; i < aa_len; i++) {
 8007c64:	f10a 0a01 	add.w	sl, sl, #1
 8007c68:	3f01      	subs	r7, #1
 8007c6a:	3601      	adds	r6, #1
 8007c6c:	e7c8      	b.n	8007c00 <lv_draw_mask_radius+0x17c>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8007c6e:	f813 b901 	ldrb.w	fp, [r3], #-1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8007c72:	eb12 010a 	adds.w	r1, r2, sl
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8007c76:	ea6f 0b0b 	mvn.w	fp, fp
 8007c7a:	fa5f fb8b 	uxtb.w	fp, fp
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8007c7e:	d406      	bmi.n	8007c8e <lv_draw_mask_radius+0x20a>
 8007c80:	428d      	cmp	r5, r1
 8007c82:	dd04      	ble.n	8007c8e <lv_draw_mask_radius+0x20a>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8007c84:	7831      	ldrb	r1, [r6, #0]
 8007c86:	4658      	mov	r0, fp
 8007c88:	f7ff fc11 	bl	80074ae <mask_mix>
 8007c8c:	7030      	strb	r0, [r6, #0]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8007c8e:	ebb4 010a 	subs.w	r1, r4, sl
 8007c92:	d406      	bmi.n	8007ca2 <lv_draw_mask_radius+0x21e>
 8007c94:	428d      	cmp	r5, r1
 8007c96:	dd04      	ble.n	8007ca2 <lv_draw_mask_radius+0x21e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8007c98:	7839      	ldrb	r1, [r7, #0]
 8007c9a:	4658      	mov	r0, fp
 8007c9c:	f7ff fc07 	bl	80074ae <mask_mix>
 8007ca0:	7038      	strb	r0, [r7, #0]
        for(i = 0; i < aa_len; i++) {
 8007ca2:	f10a 0a01 	add.w	sl, sl, #1
 8007ca6:	3f01      	subs	r7, #1
 8007ca8:	3601      	adds	r6, #1
 8007caa:	e795      	b.n	8007bd8 <lv_draw_mask_radius+0x154>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8007cac:	1b29      	subs	r1, r5, r4
 8007cae:	d403      	bmi.n	8007cb8 <lv_draw_mask_radius+0x234>
 8007cb0:	b209      	sxth	r1, r1
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8007cb2:	eb08 0004 	add.w	r0, r8, r4
 8007cb6:	e727      	b.n	8007b08 <lv_draw_mask_radius+0x84>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8007cb8:	2100      	movs	r1, #0
 8007cba:	e7fa      	b.n	8007cb2 <lv_draw_mask_radius+0x22e>

08007cbc <lv_draw_mask_add>:
{
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	b570      	push	{r4, r5, r6, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8007cc0:	4c08      	ldr	r4, [pc, #32]	; (8007ce4 <lv_draw_mask_add+0x28>)
 8007cc2:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 8007ccc:	b12e      	cbz	r6, 8007cda <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8007cce:	3301      	adds	r3, #1
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d1f6      	bne.n	8007cc2 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8007cda:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8007cde:	6069      	str	r1, [r5, #4]
    return i;
 8007ce0:	b210      	sxth	r0, r2
 8007ce2:	e7f9      	b.n	8007cd8 <lv_draw_mask_add+0x1c>
 8007ce4:	2000476c 	.word	0x2000476c

08007ce8 <lv_draw_mask_apply>:
{
 8007ce8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4607      	mov	r7, r0
 8007cee:	4688      	mov	r8, r1
 8007cf0:	4691      	mov	r9, r2
 8007cf2:	469a      	mov	sl, r3
    bool changed = false;
 8007cf4:	2500      	movs	r5, #0
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8007cf6:	4e0c      	ldr	r6, [pc, #48]	; (8007d28 <lv_draw_mask_apply+0x40>)
    while(m->param) {
 8007cf8:	6834      	ldr	r4, [r6, #0]
 8007cfa:	b934      	cbnz	r4, 8007d0a <lv_draw_mask_apply+0x22>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	bf14      	ite	ne
 8007d00:	2002      	movne	r0, #2
 8007d02:	2001      	moveq	r0, #1
}
 8007d04:	b002      	add	sp, #8
 8007d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8007d0a:	9400      	str	r4, [sp, #0]
 8007d0c:	4653      	mov	r3, sl
 8007d0e:	464a      	mov	r2, r9
 8007d10:	4641      	mov	r1, r8
 8007d12:	4638      	mov	r0, r7
 8007d14:	6824      	ldr	r4, [r4, #0]
 8007d16:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d0f3      	beq.n	8007d04 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8007d1c:	2802      	cmp	r0, #2
 8007d1e:	bf08      	it	eq
 8007d20:	2501      	moveq	r5, #1
        m++;
 8007d22:	3608      	adds	r6, #8
 8007d24:	e7e8      	b.n	8007cf8 <lv_draw_mask_apply+0x10>
 8007d26:	bf00      	nop
 8007d28:	2000476c 	.word	0x2000476c

08007d2c <lv_draw_mask_remove_id>:
{
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2100      	movs	r1, #0
    if(id != LV_MASK_ID_INV) {
 8007d30:	1c42      	adds	r2, r0, #1
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8007d32:	bf1f      	itttt	ne
 8007d34:	4a05      	ldrne	r2, [pc, #20]	; (8007d4c <lv_draw_mask_remove_id+0x20>)
 8007d36:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8007d3a:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8007d3e:	eb02 03c3 	addne.w	r3, r2, r3, lsl #3
 8007d42:	bf14      	ite	ne
 8007d44:	6059      	strne	r1, [r3, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8007d46:	4608      	moveq	r0, r1
}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	2000476c 	.word	0x2000476c

08007d50 <lv_draw_mask_remove_custom>:
{
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	2400      	movs	r4, #0
 8007d54:	4606      	mov	r6, r0
    _lv_draw_mask_common_dsc_t * p = NULL;
 8007d56:	4627      	mov	r7, r4
 8007d58:	4d07      	ldr	r5, [pc, #28]	; (8007d78 <lv_draw_mask_remove_custom+0x28>)
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8007d5a:	686b      	ldr	r3, [r5, #4]
 8007d5c:	42b3      	cmp	r3, r6
 8007d5e:	d103      	bne.n	8007d68 <lv_draw_mask_remove_custom+0x18>
            lv_draw_mask_remove_id(i);
 8007d60:	b220      	sxth	r0, r4
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8007d62:	682f      	ldr	r7, [r5, #0]
            lv_draw_mask_remove_id(i);
 8007d64:	f7ff ffe2 	bl	8007d2c <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8007d68:	3401      	adds	r4, #1
 8007d6a:	2c10      	cmp	r4, #16
 8007d6c:	f105 0508 	add.w	r5, r5, #8
 8007d70:	d1f3      	bne.n	8007d5a <lv_draw_mask_remove_custom+0xa>
}
 8007d72:	4638      	mov	r0, r7
 8007d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000476c 	.word	0x2000476c

08007d7c <lv_draw_mask_free_param>:
{
 8007d7c:	b510      	push	{r4, lr}
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8007d7e:	7903      	ldrb	r3, [r0, #4]
{
 8007d80:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d10f      	bne.n	8007da6 <lv_draw_mask_free_param+0x2a>
        if(radius_p->circle) {
 8007d86:	6943      	ldr	r3, [r0, #20]
 8007d88:	b16b      	cbz	r3, 8007da6 <lv_draw_mask_free_param+0x2a>
            if(radius_p->circle->life < 0) {
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	da07      	bge.n	8007da0 <lv_draw_mask_free_param+0x24>
                lv_mem_free(radius_p->circle->cir_opa);
 8007d90:	6858      	ldr	r0, [r3, #4]
 8007d92:	f008 f809 	bl	800fda8 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 8007d96:	6960      	ldr	r0, [r4, #20]
}
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                lv_mem_free(radius_p->circle);
 8007d9c:	f008 b804 	b.w	800fda8 <lv_mem_free>
                radius_p->circle->used_cnt--;
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	3a01      	subs	r2, #1
 8007da4:	615a      	str	r2, [r3, #20]
}
 8007da6:	bd10      	pop	{r4, pc}

08007da8 <_lv_draw_mask_cleanup>:
{
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	2500      	movs	r5, #0
 8007dac:	4c07      	ldr	r4, [pc, #28]	; (8007dcc <_lv_draw_mask_cleanup+0x24>)
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8007dae:	6820      	ldr	r0, [r4, #0]
 8007db0:	b108      	cbz	r0, 8007db6 <_lv_draw_mask_cleanup+0xe>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8007db2:	f007 fff9 	bl	800fda8 <lv_mem_free>
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8007db6:	4620      	mov	r0, r4
 8007db8:	211c      	movs	r1, #28
 8007dba:	3501      	adds	r5, #1
 8007dbc:	f008 f9f8 	bl	80101b0 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8007dc0:	2d04      	cmp	r5, #4
 8007dc2:	f104 041c 	add.w	r4, r4, #28
 8007dc6:	d1f2      	bne.n	8007dae <_lv_draw_mask_cleanup+0x6>
}
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20004804 	.word	0x20004804

08007dd0 <lv_draw_mask_is_any>:
{
 8007dd0:	b570      	push	{r4, r5, r6, lr}
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4e12      	ldr	r6, [pc, #72]	; (8007e20 <lv_draw_mask_is_any+0x50>)
 8007dd6:	b920      	cbnz	r0, 8007de2 <lv_draw_mask_is_any+0x12>
 8007dd8:	6830      	ldr	r0, [r6, #0]
 8007dda:	3800      	subs	r0, #0
 8007ddc:	bf18      	it	ne
 8007dde:	2001      	movne	r0, #1
}
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	2500      	movs	r5, #0
        _lv_draw_mask_common_dsc_t * comm_param =  LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8007de4:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
        if(comm_param == NULL) continue;
 8007de8:	b923      	cbnz	r3, 8007df4 <lv_draw_mask_is_any+0x24>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8007dea:	3501      	adds	r5, #1
 8007dec:	2d10      	cmp	r5, #16
 8007dee:	d1f9      	bne.n	8007de4 <lv_draw_mask_is_any+0x14>
    return false;
 8007df0:	2000      	movs	r0, #0
 8007df2:	e7f5      	b.n	8007de0 <lv_draw_mask_is_any+0x10>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8007df4:	791a      	ldrb	r2, [r3, #4]
 8007df6:	2a02      	cmp	r2, #2
 8007df8:	d001      	beq.n	8007dfe <lv_draw_mask_is_any+0x2e>
            return true;
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7f0      	b.n	8007de0 <lv_draw_mask_is_any+0x10>
            if(radius_param->cfg.outer) {
 8007dfe:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007e02:	f103 0108 	add.w	r1, r3, #8
 8007e06:	7c9b      	ldrb	r3, [r3, #18]
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8007e08:	4620      	mov	r0, r4
            if(radius_param->cfg.outer) {
 8007e0a:	07db      	lsls	r3, r3, #31
 8007e0c:	d504      	bpl.n	8007e18 <lv_draw_mask_is_any+0x48>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8007e0e:	f007 fdb3 	bl	800f978 <_lv_area_is_out>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1e9      	bne.n	8007dea <lv_draw_mask_is_any+0x1a>
 8007e16:	e7f0      	b.n	8007dfa <lv_draw_mask_is_any+0x2a>
 8007e18:	f007 fd65 	bl	800f8e6 <_lv_area_is_in>
 8007e1c:	e7f9      	b.n	8007e12 <lv_draw_mask_is_any+0x42>
 8007e1e:	bf00      	nop
 8007e20:	2000476c 	.word	0x2000476c

08007e24 <lv_draw_mask_line_points_init>:
{
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4615      	mov	r5, r2
 8007e2a:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8007e2e:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8007e30:	212c      	movs	r1, #44	; 0x2c
{
 8007e32:	4604      	mov	r4, r0
 8007e34:	4698      	mov	r8, r3
 8007e36:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8007e3a:	f008 f9b9 	bl	80101b0 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d106      	bne.n	8007e50 <lv_draw_mask_line_points_init+0x2c>
 8007e42:	f1b9 0f03 	cmp.w	r9, #3
 8007e46:	d10b      	bne.n	8007e60 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 8007e48:	3d01      	subs	r5, #1
        p2y--;
 8007e4a:	3e01      	subs	r6, #1
        p1y--;
 8007e4c:	b22d      	sxth	r5, r5
        p2y--;
 8007e4e:	b236      	sxth	r6, r6
    if(p1y > p2y) {
 8007e50:	42b5      	cmp	r5, r6
 8007e52:	dd05      	ble.n	8007e60 <lv_draw_mask_line_points_init+0x3c>
 8007e54:	462a      	mov	r2, r5
 8007e56:	4635      	mov	r5, r6
 8007e58:	4616      	mov	r6, r2
 8007e5a:	463a      	mov	r2, r7
        p1x = t;
 8007e5c:	4647      	mov	r7, r8
        p2x = p1x;
 8007e5e:	4690      	mov	r8, r2
    param->cfg.side = side;
 8007e60:	7c22      	ldrb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8007e62:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.side = side;
 8007e66:	f369 0201 	bfi	r2, r9, #0, #2
    param->cfg.p1.y = p1y;
 8007e6a:	8165      	strh	r5, [r4, #10]
    param->origo.y = p1y;
 8007e6c:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8007e6e:	1b75      	subs	r5, r6, r5
    param->cfg.side = side;
 8007e70:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8007e72:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8007e76:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8007e7a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8007e7e:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8007e82:	4291      	cmp	r1, r2
 8007e84:	bfd4      	ite	le
 8007e86:	2100      	movle	r1, #0
 8007e88:	2101      	movgt	r1, #1
 8007e8a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8007e8e:	482a      	ldr	r0, [pc, #168]	; (8007f38 <lv_draw_mask_line_points_init+0x114>)
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8007e90:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 8007e94:	2100      	movs	r1, #0
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8007e96:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->flat) {
 8007e9a:	07d2      	lsls	r2, r2, #31
    param->xy_steep = 0;
 8007e9c:	e9c4 1106 	strd	r1, r1, [r4, #24]
    param->cfg.p1.x = p1x;
 8007ea0:	8127      	strh	r7, [r4, #8]
    param->cfg.p2.x = p2x;
 8007ea2:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 8007ea6:	81e6      	strh	r6, [r4, #14]
    param->origo.x = p1x;
 8007ea8:	8267      	strh	r7, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8007eaa:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8007eac:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
 8007eae:	d524      	bpl.n	8007efa <lv_draw_mask_line_points_init+0xd6>
        if(dx) {
 8007eb0:	b133      	cbz	r3, 8007ec0 <lv_draw_mask_line_points_init+0x9c>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8007eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eb6:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 8007eba:	436a      	muls	r2, r5
 8007ebc:	1292      	asrs	r2, r2, #10
 8007ebe:	61e2      	str	r2, [r4, #28]
        if(dy) {
 8007ec0:	b135      	cbz	r5, 8007ed0 <lv_draw_mask_line_points_init+0xac>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8007ec2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8007ec6:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
 8007eca:	436b      	muls	r3, r5
 8007ecc:	129b      	asrs	r3, r3, #10
 8007ece:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 8007ed0:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8007ed2:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 8007ed4:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8007ed6:	f012 0203 	ands.w	r2, r2, #3
 8007eda:	6a21      	ldr	r1, [r4, #32]
 8007edc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ee0:	d11d      	bne.n	8007f1e <lv_draw_mask_line_points_init+0xfa>
 8007ee2:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8007ee6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 8007eea:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
 8007eec:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 8007ef0:	bfb8      	it	lt
 8007ef2:	425b      	neglt	r3, r3
 8007ef4:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 8007efa:	b135      	cbz	r5, 8007f0a <lv_draw_mask_line_points_init+0xe6>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8007efc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f00:	fb92 f2f5 	sdiv	r2, r2, r5
            param->xy_steep = (m * dx) >> 10;
 8007f04:	435a      	muls	r2, r3
 8007f06:	1292      	asrs	r2, r2, #10
 8007f08:	61a2      	str	r2, [r4, #24]
        if(dx) {
 8007f0a:	b133      	cbz	r3, 8007f1a <lv_draw_mask_line_points_init+0xf6>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8007f0c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8007f10:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 8007f14:	435d      	muls	r5, r3
 8007f16:	12ad      	asrs	r5, r5, #10
 8007f18:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 8007f1a:	69a3      	ldr	r3, [r4, #24]
 8007f1c:	e7d9      	b.n	8007ed2 <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8007f1e:	2a01      	cmp	r2, #1
 8007f20:	d102      	bne.n	8007f28 <lv_draw_mask_line_points_init+0x104>
 8007f22:	f043 0302 	orr.w	r3, r3, #2
 8007f26:	e7de      	b.n	8007ee6 <lv_draw_mask_line_points_init+0xc2>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8007f28:	2a02      	cmp	r2, #2
 8007f2a:	d102      	bne.n	8007f32 <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	dcf8      	bgt.n	8007f22 <lv_draw_mask_line_points_init+0xfe>
 8007f30:	e7d7      	b.n	8007ee2 <lv_draw_mask_line_points_init+0xbe>
        if(param->steep > 0) param->inv = 0;
 8007f32:	2900      	cmp	r1, #0
 8007f34:	dcd5      	bgt.n	8007ee2 <lv_draw_mask_line_points_init+0xbe>
 8007f36:	e7f4      	b.n	8007f22 <lv_draw_mask_line_points_init+0xfe>
 8007f38:	080074c9 	.word	0x080074c9

08007f3c <lv_draw_mask_line_angle_init>:
{
 8007f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f40:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8007f42:	2bb4      	cmp	r3, #180	; 0xb4
 8007f44:	bfc4      	itt	gt
 8007f46:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
 8007f4a:	b224      	sxthgt	r4, r4
{
 8007f4c:	4606      	mov	r6, r0
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8007f4e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8007f52:	b200      	sxth	r0, r0
{
 8007f54:	4690      	mov	r8, r2
 8007f56:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8007f58:	f007 feaa 	bl	800fcb0 <lv_trigo_sin>
 8007f5c:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f007 fea6 	bl	800fcb0 <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8007f64:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8007f68:	eb08 1460 	add.w	r4, r8, r0, asr #5
 8007f6c:	eb07 1365 	add.w	r3, r7, r5, asr #5
 8007f70:	b224      	sxth	r4, r4
 8007f72:	9201      	str	r2, [sp, #4]
 8007f74:	4639      	mov	r1, r7
 8007f76:	4642      	mov	r2, r8
 8007f78:	4630      	mov	r0, r6
 8007f7a:	9400      	str	r4, [sp, #0]
 8007f7c:	b21b      	sxth	r3, r3
 8007f7e:	f7ff ff51 	bl	8007e24 <lv_draw_mask_line_points_init>
}
 8007f82:	b002      	add	sp, #8
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f88 <lv_draw_mask_angle_init>:
{
 8007f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f8c:	f240 1567 	movw	r5, #359	; 0x167
 8007f90:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8007f94:	42ab      	cmp	r3, r5
 8007f96:	bfa8      	it	ge
 8007f98:	462b      	movge	r3, r5
 8007f9a:	42bd      	cmp	r5, r7
 8007f9c:	bfa8      	it	ge
 8007f9e:	463d      	movge	r5, r7
 8007fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 8007fa4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 8007fa8:	429d      	cmp	r5, r3
{
 8007faa:	4690      	mov	r8, r2
 8007fac:	4604      	mov	r4, r0
 8007fae:	460e      	mov	r6, r1
 8007fb0:	b29a      	uxth	r2, r3
    if(end_angle < start_angle) {
 8007fb2:	da28      	bge.n	8008006 <lv_draw_mask_angle_init+0x7e>
        param->delta_deg = 360 - start_angle + end_angle;
 8007fb4:	f505 70b4 	add.w	r0, r5, #360	; 0x168
 8007fb8:	1a80      	subs	r0, r0, r2
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8007fba:	4915      	ldr	r1, [pc, #84]	; (8008010 <lv_draw_mask_angle_init+0x88>)
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8007fbc:	2ab3      	cmp	r2, #179	; 0xb3
 8007fbe:	bf94      	ite	ls
 8007fc0:	2200      	movls	r2, #0
 8007fc2:	2201      	movhi	r2, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8007fc4:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8007fc6:	2101      	movs	r1, #1
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8007fc8:	b280      	uxth	r0, r0
 8007fca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    param->cfg.start_angle = start_angle;
 8007fce:	81a3      	strh	r3, [r4, #12]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8007fd0:	7121      	strb	r1, [r4, #4]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8007fd2:	9200      	str	r2, [sp, #0]
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4642      	mov	r2, r8
 8007fd8:	f104 0010 	add.w	r0, r4, #16
    param->cfg.end_angle = end_angle;
 8007fdc:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 8007fde:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 8007fe0:	f8a4 800a 	strh.w	r8, [r4, #10]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8007fe4:	f7ff ffaa 	bl	8007f3c <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8007fe8:	2fb3      	cmp	r7, #179	; 0xb3
 8007fea:	bfcc      	ite	gt
 8007fec:	2700      	movgt	r7, #0
 8007fee:	2701      	movle	r7, #1
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	4642      	mov	r2, r8
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8007ffa:	9708      	str	r7, [sp, #32]
}
 8007ffc:	b002      	add	sp, #8
 8007ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8008002:	f7ff bf9b 	b.w	8007f3c <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8008006:	1ae8      	subs	r0, r5, r3
 8008008:	2800      	cmp	r0, #0
 800800a:	bfb8      	it	lt
 800800c:	4240      	neglt	r0, r0
 800800e:	e7d4      	b.n	8007fba <lv_draw_mask_angle_init+0x32>
 8008010:	0800783d 	.word	0x0800783d

08008014 <lv_draw_mask_radius_init>:
{
 8008014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800801a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800801e:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008022:	f9b1 c000 	ldrsh.w	ip, [r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008026:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 800802a:	4617      	mov	r7, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800802c:	1c61      	adds	r1, r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800802e:	1c42      	adds	r2, r0, #1
 8008030:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008034:	eba1 010c 	sub.w	r1, r1, ip
    int32_t short_side = LV_MIN(w, h);
 8008038:	b212      	sxth	r2, r2
 800803a:	b209      	sxth	r1, r1
 800803c:	428a      	cmp	r2, r1
 800803e:	bfa8      	it	ge
 8008040:	460a      	movge	r2, r1
    if(radius > short_side >> 1) radius = short_side >> 1;
 8008042:	ebb7 0f62 	cmp.w	r7, r2, asr #1
 8008046:	ea4f 0162 	mov.w	r1, r2, asr #1
    param->cfg.outer = inv ? 1 : 0;
 800804a:	7cb2      	ldrb	r2, [r6, #18]
    if(radius > short_side >> 1) radius = short_side >> 1;
 800804c:	bfc8      	it	gt
 800804e:	b20f      	sxthgt	r7, r1
    param->cfg.outer = inv ? 1 : 0;
 8008050:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8008054:	4bac      	ldr	r3, [pc, #688]	; (8008308 <lv_draw_mask_radius_init+0x2f4>)
 8008056:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
 800805a:	6033      	str	r3, [r6, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800805c:	2302      	movs	r3, #2
    if(radius == 0) {
 800805e:	2f00      	cmp	r7, #0
    param->cfg.outer = inv ? 1 : 0;
 8008060:	74b2      	strb	r2, [r6, #18]
{
 8008062:	b093      	sub	sp, #76	; 0x4c
 8008064:	f04f 0200 	mov.w	r2, #0
    dest->x1 = src->x1;
 8008068:	f8a6 c008 	strh.w	ip, [r6, #8]
    dest->y1 = src->y1;
 800806c:	f8a6 e00a 	strh.w	lr, [r6, #10]
    dest->x2 = src->x2;
 8008070:	81b4      	strh	r4, [r6, #12]
    dest->y2 = src->y2;
 8008072:	81f0      	strh	r0, [r6, #14]
    param->cfg.radius = radius;
 8008074:	8235      	strh	r5, [r6, #16]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8008076:	7133      	strb	r3, [r6, #4]
    if(radius == 0) {
 8008078:	dc03      	bgt.n	8008082 <lv_draw_mask_radius_init+0x6e>
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 800807a:	6172      	str	r2, [r6, #20]
}
 800807c:	b013      	add	sp, #76	; 0x4c
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008082:	4ba2      	ldr	r3, [pc, #648]	; (800830c <lv_draw_mask_radius_init+0x2f8>)
    if(radius == 0) {
 8008084:	4619      	mov	r1, r3
 8008086:	461c      	mov	r4, r3
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 8008088:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 800808c:	42a8      	cmp	r0, r5
 800808e:	d116      	bne.n	80080be <lv_draw_mask_radius_init+0xaa>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8008090:	231c      	movs	r3, #28
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8008092:	2f0f      	cmp	r7, #15
 8008094:	bfd8      	it	le
 8008096:	2501      	movle	r5, #1
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8008098:	fb03 4102 	mla	r1, r3, r2, r4
 800809c:	6948      	ldr	r0, [r1, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 800809e:	bfc8      	it	gt
 80080a0:	f345 150f 	sbfxgt	r5, r5, #4, #16
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 80080a4:	3001      	adds	r0, #1
 80080a6:	6148      	str	r0, [r1, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 80080a8:	6909      	ldr	r1, [r1, #16]
 80080aa:	fb03 4202 	mla	r2, r3, r2, r4
 80080ae:	440d      	add	r5, r1
 80080b0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80080b4:	bfa8      	it	ge
 80080b6:	f44f 757a 	movge.w	r5, #1000	; 0x3e8
 80080ba:	6115      	str	r5, [r2, #16]
 80080bc:	e7dd      	b.n	800807a <lv_draw_mask_radius_init+0x66>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80080be:	3201      	adds	r2, #1
 80080c0:	2a04      	cmp	r2, #4
 80080c2:	f101 011c 	add.w	r1, r1, #28
 80080c6:	d1df      	bne.n	8008088 <lv_draw_mask_radius_init+0x74>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 80080c8:	2400      	movs	r4, #0
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80080ca:	4622      	mov	r2, r4
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 80080cc:	6959      	ldr	r1, [r3, #20]
 80080ce:	b929      	cbnz	r1, 80080dc <lv_draw_mask_radius_init+0xc8>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80080d0:	b184      	cbz	r4, 80080f4 <lv_draw_mask_radius_init+0xe0>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80080d2:	6918      	ldr	r0, [r3, #16]
 80080d4:	6921      	ldr	r1, [r4, #16]
 80080d6:	4288      	cmp	r0, r1
 80080d8:	bfb8      	it	lt
 80080da:	461c      	movlt	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80080dc:	3201      	adds	r2, #1
 80080de:	2a04      	cmp	r2, #4
 80080e0:	f103 031c 	add.w	r3, r3, #28
 80080e4:	d1f2      	bne.n	80080cc <lv_draw_mask_radius_init+0xb8>
    if(!entry) {
 80080e6:	b9ec      	cbnz	r4, 8008124 <lv_draw_mask_radius_init+0x110>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80080e8:	201c      	movs	r0, #28
 80080ea:	f007 ffe3 	bl	80100b4 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 80080ee:	4604      	mov	r4, r0
 80080f0:	b910      	cbnz	r0, 80080f8 <lv_draw_mask_radius_init+0xe4>
 80080f2:	e7fe      	b.n	80080f2 <lv_draw_mask_radius_init+0xde>
 80080f4:	461c      	mov	r4, r3
 80080f6:	e7f1      	b.n	80080dc <lv_draw_mask_radius_init+0xc8>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 80080f8:	211c      	movs	r1, #28
 80080fa:	f008 f859 	bl	80101b0 <lv_memset_00>
        entry->life = -1;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if(c->buf) lv_mem_free(c->buf);
 8008102:	6820      	ldr	r0, [r4, #0]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8008104:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 8008106:	6174      	str	r4, [r6, #20]
    c->radius = radius;
 8008108:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 800810a:	b108      	cbz	r0, 8008110 <lv_draw_mask_radius_init+0xfc>
 800810c:	f007 fe4c 	bl	800fda8 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8008110:	2006      	movs	r0, #6
 8008112:	fb05 0000 	mla	r0, r5, r0, r0
 8008116:	f007 ffcd 	bl	80100b4 <lv_mem_alloc>
 800811a:	f105 0901 	add.w	r9, r5, #1
 800811e:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 8008120:	b978      	cbnz	r0, 8008142 <lv_draw_mask_radius_init+0x12e>
 8008122:	e7fe      	b.n	8008122 <lv_draw_mask_radius_init+0x10e>
        entry->used_cnt++;
 8008124:	6963      	ldr	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8008126:	2f0f      	cmp	r7, #15
        entry->used_cnt++;
 8008128:	f103 0301 	add.w	r3, r3, #1
 800812c:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800812e:	bfd4      	ite	le
 8008130:	2301      	movle	r3, #1
 8008132:	f345 130f 	sbfxgt	r3, r5, #4, #16
 8008136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800813a:	bfa8      	it	ge
 800813c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8008140:	e7df      	b.n	8008102 <lv_draw_mask_radius_init+0xee>
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8008142:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8008146:	ea4f 0885 	mov.w	r8, r5, lsl #2
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800814a:	3302      	adds	r3, #2
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800814c:	f108 0604 	add.w	r6, r8, #4
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8008150:	60e3      	str	r3, [r4, #12]
    if(radius == 1) {
 8008152:	2f01      	cmp	r7, #1
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8008154:	eb00 0306 	add.w	r3, r0, r6
    c->cir_opa = c->buf;
 8008158:	6060      	str	r0, [r4, #4]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800815a:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 800815c:	d108      	bne.n	8008170 <lv_draw_mask_radius_init+0x15c>
        c->cir_opa[0] =  180;
 800815e:	23b4      	movs	r3, #180	; 0xb4
 8008160:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] =  0;
 8008162:	2300      	movs	r3, #0
 8008164:	68e2      	ldr	r2, [r4, #12]
 8008166:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] =  1;
 8008168:	8057      	strh	r7, [r2, #2]
        c->x_start_on_y[0] =  0;
 800816a:	68a2      	ldr	r2, [r4, #8]
 800816c:	8013      	strh	r3, [r2, #0]
        return;
 800816e:	e785      	b.n	800807c <lv_draw_mask_radius_init+0x68>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 8008170:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 8008174:	f007 ffce 	bl	8010114 <lv_mem_buf_get>
    x_fract[0] = 0;
 8008178:	2100      	movs	r1, #0
    *tmp = 1 - radius;
 800817a:	f1c8 0301 	rsb	r3, r8, #1
 800817e:	b21b      	sxth	r3, r3
 8008180:	9303      	str	r3, [sp, #12]
    x_int[0] = cp.x >> 2;
 8008182:	f348 038d 	sbfx	r3, r8, #2, #14
 8008186:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t cir_size = 0;
 8008188:	460b      	mov	r3, r1
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 800818a:	1982      	adds	r2, r0, r6
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800818c:	fa0f fa88 	sxth.w	sl, r8
    x_fract[0] = 0;
 8008190:	910e      	str	r1, [sp, #56]	; 0x38
    c->y = 0;
 8008192:	9100      	str	r1, [sp, #0]
    uint32_t y_8th_cnt = 0;
 8008194:	9106      	str	r1, [sp, #24]
    while(circ_cont(&cp)) {
 8008196:	9900      	ldr	r1, [sp, #0]
 8008198:	4551      	cmp	r1, sl
 800819a:	dc17      	bgt.n	80081cc <lv_draw_mask_radius_init+0x1b8>
 800819c:	9900      	ldr	r1, [sp, #0]
 800819e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80081a2:	1d0f      	adds	r7, r1, #4
 80081a4:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80081a8:	b23f      	sxth	r7, r7
    if(*tmp <= 0) {
 80081aa:	9903      	ldr	r1, [sp, #12]
 80081ac:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80081b0:	2900      	cmp	r1, #0
 80081b2:	dc56      	bgt.n	8008262 <lv_draw_mask_radius_init+0x24e>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80081b4:	9900      	ldr	r1, [sp, #0]
 80081b6:	3603      	adds	r6, #3
 80081b8:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80081bc:	b231      	sxth	r1, r6
 80081be:	9103      	str	r1, [sp, #12]
    c->y++;
 80081c0:	9900      	ldr	r1, [sp, #0]
 80081c2:	3101      	adds	r1, #1
 80081c4:	b209      	sxth	r1, r1
            if(circ_cont(&cp) == false) break;
 80081c6:	4551      	cmp	r1, sl
 80081c8:	9100      	str	r1, [sp, #0]
 80081ca:	dd57      	ble.n	800827c <lv_draw_mask_radius_init+0x268>
    int32_t mid = radius * 723;
 80081cc:	f240 21d3 	movw	r1, #723	; 0x2d3
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 80081d0:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
    int32_t mid = radius * 723;
 80081d4:	434d      	muls	r5, r1
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 80081d6:	3e01      	subs	r6, #1
 80081d8:	f930 c016 	ldrsh.w	ip, [r0, r6, lsl #1]
    int32_t mid_int = mid >> 10;
 80081dc:	12a9      	asrs	r1, r5, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 80081de:	ebbc 2fa5 	cmp.w	ip, r5, asr #10
 80081e2:	ea4f 0746 	mov.w	r7, r6, lsl #1
 80081e6:	d103      	bne.n	80081f0 <lv_draw_mask_radius_init+0x1dc>
 80081e8:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
 80081ec:	42b1      	cmp	r1, r6
 80081ee:	d01b      	beq.n	8008228 <lv_draw_mask_radius_init+0x214>
        int32_t tmp_val = mid - (mid_int << 10);
 80081f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
        if(tmp_val <= 512) {
 80081f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
            tmp_val = 1024 - tmp_val;
 80081f8:	bfc6      	itte	gt
 80081fa:	f5c5 6580 	rsbgt	r5, r5, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 80081fe:	436d      	mulgt	r5, r5
            tmp_val = tmp_val * tmp_val * 2;
 8008200:	436d      	mulle	r5, r5
        cir_x[cir_size] = mid_int;
 8008202:	b209      	sxth	r1, r1
 8008204:	f107 0602 	add.w	r6, r7, #2
 8008208:	5381      	strh	r1, [r0, r6]
            tmp_val = tmp_val >> (10 + 6);
 800820a:	bfc8      	it	gt
 800820c:	13ed      	asrgt	r5, r5, #15
        cir_y[cir_size] = mid_int;
 800820e:	5391      	strh	r1, [r2, r6]
        c->cir_opa[cir_size] = tmp_val;
 8008210:	6861      	ldr	r1, [r4, #4]
            tmp_val = tmp_val >> (10 + 6);
 8008212:	bfd4      	ite	le
 8008214:	0bed      	lsrle	r5, r5, #15
            tmp_val = 15 - tmp_val;
 8008216:	f1c5 050f 	rsbgt	r5, r5, #15
        c->cir_opa[cir_size] = tmp_val;
 800821a:	54cd      	strb	r5, [r1, r3]
        c->cir_opa[cir_size] *= 16;
 800821c:	6865      	ldr	r5, [r4, #4]
 800821e:	5ce9      	ldrb	r1, [r5, r3]
 8008220:	0109      	lsls	r1, r1, #4
 8008222:	54e9      	strb	r1, [r5, r3]
        cir_size++;
 8008224:	3301      	adds	r3, #1
 8008226:	b21b      	sxth	r3, r3
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8008228:	4619      	mov	r1, r3
 800822a:	1e9d      	subs	r5, r3, #2
 800822c:	2d00      	cmp	r5, #0
 800822e:	f280 80d9 	bge.w	80083e4 <lv_draw_mask_radius_init+0x3d0>
 8008232:	b299      	uxth	r1, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
 800823a:	bfcc      	ite	gt
 800823c:	462b      	movgt	r3, r5
 800823e:	2300      	movle	r3, #0
 8008240:	4419      	add	r1, r3
    c->opa_start_on_y[0] = 0;
 8008242:	2300      	movs	r3, #0
    while(i < cir_size) {
 8008244:	461e      	mov	r6, r3
    c->opa_start_on_y[0] = 0;
 8008246:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800824a:	b209      	sxth	r1, r1
 800824c:	f8ac 3000 	strh.w	r3, [ip]
    while(i < cir_size) {
 8008250:	428b      	cmp	r3, r1
 8008252:	b237      	sxth	r7, r6
 8008254:	f2c0 80d5 	blt.w	8008402 <lv_draw_mask_radius_init+0x3ee>
}
 8008258:	b013      	add	sp, #76	; 0x4c
 800825a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(cir_x);
 800825e:	f007 bdb1 	b.w	800fdc4 <lv_mem_buf_release>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8008262:	9900      	ldr	r1, [sp, #0]
 8008264:	3605      	adds	r6, #5
 8008266:	eba1 080a 	sub.w	r8, r1, sl
 800826a:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 800826e:	b231      	sxth	r1, r6
        c->x--;
 8008270:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8008274:	9103      	str	r1, [sp, #12]
        c->x--;
 8008276:	fa0f fa86 	sxth.w	sl, r6
 800827a:	e7a1      	b.n	80081c0 <lv_draw_mask_radius_init+0x1ac>
        for(i = 0; i < 4; i++) {
 800827c:	9900      	ldr	r1, [sp, #0]
            x_int[i] = cp.x >> 2;
 800827e:	ea4f 06aa 	mov.w	r6, sl, asr #2
 8008282:	f84e 6b04 	str.w	r6, [lr], #4
        for(i = 0; i < 4; i++) {
 8008286:	42b9      	cmp	r1, r7
            x_fract[i] = cp.x & 0x3;
 8008288:	f00a 0603 	and.w	r6, sl, #3
 800828c:	f84c 6b04 	str.w	r6, [ip], #4
        for(i = 0; i < 4; i++) {
 8008290:	d18b      	bne.n	80081aa <lv_draw_mask_radius_init+0x196>
        if(x_int[0] == x_int[3]) {
 8008292:	461e      	mov	r6, r3
 8008294:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008296:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800829a:	460f      	mov	r7, r1
 800829c:	b20b      	sxth	r3, r1
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80082a4:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80082ae:	9101      	str	r1, [sp, #4]
 80082b0:	9305      	str	r3, [sp, #20]
 80082b2:	6863      	ldr	r3, [r4, #4]
 80082b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082b6:	4433      	add	r3, r6
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	b2b3      	uxth	r3, r6
 80082bc:	9309      	str	r3, [sp, #36]	; 0x24
 80082be:	428f      	cmp	r7, r1
 80082c0:	f103 0301 	add.w	r3, r3, #1
 80082c4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80082c8:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	d11f      	bne.n	8008310 <lv_draw_mask_radius_init+0x2fc>
            cir_x[cir_size] = x_int[0];
 80082d0:	9902      	ldr	r1, [sp, #8]
 80082d2:	f820 100c 	strh.w	r1, [r0, ip]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80082d6:	9908      	ldr	r1, [sp, #32]
            cir_y[cir_size] = y_8th_cnt;
 80082d8:	f822 800c 	strh.w	r8, [r2, ip]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80082dc:	448b      	add	fp, r1
 80082de:	9905      	ldr	r1, [sp, #20]
 80082e0:	4459      	add	r1, fp
 80082e2:	468b      	mov	fp, r1
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	4459      	add	r1, fp
 80082e8:	468b      	mov	fp, r1
 80082ea:	9904      	ldr	r1, [sp, #16]
 80082ec:	f881 b000 	strb.w	fp, [r1]
            c->cir_opa[cir_size] *= 16;
 80082f0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80082f4:	f81c 7006 	ldrb.w	r7, [ip, r6]
 80082f8:	013f      	lsls	r7, r7, #4
 80082fa:	f80c 7006 	strb.w	r7, [ip, r6]
        y_8th_cnt++;
 80082fe:	9e06      	ldr	r6, [sp, #24]
 8008300:	3601      	adds	r6, #1
 8008302:	9606      	str	r6, [sp, #24]
 8008304:	e747      	b.n	8008196 <lv_draw_mask_radius_init+0x182>
 8008306:	bf00      	nop
 8008308:	08007a85 	.word	0x08007a85
 800830c:	20004804 	.word	0x20004804
 8008310:	4699      	mov	r9, r3
        else if(x_int[0] != x_int[1]) {
 8008312:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8008316:	1e7b      	subs	r3, r7, #1
 8008318:	b21b      	sxth	r3, r3
 800831a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	428f      	cmp	r7, r1
 8008322:	f103 0302 	add.w	r3, r3, #2
 8008326:	b21b      	sxth	r3, r3
 8008328:	d024      	beq.n	8008374 <lv_draw_mask_radius_init+0x360>
            cir_x[cir_size] = x_int[0];
 800832a:	9902      	ldr	r1, [sp, #8]
            c->cir_opa[cir_size] = x_fract[0];
 800832c:	9f04      	ldr	r7, [sp, #16]
            cir_x[cir_size] = x_int[0];
 800832e:	f820 100c 	strh.w	r1, [r0, ip]
            c->cir_opa[cir_size] = x_fract[0];
 8008332:	9908      	ldr	r1, [sp, #32]
            cir_y[cir_size] = y_8th_cnt;
 8008334:	f822 800c 	strh.w	r8, [r2, ip]
            c->cir_opa[cir_size] = x_fract[0];
 8008338:	7039      	strb	r1, [r7, #0]
            c->cir_opa[cir_size] *= 16;
 800833a:	f8d4 c004 	ldr.w	ip, [r4, #4]
            cir_x[cir_size] = x_int[0] - 1;
 800833e:	9907      	ldr	r1, [sp, #28]
            c->cir_opa[cir_size] *= 16;
 8008340:	f81c 7006 	ldrb.w	r7, [ip, r6]
 8008344:	013f      	lsls	r7, r7, #4
 8008346:	f80c 7006 	strb.w	r7, [ip, r6]
            cir_x[cir_size] = x_int[0] - 1;
 800834a:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800834e:	9905      	ldr	r1, [sp, #20]
 8008350:	6866      	ldr	r6, [r4, #4]
 8008352:	4459      	add	r1, fp
 8008354:	f101 0b04 	add.w	fp, r1, #4
 8008358:	9901      	ldr	r1, [sp, #4]
            cir_y[cir_size] = y_8th_cnt;
 800835a:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800835e:	4459      	add	r1, fp
 8008360:	468b      	mov	fp, r1
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8008362:	f806 b009 	strb.w	fp, [r6, r9]
            c->cir_opa[cir_size] *= 16;
 8008366:	6867      	ldr	r7, [r4, #4]
 8008368:	f817 6009 	ldrb.w	r6, [r7, r9]
 800836c:	0136      	lsls	r6, r6, #4
 800836e:	f807 6009 	strb.w	r6, [r7, r9]
            cir_size++;
 8008372:	e7c4      	b.n	80082fe <lv_draw_mask_radius_init+0x2ea>
        else if(x_int[0] != x_int[2]) {
 8008374:	9908      	ldr	r1, [sp, #32]
 8008376:	448b      	add	fp, r1
 8008378:	990c      	ldr	r1, [sp, #48]	; 0x30
 800837a:	fa5f fb8b 	uxtb.w	fp, fp
 800837e:	428f      	cmp	r7, r1
            cir_x[cir_size] = x_int[0];
 8008380:	9902      	ldr	r1, [sp, #8]
 8008382:	f820 100c 	strh.w	r1, [r0, ip]
            cir_y[cir_size] = y_8th_cnt;
 8008386:	f822 800c 	strh.w	r8, [r2, ip]
        else if(x_int[0] != x_int[2]) {
 800838a:	d015      	beq.n	80083b8 <lv_draw_mask_radius_init+0x3a4>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800838c:	9904      	ldr	r1, [sp, #16]
 800838e:	f881 b000 	strb.w	fp, [r1]
            c->cir_opa[cir_size] *= 16;
 8008392:	f8d4 c004 	ldr.w	ip, [r4, #4]
            cir_x[cir_size] = x_int[0] - 1;
 8008396:	9907      	ldr	r1, [sp, #28]
            c->cir_opa[cir_size] *= 16;
 8008398:	f81c 7006 	ldrb.w	r7, [ip, r6]
 800839c:	013f      	lsls	r7, r7, #4
 800839e:	f80c 7006 	strb.w	r7, [ip, r6]
            cir_x[cir_size] = x_int[0] - 1;
 80083a2:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 80083a6:	9f05      	ldr	r7, [sp, #20]
 80083a8:	9901      	ldr	r1, [sp, #4]
 80083aa:	6866      	ldr	r6, [r4, #4]
 80083ac:	4439      	add	r1, r7
            cir_y[cir_size] = y_8th_cnt;
 80083ae:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 80083b2:	f101 0b08 	add.w	fp, r1, #8
 80083b6:	e7d4      	b.n	8008362 <lv_draw_mask_radius_init+0x34e>
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 80083b8:	9905      	ldr	r1, [sp, #20]
 80083ba:	448b      	add	fp, r1
 80083bc:	9904      	ldr	r1, [sp, #16]
 80083be:	f881 b000 	strb.w	fp, [r1]
            c->cir_opa[cir_size] *= 16;
 80083c2:	f8d4 c004 	ldr.w	ip, [r4, #4]
            cir_x[cir_size] = x_int[0] - 1;
 80083c6:	9907      	ldr	r1, [sp, #28]
            c->cir_opa[cir_size] *= 16;
 80083c8:	f81c 7006 	ldrb.w	r7, [ip, r6]
 80083cc:	013f      	lsls	r7, r7, #4
 80083ce:	f80c 7006 	strb.w	r7, [ip, r6]
            cir_x[cir_size] = x_int[0] - 1;
 80083d2:	f820 100e 	strh.w	r1, [r0, lr]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80083d6:	9901      	ldr	r1, [sp, #4]
 80083d8:	6866      	ldr	r6, [r4, #4]
            cir_y[cir_size] = y_8th_cnt;
 80083da:	f822 800e 	strh.w	r8, [r2, lr]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80083de:	f101 0b0c 	add.w	fp, r1, #12
 80083e2:	e7be      	b.n	8008362 <lv_draw_mask_radius_init+0x34e>
        cir_x[cir_size] = cir_y[i];
 80083e4:	f932 6015 	ldrsh.w	r6, [r2, r5, lsl #1]
 80083e8:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
        cir_y[cir_size] = cir_x[i];
 80083ec:	f930 6015 	ldrsh.w	r6, [r0, r5, lsl #1]
 80083f0:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 80083f4:	6866      	ldr	r6, [r4, #4]
 80083f6:	5d77      	ldrb	r7, [r6, r5]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80083f8:	3d01      	subs	r5, #1
        c->cir_opa[cir_size] = c->cir_opa[i];
 80083fa:	5477      	strb	r7, [r6, r1]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80083fc:	3101      	adds	r1, #1
 80083fe:	b209      	sxth	r1, r1
 8008400:	e714      	b.n	800822c <lv_draw_mask_radius_init+0x218>
        c->opa_start_on_y[y] = i;
 8008402:	f82c 3017 	strh.w	r3, [ip, r7, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 8008406:	68a5      	ldr	r5, [r4, #8]
 8008408:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800840c:	eb05 0e47 	add.w	lr, r5, r7, lsl #1
 8008410:	f825 8017 	strh.w	r8, [r5, r7, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008414:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8008418:	42bd      	cmp	r5, r7
 800841a:	d101      	bne.n	8008420 <lv_draw_mask_radius_init+0x40c>
 800841c:	428b      	cmp	r3, r1
 800841e:	db01      	blt.n	8008424 <lv_draw_mask_radius_init+0x410>
        y++;
 8008420:	3601      	adds	r6, #1
 8008422:	e715      	b.n	8008250 <lv_draw_mask_radius_init+0x23c>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8008424:	f930 5013 	ldrsh.w	r5, [r0, r3, lsl #1]
 8008428:	f8be 8000 	ldrh.w	r8, [lr]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800842c:	3301      	adds	r3, #1
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800842e:	4545      	cmp	r5, r8
 8008430:	bfa8      	it	ge
 8008432:	4645      	movge	r5, r8
 8008434:	f8ae 5000 	strh.w	r5, [lr]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8008438:	e7ec      	b.n	8008414 <lv_draw_mask_radius_init+0x400>
 800843a:	bf00      	nop

0800843c <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800843c:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800843e:	2134      	movs	r1, #52	; 0x34
{
 8008440:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8008442:	f007 feb5 	bl	80101b0 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 8008446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800844a:	6063      	str	r3, [r4, #4]
    dsc->bg_grad_color = lv_color_black();
    dsc->border_color = lv_color_black();
 800844c:	2300      	movs	r3, #0
 800844e:	8363      	strh	r3, [r4, #26]
    dsc->shadow_color = lv_color_black();
 8008450:	8523      	strh	r3, [r4, #40]	; 0x28
    dsc->bg_grad_color_stop = 0xFF;
 8008452:	23ff      	movs	r3, #255	; 0xff
 8008454:	7263      	strb	r3, [r4, #9]
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
    dsc->bg_opa = LV_OPA_COVER;
 8008456:	72a3      	strb	r3, [r4, #10]
    dsc->bg_img_opa = LV_OPA_COVER;
 8008458:	75a3      	strb	r3, [r4, #22]
    dsc->outline_opa = LV_OPA_COVER;
 800845a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 800845e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    dsc->border_opa = LV_OPA_COVER;
 8008462:	8be3      	ldrh	r3, [r4, #30]
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8008464:	4a05      	ldr	r2, [pc, #20]	; (800847c <lv_draw_rect_dsc_init+0x40>)
    dsc->border_opa = LV_OPA_COVER;
 8008466:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
 800846a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800846e:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
 8008472:	f043 031f 	orr.w	r3, r3, #31
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8008476:	6122      	str	r2, [r4, #16]
    dsc->border_opa = LV_OPA_COVER;
 8008478:	83e3      	strh	r3, [r4, #30]
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 800847a:	bd10      	pop	{r4, pc}
 800847c:	08016f44 	.word	0x08016f44

08008480 <lv_draw_rect>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008480:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8008482:	b470      	push	{r4, r5, r6}
 8008484:	8856      	ldrh	r6, [r2, #2]
 8008486:	3301      	adds	r3, #1
 8008488:	1b9b      	subs	r3, r3, r6
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800848a:	b21b      	sxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	dd09      	ble.n	80084a4 <lv_draw_rect+0x24>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008490:	8893      	ldrh	r3, [r2, #4]
 8008492:	8814      	ldrh	r4, [r2, #0]
 8008494:	3301      	adds	r3, #1
 8008496:	1b1b      	subs	r3, r3, r4
 8008498:	b21b      	sxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	dd02      	ble.n	80084a4 <lv_draw_rect+0x24>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);

    LV_ASSERT_MEM_INTEGRITY();
}
 800849e:	bc70      	pop	{r4, r5, r6}
    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 80084a0:	68c3      	ldr	r3, [r0, #12]
 80084a2:	4718      	bx	r3
}
 80084a4:	bc70      	pop	{r4, r5, r6}
 80084a6:	4770      	bx	lr

080084a8 <lv_memcpy_small>:
    uint8_t * d8 = (uint8_t *)dst;
 80084a8:	4603      	mov	r3, r0
{
 80084aa:	b510      	push	{r4, lr}
 80084ac:	3901      	subs	r1, #1
 80084ae:	4402      	add	r2, r0
    while(len) {
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d100      	bne.n	80084b6 <lv_memcpy_small+0xe>
        s8++;
        len--;
    }

    return dst;
}
 80084b4:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 80084b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084ba:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 80084be:	e7f7      	b.n	80084b0 <lv_memcpy_small+0x8>

080084c0 <lv_color_mix>:
{
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80084c2:	f3c0 3342 	ubfx	r3, r0, #13, #3
 80084c6:	f000 0407 	and.w	r4, r0, #7
 80084ca:	f001 0507 	and.w	r5, r1, #7
 80084ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084d2:	f3c1 3442 	ubfx	r4, r1, #13, #3
 80084d6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084da:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80084de:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80084e2:	4374      	muls	r4, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80084e4:	f3c1 07c4 	ubfx	r7, r1, #3, #5
 80084e8:	4377      	muls	r7, r6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80084ea:	f3c1 2104 	ubfx	r1, r1, #8, #5
 80084ee:	4371      	muls	r1, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80084f0:	fb02 4303 	mla	r3, r2, r3, r4
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80084f4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
 80084f8:	fb02 7404 	mla	r4, r2, r4, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80084fc:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8008500:	fb02 1000 	mla	r0, r2, r0, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008504:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008506:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008508:	436b      	muls	r3, r5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800850a:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800850c:	3080      	adds	r0, #128	; 0x80
 800850e:	4368      	muls	r0, r5
    return ret;
 8008510:	f3c3 6782 	ubfx	r7, r3, #26, #3
 8008514:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8008518:	ea47 04c4 	orr.w	r4, r7, r4, lsl #3
 800851c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 8008520:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008524:	0ddb      	lsrs	r3, r3, #23
}
 8008526:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800852a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800852c <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852e:	4616      	mov	r6, r2
    lv_color_t p_color = lv_color_black();
 8008530:	2200      	movs	r2, #0
{
 8008532:	4607      	mov	r7, r0
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8008534:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8008536:	7800      	ldrb	r0, [r0, #0]
    lv_color_t p_color = lv_color_black();
 8008538:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800853c:	f000 021f 	and.w	r2, r0, #31
{
 8008540:	460c      	mov	r4, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8008542:	1f11      	subs	r1, r2, #4
 8008544:	2902      	cmp	r1, #2
 8008546:	d813      	bhi.n	8008570 <lv_img_buf_get_px_color+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8008548:	4610      	mov	r0, r2
 800854a:	f7fe fb5f 	bl	8006c0c <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f3c0 01c7 	ubfx	r1, r0, #3, #8
 8008554:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8008558:	fb06 4303 	mla	r3, r6, r3, r4
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800855c:	2202      	movs	r2, #2
 800855e:	fb03 5101 	mla	r1, r3, r1, r5
 8008562:	a801      	add	r0, sp, #4
 8008564:	f7ff ffa0 	bl	80084a8 <lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 8008568:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800856c:	b003      	add	sp, #12
 800856e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 8008570:	2a07      	cmp	r2, #7
 8008572:	d114      	bne.n	800859e <lv_img_buf_get_px_color+0x72>
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8008574:	2101      	movs	r1, #1
 8008576:	f004 0307 	and.w	r3, r4, #7
 800857a:	f1c3 0207 	rsb	r2, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800857e:	683b      	ldr	r3, [r7, #0]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8008580:	4091      	lsls	r1, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8008582:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8008586:	3307      	adds	r3, #7
 8008588:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800858a:	fb06 5303 	mla	r3, r6, r3, r5
 800858e:	eb03 03e4 	add.w	r3, r3, r4, asr #3
 8008592:	7a1b      	ldrb	r3, [r3, #8]
 8008594:	400b      	ands	r3, r1
 8008596:	4113      	asrs	r3, r2
        p_color = color;
 8008598:	f8ad 3004 	strh.w	r3, [sp, #4]
 800859c:	e7e4      	b.n	8008568 <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 800859e:	2a08      	cmp	r2, #8
 80085a0:	d116      	bne.n	80085d0 <lv_img_buf_get_px_color+0xa4>
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80085a2:	2103      	movs	r1, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80085a4:	6838      	ldr	r0, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 80085a6:	f004 0203 	and.w	r2, r4, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 80085aa:	f3c0 208a 	ubfx	r0, r0, #10, #11
 80085ae:	3003      	adds	r0, #3
 80085b0:	1080      	asrs	r0, r0, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 80085b2:	fb06 5300 	mla	r3, r6, r0, r5
 80085b6:	eb03 03a4 	add.w	r3, r3, r4, asr #2
 80085ba:	0052      	lsls	r2, r2, #1
 80085bc:	7c1b      	ldrb	r3, [r3, #16]
 80085be:	f1c2 0206 	rsb	r2, r2, #6
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80085c2:	4091      	lsls	r1, r2
 80085c4:	400b      	ands	r3, r1
 80085c6:	fa43 f202 	asr.w	r2, r3, r2
 80085ca:	f8ad 2004 	strh.w	r2, [sp, #4]
 80085ce:	e7cb      	b.n	8008568 <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 80085d0:	2a09      	cmp	r2, #9
 80085d2:	d111      	bne.n	80085f8 <lv_img_buf_get_px_color+0xcc>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 80085d4:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 80085d6:	f004 0201 	and.w	r2, r4, #1
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 80085da:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80085de:	3301      	adds	r3, #1
 80085e0:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80085e2:	fb06 5303 	mla	r3, r6, r3, r5
 80085e6:	0092      	lsls	r2, r2, #2
 80085e8:	eb03 0364 	add.w	r3, r3, r4, asr #1
 80085ec:	210f      	movs	r1, #15
 80085ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085f2:	f1c2 0204 	rsb	r2, r2, #4
 80085f6:	e7e4      	b.n	80085c2 <lv_img_buf_get_px_color+0x96>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80085f8:	2a0a      	cmp	r2, #10
 80085fa:	d108      	bne.n	800860e <lv_img_buf_get_px_color+0xe2>
        uint32_t px  = dsc->header.w * y + x;
 80085fc:	6839      	ldr	r1, [r7, #0]
        p_color.full = buf_u8[px];
 80085fe:	192b      	adds	r3, r5, r4
        uint32_t px  = dsc->header.w * y + x;
 8008600:	f3c1 218a 	ubfx	r1, r1, #10, #11
        p_color.full = buf_u8[px];
 8008604:	fb06 3301 	mla	r3, r6, r1, r3
 8008608:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800860c:	e7c4      	b.n	8008598 <lv_img_buf_get_px_color+0x6c>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800860e:	3a0b      	subs	r2, #11
 8008610:	2a03      	cmp	r2, #3
 8008612:	d8a9      	bhi.n	8008568 <lv_img_buf_get_px_color+0x3c>
 8008614:	e7c0      	b.n	8008598 <lv_img_buf_get_px_color+0x6c>
	...

08008618 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 8008618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861a:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800861c:	7801      	ldrb	r1, [r0, #0]
{
 800861e:	4604      	mov	r4, r0
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8008620:	f001 011f 	and.w	r1, r1, #31
 8008624:	2905      	cmp	r1, #5
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8008626:	6885      	ldr	r5, [r0, #8]
{
 8008628:	b085      	sub	sp, #20
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800862a:	d10a      	bne.n	8008642 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800862c:	6801      	ldr	r1, [r0, #0]
 800862e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8008632:	fb02 3301 	mla	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8008636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800863a:	442b      	add	r3, r5
 800863c:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 800863e:	b005      	add	sp, #20
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 8008642:	290b      	cmp	r1, #11
 8008644:	d114      	bne.n	8008670 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8008646:	6800      	ldr	r0, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8008648:	f003 0607 	and.w	r6, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800864c:	f3c0 208a 	ubfx	r0, r0, #10, #11
 8008650:	3007      	adds	r0, #7
 8008652:	10c0      	asrs	r0, r0, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8008654:	fb02 5200 	mla	r2, r2, r0, r5
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 8008658:	10db      	asrs	r3, r3, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800865a:	5cd3      	ldrb	r3, [r2, r3]
 800865c:	2201      	movs	r2, #1
 800865e:	f1c6 0607 	rsb	r6, r6, #7
 8008662:	40b2      	lsls	r2, r6
 8008664:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 8008666:	4133      	asrs	r3, r6
 8008668:	bf0c      	ite	eq
 800866a:	20ff      	moveq	r0, #255	; 0xff
 800866c:	2000      	movne	r0, #0
 800866e:	e7e6      	b.n	800863e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 8008670:	290c      	cmp	r1, #12
 8008672:	d118      	bne.n	80086a6 <lv_img_buf_get_px_alpha+0x8e>
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 8008674:	6800      	ldr	r0, [r0, #0]
        uint8_t bit = (x & 0x3) * 2;
 8008676:	f003 0603 	and.w	r6, r3, #3
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800867a:	f3c0 208a 	ubfx	r0, r0, #10, #11
 800867e:	3003      	adds	r0, #3
 8008680:	1080      	asrs	r0, r0, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8008682:	fb02 5200 	mla	r2, r2, r0, r5
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 8008686:	109b      	asrs	r3, r3, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8008688:	5cd3      	ldrb	r3, [r2, r3]
 800868a:	2203      	movs	r2, #3
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800868c:	491a      	ldr	r1, [pc, #104]	; (80086f8 <lv_img_buf_get_px_alpha+0xe0>)
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800868e:	0076      	lsls	r6, r6, #1
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008690:	9100      	str	r1, [sp, #0]
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8008692:	f1c6 0606 	rsb	r6, r6, #6
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8008696:	40b2      	lsls	r2, r6
 8008698:	4013      	ands	r3, r2
 800869a:	4133      	asrs	r3, r6
        return opa_table[px_opa];
 800869c:	aa04      	add	r2, sp, #16
 800869e:	4413      	add	r3, r2
 80086a0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 80086a4:	e7cb      	b.n	800863e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 80086a6:	290d      	cmp	r1, #13
 80086a8:	d11b      	bne.n	80086e2 <lv_img_buf_get_px_alpha+0xca>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 80086aa:	46ec      	mov	ip, sp
 80086ac:	4e13      	ldr	r6, [pc, #76]	; (80086fc <lv_img_buf_get_px_alpha+0xe4>)
 80086ae:	f106 0e10 	add.w	lr, r6, #16
 80086b2:	4667      	mov	r7, ip
 80086b4:	6830      	ldr	r0, [r6, #0]
 80086b6:	6871      	ldr	r1, [r6, #4]
 80086b8:	3608      	adds	r6, #8
 80086ba:	c703      	stmia	r7!, {r0, r1}
 80086bc:	4576      	cmp	r6, lr
 80086be:	46bc      	mov	ip, r7
 80086c0:	d1f7      	bne.n	80086b2 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80086c2:	6820      	ldr	r0, [r4, #0]
        uint8_t bit = (x & 0x1) * 4;
 80086c4:	f003 0601 	and.w	r6, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80086c8:	f3c0 208a 	ubfx	r0, r0, #10, #11
 80086cc:	3001      	adds	r0, #1
 80086ce:	1040      	asrs	r0, r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80086d0:	fb02 5200 	mla	r2, r2, r0, r5
 80086d4:	00b6      	lsls	r6, r6, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80086d6:	105b      	asrs	r3, r3, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80086d8:	5cd3      	ldrb	r3, [r2, r3]
 80086da:	f1c6 0604 	rsb	r6, r6, #4
 80086de:	220f      	movs	r2, #15
 80086e0:	e7d9      	b.n	8008696 <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 80086e2:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 80086e4:	bf09      	itett	eq
 80086e6:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 80086e8:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 80086ea:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
        return buf_u8[px];
 80086ee:	fb02 5201 	mlaeq	r2, r2, r1, r5
 80086f2:	bf08      	it	eq
 80086f4:	5cd0      	ldrbeq	r0, [r2, r3]
 80086f6:	e7a2      	b.n	800863e <lv_img_buf_get_px_alpha+0x26>
 80086f8:	ffaa5500 	.word	0xffaa5500
 80086fc:	0801543e 	.word	0x0801543e

08008700 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
 8008704:	260a      	movs	r6, #10
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8008706:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
{
 800870a:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8008710:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 8008714:	f06f 0209 	mvn.w	r2, #9
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 800871c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008720:	fb90 f5f6 	sdiv	r5, r0, r6

    int32_t s1 = lv_trigo_sin(-angle_low);
 8008724:	b2af      	uxth	r7, r5
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 8008726:	fb02 0805 	mla	r8, r2, r5, r0
    int32_t s1 = lv_trigo_sin(-angle_low);
 800872a:	4278      	negs	r0, r7
 800872c:	b200      	sxth	r0, r0
 800872e:	f007 fabf 	bl	800fcb0 <lv_trigo_sin>
    int32_t angle_high = angle_low + 1;
 8008732:	3501      	adds	r5, #1
    int32_t s2 = lv_trigo_sin(-angle_high);
 8008734:	b2ad      	uxth	r5, r5
    int32_t s1 = lv_trigo_sin(-angle_low);
 8008736:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(-angle_high);
 8008738:	4268      	negs	r0, r5
 800873a:	b200      	sxth	r0, r0
 800873c:	f007 fab8 	bl	800fcb0 <lv_trigo_sin>
 8008740:	4682      	mov	sl, r0

    int32_t c1 = lv_trigo_sin(-angle_low + 90);
 8008742:	f1c7 005a 	rsb	r0, r7, #90	; 0x5a
 8008746:	b200      	sxth	r0, r0
 8008748:	f007 fab2 	bl	800fcb0 <lv_trigo_sin>
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800874c:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t c1 = lv_trigo_sin(-angle_low + 90);
 8008750:	4607      	mov	r7, r0
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 8008752:	b228      	sxth	r0, r5
 8008754:	f007 faac 	bl	800fcb0 <lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8008758:	fb08 f20a 	mul.w	r2, r8, sl
 800875c:	eba6 0308 	sub.w	r3, r6, r8
 8008760:	fb03 2209 	mla	r2, r3, r9, r2
 8008764:	fb92 f2f6 	sdiv	r2, r2, r6
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8008768:	1152      	asrs	r2, r2, #5
 800876a:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800876c:	fb08 f200 	mul.w	r2, r8, r0
 8008770:	fb03 2307 	mla	r3, r3, r7, r2
 8008774:	fb93 f3f6 	sdiv	r3, r3, r6
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8008778:	115b      	asrs	r3, r3, #5
 800877a:	6323      	str	r3, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800877c:	7ca0      	ldrb	r0, [r4, #18]
 800877e:	f7fe fa4f 	bl	8006c20 <lv_img_cf_is_chroma_keyed>
 8008782:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008786:	f360 0300 	bfi	r3, r0, #0, #1
 800878a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800878e:	7ca0      	ldrb	r0, [r4, #18]
 8008790:	f7fe fa50 	bl	8006c34 <lv_img_cf_has_alpha>
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008794:	7ca3      	ldrb	r3, [r4, #18]
 8008796:	1f1a      	subs	r2, r3, #4
 8008798:	2a02      	cmp	r2, #2
 800879a:	bf8c      	ite	hi
 800879c:	2100      	movhi	r1, #0
 800879e:	2101      	movls	r1, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 80087a0:	0042      	lsls	r2, r0, #1
 80087a2:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80087a6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80087aa:	f002 0206 	and.w	r2, r2, #6
 80087ae:	f021 0106 	bic.w	r1, r1, #6
 80087b2:	430a      	orrs	r2, r1
 80087b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    }
    else {
        dsc->tmp.native_color = 0;
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80087b8:	6822      	ldr	r2, [r4, #0]
    dsc->tmp.img_dsc.header.always_zero = 0;
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80087ba:	f003 031f 	and.w	r3, r3, #31
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80087be:	6222      	str	r2, [r4, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80087c0:	88a2      	ldrh	r2, [r4, #4]
 80087c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80087c6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80087ca:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80087ce:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80087d2:	69a2      	ldr	r2, [r4, #24]
 80087d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80087d8:	4313      	orrs	r3, r2
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;

    /*The inverse of the zoom will be sued during the transformation
     * + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 80087da:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80087dc:	61a3      	str	r3, [r4, #24]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 80087de:	0853      	lsrs	r3, r2, #1
 80087e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e8:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 80087ea:	23ff      	movs	r3, #255	; 0xff
 80087ec:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 80087ee:	8a23      	ldrh	r3, [r4, #16]
 80087f0:	82a3      	strh	r3, [r4, #20]
}
 80087f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087f6 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 80087f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80087fc:	4604      	mov	r4, r0
 80087fe:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8008802:	b953      	cbnz	r3, 800881a <_lv_img_buf_get_transformed_area+0x24>
 8008804:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8008808:	d107      	bne.n	800881a <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800880a:	3901      	subs	r1, #1
        res->x1 = 0;
 800880c:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800880e:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 8008810:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 8008812:	3a01      	subs	r2, #1

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 8008814:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8008816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 800881a:	f9b6 c000 	ldrsh.w	ip, [r6]
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 800881e:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 8008822:	f1cc 0500 	rsb	r5, ip, #0
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008826:	4278      	negs	r0, r7
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 8008828:	eba1 010c 	sub.w	r1, r1, ip
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 800882c:	1bd2      	subs	r2, r2, r7
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 800882e:	fb0e f505 	mul.w	r5, lr, r5
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008832:	fb0e f000 	mul.w	r0, lr, r0
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 8008836:	fb0e f101 	mul.w	r1, lr, r1
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 800883a:	fb0e f202 	mul.w	r2, lr, r2
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 800883e:	122d      	asrs	r5, r5, #8
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008840:	1200      	asrs	r0, r0, #8
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 8008842:	1209      	asrs	r1, r1, #8
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 8008844:	1212      	asrs	r2, r2, #8
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 8008846:	3d01      	subs	r5, #1
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008848:	3801      	subs	r0, #1
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 800884a:	3102      	adds	r1, #2
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 800884c:	3202      	adds	r2, #2
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 800884e:	b2ad      	uxth	r5, r5
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008850:	b280      	uxth	r0, r0
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 8008852:	b289      	uxth	r1, r1
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 8008854:	b292      	uxth	r2, r2
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 8008856:	8025      	strh	r5, [r4, #0]
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 8008858:	8060      	strh	r0, [r4, #2]
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 800885a:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 800885c:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 800885e:	b95b      	cbnz	r3, 8008878 <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 8008860:	fa1f fc8c 	uxth.w	ip, ip
        res->y1 += pivot->y;
 8008864:	b2bf      	uxth	r7, r7
        res->x1 += pivot->x;
 8008866:	4465      	add	r5, ip
        res->y1 += pivot->y;
 8008868:	4438      	add	r0, r7
        res->x2 += pivot->x;
 800886a:	448c      	add	ip, r1
        res->x1 += pivot->x;
 800886c:	8025      	strh	r5, [r4, #0]
        res->y1 += pivot->y;
 800886e:	8060      	strh	r0, [r4, #2]
        res->x2 += pivot->x;
 8008870:	f8a4 c004 	strh.w	ip, [r4, #4]
        res->y2 += pivot->y;
 8008874:	443a      	add	r2, r7
 8008876:	e7cd      	b.n	8008814 <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 8008878:	f04f 0a0a 	mov.w	sl, #10
 800887c:	fb93 f9fa 	sdiv	r9, r3, sl
    int32_t angle_rem = angle  - (angle_low * 10);
 8008880:	f06f 0b09 	mvn.w	fp, #9
    int32_t s1 = lv_trigo_sin(angle_low);
 8008884:	4648      	mov	r0, r9
    int32_t angle_rem = angle  - (angle_low * 10);
 8008886:	fb0b 3b09 	mla	fp, fp, r9, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 800888a:	f007 fa11 	bl	800fcb0 <lv_trigo_sin>
    int32_t angle_high = angle_low + 1;
 800888e:	f109 0501 	add.w	r5, r9, #1
    int32_t s1 = lv_trigo_sin(angle_low);
 8008892:	4680      	mov	r8, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 8008894:	b228      	sxth	r0, r5
 8008896:	f007 fa0b 	bl	800fcb0 <lv_trigo_sin>
 800889a:	4607      	mov	r7, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800889c:	f109 005a 	add.w	r0, r9, #90	; 0x5a
 80088a0:	b200      	sxth	r0, r0
 80088a2:	f007 fa05 	bl	800fcb0 <lv_trigo_sin>
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 80088a6:	f109 095b 	add.w	r9, r9, #91	; 0x5b
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 80088aa:	4605      	mov	r5, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 80088ac:	fa0f f089 	sxth.w	r0, r9
 80088b0:	f007 f9fe 	bl	800fcb0 <lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80088b4:	fb0b f207 	mul.w	r2, fp, r7
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80088b8:	fb0b f700 	mul.w	r7, fp, r0
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80088bc:	ebaa 030b 	sub.w	r3, sl, fp
 80088c0:	fb03 2208 	mla	r2, r3, r8, r2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80088c4:	fb03 7705 	mla	r7, r3, r5, r7
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80088c8:	fb92 f2fa 	sdiv	r2, r2, sl
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80088cc:	fb97 f7fa 	sdiv	r7, r7, sl
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088d0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80088d4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088d8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80088dc:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80088de:	117f      	asrs	r7, r7, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088e0:	fb07 fe01 	mul.w	lr, r7, r1
 80088e4:	fb02 f800 	mul.w	r8, r2, r0
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088e8:	fb07 fb09 	mul.w	fp, r7, r9
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088ec:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088f0:	f8b6 c000 	ldrh.w	ip, [r6]
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80088f4:	4351      	muls	r1, r2
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80088f6:	fb02 f909 	mul.w	r9, r2, r9
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088fa:	fb02 f20a 	mul.w	r2, r2, sl
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80088fe:	ebae 0508 	sub.w	r5, lr, r8
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008902:	ebab 0808 	sub.w	r8, fp, r8
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008906:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800890a:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800890e:	b22d      	sxth	r5, r5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008910:	fa0f f888 	sxth.w	r8, r8
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 8008914:	4545      	cmp	r5, r8
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008916:	ebae 0e02 	sub.w	lr, lr, r2
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800891a:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800891e:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008922:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 8008926:	462a      	mov	r2, r5
 8008928:	bfa8      	it	ge
 800892a:	4642      	movge	r2, r8
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800892c:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 8008930:	4572      	cmp	r2, lr
 8008932:	bfa8      	it	ge
 8008934:	4672      	movge	r2, lr
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8008936:	fa0f fc8c 	sxth.w	ip, ip
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800893a:	4562      	cmp	r2, ip
 800893c:	bfa8      	it	ge
 800893e:	4662      	movge	r2, ip
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 8008940:	4545      	cmp	r5, r8
 8008942:	bfb8      	it	lt
 8008944:	4645      	movlt	r5, r8
 8008946:	45ae      	cmp	lr, r5
 8008948:	bfb8      	it	lt
 800894a:	46ae      	movlt	lr, r5
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800894c:	4378      	muls	r0, r7
 800894e:	8876      	ldrh	r6, [r6, #2]
 8008950:	180b      	adds	r3, r1, r0
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8008952:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8008954:	eb06 23a3 	add.w	r3, r6, r3, asr #10
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8008958:	eb06 20a0 	add.w	r0, r6, r0, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800895c:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800895e:	b200      	sxth	r0, r0
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 8008960:	45f4      	cmp	ip, lr
 8008962:	bfb8      	it	lt
 8008964:	46f4      	movlt	ip, lr
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 8008966:	4283      	cmp	r3, r0
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 8008968:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800896a:	461a      	mov	r2, r3
 800896c:	bfa8      	it	ge
 800896e:	4602      	movge	r2, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8008970:	fb07 f70a 	mul.w	r7, r7, sl
 8008974:	4439      	add	r1, r7
 8008976:	eb06 21a1 	add.w	r1, r6, r1, asr #10
 800897a:	b209      	sxth	r1, r1
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800897c:	428a      	cmp	r2, r1
 800897e:	bfa8      	it	ge
 8008980:	460a      	movge	r2, r1
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8008982:	444f      	add	r7, r9
 8008984:	eb06 26a7 	add.w	r6, r6, r7, asr #10
 8008988:	b236      	sxth	r6, r6
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800898a:	42b2      	cmp	r2, r6
 800898c:	bfa8      	it	ge
 800898e:	4632      	movge	r2, r6
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 8008990:	4283      	cmp	r3, r0
 8008992:	bfb8      	it	lt
 8008994:	4603      	movlt	r3, r0
 8008996:	4299      	cmp	r1, r3
 8008998:	bfb8      	it	lt
 800899a:	4619      	movlt	r1, r3
 800899c:	428e      	cmp	r6, r1
 800899e:	bfb8      	it	lt
 80089a0:	460e      	movlt	r6, r1
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 80089a2:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 80089a6:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 80089a8:	80e6      	strh	r6, [r4, #6]
 80089aa:	e734      	b.n	8008816 <_lv_img_buf_get_transformed_area+0x20>

080089ac <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80089b4:	4604      	mov	r4, r0
    int xs_fract = dsc->tmp.xs & 0xff;
    int ys_fract = dsc->tmp.ys & 0xff;
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 80089b6:	2a6f      	cmp	r2, #111	; 0x6f
    const uint8_t * src_u8 = dsc->cfg.src;
 80089b8:	6805      	ldr	r5, [r0, #0]
    int xs_fract = dsc->tmp.xs & 0xff;
 80089ba:	f9b0 703c 	ldrsh.w	r7, [r0, #60]	; 0x3c
    int ys_fract = dsc->tmp.ys & 0xff;
 80089be:	f9b0 803e 	ldrsh.w	r8, [r0, #62]	; 0x3e
 80089c2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 80089c6:	b089      	sub	sp, #36	; 0x24
    if(xs_fract < 0x70) {
 80089c8:	f200 8097 	bhi.w	8008afa <_lv_img_buf_transform_anti_alias+0x14e>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80089cc:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 80089d0:	3f80      	subs	r7, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80089d2:	f1bb 0f00 	cmp.w	fp, #0
 80089d6:	bfd4      	ite	le
 80089d8:	f04f 0b00 	movle.w	fp, #0
 80089dc:	f04f 0b01 	movgt.w	fp, #1
 80089e0:	f1cb 0b00 	rsb	fp, fp, #0
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 80089e4:	b2ff      	uxtb	r7, r7
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 80089e6:	2b6f      	cmp	r3, #111	; 0x6f
 80089e8:	f200 809c 	bhi.w	8008b24 <_lv_img_buf_transform_anti_alias+0x178>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 80089ec:	f9b4 6042 	ldrsh.w	r6, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 80089f0:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	bfd4      	ite	le
 80089f8:	2600      	movle	r6, #0
 80089fa:	2601      	movgt	r6, #1
 80089fc:	4276      	negs	r6, r6
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 80089fe:	fa5f f888 	uxtb.w	r8, r8
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 8008a02:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 8008a04:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 8008a08:	9301      	str	r3, [sp, #4]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 8008a0a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a0e:	0758      	lsls	r0, r3, #29
 8008a10:	f140 80ac 	bpl.w	8008b6c <_lv_img_buf_transform_anti_alias+0x1c0>
        lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 8008a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a16:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	fb0b 3101 	mla	r1, fp, r1, r3
 8008a20:	a805      	add	r0, sp, #20
 8008a22:	4429      	add	r1, r5
 8008a24:	f7ff fd40 	bl	80084a8 <lv_memcpy_small>
        lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 8008a28:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8008a2c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8008a30:	2202      	movs	r2, #2
 8008a32:	4359      	muls	r1, r3
 8008a34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a36:	a806      	add	r0, sp, #24
 8008a38:	fb06 3101 	mla	r1, r6, r1, r3
 8008a3c:	4429      	add	r1, r5
 8008a3e:	f7ff fd33 	bl	80084a8 <lv_memcpy_small>
        lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 8008a42:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8008a46:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008a4c:	a807      	add	r0, sp, #28
 8008a4e:	4359      	muls	r1, r3
 8008a50:	fb0b 2303 	mla	r3, fp, r3, r2
 8008a54:	fb06 3101 	mla	r1, r6, r1, r3
 8008a58:	2202      	movs	r2, #2
 8008a5a:	4429      	add	r1, r5
 8008a5c:	f7ff fd24 	bl	80084a8 <lv_memcpy_small>
                        sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 8008a60:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a64:	0799      	lsls	r1, r3, #30
 8008a66:	d46f      	bmi.n	8008b48 <_lv_img_buf_transform_anti_alias+0x19c>
    lv_opa_t a11 = 0;
 8008a68:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
 8008a6a:	4606      	mov	r6, r0
    lv_opa_t a10 = 0;
 8008a6c:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 8008a6e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008a72:	079b      	lsls	r3, r3, #30
 8008a74:	f140 80cc 	bpl.w	8008c10 <_lv_img_buf_transform_anti_alias+0x264>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8008a78:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8008a7c:	fb03 f10b 	mul.w	r1, r3, fp
 8008a80:	9a01      	ldr	r2, [sp, #4]
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8008a82:	4343      	muls	r3, r0
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8008a84:	fb07 1102 	mla	r1, r7, r2, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8008a88:	fb07 3306 	mla	r3, r7, r6, r3
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8008a8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8008a90:	fb08 f501 	mul.w	r5, r8, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8008a94:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8008a98:	f1c8 02ff 	rsb	r2, r8, #255	; 0xff
 8008a9c:	fb03 5202 	mla	r2, r3, r2, r5

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8008aa0:	2902      	cmp	r1, #2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8008aa2:	ea4f 2222 	mov.w	r2, r2, asr #8
 8008aa6:	75a2      	strb	r2, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8008aa8:	f200 80ad 	bhi.w	8008c06 <_lv_img_buf_transform_anti_alias+0x25a>
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	f240 80d7 	bls.w	8008c60 <_lv_img_buf_transform_anti_alias+0x2b4>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8008ab2:	f04f 0800 	mov.w	r8, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	bf94      	ite	ls
 8008abc:	2200      	movls	r2, #0
 8008abe:	463a      	movhi	r2, r7
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 8008ac0:	f1bb 0f02 	cmp.w	fp, #2
 8008ac4:	bf98      	it	ls
 8008ac6:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8008ac8:	2e02      	cmp	r6, #2
 8008aca:	bf98      	it	ls
 8008acc:	2700      	movls	r7, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8008ace:	2802      	cmp	r0, #2
 8008ad0:	bf98      	it	ls
 8008ad2:	27ff      	movls	r7, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	f040 809f 	bne.w	8008c18 <_lv_img_buf_transform_anti_alias+0x26c>
 8008ada:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	f040 80a4 	bne.w	8008c2c <_lv_img_buf_transform_anti_alias+0x280>
 8008ae4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	f040 80ac 	bne.w	8008c48 <_lv_img_buf_transform_anti_alias+0x29c>
 8008af0:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 8008af2:	2001      	movs	r0, #1
}
 8008af4:	b009      	add	sp, #36	; 0x24
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 8008afa:	2a90      	cmp	r2, #144	; 0x90
 8008afc:	d90e      	bls.n	8008b1c <_lv_img_buf_transform_anti_alias+0x170>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8008afe:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
 8008b02:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008b06:	f10b 0b01 	add.w	fp, fp, #1
 8008b0a:	4593      	cmp	fp, r2
 8008b0c:	bfac      	ite	ge
 8008b0e:	f04f 0b00 	movge.w	fp, #0
 8008b12:	f04f 0b01 	movlt.w	fp, #1
        xr = (0xFF - xs_fract) + 0x80;
 8008b16:	f1c7 077f 	rsb	r7, r7, #127	; 0x7f
 8008b1a:	e763      	b.n	80089e4 <_lv_img_buf_transform_anti_alias+0x38>
        xr = 0xFF;
 8008b1c:	27ff      	movs	r7, #255	; 0xff
        xn = 0;
 8008b1e:	f04f 0b00 	mov.w	fp, #0
 8008b22:	e760      	b.n	80089e6 <_lv_img_buf_transform_anti_alias+0x3a>
    else if(ys_fract > 0x90) {
 8008b24:	2b90      	cmp	r3, #144	; 0x90
 8008b26:	d90b      	bls.n	8008b40 <_lv_img_buf_transform_anti_alias+0x194>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8008b28:	f9b4 6042 	ldrsh.w	r6, [r4, #66]	; 0x42
 8008b2c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008b30:	3601      	adds	r6, #1
 8008b32:	4296      	cmp	r6, r2
 8008b34:	bfac      	ite	ge
 8008b36:	2600      	movge	r6, #0
 8008b38:	2601      	movlt	r6, #1
        yr = (0xFF - ys_fract) + 0x80;
 8008b3a:	f1c8 087f 	rsb	r8, r8, #127	; 0x7f
 8008b3e:	e75e      	b.n	80089fe <_lv_img_buf_transform_anti_alias+0x52>
        yr = 0xFF;
 8008b40:	f04f 08ff 	mov.w	r8, #255	; 0xff
        yn = 0;
 8008b44:	2600      	movs	r6, #0
 8008b46:	e75c      	b.n	8008a02 <_lv_img_buf_transform_anti_alias+0x56>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8008b48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008b4a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8008b4e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008b52:	3a01      	subs	r2, #1
 8008b54:	441a      	add	r2, r3
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8008b56:	fb0b 2103 	mla	r1, fp, r3, r2
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8008b5a:	4343      	muls	r3, r0
 8008b5c:	4373      	muls	r3, r6
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8008b5e:	f815 b001 	ldrb.w	fp, [r5, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8008b62:	18e8      	adds	r0, r5, r3
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8008b64:	440d      	add	r5, r1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8008b66:	5c86      	ldrb	r6, [r0, r2]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8008b68:	5ce8      	ldrb	r0, [r5, r3]
 8008b6a:	e780      	b.n	8008a6e <_lv_img_buf_transform_anti_alias+0xc2>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8008b6c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8008b70:	fa1f f58b 	uxth.w	r5, fp
 8008b74:	f104 0a18 	add.w	sl, r4, #24
 8008b78:	4429      	add	r1, r5
 8008b7a:	8a23      	ldrh	r3, [r4, #16]
 8008b7c:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8008b80:	b209      	sxth	r1, r1
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7ff fcd2 	bl	800852c <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008b88:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8008b8c:	b2b6      	uxth	r6, r6
 8008b8e:	4432      	add	r2, r6
 8008b90:	8a23      	ldrh	r3, [r4, #16]
 8008b92:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8008b96:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008b9a:	b212      	sxth	r2, r2
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	f7ff fcc5 	bl	800852c <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008ba2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8008ba6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8008baa:	4432      	add	r2, r6
 8008bac:	4429      	add	r1, r5
 8008bae:	8a23      	ldrh	r3, [r4, #16]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008bb0:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008bb4:	b212      	sxth	r2, r2
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	b209      	sxth	r1, r1
 8008bba:	f7ff fcb7 	bl	800852c <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 8008bbe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8008bc2:	f8ad 001c 	strh.w	r0, [sp, #28]
        if(dsc->tmp.has_alpha) {
 8008bc6:	079a      	lsls	r2, r3, #30
 8008bc8:	f57f af4e 	bpl.w	8008a68 <_lv_img_buf_transform_anti_alias+0xbc>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8008bcc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8008bd0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8008bd4:	441d      	add	r5, r3
 8008bd6:	b22d      	sxth	r5, r5
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4650      	mov	r0, sl
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	9202      	str	r2, [sp, #8]
 8008be0:	f7ff fd1a 	bl	8008618 <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8008be4:	9a02      	ldr	r2, [sp, #8]
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	4416      	add	r6, r2
 8008bea:	b232      	sxth	r2, r6
 8008bec:	4619      	mov	r1, r3
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8008bee:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	f7ff fd10 	bl	8008618 <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8008bf8:	4629      	mov	r1, r5
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8008bfa:	4606      	mov	r6, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8008bfc:	9a02      	ldr	r2, [sp, #8]
 8008bfe:	4650      	mov	r0, sl
 8008c00:	f7ff fd0a 	bl	8008618 <lv_img_buf_get_px_alpha>
 8008c04:	e733      	b.n	8008a6e <_lv_img_buf_transform_anti_alias+0xc2>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	bf98      	it	ls
 8008c0a:	f04f 08ff 	movls.w	r8, #255	; 0xff
 8008c0e:	e752      	b.n	8008ab6 <_lv_img_buf_transform_anti_alias+0x10a>
        dsc->res.opa = LV_OPA_COVER;
 8008c10:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 8008c12:	463a      	mov	r2, r7
        dsc->res.opa = LV_OPA_COVER;
 8008c14:	75a3      	strb	r3, [r4, #22]
 8008c16:	e75d      	b.n	8008ad4 <_lv_img_buf_transform_anti_alias+0x128>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8008c18:	2aff      	cmp	r2, #255	; 0xff
 8008c1a:	f43f af60 	beq.w	8008ade <_lv_img_buf_transform_anti_alias+0x132>
    else c0 = lv_color_mix(c00, c01, xr0);
 8008c1e:	4648      	mov	r0, r9
 8008c20:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8008c24:	f7ff fc4c 	bl	80084c0 <lv_color_mix>
 8008c28:	4681      	mov	r9, r0
 8008c2a:	e758      	b.n	8008ade <_lv_img_buf_transform_anti_alias+0x132>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 8008c2c:	2fff      	cmp	r7, #255	; 0xff
 8008c2e:	d102      	bne.n	8008c36 <_lv_img_buf_transform_anti_alias+0x28a>
 8008c30:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8008c34:	e758      	b.n	8008ae8 <_lv_img_buf_transform_anti_alias+0x13c>
    else c1 = lv_color_mix(c10, c11, xr1);
 8008c36:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8008c40:	f7ff fc3e 	bl	80084c0 <lv_color_mix>
 8008c44:	4601      	mov	r1, r0
 8008c46:	e74f      	b.n	8008ae8 <_lv_img_buf_transform_anti_alias+0x13c>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8008c48:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8008c4c:	d102      	bne.n	8008c54 <_lv_img_buf_transform_anti_alias+0x2a8>
 8008c4e:	f8a4 9014 	strh.w	r9, [r4, #20]
 8008c52:	e74e      	b.n	8008af2 <_lv_img_buf_transform_anti_alias+0x146>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8008c54:	4642      	mov	r2, r8
 8008c56:	4648      	mov	r0, r9
 8008c58:	f7ff fc32 	bl	80084c0 <lv_color_mix>
 8008c5c:	82a0      	strh	r0, [r4, #20]
 8008c5e:	e748      	b.n	8008af2 <_lv_img_buf_transform_anti_alias+0x146>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8008c60:	2000      	movs	r0, #0
 8008c62:	e747      	b.n	8008af4 <_lv_img_buf_transform_anti_alias+0x148>

08008c64 <_lv_img_buf_transform>:
    int32_t xt = x - dsc->cfg.pivot_x;
 8008c64:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
{
 8008c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	e9d0 5609 	ldrd	r5, r6, [r0, #36]	; 0x24
    int32_t xt = x - dsc->cfg.pivot_x;
 8008c70:	1ac9      	subs	r1, r1, r3
    int32_t yt = y - dsc->cfg.pivot_y;
 8008c72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
{
 8008c76:	4604      	mov	r4, r0
    int32_t yt = y - dsc->cfg.pivot_y;
 8008c78:	1ad2      	subs	r2, r2, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 8008c7a:	89c3      	ldrh	r3, [r0, #14]
 8008c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c80:	d117      	bne.n	8008cb2 <_lv_img_buf_transform+0x4e>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8008c82:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 8008c86:	fb01 f703 	mul.w	r7, r1, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8008c8a:	4353      	muls	r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8008c8c:	fb02 7710 	mls	r7, r2, r0, r7
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8008c90:	fb01 3200 	mla	r2, r1, r0, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8008c94:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8008c98:	eb06 06a2 	add.w	r6, r6, r2, asr #2
    if(xs_int >= dsc->cfg.src_w) return false;
 8008c9c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int32_t xs_int = xs >> 8;
 8008ca0:	ea4f 2925 	mov.w	r9, r5, asr #8
    if(xs_int >= dsc->cfg.src_w) return false;
 8008ca4:	ebb3 2f25 	cmp.w	r3, r5, asr #8
 8008ca8:	dc1c      	bgt.n	8008ce4 <_lv_img_buf_transform+0x80>
 8008caa:	2000      	movs	r0, #0
}
 8008cac:	b003      	add	sp, #12
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->cfg.angle == 0) {
 8008cb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008cb4:	4359      	muls	r1, r3
 8008cb6:	4353      	muls	r3, r2
 8008cb8:	115a      	asrs	r2, r3, #5
 8008cba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8008cbe:	1149      	asrs	r1, r1, #5
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_lv_img_buf_transform+0x64>
        xs = xt + dsc->tmp.pivot_x_256;
 8008cc2:	440d      	add	r5, r1
        ys = yt + dsc->tmp.pivot_y_256;
 8008cc4:	4416      	add	r6, r2
 8008cc6:	e7e9      	b.n	8008c9c <_lv_img_buf_transform+0x38>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 8008cc8:	e9d4 070b 	ldrd	r0, r7, [r4, #44]	; 0x2c
 8008ccc:	fb01 f307 	mul.w	r3, r1, r7
 8008cd0:	fb02 3310 	mls	r3, r2, r0, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8008cd4:	437a      	muls	r2, r7
 8008cd6:	fb01 2000 	mla	r0, r1, r0, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 8008cda:	eb05 25a3 	add.w	r5, r5, r3, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8008cde:	eb06 26a0 	add.w	r6, r6, r0, asr #10
 8008ce2:	e7db      	b.n	8008c9c <_lv_img_buf_transform+0x38>
    else if(xs_int < 0) return false;
 8008ce4:	f1b9 0f00 	cmp.w	r9, #0
 8008ce8:	dbdf      	blt.n	8008caa <_lv_img_buf_transform+0x46>
    if(ys_int >= dsc->cfg.src_h) return false;
 8008cea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t ys_int = ys >> 8;
 8008cee:	ea4f 2826 	mov.w	r8, r6, asr #8
    if(ys_int >= dsc->cfg.src_h) return false;
 8008cf2:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 8008cf6:	ddd8      	ble.n	8008caa <_lv_img_buf_transform+0x46>
    else if(ys_int < 0) return false;
 8008cf8:	f1b8 0f00 	cmp.w	r8, #0
 8008cfc:	dbd5      	blt.n	8008caa <_lv_img_buf_transform+0x46>
    if(dsc->tmp.native_color) {
 8008cfe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008d02:	f012 0704 	ands.w	r7, r2, #4
 8008d06:	d034      	beq.n	8008d72 <_lv_img_buf_transform+0x10e>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 8008d08:	4620      	mov	r0, r4
 8008d0a:	fb08 9303 	mla	r3, r8, r3, r9
        if(dsc->tmp.has_alpha == 0) {
 8008d0e:	f012 0f02 	tst.w	r2, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 8008d12:	f850 1b14 	ldr.w	r1, [r0], #20
        if(dsc->tmp.has_alpha == 0) {
 8008d16:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8008d1a:	d11f      	bne.n	8008d5c <_lv_img_buf_transform+0xf8>
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	4451      	add	r1, sl
 8008d20:	f7ff fbc2 	bl	80084a8 <lv_memcpy_small>
            px_size = LV_COLOR_SIZE >> 3;
 8008d24:	2702      	movs	r7, #2
    if(dsc->tmp.chroma_keyed) {
 8008d26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d504      	bpl.n	8008d38 <_lv_img_buf_transform+0xd4>
        if(dsc->res.color.full == ct.full) return false;
 8008d2e:	f24e 0307 	movw	r3, #57351	; 0xe007
 8008d32:	8aa2      	ldrh	r2, [r4, #20]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d0b8      	beq.n	8008caa <_lv_img_buf_transform+0x46>
    if(dsc->cfg.antialias == false) return true;
 8008d38:	7ce3      	ldrb	r3, [r4, #19]
 8008d3a:	b37b      	cbz	r3, 8008d9c <_lv_img_buf_transform+0x138>
    ret = _lv_img_buf_transform_anti_alias(dsc);
 8008d3c:	4620      	mov	r0, r4
    dsc->tmp.xs = xs;
 8008d3e:	87a5      	strh	r5, [r4, #60]	; 0x3c
    dsc->tmp.ys = ys;
 8008d40:	87e6      	strh	r6, [r4, #62]	; 0x3e
    dsc->tmp.xs_int = xs_int;
 8008d42:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
    dsc->tmp.ys_int = ys_int;
 8008d46:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
    dsc->tmp.pxi = pxi;
 8008d4a:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    dsc->tmp.px_size = px_size;
 8008d4e:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
}
 8008d52:	b003      	add	sp, #12
 8008d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ret = _lv_img_buf_transform_anti_alias(dsc);
 8008d58:	f7ff be28 	b.w	80089ac <_lv_img_buf_transform_anti_alias>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 8008d5c:	449a      	add	sl, r3
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 8008d5e:	eb01 070a 	add.w	r7, r1, sl
 8008d62:	4639      	mov	r1, r7
 8008d64:	2202      	movs	r2, #2
 8008d66:	f7ff fb9f 	bl	80084a8 <lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 8008d6a:	78bb      	ldrb	r3, [r7, #2]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 8008d6c:	2703      	movs	r7, #3
            dsc->res.opa = src_u8[pxi + px_size - 1];
 8008d6e:	75a3      	strb	r3, [r4, #22]
 8008d70:	e7d9      	b.n	8008d26 <_lv_img_buf_transform+0xc2>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 8008d72:	f104 0a18 	add.w	sl, r4, #24
 8008d76:	fa0f fb89 	sxth.w	fp, r9
 8008d7a:	fa0f f288 	sxth.w	r2, r8
 8008d7e:	4659      	mov	r1, fp
 8008d80:	4650      	mov	r0, sl
 8008d82:	8a23      	ldrh	r3, [r4, #16]
 8008d84:	9201      	str	r2, [sp, #4]
 8008d86:	f7ff fbd1 	bl	800852c <lv_img_buf_get_px_color>
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8008d8a:	4659      	mov	r1, fp
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 8008d8c:	82a0      	strh	r0, [r4, #20]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8008d8e:	9a01      	ldr	r2, [sp, #4]
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7ff fc41 	bl	8008618 <lv_img_buf_get_px_alpha>
        pxi = 0; /*unused*/
 8008d96:	46ba      	mov	sl, r7
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8008d98:	75a0      	strb	r0, [r4, #22]
 8008d9a:	e7c4      	b.n	8008d26 <_lv_img_buf_transform+0xc2>
    if(dsc->cfg.antialias == false) return true;
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	e785      	b.n	8008cac <_lv_img_buf_transform+0x48>

08008da0 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da4:	4605      	mov	r5, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4690      	mov	r8, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8008daa:	f006 fa6d 	bl	800f288 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008dae:	4c12      	ldr	r4, [pc, #72]	; (8008df8 <_lv_img_cache_open+0x58>)
 8008db0:	4629      	mov	r1, r5
    uint32_t t_start  = lv_tick_get();
 8008db2:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8008db4:	4643      	mov	r3, r8
 8008db6:	463a      	mov	r2, r7
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fb13 	bl	80093e4 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	b948      	cbnz	r0, 8008dd6 <_lv_img_cache_open+0x36>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	212c      	movs	r1, #44	; 0x2c
 8008dc6:	f007 f9f3 	bl	80101b0 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8008dca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 8008dce:	4628      	mov	r0, r5
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8008dd0:	62a3      	str	r3, [r4, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cached_src->life = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62a3      	str	r3, [r4, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 8008dda:	69e3      	ldr	r3, [r4, #28]
 8008ddc:	b10b      	cbz	r3, 8008de2 <_lv_img_cache_open+0x42>
    return cached_src;
 8008dde:	4806      	ldr	r0, [pc, #24]	; (8008df8 <_lv_img_cache_open+0x58>)
 8008de0:	e7f7      	b.n	8008dd2 <_lv_img_cache_open+0x32>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8008de2:	4630      	mov	r0, r6
 8008de4:	f006 fa5e 	bl	800f2a4 <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8008de8:	b108      	cbz	r0, 8008dee <_lv_img_cache_open+0x4e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8008dea:	61e0      	str	r0, [r4, #28]
 8008dec:	e7f7      	b.n	8008dde <_lv_img_cache_open+0x3e>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8008dee:	2301      	movs	r3, #1
    return cached_src;
 8008df0:	4620      	mov	r0, r4
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8008df2:	61e3      	str	r3, [r4, #28]
 8008df4:	e7ed      	b.n	8008dd2 <_lv_img_cache_open+0x32>
 8008df6:	bf00      	nop
 8008df8:	20004730 	.word	0x20004730

08008dfc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8008dfc:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008dfe:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 8008e00:	460c      	mov	r4, r1
    if(user_data) {
 8008e02:	b195      	cbz	r5, 8008e2a <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008e04:	7c0b      	ldrb	r3, [r1, #16]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d102      	bne.n	8008e10 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f006 fe34 	bl	800fa78 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8008e10:	68a8      	ldr	r0, [r5, #8]
 8008e12:	b108      	cbz	r0, 8008e18 <lv_img_decoder_built_in_close+0x1c>
 8008e14:	f006 ffc8 	bl	800fda8 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8008e18:	68e8      	ldr	r0, [r5, #12]
 8008e1a:	b108      	cbz	r0, 8008e20 <lv_img_decoder_built_in_close+0x24>
 8008e1c:	f006 ffc4 	bl	800fda8 <lv_mem_free>

        lv_mem_free(user_data);
 8008e20:	4628      	mov	r0, r5
 8008e22:	f006 ffc1 	bl	800fda8 <lv_mem_free>
        dsc->user_data = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}

08008e2c <lv_img_decoder_built_in_info>:
{
 8008e2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008e2e:	4608      	mov	r0, r1
{
 8008e30:	460e      	mov	r6, r1
 8008e32:	4615      	mov	r5, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8008e34:	f7fd ff0c 	bl	8006c50 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8008e38:	4604      	mov	r4, r0
 8008e3a:	b9d8      	cbnz	r0, 8008e74 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8008e3c:	7833      	ldrb	r3, [r6, #0]
 8008e3e:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008e42:	3b04      	subs	r3, #4
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b0a      	cmp	r3, #10
 8008e48:	d811      	bhi.n	8008e6e <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008e4a:	8873      	ldrh	r3, [r6, #2]
 8008e4c:	886a      	ldrh	r2, [r5, #2]
 8008e4e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8008e52:	f363 124f 	bfi	r2, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8008e56:	6831      	ldr	r1, [r6, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8008e58:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ecc <lv_img_decoder_built_in_info+0xa0>)
 8008e5e:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
 8008e62:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8008e66:	400a      	ands	r2, r1
    return LV_RES_OK;
 8008e68:	2401      	movs	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	602b      	str	r3, [r5, #0]
}
 8008e6e:	4620      	mov	r0, r4
 8008e70:	b004      	add	sp, #16
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8008e74:	2801      	cmp	r0, #1
 8008e76:	d122      	bne.n	8008ebe <lv_img_decoder_built_in_info+0x92>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f006 fe79 	bl	800fb70 <lv_fs_get_ext>
 8008e7e:	4914      	ldr	r1, [pc, #80]	; (8008ed0 <lv_img_decoder_built_in_info+0xa4>)
 8008e80:	f7f7 f964 	bl	800014c <strcmp>
 8008e84:	b9c8      	cbnz	r0, 8008eba <lv_img_decoder_built_in_info+0x8e>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8008e86:	2202      	movs	r2, #2
 8008e88:	4631      	mov	r1, r6
 8008e8a:	a802      	add	r0, sp, #8
 8008e8c:	f006 fe46 	bl	800fb1c <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8008e90:	b968      	cbnz	r0, 8008eae <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8008e92:	2204      	movs	r2, #4
 8008e94:	4629      	mov	r1, r5
 8008e96:	ab01      	add	r3, sp, #4
 8008e98:	a802      	add	r0, sp, #8
 8008e9a:	f006 fdfd 	bl	800fa98 <lv_fs_read>
 8008e9e:	4606      	mov	r6, r0
            lv_fs_close(&f);
 8008ea0:	a802      	add	r0, sp, #8
 8008ea2:	f006 fde9 	bl	800fa78 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8008ea6:	b946      	cbnz	r6, 8008eba <lv_img_decoder_built_in_info+0x8e>
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d105      	bne.n	8008eba <lv_img_decoder_built_in_info+0x8e>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008eae:	782b      	ldrb	r3, [r5, #0]
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2b0a      	cmp	r3, #10
 8008eb8:	d9d9      	bls.n	8008e6e <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8008eba:	2400      	movs	r4, #0
 8008ebc:	e7d7      	b.n	8008e6e <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8008ebe:	2802      	cmp	r0, #2
 8008ec0:	d1fb      	bne.n	8008eba <lv_img_decoder_built_in_info+0x8e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <lv_img_decoder_built_in_info+0xa8>)
 8008eca:	e7cd      	b.n	8008e68 <lv_img_decoder_built_in_info+0x3c>
 8008ecc:	001ffc1f 	.word	0x001ffc1f
 8008ed0:	0801a383 	.word	0x0801a383
 8008ed4:	0020040b 	.word	0x0020040b

08008ed8 <lv_img_decoder_built_in_read_line>:
{
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008edc:	7d08      	ldrb	r0, [r1, #20]
{
 8008ede:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008ee0:	f000 031e 	and.w	r3, r0, #30
{
 8008ee4:	b08b      	sub	sp, #44	; 0x2c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008ee6:	2b04      	cmp	r3, #4
{
 8008ee8:	460e      	mov	r6, r1
 8008eea:	4614      	mov	r4, r2
 8008eec:	f9bd a050 	ldrsh.w	sl, [sp, #80]	; 0x50
 8008ef0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008ef4:	d003      	beq.n	8008efe <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8008ef6:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d12d      	bne.n	8008f5a <lv_img_decoder_built_in_read_line+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8008efe:	7c37      	ldrb	r7, [r6, #16]
 8008f00:	2f01      	cmp	r7, #1
 8008f02:	d001      	beq.n	8008f08 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
    res = lv_fs_read(&user_data->f, buf, btr, &br);
    if(res != LV_FS_RES_OK || btr != br) {
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8008f04:	2700      	movs	r7, #0
 8008f06:	e024      	b.n	8008f52 <lv_img_decoder_built_in_read_line+0x7a>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008f08:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008f0c:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008f10:	f7fd fe7c 	bl	8006c0c <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008f14:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8008f16:	4605      	mov	r5, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8008f18:	f3c1 218a 	ubfx	r1, r1, #10, #11
 8008f1c:	fb0b 4101 	mla	r1, fp, r1, r4
 8008f20:	4341      	muls	r1, r0
 8008f22:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8008f24:	2200      	movs	r2, #0
 8008f26:	4648      	mov	r0, r9
 8008f28:	3104      	adds	r1, #4
 8008f2a:	f006 fdd0 	bl	800face <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d1e8      	bne.n	8008f04 <lv_img_decoder_built_in_read_line+0x2c>
    uint32_t btr = len * (px_size >> 3);
 8008f32:	f3c5 05c7 	ubfx	r5, r5, #3, #8
 8008f36:	fb0a fa05 	mul.w	sl, sl, r5
    uint32_t br  = 0;
 8008f3a:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8008f3c:	4652      	mov	r2, sl
 8008f3e:	4641      	mov	r1, r8
 8008f40:	4648      	mov	r0, r9
 8008f42:	ab06      	add	r3, sp, #24
 8008f44:	f006 fda8 	bl	800fa98 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1db      	bne.n	8008f04 <lv_img_decoder_built_in_read_line+0x2c>
 8008f4c:	9b06      	ldr	r3, [sp, #24]
 8008f4e:	459a      	cmp	sl, r3
 8008f50:	d1d8      	bne.n	8008f04 <lv_img_decoder_built_in_read_line+0x2c>
}
 8008f52:	4638      	mov	r0, r7
 8008f54:	b00b      	add	sp, #44	; 0x2c
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8008f5a:	f1a3 020b 	sub.w	r2, r3, #11
 8008f5e:	2a03      	cmp	r2, #3
 8008f60:	f200 80b9 	bhi.w	80090d6 <lv_img_decoder_built_in_read_line+0x1fe>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008f64:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008f68:	aa06      	add	r2, sp, #24
 8008f6a:	4691      	mov	r9, r2
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008f6c:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008f70:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8008f74:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8008f78:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008f7a:	4ba2      	ldr	r3, [pc, #648]	; (8009204 <lv_img_decoder_built_in_read_line+0x32c>)
 8008f7c:	f103 0710 	add.w	r7, r3, #16
 8008f80:	4615      	mov	r5, r2
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	6859      	ldr	r1, [r3, #4]
 8008f86:	3308      	adds	r3, #8
 8008f88:	c503      	stmia	r5!, {r0, r1}
 8008f8a:	42bb      	cmp	r3, r7
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	d1f7      	bne.n	8008f80 <lv_img_decoder_built_in_read_line+0xa8>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8008f90:	4643      	mov	r3, r8
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8008f92:	2200      	movs	r2, #0
    lv_color_t bg_color = dsc->color;
 8008f94:	8931      	ldrh	r1, [r6, #8]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008f96:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 8008f98:	b210      	sxth	r0, r2
 8008f9a:	4582      	cmp	sl, r0
 8008f9c:	f103 0303 	add.w	r3, r3, #3
 8008fa0:	dc14      	bgt.n	8008fcc <lv_img_decoder_built_in_read_line+0xf4>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008fa2:	7d30      	ldrb	r0, [r6, #20]
 8008fa4:	f000 001f 	and.w	r0, r0, #31
 8008fa8:	f7fd fe30 	bl	8006c0c <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8008fac:	2301      	movs	r3, #1
 8008fae:	4083      	lsls	r3, r0
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8008fb6:	7d33      	ldrb	r3, [r6, #20]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8008fb8:	9001      	str	r0, [sp, #4]
    switch(dsc->header.cf) {
 8008fba:	f003 031f 	and.w	r3, r3, #31
 8008fbe:	3b0b      	subs	r3, #11
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d85e      	bhi.n	8009082 <lv_img_decoder_built_in_read_line+0x1aa>
 8008fc4:	e8df f003 	tbb	[pc, r3]
 8008fc8:	54453508 	.word	0x54453508
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8008fcc:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8008fd0:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 8008fd4:	3201      	adds	r2, #1
 8008fd6:	e7df      	b.n	8008f98 <lv_img_decoder_built_in_read_line+0xc0>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008fd8:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 8008fda:	10e1      	asrs	r1, r4, #3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008fdc:	f3c5 258a 	ubfx	r5, r5, #10, #11
 8008fe0:	3507      	adds	r5, #7
 8008fe2:	10eb      	asrs	r3, r5, #3
            pos = 7 - (x & 0x7);
 8008fe4:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8008fe6:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 8008fe8:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 7 - (x & 0x7);
 8008fec:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 8008ff0:	f10d 0910 	add.w	r9, sp, #16
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008ff4:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8008ff6:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8008ffa:	9103      	str	r1, [sp, #12]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8008ffc:	f007 f88a 	bl	8010114 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8009000:	4607      	mov	r7, r0
 8009002:	2800      	cmp	r0, #0
 8009004:	d0a5      	beq.n	8008f52 <lv_img_decoder_built_in_read_line+0x7a>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009006:	7c33      	ldrb	r3, [r6, #16]
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d13d      	bne.n	800908a <lv_img_decoder_built_in_read_line+0x1b2>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800900e:	6873      	ldr	r3, [r6, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	4419      	add	r1, r3
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8009014:	2300      	movs	r3, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8009016:	9a01      	ldr	r2, [sp, #4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8009018:	f108 0802 	add.w	r8, r8, #2
            pos = 8 - px_size;
 800901c:	f1c2 0008 	rsb	r0, r2, #8
 8009020:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 8009022:	b21a      	sxth	r2, r3
 8009024:	4552      	cmp	r2, sl
 8009026:	db3d      	blt.n	80090a4 <lv_img_decoder_built_in_read_line+0x1cc>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 8009028:	4638      	mov	r0, r7
 800902a:	f006 fecb 	bl	800fdc4 <lv_mem_buf_release>
    return LV_RES_OK;
 800902e:	2701      	movs	r7, #1
 8009030:	e78f      	b.n	8008f52 <lv_img_decoder_built_in_read_line+0x7a>
            ofs += w * y + (x >> 2); /*First pixel*/
 8009032:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8009034:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009036:	6975      	ldr	r5, [r6, #20]
            pos = 6 - (x & 0x3) * 2;
 8009038:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800903c:	f3c5 258a 	ubfx	r5, r5, #10, #11
 8009040:	3503      	adds	r5, #3
 8009042:	10ab      	asrs	r3, r5, #2
 8009044:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 8009046:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 6 - (x & 0x3) * 2;
 800904a:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800904c:	f10d 0914 	add.w	r9, sp, #20
            break;
 8009050:	e7d0      	b.n	8008ff4 <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009052:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 8009054:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009056:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800905a:	3501      	adds	r5, #1
 800905c:	106b      	asrs	r3, r5, #1
            pos = 4 - (x & 0x1) * 4;
 800905e:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8009062:	461d      	mov	r5, r3
            pos = 4 - (x & 0x1) * 4;
 8009064:	bf0c      	ite	eq
 8009066:	2404      	moveq	r4, #4
 8009068:	2400      	movne	r4, #0
            ofs += w * y + (x >> 1); /*First pixel*/
 800906a:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 4 - (x & 0x1) * 4;
 800906e:	e7c1      	b.n	8008ff4 <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8009070:	6975      	ldr	r5, [r6, #20]
 8009072:	f3c5 218a 	ubfx	r1, r5, #10, #11
 8009076:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 8009078:	fb0b 4101 	mla	r1, fp, r1, r4
            pos = 0;
 800907c:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 800907e:	46a1      	mov	r9, r4
 8009080:	e7b8      	b.n	8008ff4 <lv_img_decoder_built_in_read_line+0x11c>
 8009082:	2400      	movs	r4, #0
 8009084:	4621      	mov	r1, r4
 8009086:	4625      	mov	r5, r4
 8009088:	e7f9      	b.n	800907e <lv_img_decoder_built_in_read_line+0x1a6>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800908a:	2200      	movs	r2, #0
 800908c:	3104      	adds	r1, #4
 800908e:	4658      	mov	r0, fp
 8009090:	f006 fd1d 	bl	800face <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8009094:	4639      	mov	r1, r7
 8009096:	2300      	movs	r3, #0
 8009098:	462a      	mov	r2, r5
 800909a:	4658      	mov	r0, fp
 800909c:	f006 fcfc 	bl	800fa98 <lv_fs_read>
 80090a0:	4639      	mov	r1, r7
 80090a2:	e7b7      	b.n	8009014 <lv_img_decoder_built_in_read_line+0x13c>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80090a4:	780a      	ldrb	r2, [r1, #0]
 80090a6:	9d02      	ldr	r5, [sp, #8]
 80090a8:	4122      	asrs	r2, r4
 80090aa:	402a      	ands	r2, r5
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80090ac:	7d35      	ldrb	r5, [r6, #20]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80090ae:	b2d2      	uxtb	r2, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80090b0:	f005 051f 	and.w	r5, r5, #31
 80090b4:	2d0e      	cmp	r5, #14
 80090b6:	bf18      	it	ne
 80090b8:	f819 2002 	ldrbne.w	r2, [r9, r2]
 80090bc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80090c0:	f808 2005 	strb.w	r2, [r8, r5]
        pos -= px_size;
 80090c4:	9a01      	ldr	r2, [sp, #4]
 80090c6:	3301      	adds	r3, #1
 80090c8:	1aa4      	subs	r4, r4, r2
 80090ca:	b264      	sxtb	r4, r4
        if(pos < 0) {
 80090cc:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 80090ce:	bfbc      	itt	lt
 80090d0:	4604      	movlt	r4, r0
            data_tmp++;
 80090d2:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 80090d4:	e7a5      	b.n	8009022 <lv_img_decoder_built_in_read_line+0x14a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80090d6:	3b07      	subs	r3, #7
 80090d8:	2b03      	cmp	r3, #3
 80090da:	f63f af13 	bhi.w	8008f04 <lv_img_decoder_built_in_read_line+0x2c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80090de:	f000 001f 	and.w	r0, r0, #31
 80090e2:	f7fd fd93 	bl	8006c0c <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80090e6:	2301      	movs	r3, #1
 80090e8:	4083      	lsls	r3, r0
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 80090f0:	7d33      	ldrb	r3, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80090f2:	4681      	mov	r9, r0
    switch(dsc->header.cf) {
 80090f4:	f003 031f 	and.w	r3, r3, #31
 80090f8:	3b07      	subs	r3, #7
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d870      	bhi.n	80091e0 <lv_img_decoder_built_in_read_line+0x308>
 80090fe:	e8df f003 	tbb	[pc, r3]
 8009102:	4602      	.short	0x4602
 8009104:	6555      	.short	0x6555
            ofs += w * y + (x >> 3); /*First pixel*/
 8009106:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 8009108:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800910a:	6975      	ldr	r5, [r6, #20]
            pos = 7 - (x & 0x7);
 800910c:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8009110:	f3c5 258a 	ubfx	r5, r5, #10, #11
 8009114:	3507      	adds	r5, #7
 8009116:	10e9      	asrs	r1, r5, #3
 8009118:	460d      	mov	r5, r1
            ofs += w * y + (x >> 3); /*First pixel*/
 800911a:	fb01 310b 	mla	r1, r1, fp, r3
            ofs += 8;                /*Skip the palette*/
 800911e:	3108      	adds	r1, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8009120:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8009122:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 8009126:	9102      	str	r1, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8009128:	f006 fff4 	bl	8010114 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800912c:	4607      	mov	r7, r0
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f aee8 	beq.w	8008f04 <lv_img_decoder_built_in_read_line+0x2c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009134:	7c33      	ldrb	r3, [r6, #16]
 8009136:	9902      	ldr	r1, [sp, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d155      	bne.n	80091e8 <lv_img_decoder_built_in_read_line+0x310>
        data_tmp                     = img_dsc->data + ofs;
 800913c:	6873      	ldr	r3, [r6, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	4419      	add	r1, r3
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8009142:	2000      	movs	r0, #0
            pos = 8 - px_size;
 8009144:	f1c9 0508 	rsb	r5, r9, #8
 8009148:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800914a:	b203      	sxth	r3, r0
 800914c:	459a      	cmp	sl, r3
 800914e:	f77f af6b 	ble.w	8009028 <lv_img_decoder_built_in_read_line+0x150>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8009152:	780b      	ldrb	r3, [r1, #0]
 8009154:	9a01      	ldr	r2, [sp, #4]
 8009156:	4123      	asrs	r3, r4
 8009158:	4013      	ands	r3, r2
        lv_color_t color = user_data->palette[val_act];
 800915a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        pos -= px_size;
 8009164:	eba4 0409 	sub.w	r4, r4, r9
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 8009168:	f888 2000 	strb.w	r2, [r8]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800916c:	0a12      	lsrs	r2, r2, #8
 800916e:	f888 2001 	strb.w	r2, [r8, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8009172:	f8db 200c 	ldr.w	r2, [fp, #12]
        pos -= px_size;
 8009176:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8009178:	5cd3      	ldrb	r3, [r2, r3]
        if(pos < 0) {
 800917a:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800917c:	f888 3002 	strb.w	r3, [r8, #2]
            pos = 8 - px_size;
 8009180:	bfbc      	itt	lt
 8009182:	462c      	movlt	r4, r5
            data_tmp++;
 8009184:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 8009186:	3001      	adds	r0, #1
 8009188:	f108 0803 	add.w	r8, r8, #3
 800918c:	e7dd      	b.n	800914a <lv_img_decoder_built_in_read_line+0x272>
            ofs += w * y + (x >> 2); /*First pixel*/
 800918e:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 8009190:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009192:	6975      	ldr	r5, [r6, #20]
            pos = 6 - (x & 0x3) * 2;
 8009194:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8009198:	f3c5 258a 	ubfx	r5, r5, #10, #11
 800919c:	3503      	adds	r5, #3
 800919e:	10a9      	asrs	r1, r5, #2
 80091a0:	460d      	mov	r5, r1
            ofs += w * y + (x >> 2); /*First pixel*/
 80091a2:	fb01 310b 	mla	r1, r1, fp, r3
            pos = 6 - (x & 0x3) * 2;
 80091a6:	0064      	lsls	r4, r4, #1
            ofs += 16;               /*Skip the palette*/
 80091a8:	3110      	adds	r1, #16
            break;
 80091aa:	e7b9      	b.n	8009120 <lv_img_decoder_built_in_read_line+0x248>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80091ac:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 80091ae:	1063      	asrs	r3, r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80091b0:	f3c5 258a 	ubfx	r5, r5, #10, #11
 80091b4:	3501      	adds	r5, #1
 80091b6:	1069      	asrs	r1, r5, #1
 80091b8:	460d      	mov	r5, r1
            ofs += w * y + (x >> 1); /*First pixel*/
 80091ba:	fb01 310b 	mla	r1, r1, fp, r3
            pos = 4 - (x & 0x1) * 4;
 80091be:	f014 0f01 	tst.w	r4, #1
 80091c2:	bf0c      	ite	eq
 80091c4:	2404      	moveq	r4, #4
 80091c6:	2400      	movne	r4, #0
            ofs += 64;               /*Skip the palette*/
 80091c8:	3140      	adds	r1, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 80091ca:	e7a9      	b.n	8009120 <lv_img_decoder_built_in_read_line+0x248>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80091cc:	6975      	ldr	r5, [r6, #20]
 80091ce:	f3c5 218a 	ubfx	r1, r5, #10, #11
 80091d2:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 80091d4:	fb0b 4101 	mla	r1, fp, r1, r4
            pos = 0;
 80091d8:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 80091da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
            break;
 80091de:	e79f      	b.n	8009120 <lv_img_decoder_built_in_read_line+0x248>
    switch(dsc->header.cf) {
 80091e0:	2100      	movs	r1, #0
 80091e2:	460c      	mov	r4, r1
 80091e4:	460d      	mov	r5, r1
 80091e6:	e79b      	b.n	8009120 <lv_img_decoder_built_in_read_line+0x248>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 80091e8:	2200      	movs	r2, #0
 80091ea:	3104      	adds	r1, #4
 80091ec:	4658      	mov	r0, fp
 80091ee:	f006 fc6e 	bl	800face <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80091f2:	4639      	mov	r1, r7
 80091f4:	2300      	movs	r3, #0
 80091f6:	462a      	mov	r2, r5
 80091f8:	4658      	mov	r0, fp
 80091fa:	f006 fc4d 	bl	800fa98 <lv_fs_read>
 80091fe:	4639      	mov	r1, r7
 8009200:	e79f      	b.n	8009142 <lv_img_decoder_built_in_read_line+0x26a>
 8009202:	bf00      	nop
 8009204:	0801544e 	.word	0x0801544e

08009208 <lv_img_decoder_built_in_open>:
{
 8009208:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800920c:	7c0d      	ldrb	r5, [r1, #16]
{
 800920e:	4680      	mov	r8, r0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009210:	2d01      	cmp	r5, #1
{
 8009212:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009214:	d12d      	bne.n	8009272 <lv_img_decoder_built_in_open+0x6a>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8009216:	6848      	ldr	r0, [r1, #4]
 8009218:	f006 fcaa 	bl	800fb70 <lv_fs_get_ext>
 800921c:	4959      	ldr	r1, [pc, #356]	; (8009384 <lv_img_decoder_built_in_open+0x17c>)
 800921e:	f7f6 ff95 	bl	800014c <strcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	d15b      	bne.n	80092de <lv_img_decoder_built_in_open+0xd6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8009226:	2202      	movs	r2, #2
 8009228:	4668      	mov	r0, sp
 800922a:	6861      	ldr	r1, [r4, #4]
 800922c:	f006 fc76 	bl	800fb1c <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8009230:	2800      	cmp	r0, #0
 8009232:	d154      	bne.n	80092de <lv_img_decoder_built_in_open+0xd6>
        if(dsc->user_data == NULL) {
 8009234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009236:	b943      	cbnz	r3, 800924a <lv_img_decoder_built_in_open+0x42>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8009238:	2010      	movs	r0, #16
 800923a:	f006 ff3b 	bl	80100b4 <lv_mem_alloc>
 800923e:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8009240:	b900      	cbnz	r0, 8009244 <lv_img_decoder_built_in_open+0x3c>
 8009242:	e7fe      	b.n	8009242 <lv_img_decoder_built_in_open+0x3a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8009244:	2110      	movs	r1, #16
 8009246:	f006 ffb3 	bl	80101b0 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800924a:	466b      	mov	r3, sp
 800924c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while(len) {
 800924e:	f102 0108 	add.w	r1, r2, #8
        *d8 = *s8;
 8009252:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009256:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800925a:	428a      	cmp	r2, r1
 800925c:	d1f9      	bne.n	8009252 <lv_img_decoder_built_in_open+0x4a>
    lv_img_cf_t cf = dsc->header.cf;
 800925e:	7d23      	ldrb	r3, [r4, #20]
 8009260:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8009264:	1f03      	subs	r3, r0, #4
 8009266:	2b02      	cmp	r3, #2
 8009268:	d811      	bhi.n	800928e <lv_img_decoder_built_in_open+0x86>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800926a:	7c23      	ldrb	r3, [r4, #16]
 800926c:	b15b      	cbz	r3, 8009286 <lv_img_decoder_built_in_open+0x7e>
            return LV_RES_OK;
 800926e:	2501      	movs	r5, #1
 8009270:	e005      	b.n	800927e <lv_img_decoder_built_in_open+0x76>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8009272:	2d00      	cmp	r5, #0
 8009274:	d1f3      	bne.n	800925e <lv_img_decoder_built_in_open+0x56>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8009276:	684b      	ldr	r3, [r1, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1ef      	bne.n	800925e <lv_img_decoder_built_in_open+0x56>
}
 800927e:	4628      	mov	r0, r5
 8009280:	b002      	add	sp, #8
 8009282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	61a3      	str	r3, [r4, #24]
 800928c:	e7ef      	b.n	800926e <lv_img_decoder_built_in_open+0x66>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800928e:	1fc3      	subs	r3, r0, #7
 8009290:	2b03      	cmp	r3, #3
 8009292:	d870      	bhi.n	8009376 <lv_img_decoder_built_in_open+0x16e>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8009294:	f7fd fcba 	bl	8006c0c <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8009298:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800929a:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800929c:	b943      	cbnz	r3, 80092b0 <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800929e:	2010      	movs	r0, #16
 80092a0:	f006 ff08 	bl	80100b4 <lv_mem_alloc>
 80092a4:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 80092a6:	b900      	cbnz	r0, 80092aa <lv_img_decoder_built_in_open+0xa2>
 80092a8:	e7fe      	b.n	80092a8 <lv_img_decoder_built_in_open+0xa0>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80092aa:	2110      	movs	r1, #16
 80092ac:	f006 ff80 	bl	80101b0 <lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80092b0:	2002      	movs	r0, #2
 80092b2:	40b8      	lsls	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80092b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80092b6:	f006 fefd 	bl	80100b4 <lv_mem_alloc>
 80092ba:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(user_data->palette);
 80092bc:	b900      	cbnz	r0, 80092c0 <lv_img_decoder_built_in_open+0xb8>
 80092be:	e7fe      	b.n	80092be <lv_img_decoder_built_in_open+0xb6>
        uint32_t palette_size = 1 << px_size;
 80092c0:	2001      	movs	r0, #1
 80092c2:	fa00 f707 	lsl.w	r7, r0, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80092c6:	4638      	mov	r0, r7
 80092c8:	f006 fef4 	bl	80100b4 <lv_mem_alloc>
 80092cc:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->opa);
 80092ce:	b900      	cbnz	r0, 80092d2 <lv_img_decoder_built_in_open+0xca>
 80092d0:	e7fe      	b.n	80092d0 <lv_img_decoder_built_in_open+0xc8>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80092d2:	68b3      	ldr	r3, [r6, #8]
 80092d4:	b92b      	cbnz	r3, 80092e2 <lv_img_decoder_built_in_open+0xda>
            lv_img_decoder_built_in_close(decoder, dsc);
 80092d6:	4621      	mov	r1, r4
 80092d8:	4640      	mov	r0, r8
 80092da:	f7ff fd8f 	bl	8008dfc <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 80092de:	2500      	movs	r5, #0
 80092e0:	e7cd      	b.n	800927e <lv_img_decoder_built_in_open+0x76>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80092e2:	7c25      	ldrb	r5, [r4, #16]
 80092e4:	2d01      	cmp	r5, #1
 80092e6:	d126      	bne.n	8009336 <lv_img_decoder_built_in_open+0x12e>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 80092e8:	2200      	movs	r2, #0
 80092ea:	2104      	movs	r1, #4
 80092ec:	4630      	mov	r0, r6
 80092ee:	f006 fbee 	bl	800face <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 80092f2:	2400      	movs	r4, #0
 80092f4:	42bc      	cmp	r4, r7
 80092f6:	d0c2      	beq.n	800927e <lv_img_decoder_built_in_open+0x76>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 80092f8:	2300      	movs	r3, #0
 80092fa:	2204      	movs	r2, #4
 80092fc:	4669      	mov	r1, sp
 80092fe:	4630      	mov	r0, r6
 8009300:	f006 fbca 	bl	800fa98 <lv_fs_read>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8009304:	f89d 3002 	ldrb.w	r3, [sp, #2]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8009308:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800930c:	f89d 0000 	ldrb.w	r0, [sp]
 8009310:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009314:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
 8009318:	08c0      	lsrs	r0, r0, #3
 800931a:	68b2      	ldr	r2, [r6, #8]
 800931c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009320:	0889      	lsrs	r1, r1, #2
 8009322:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8009326:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800932a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800932e:	68f3      	ldr	r3, [r6, #12]
 8009330:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 8009332:	3401      	adds	r4, #1
 8009334:	e7de      	b.n	80092f4 <lv_img_decoder_built_in_open+0xec>
            for(i = 0; i < palette_size; i++) {
 8009336:	2000      	movs	r0, #0
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800933c:	42b8      	cmp	r0, r7
 800933e:	f101 0104 	add.w	r1, r1, #4
 8009342:	d094      	beq.n	800926e <lv_img_decoder_built_in_open+0x66>
 8009344:	f811 3c02 	ldrb.w	r3, [r1, #-2]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8009348:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 800934c:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8009350:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009354:	ea43 1354 	orr.w	r3, r3, r4, lsr #5
 8009358:	08ed      	lsrs	r5, r5, #3
 800935a:	68b2      	ldr	r2, [r6, #8]
 800935c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009360:	08a4      	lsrs	r4, r4, #2
 8009362:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8009366:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800936a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 800936e:	68f3      	ldr	r3, [r6, #12]
 8009370:	541a      	strb	r2, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 8009372:	3001      	adds	r0, #1
 8009374:	e7e2      	b.n	800933c <lv_img_decoder_built_in_open+0x134>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8009376:	f1a0 030b 	sub.w	r3, r0, #11
 800937a:	2b03      	cmp	r3, #3
 800937c:	f67f af77 	bls.w	800926e <lv_img_decoder_built_in_open+0x66>
 8009380:	e7a9      	b.n	80092d6 <lv_img_decoder_built_in_open+0xce>
 8009382:	bf00      	nop
 8009384:	0801a383 	.word	0x0801a383

08009388 <lv_img_decoder_get_info>:
{
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	460f      	mov	r7, r1
 800938e:	4606      	mov	r6, r0
    lv_memset_00(header, sizeof(lv_img_header_t));
 8009390:	2104      	movs	r1, #4
 8009392:	4638      	mov	r0, r7
 8009394:	f006 ff0c 	bl	80101b0 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 8009398:	b91e      	cbnz	r6, 80093a2 <lv_img_decoder_get_info+0x1a>
 800939a:	2500      	movs	r5, #0
}
 800939c:	4628      	mov	r0, r5
 800939e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7fd fc54 	bl	8006c50 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80093a8:	b910      	cbnz	r0, 80093b0 <lv_img_decoder_get_info+0x28>
        if(img_dsc->data == NULL) return LV_RES_INV;
 80093aa:	68b3      	ldr	r3, [r6, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f4      	beq.n	800939a <lv_img_decoder_get_info+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80093b0:	480b      	ldr	r0, [pc, #44]	; (80093e0 <lv_img_decoder_get_info+0x58>)
 80093b2:	f006 fc64 	bl	800fc7e <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 80093b6:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80093b8:	4604      	mov	r4, r0
 80093ba:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80093e0 <lv_img_decoder_get_info+0x58>
 80093be:	2c00      	cmp	r4, #0
 80093c0:	d0ec      	beq.n	800939c <lv_img_decoder_get_info+0x14>
        if(d->info_cb) {
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	b133      	cbz	r3, 80093d4 <lv_img_decoder_get_info+0x4c>
            res = d->info_cb(d, src, header);
 80093c6:	463a      	mov	r2, r7
 80093c8:	4631      	mov	r1, r6
 80093ca:	4620      	mov	r0, r4
 80093cc:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 80093ce:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 80093d0:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 80093d2:	d0e3      	beq.n	800939c <lv_img_decoder_get_info+0x14>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80093d4:	4621      	mov	r1, r4
 80093d6:	4640      	mov	r0, r8
 80093d8:	f006 fc57 	bl	800fc8a <_lv_ll_get_next>
 80093dc:	4604      	mov	r4, r0
 80093de:	e7ee      	b.n	80093be <lv_img_decoder_get_info+0x36>
 80093e0:	20004720 	.word	0x20004720

080093e4 <lv_img_decoder_open>:
{
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	460f      	mov	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 80093ea:	2128      	movs	r1, #40	; 0x28
{
 80093ec:	4604      	mov	r4, r0
 80093ee:	4616      	mov	r6, r2
 80093f0:	461d      	mov	r5, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 80093f2:	f006 fedd 	bl	80101b0 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 80093f6:	b91f      	cbnz	r7, 8009400 <lv_img_decoder_open+0x1c>
 80093f8:	2600      	movs	r6, #0
}
 80093fa:	4630      	mov	r0, r6
 80093fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8009400:	4638      	mov	r0, r7
 8009402:	f7fd fc25 	bl	8006c50 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8009406:	b910      	cbnz	r0, 800940e <lv_img_decoder_open+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f4      	beq.n	80093f8 <lv_img_decoder_open+0x14>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800940e:	2801      	cmp	r0, #1
    dsc->color    = color;
 8009410:	8126      	strh	r6, [r4, #8]
    dsc->src_type = src_type;
 8009412:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 8009414:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8009416:	d11c      	bne.n	8009452 <lv_img_decoder_open+0x6e>
        size_t fnlen = strlen(src);
 8009418:	4638      	mov	r0, r7
 800941a:	f7f6 fea1 	bl	8000160 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800941e:	3001      	adds	r0, #1
 8009420:	f006 fe48 	bl	80100b4 <lv_mem_alloc>
 8009424:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 8009426:	b900      	cbnz	r0, 800942a <lv_img_decoder_open+0x46>
 8009428:	e7fe      	b.n	8009428 <lv_img_decoder_open+0x44>
        strcpy((char *)dsc->src, src);
 800942a:	4639      	mov	r1, r7
 800942c:	f00b ffd2 	bl	80153d4 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009430:	481a      	ldr	r0, [pc, #104]	; (800949c <lv_img_decoder_open+0xb8>)
 8009432:	f006 fc24 	bl	800fc7e <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 8009436:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009438:	4605      	mov	r5, r0
 800943a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800949c <lv_img_decoder_open+0xb8>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800943e:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8009442:	b945      	cbnz	r5, 8009456 <lv_img_decoder_open+0x72>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 8009444:	7c23      	ldrb	r3, [r4, #16]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d1d7      	bne.n	80093fa <lv_img_decoder_open+0x16>
        lv_mem_free((void *)dsc->src);
 800944a:	6860      	ldr	r0, [r4, #4]
 800944c:	f006 fcac 	bl	800fda8 <lv_mem_free>
 8009450:	e7d3      	b.n	80093fa <lv_img_decoder_open+0x16>
        dsc->src = src;
 8009452:	6067      	str	r7, [r4, #4]
 8009454:	e7ec      	b.n	8009430 <lv_img_decoder_open+0x4c>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	b1cb      	cbz	r3, 800948e <lv_img_decoder_open+0xaa>
 800945a:	686a      	ldr	r2, [r5, #4]
 800945c:	b1ba      	cbz	r2, 800948e <lv_img_decoder_open+0xaa>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800945e:	4642      	mov	r2, r8
 8009460:	4639      	mov	r1, r7
 8009462:	4628      	mov	r0, r5
 8009464:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 8009466:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 8009468:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800946a:	d110      	bne.n	800948e <lv_img_decoder_open+0xaa>
        res = decoder->open_cb(decoder, dsc);
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	686b      	ldr	r3, [r5, #4]
        dsc->decoder = decoder;
 8009472:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 8009474:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 8009476:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 8009478:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800947a:	d0be      	beq.n	80093fa <lv_img_decoder_open+0x16>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800947c:	2104      	movs	r1, #4
 800947e:	4640      	mov	r0, r8
 8009480:	f006 fe96 	bl	80101b0 <lv_memset_00>
        dsc->error_msg = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 8009488:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 800948a:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 800948c:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800948e:	4629      	mov	r1, r5
 8009490:	4648      	mov	r0, r9
 8009492:	f006 fbfa 	bl	800fc8a <_lv_ll_get_next>
 8009496:	4605      	mov	r5, r0
 8009498:	e7d3      	b.n	8009442 <lv_img_decoder_open+0x5e>
 800949a:	bf00      	nop
 800949c:	20004720 	.word	0x20004720

080094a0 <lv_img_decoder_read_line>:
{
 80094a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094a2:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 80094a4:	6800      	ldr	r0, [r0, #0]
 80094a6:	6884      	ldr	r4, [r0, #8]
 80094a8:	b144      	cbz	r4, 80094bc <lv_img_decoder_read_line+0x1c>
 80094aa:	9e06      	ldr	r6, [sp, #24]
 80094ac:	e9cd 3600 	strd	r3, r6, [sp]
 80094b0:	4613      	mov	r3, r2
 80094b2:	460a      	mov	r2, r1
 80094b4:	4629      	mov	r1, r5
 80094b6:	47a0      	blx	r4
}
 80094b8:	b002      	add	sp, #8
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 80094bc:	4620      	mov	r0, r4
 80094be:	e7fb      	b.n	80094b8 <lv_img_decoder_read_line+0x18>

080094c0 <lv_img_decoder_close>:
{
 80094c0:	b510      	push	{r4, lr}
 80094c2:	4604      	mov	r4, r0
    if(dsc->decoder) {
 80094c4:	6800      	ldr	r0, [r0, #0]
 80094c6:	b158      	cbz	r0, 80094e0 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80094c8:	68c3      	ldr	r3, [r0, #12]
 80094ca:	b10b      	cbz	r3, 80094d0 <lv_img_decoder_close+0x10>
 80094cc:	4621      	mov	r1, r4
 80094ce:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80094d0:	7c23      	ldrb	r3, [r4, #16]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d104      	bne.n	80094e0 <lv_img_decoder_close+0x20>
            lv_mem_free((void *)dsc->src);
 80094d6:	6860      	ldr	r0, [r4, #4]
 80094d8:	f006 fc66 	bl	800fda8 <lv_mem_free>
            dsc->src = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	6063      	str	r3, [r4, #4]
}
 80094e0:	bd10      	pop	{r4, pc}
	...

080094e4 <lv_img_decoder_create>:
{
 80094e4:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80094e6:	4805      	ldr	r0, [pc, #20]	; (80094fc <lv_img_decoder_create+0x18>)
 80094e8:	f006 fb69 	bl	800fbbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 80094ec:	4604      	mov	r4, r0
 80094ee:	b900      	cbnz	r0, 80094f2 <lv_img_decoder_create+0xe>
 80094f0:	e7fe      	b.n	80094f0 <lv_img_decoder_create+0xc>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80094f2:	2114      	movs	r1, #20
 80094f4:	f006 fe5c 	bl	80101b0 <lv_memset_00>
}
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd10      	pop	{r4, pc}
 80094fc:	20004720 	.word	0x20004720

08009500 <_lv_img_decoder_init>:
{
 8009500:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8009502:	2114      	movs	r1, #20
 8009504:	4807      	ldr	r0, [pc, #28]	; (8009524 <_lv_img_decoder_init+0x24>)
 8009506:	f006 fb52 	bl	800fbae <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800950a:	f7ff ffeb 	bl	80094e4 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800950e:	b900      	cbnz	r0, 8009512 <_lv_img_decoder_init+0x12>
 8009510:	e7fe      	b.n	8009510 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <_lv_img_decoder_init+0x28>)
 8009514:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <_lv_img_decoder_init+0x2c>)
 8009518:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <_lv_img_decoder_init+0x30>)
 800951c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <_lv_img_decoder_init+0x34>)
 8009520:	60c3      	str	r3, [r0, #12]
}
 8009522:	bd08      	pop	{r3, pc}
 8009524:	20004720 	.word	0x20004720
 8009528:	08008e2d 	.word	0x08008e2d
 800952c:	08009209 	.word	0x08009209
 8009530:	08008ed9 	.word	0x08008ed9
 8009534:	08008dfd 	.word	0x08008dfd

08009538 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 8009538:	4770      	bx	lr
	...

0800953c <lv_draw_sw_init_ctx>:
{
 800953c:	b510      	push	{r4, lr}
 800953e:	460c      	mov	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8009540:	2138      	movs	r1, #56	; 0x38
 8009542:	4620      	mov	r0, r4
 8009544:	f006 fe34 	bl	80101b0 <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8009548:	4b08      	ldr	r3, [pc, #32]	; (800956c <lv_draw_sw_init_ctx+0x30>)
 800954a:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 800954c:	4b08      	ldr	r3, [pc, #32]	; (8009570 <lv_draw_sw_init_ctx+0x34>)
 800954e:	60e3      	str	r3, [r4, #12]
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8009550:	4b08      	ldr	r3, [pc, #32]	; (8009574 <lv_draw_sw_init_ctx+0x38>)
 8009552:	61e3      	str	r3, [r4, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <lv_draw_sw_init_ctx+0x3c>)
 8009556:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8009558:	4b08      	ldr	r3, [pc, #32]	; (800957c <lv_draw_sw_init_ctx+0x40>)
 800955a:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 800955c:	4b08      	ldr	r3, [pc, #32]	; (8009580 <lv_draw_sw_init_ctx+0x44>)
 800955e:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <lv_draw_sw_init_ctx+0x48>)
 8009562:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8009564:	4b08      	ldr	r3, [pc, #32]	; (8009588 <lv_draw_sw_init_ctx+0x4c>)
 8009566:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop
 800956c:	08009615 	.word	0x08009615
 8009570:	0800c49f 	.word	0x0800c49f
 8009574:	0800afa9 	.word	0x0800afa9
 8009578:	0800aaa1 	.word	0x0800aaa1
 800957c:	0800b361 	.word	0x0800b361
 8009580:	0800ba81 	.word	0x0800ba81
 8009584:	08009539 	.word	0x08009539
 8009588:	0800a175 	.word	0x0800a175

0800958c <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 800958c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009590:	4607      	mov	r7, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8009592:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8009596:	b200      	sxth	r0, r0
 8009598:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
    int32_t thick_half = thickness / 2;
 800959c:	0856      	lsrs	r6, r2, #1
{
 800959e:	4690      	mov	r8, r2
 80095a0:	461d      	mov	r5, r3
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80095a2:	f006 fb85 	bl	800fcb0 <lv_trigo_sin>
 80095a6:	fb09 f400 	mul.w	r4, r9, r0
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80095aa:	4638      	mov	r0, r7
 80095ac:	f006 fb80 	bl	800fcb0 <lv_trigo_sin>
 80095b0:	ea6f 0208 	mvn.w	r2, r8
 80095b4:	fb09 f000 	mul.w	r0, r9, r0
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80095b8:	11e4      	asrs	r4, r4, #7

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 80095ba:	2c00      	cmp	r4, #0
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80095bc:	ea4f 10e0 	mov.w	r0, r0, asr #7
    if(cir_x > 0) {
 80095c0:	b2b6      	uxth	r6, r6
 80095c2:	f002 0301 	and.w	r3, r2, #1
 80095c6:	dd14      	ble.n	80095f2 <get_rounded_area+0x66>
        cir_x = (cir_x - pa) >> ps;
 80095c8:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 80095ca:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80095ce:	1b9a      	subs	r2, r3, r6
 80095d0:	4422      	add	r2, r4
 80095d2:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half;
 80095d4:	4434      	add	r4, r6
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 80095d6:	2800      	cmp	r0, #0
        res_area->x2 = cir_x + thick_half - thick_corr;
 80095d8:	80ac      	strh	r4, [r5, #4]
    if(cir_y > 0) {
 80095da:	dd12      	ble.n	8009602 <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 80095dc:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 80095e0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80095e4:	1b9a      	subs	r2, r3, r6
 80095e6:	440a      	add	r2, r1
        res_area->y2 = cir_y + thick_half;
 80095e8:	4431      	add	r1, r6
        res_area->y1 = cir_y - thick_half + thick_corr;
 80095ea:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 80095ec:	80e9      	strh	r1, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 80095ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 80095f2:	347f      	adds	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 80095f4:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80095f8:	1ba2      	subs	r2, r4, r6
 80095fa:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 80095fc:	1af2      	subs	r2, r6, r3
 80095fe:	4414      	add	r4, r2
 8009600:	e7e9      	b.n	80095d6 <get_rounded_area+0x4a>
        cir_y = (cir_y + pa) >> ps;
 8009602:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 8009604:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8009608:	1b82      	subs	r2, r0, r6
 800960a:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 800960c:	1af2      	subs	r2, r6, r3
 800960e:	4410      	add	r0, r2
 8009610:	80e8      	strh	r0, [r5, #6]
}
 8009612:	e7ec      	b.n	80095ee <get_rounded_area+0x62>

08009614 <lv_draw_sw_arc>:
{
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	b0d1      	sub	sp, #324	; 0x144
 800961a:	9303      	str	r3, [sp, #12]
    if(dsc->opa <= LV_OPA_MIN) return;
 800961c:	7b0b      	ldrb	r3, [r1, #12]
{
 800961e:	4606      	mov	r6, r0
    if(dsc->opa <= LV_OPA_MIN) return;
 8009620:	2b02      	cmp	r3, #2
{
 8009622:	4614      	mov	r4, r2
 8009624:	f8bd 7168 	ldrh.w	r7, [sp, #360]	; 0x168
 8009628:	f8bd 516c 	ldrh.w	r5, [sp, #364]	; 0x16c
 800962c:	9109      	str	r1, [sp, #36]	; 0x24
    if(dsc->opa <= LV_OPA_MIN) return;
 800962e:	f240 8095 	bls.w	800975c <lv_draw_sw_arc+0x148>
    if(dsc->width == 0) return;
 8009632:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8009636:	9306      	str	r3, [sp, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 808f 	beq.w	800975c <lv_draw_sw_arc+0x148>
    if(start_angle == end_angle) return;
 800963e:	42af      	cmp	r7, r5
 8009640:	f000 808c 	beq.w	800975c <lv_draw_sw_arc+0x148>
    if(width > radius) width = radius;
 8009644:	9a03      	ldr	r2, [sp, #12]
    lv_draw_rect_dsc_init(&cir_dsc);
 8009646:	a828      	add	r0, sp, #160	; 0xa0
    if(width > radius) width = radius;
 8009648:	4293      	cmp	r3, r2
 800964a:	bfc4      	itt	gt
 800964c:	f9bd 300c 	ldrshgt.w	r3, [sp, #12]
 8009650:	9306      	strgt	r3, [sp, #24]
    lv_draw_rect_dsc_init(&cir_dsc);
 8009652:	f7fe fef3 	bl	800843c <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	7b5b      	ldrb	r3, [r3, #13]
 800965a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800965e:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
    if(dsc->img_src) {
 8009662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	7b1b      	ldrb	r3, [r3, #12]
 8009668:	2a00      	cmp	r2, #0
 800966a:	d07a      	beq.n	8009762 <lv_draw_sw_arc+0x14e>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 800966c:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 800966e:	922b      	str	r2, [sp, #172]	; 0xac
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8009670:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
        cir_dsc.bg_img_opa = dsc->opa;
 8009674:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
    area_out.x1 = center->x - radius;
 8009678:	8822      	ldrh	r2, [r4, #0]
 800967a:	9b03      	ldr	r3, [sp, #12]
    area_out.y1 = center->y - radius;
 800967c:	9903      	ldr	r1, [sp, #12]
    area_out.x1 = center->x - radius;
 800967e:	1ad0      	subs	r0, r2, r3
    area_out.y1 = center->y - radius;
 8009680:	8863      	ldrh	r3, [r4, #2]
    area_out.x1 = center->x - radius;
 8009682:	b280      	uxth	r0, r0
    area_out.y1 = center->y - radius;
 8009684:	1a59      	subs	r1, r3, r1
 8009686:	fa1f fe81 	uxth.w	lr, r1
 800968a:	9903      	ldr	r1, [sp, #12]
    area_out.x1 = center->x - radius;
 800968c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    area_out.y1 = center->y - radius;
 8009690:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    area_in.x1 += dsc->width;
 8009694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009696:	fa1f fc8c 	uxth.w	ip, ip
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800969a:	4462      	add	r2, ip
    area_out.y2 = center->y + radius - 1;
 800969c:	4463      	add	r3, ip
    area_in.x1 += dsc->width;
 800969e:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80096a2:	b292      	uxth	r2, r2
 80096a4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    area_in.x2 -= dsc->width;
 80096a8:	eba2 020c 	sub.w	r2, r2, ip
 80096ac:	b292      	uxth	r2, r2
    area_in.x1 += dsc->width;
 80096ae:	4460      	add	r0, ip
 80096b0:	b280      	uxth	r0, r0
    area_in.x2 -= dsc->width;
 80096b2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80096b6:	3201      	adds	r2, #1
    area_out.y2 = center->y + radius - 1;
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	1a12      	subs	r2, r2, r0
 80096bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    area_in.y1 += dsc->width;
 80096c0:	eb0e 010c 	add.w	r1, lr, ip
    area_in.y2 -= dsc->width;
 80096c4:	eba3 030c 	sub.w	r3, r3, ip
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80096c8:	b212      	sxth	r2, r2
    area_in.y1 += dsc->width;
 80096ca:	b289      	uxth	r1, r1
    area_in.y2 -= dsc->width;
 80096cc:	b29b      	uxth	r3, r3
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80096ce:	2a00      	cmp	r2, #0
    area_out.y1 = center->y - radius;
 80096d0:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
    area_in.x1 += dsc->width;
 80096d4:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    area_in.y1 += dsc->width;
 80096d8:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
    area_in.y2 -= dsc->width;
 80096dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80096e0:	dd46      	ble.n	8009770 <lv_draw_sw_arc+0x15c>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80096e2:	3301      	adds	r3, #1
 80096e4:	1a5b      	subs	r3, r3, r1
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dd41      	ble.n	8009770 <lv_draw_sw_arc+0x15c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 80096ec:	2301      	movs	r3, #1
 80096ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80096f2:	a910      	add	r1, sp, #64	; 0x40
 80096f4:	a816      	add	r0, sp, #88	; 0x58
 80096f6:	f7fe fc8d 	bl	8008014 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 80096fa:	2100      	movs	r1, #0
 80096fc:	a816      	add	r0, sp, #88	; 0x58
 80096fe:	f7fe fadd 	bl	8007cbc <lv_draw_mask_add>
 8009702:	900a      	str	r0, [sp, #40]	; 0x28
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8009704:	2300      	movs	r3, #0
 8009706:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800970a:	a90e      	add	r1, sp, #56	; 0x38
 800970c:	a81c      	add	r0, sp, #112	; 0x70
 800970e:	f7fe fc81 	bl	8008014 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8009712:	2100      	movs	r1, #0
 8009714:	a81c      	add	r0, sp, #112	; 0x70
 8009716:	f7fe fad1 	bl	8007cbc <lv_draw_mask_add>
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800971a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800971e:	42ab      	cmp	r3, r5
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8009720:	900b      	str	r0, [sp, #44]	; 0x2c
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8009722:	d003      	beq.n	800972c <lv_draw_sw_arc+0x118>
 8009724:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 8009728:	429f      	cmp	r7, r3
 800972a:	d128      	bne.n	800977e <lv_draw_sw_arc+0x16a>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800972c:	f647 73ff 	movw	r3, #32767	; 0x7fff
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009730:	a928      	add	r1, sp, #160	; 0xa0
 8009732:	4630      	mov	r0, r6
 8009734:	aa0e      	add	r2, sp, #56	; 0x38
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8009736:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800973a:	f7fe fea1 	bl	8008480 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 800973e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009740:	f7fe faf4 	bl	8007d2c <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	1c59      	adds	r1, r3, #1
 8009748:	d002      	beq.n	8009750 <lv_draw_sw_arc+0x13c>
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe faee 	bl	8007d2c <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 8009750:	a81c      	add	r0, sp, #112	; 0x70
 8009752:	f7fe fb13 	bl	8007d7c <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&mask_in_param);
 8009756:	a816      	add	r0, sp, #88	; 0x58
 8009758:	f7fe fb10 	bl	8007d7c <lv_draw_mask_free_param>
}
 800975c:	b051      	add	sp, #324	; 0x144
 800975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 8009762:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
        cir_dsc.bg_color = dsc->color;
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 800976e:	e783      	b.n	8009678 <lv_draw_sw_arc+0x64>
    int16_t mask_in_id = LV_MASK_ID_INV;
 8009770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009774:	930a      	str	r3, [sp, #40]	; 0x28
 8009776:	e7c5      	b.n	8009704 <lv_draw_sw_arc+0xf0>
    while(start_angle >= 360) start_angle -= 360;
 8009778:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 800977c:	b2bf      	uxth	r7, r7
 800977e:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 8009782:	d2f9      	bcs.n	8009778 <lv_draw_sw_arc+0x164>
    while(end_angle >= 360) end_angle -= 360;
 8009784:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8009788:	f080 81f4 	bcs.w	8009b74 <lv_draw_sw_arc+0x560>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 800978c:	b23b      	sxth	r3, r7
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	b22b      	sxth	r3, r5
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8009798:	f9b4 1000 	ldrsh.w	r1, [r4]
 800979c:	9308      	str	r3, [sp, #32]
 800979e:	a835      	add	r0, sp, #212	; 0xd4
 80097a0:	9b07      	ldr	r3, [sp, #28]
 80097a2:	f7fe fbf1 	bl	8007f88 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80097a6:	2100      	movs	r1, #0
 80097a8:	a835      	add	r0, sp, #212	; 0xd4
 80097aa:	f7fe fa87 	bl	8007cbc <lv_draw_mask_add>
    if(end_angle > start_angle) {
 80097ae:	42af      	cmp	r7, r5
        angle_gap = 360 - (end_angle - start_angle);
 80097b0:	bf3a      	itte	cc
 80097b2:	1beb      	subcc	r3, r5, r7
 80097b4:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
        angle_gap = start_angle - end_angle;
 80097b8:	1b7b      	subcs	r3, r7, r5
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 80097ba:	2b3c      	cmp	r3, #60	; 0x3c
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80097bc:	f8d6 9008 	ldr.w	r9, [r6, #8]
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80097c0:	900c      	str	r0, [sp, #48]	; 0x30
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 80097c2:	f340 83b3 	ble.w	8009f2c <lv_draw_sw_arc+0x918>
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	2b0a      	cmp	r3, #10
 80097ca:	f240 83af 	bls.w	8009f2c <lv_draw_sw_arc+0x918>
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80097ce:	235a      	movs	r3, #90	; 0x5a
 80097d0:	fbb7 f2f3 	udiv	r2, r7, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80097d4:	fbb5 f3f3 	udiv	r3, r5, r3
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80097d8:	2f59      	cmp	r7, #89	; 0x59
        q_dsc.radius = radius;
 80097da:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80097de:	9205      	str	r2, [sp, #20]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80097e0:	9304      	str	r3, [sp, #16]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80097e2:	f200 81cb 	bhi.w	8009b7c <lv_draw_sw_arc+0x568>
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	2d59      	cmp	r5, #89	; 0x59
 80097ea:	eba8 0a03 	sub.w	sl, r8, r3
 80097ee:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80097f2:	b21b      	sxth	r3, r3
 80097f4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80097f8:	930d      	str	r3, [sp, #52]	; 0x34
 80097fa:	f200 81e3 	bhi.w	8009bc4 <lv_draw_sw_arc+0x5b0>
 80097fe:	42af      	cmp	r7, r5
 8009800:	f080 81e0 	bcs.w	8009bc4 <lv_draw_sw_arc+0x5b0>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009804:	9807      	ldr	r0, [sp, #28]
 8009806:	f006 fa53 	bl	800fcb0 <lv_trigo_sin>
 800980a:	fb0a f000 	mul.w	r0, sl, r0
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800980e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009810:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009814:	4618      	mov	r0, r3
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009816:	f8ad b08a 	strh.w	fp, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800981a:	f8b4 b000 	ldrh.w	fp, [r4]
 800981e:	f006 fa47 	bl	800fcb0 <lv_trigo_sin>
 8009822:	fb08 f000 	mul.w	r0, r8, r0
 8009826:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800982a:	9808      	ldr	r0, [sp, #32]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800982c:	f8ad b08c 	strh.w	fp, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009830:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009834:	f006 fa3c 	bl	800fcb0 <lv_trigo_sin>
 8009838:	fb08 f000 	mul.w	r0, r8, r0
 800983c:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009840:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8009844:	b200      	sxth	r0, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009846:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800984a:	f8b4 b000 	ldrh.w	fp, [r4]
 800984e:	f006 fa2f 	bl	800fcb0 <lv_trigo_sin>
 8009852:	fb0a fa00 	mul.w	sl, sl, r0
 8009856:	eb0b 3bea 	add.w	fp, fp, sl, asr #15
 800985a:	f8ad b088 	strh.w	fp, [sp, #136]	; 0x88
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800985e:	a922      	add	r1, sp, #136	; 0x88
 8009860:	464a      	mov	r2, r9
 8009862:	4608      	mov	r0, r1
 8009864:	f005 ff3f 	bl	800f6e6 <_lv_area_intersect>
        if(ok) {
 8009868:	b128      	cbz	r0, 8009876 <lv_draw_sw_arc+0x262>
            q->draw_ctx->clip_area = &quarter_area;
 800986a:	aa22      	add	r2, sp, #136	; 0x88
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 800986c:	4630      	mov	r0, r6
            q->draw_ctx->clip_area = &quarter_area;
 800986e:	60b2      	str	r2, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009870:	a928      	add	r1, sp, #160	; 0xa0
 8009872:	f7fe fe05 	bl	8008480 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8009876:	9b05      	ldr	r3, [sp, #20]
    q->draw_ctx->clip_area = clip_area_ori;
 8009878:	f8c6 9008 	str.w	r9, [r6, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800987c:	2b01      	cmp	r3, #1
 800987e:	f040 81f9 	bne.w	8009c74 <lv_draw_sw_arc+0x660>
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	9a04      	ldr	r2, [sp, #16]
 8009886:	eba8 0a03 	sub.w	sl, r8, r3
 800988a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 800988e:	b21b      	sxth	r3, r3
 8009890:	2a01      	cmp	r2, #1
 8009892:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009896:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800989a:	930d      	str	r3, [sp, #52]	; 0x34
 800989c:	f040 8203 	bne.w	8009ca6 <lv_draw_sw_arc+0x692>
 80098a0:	42af      	cmp	r7, r5
 80098a2:	f080 8200 	bcs.w	8009ca6 <lv_draw_sw_arc+0x692>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80098a6:	9807      	ldr	r0, [sp, #28]
 80098a8:	f006 fa02 	bl	800fcb0 <lv_trigo_sin>
 80098ac:	fb08 f000 	mul.w	r0, r8, r0
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80098b2:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098b6:	4618      	mov	r0, r3
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80098b8:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098bc:	f8b4 b000 	ldrh.w	fp, [r4]
 80098c0:	f006 f9f6 	bl	800fcb0 <lv_trigo_sin>
 80098c4:	fb0a f000 	mul.w	r0, sl, r0
 80098c8:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098cc:	9808      	ldr	r0, [sp, #32]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098ce:	f8ad b08c 	strh.w	fp, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80098d2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80098d6:	f006 f9eb 	bl	800fcb0 <lv_trigo_sin>
 80098da:	fb0a fa00 	mul.w	sl, sl, r0
 80098de:	eb0b 3bea 	add.w	fp, fp, sl, asr #15
 80098e2:	f8ad b08a 	strh.w	fp, [sp, #138]	; 0x8a
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80098e6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80098ea:	b200      	sxth	r0, r0
 80098ec:	f8b4 a000 	ldrh.w	sl, [r4]
 80098f0:	f006 f9de 	bl	800fcb0 <lv_trigo_sin>
 80098f4:	fb08 f000 	mul.w	r0, r8, r0
 80098f8:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 80098fc:	f8ad a088 	strh.w	sl, [sp, #136]	; 0x88
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009900:	a922      	add	r1, sp, #136	; 0x88
 8009902:	464a      	mov	r2, r9
 8009904:	4608      	mov	r0, r1
 8009906:	f005 feee 	bl	800f6e6 <_lv_area_intersect>
        if(ok) {
 800990a:	b128      	cbz	r0, 8009918 <lv_draw_sw_arc+0x304>
            q->draw_ctx->clip_area = &quarter_area;
 800990c:	aa22      	add	r2, sp, #136	; 0x88
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 800990e:	4630      	mov	r0, r6
            q->draw_ctx->clip_area = &quarter_area;
 8009910:	60b2      	str	r2, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009912:	a928      	add	r1, sp, #160	; 0xa0
 8009914:	f7fe fdb4 	bl	8008480 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8009918:	9b05      	ldr	r3, [sp, #20]
    q->draw_ctx->clip_area = clip_area_ori;
 800991a:	f8c6 9008 	str.w	r9, [r6, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800991e:	2b02      	cmp	r3, #2
 8009920:	f040 8219 	bne.w	8009d56 <lv_draw_sw_arc+0x742>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 800992a:	eba8 0a03 	sub.w	sl, r8, r3
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	f8b4 b000 	ldrh.w	fp, [r4]
 8009934:	2b02      	cmp	r3, #2
 8009936:	b200      	sxth	r0, r0
 8009938:	f040 8234 	bne.w	8009da4 <lv_draw_sw_arc+0x790>
 800993c:	42af      	cmp	r7, r5
 800993e:	f080 8231 	bcs.w	8009da4 <lv_draw_sw_arc+0x790>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009942:	f006 f9b5 	bl	800fcb0 <lv_trigo_sin>
 8009946:	fb08 f000 	mul.w	r0, r8, r0
 800994a:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800994e:	9807      	ldr	r0, [sp, #28]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009950:	f8ad b088 	strh.w	fp, [sp, #136]	; 0x88
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009954:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009958:	f006 f9aa 	bl	800fcb0 <lv_trigo_sin>
 800995c:	fb0a f000 	mul.w	r0, sl, r0
 8009960:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009964:	9808      	ldr	r0, [sp, #32]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009966:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800996a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800996e:	f006 f99f 	bl	800fcb0 <lv_trigo_sin>
 8009972:	fb08 f000 	mul.w	r0, r8, r0
 8009976:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800997a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800997e:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009980:	f8ad b08a 	strh.w	fp, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009984:	f8b4 b000 	ldrh.w	fp, [r4]
 8009988:	f006 f992 	bl	800fcb0 <lv_trigo_sin>
 800998c:	fb0a fa00 	mul.w	sl, sl, r0
 8009990:	eb0b 3bea 	add.w	fp, fp, sl, asr #15
 8009994:	f8ad b08c 	strh.w	fp, [sp, #140]	; 0x8c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009998:	a922      	add	r1, sp, #136	; 0x88
 800999a:	464a      	mov	r2, r9
 800999c:	4608      	mov	r0, r1
 800999e:	f005 fea2 	bl	800f6e6 <_lv_area_intersect>
        if(ok) {
 80099a2:	b128      	cbz	r0, 80099b0 <lv_draw_sw_arc+0x39c>
            q->draw_ctx->clip_area = &quarter_area;
 80099a4:	aa22      	add	r2, sp, #136	; 0x88
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 80099a6:	4630      	mov	r0, r6
            q->draw_ctx->clip_area = &quarter_area;
 80099a8:	60b2      	str	r2, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 80099aa:	a928      	add	r1, sp, #160	; 0xa0
 80099ac:	f7fe fd68 	bl	8008480 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80099b0:	9b05      	ldr	r3, [sp, #20]
    q->draw_ctx->clip_area = clip_area_ori;
 80099b2:	f8c6 9008 	str.w	r9, [r6, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	f040 824c 	bne.w	8009e54 <lv_draw_sw_arc+0x840>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80099c2:	eba8 0a03 	sub.w	sl, r8, r3
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	f8b4 b000 	ldrh.w	fp, [r4]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	b200      	sxth	r0, r0
 80099d0:	f040 8263 	bne.w	8009e9a <lv_draw_sw_arc+0x886>
 80099d4:	42af      	cmp	r7, r5
 80099d6:	f080 8260 	bcs.w	8009e9a <lv_draw_sw_arc+0x886>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80099da:	f006 f969 	bl	800fcb0 <lv_trigo_sin>
 80099de:	fb0a f000 	mul.w	r0, sl, r0
 80099e2:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80099e6:	9807      	ldr	r0, [sp, #28]
 80099e8:	8867      	ldrh	r7, [r4, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80099ea:	f8ad b088 	strh.w	fp, [sp, #136]	; 0x88
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80099ee:	f006 f95f 	bl	800fcb0 <lv_trigo_sin>
 80099f2:	fb08 f000 	mul.w	r0, r8, r0
 80099f6:	eb07 37e0 	add.w	r7, r7, r0, asr #15
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80099fa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80099fe:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009a00:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009a04:	8827      	ldrh	r7, [r4, #0]
 8009a06:	f006 f953 	bl	800fcb0 <lv_trigo_sin>
 8009a0a:	fb08 f800 	mul.w	r8, r8, r0
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009a0e:	9808      	ldr	r0, [sp, #32]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009a10:	eb07 37e8 	add.w	r7, r7, r8, asr #15
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009a14:	8865      	ldrh	r5, [r4, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009a16:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009a1a:	f006 f949 	bl	800fcb0 <lv_trigo_sin>
 8009a1e:	fb0a fa00 	mul.w	sl, sl, r0
 8009a22:	eb05 35ea 	add.w	r5, r5, sl, asr #15
 8009a26:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009a2a:	a922      	add	r1, sp, #136	; 0x88
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	4608      	mov	r0, r1
 8009a30:	f005 fe59 	bl	800f6e6 <_lv_area_intersect>
        if(ok) {
 8009a34:	b128      	cbz	r0, 8009a42 <lv_draw_sw_arc+0x42e>
            q->draw_ctx->clip_area = &quarter_area;
 8009a36:	aa22      	add	r2, sp, #136	; 0x88
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009a38:	4630      	mov	r0, r6
            q->draw_ctx->clip_area = &quarter_area;
 8009a3a:	60b2      	str	r2, [r6, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009a3c:	a928      	add	r1, sp, #160	; 0xa0
 8009a3e:	f7fe fd1f 	bl	8008480 <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 8009a42:	f8c6 9008 	str.w	r9, [r6, #8]
    lv_draw_mask_free_param(&mask_angle_param);
 8009a46:	a835      	add	r0, sp, #212	; 0xd4
 8009a48:	f7fe f998 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8009a4c:	a81c      	add	r0, sp, #112	; 0x70
 8009a4e:	f7fe f995 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 8009a52:	a816      	add	r0, sp, #88	; 0x58
 8009a54:	f7fe f992 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_angle_id);
 8009a58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a5a:	f7fe f967 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8009a5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a60:	f7fe f964 	bl	8007d2c <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	d002      	beq.n	8009a70 <lv_draw_sw_arc+0x45c>
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe f95e 	bl	8007d2c <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 8009a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a72:	7b5b      	ldrb	r3, [r3, #13]
 8009a74:	075b      	lsls	r3, r3, #29
 8009a76:	f57f ae71 	bpl.w	800975c <lv_draw_sw_arc+0x148>
        get_rounded_area(start_angle, radius, width, &round_area);
 8009a7a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8009a7e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8009a82:	4629      	mov	r1, r5
 8009a84:	463a      	mov	r2, r7
 8009a86:	9807      	ldr	r0, [sp, #28]
 8009a88:	ab12      	add	r3, sp, #72	; 0x48
 8009a8a:	f7ff fd7f 	bl	800958c <get_rounded_area>
        round_area.x1 += center->x;
 8009a8e:	8823      	ldrh	r3, [r4, #0]
 8009a90:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009a94:	4649      	mov	r1, r9
        round_area.x1 += center->x;
 8009a96:	441a      	add	r2, r3
 8009a98:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        round_area.x2 += center->x;
 8009a9c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009aa0:	a814      	add	r0, sp, #80	; 0x50
        round_area.x2 += center->x;
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.y1 += center->y;
 8009aa8:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8009aac:	8863      	ldrh	r3, [r4, #2]
 8009aae:	441a      	add	r2, r3
 8009ab0:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        round_area.y2 += center->y;
 8009ab4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8009ab8:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009aba:	aa12      	add	r2, sp, #72	; 0x48
        round_area.y2 += center->y;
 8009abc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009ac0:	f005 fe11 	bl	800f6e6 <_lv_area_intersect>
 8009ac4:	b1c0      	cbz	r0, 8009af8 <lv_draw_sw_arc+0x4e4>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009acc:	a912      	add	r1, sp, #72	; 0x48
 8009ace:	a822      	add	r0, sp, #136	; 0x88
 8009ad0:	f7fe faa0 	bl	8008014 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	a822      	add	r0, sp, #136	; 0x88
 8009ad8:	f7fe f8f0 	bl	8007cbc <lv_draw_mask_add>
 8009adc:	4680      	mov	r8, r0
            draw_ctx->clip_area = &clip_area2;
 8009ade:	ab14      	add	r3, sp, #80	; 0x50
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009ae0:	4630      	mov	r0, r6
            draw_ctx->clip_area = &clip_area2;
 8009ae2:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009ae4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ae6:	a928      	add	r1, sp, #160	; 0xa0
 8009ae8:	f7fe fcca 	bl	8008480 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8009aec:	4640      	mov	r0, r8
 8009aee:	f7fe f91d 	bl	8007d2c <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8009af2:	a822      	add	r0, sp, #136	; 0x88
 8009af4:	f7fe f942 	bl	8007d7c <lv_draw_mask_free_param>
        get_rounded_area(end_angle, radius, width, &round_area);
 8009af8:	463a      	mov	r2, r7
 8009afa:	4629      	mov	r1, r5
 8009afc:	9808      	ldr	r0, [sp, #32]
 8009afe:	ab12      	add	r3, sp, #72	; 0x48
 8009b00:	f7ff fd44 	bl	800958c <get_rounded_area>
        round_area.x1 += center->x;
 8009b04:	8823      	ldrh	r3, [r4, #0]
 8009b06:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009b0a:	4649      	mov	r1, r9
        round_area.x1 += center->x;
 8009b0c:	441a      	add	r2, r3
 8009b0e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        round_area.x2 += center->x;
 8009b12:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009b16:	a814      	add	r0, sp, #80	; 0x50
        round_area.x2 += center->x;
 8009b18:	4413      	add	r3, r2
 8009b1a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.y1 += center->y;
 8009b1e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8009b22:	8863      	ldrh	r3, [r4, #2]
 8009b24:	441a      	add	r2, r3
 8009b26:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        round_area.y2 += center->y;
 8009b2a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8009b2e:	4413      	add	r3, r2
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009b30:	aa12      	add	r2, sp, #72	; 0x48
        round_area.y2 += center->y;
 8009b32:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8009b36:	f005 fdd6 	bl	800f6e6 <_lv_area_intersect>
 8009b3a:	b1c0      	cbz	r0, 8009b6e <lv_draw_sw_arc+0x55a>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009b42:	a912      	add	r1, sp, #72	; 0x48
 8009b44:	a822      	add	r0, sp, #136	; 0x88
 8009b46:	f7fe fa65 	bl	8008014 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	a822      	add	r0, sp, #136	; 0x88
 8009b4e:	f7fe f8b5 	bl	8007cbc <lv_draw_mask_add>
 8009b52:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 8009b54:	ab14      	add	r3, sp, #80	; 0x50
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009b56:	4630      	mov	r0, r6
            draw_ctx->clip_area = &clip_area2;
 8009b58:	60b3      	str	r3, [r6, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009b5a:	aa0e      	add	r2, sp, #56	; 0x38
 8009b5c:	a928      	add	r1, sp, #160	; 0xa0
 8009b5e:	f7fe fc8f 	bl	8008480 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7fe f8e2 	bl	8007d2c <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8009b68:	a822      	add	r0, sp, #136	; 0x88
 8009b6a:	f7fe f907 	bl	8007d7c <lv_draw_mask_free_param>
        draw_ctx->clip_area = clip_area_ori;
 8009b6e:	f8c6 9008 	str.w	r9, [r6, #8]
 8009b72:	e5f3      	b.n	800975c <lv_draw_sw_arc+0x148>
    while(end_angle >= 360) end_angle -= 360;
 8009b74:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8009b78:	b2ad      	uxth	r5, r5
 8009b7a:	e603      	b.n	8009784 <lv_draw_sw_arc+0x170>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8009b7c:	2d59      	cmp	r5, #89	; 0x59
 8009b7e:	d851      	bhi.n	8009c24 <lv_draw_sw_arc+0x610>
            quarter_area.x2 = q->center->x + q->radius;
 8009b80:	9a03      	ldr	r2, [sp, #12]
 8009b82:	8823      	ldrh	r3, [r4, #0]
            quarter_area.y1 = q->center->y;
 8009b84:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
            quarter_area.x2 = q->center->x + q->radius;
 8009b88:	4413      	add	r3, r2
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009b8a:	9808      	ldr	r0, [sp, #32]
            quarter_area.x2 = q->center->x + q->radius;
 8009b8c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y;
 8009b90:	f8ad a08a 	strh.w	sl, [sp, #138]	; 0x8a
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009b94:	f006 f88c 	bl	800fcb0 <lv_trigo_sin>
 8009b98:	fb08 f000 	mul.w	r0, r8, r0
 8009b9c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009ba0:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8009ba4:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009ba6:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009baa:	f8b4 a000 	ldrh.w	sl, [r4]
 8009bae:	f006 f87f 	bl	800fcb0 <lv_trigo_sin>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	eba8 0303 	sub.w	r3, r8, r3
 8009bb8:	4358      	muls	r0, r3
 8009bba:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8009bbe:	f8ad a088 	strh.w	sl, [sp, #136]	; 0x88
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009bc2:	e64c      	b.n	800985e <lv_draw_sw_arc+0x24a>
            quarter_area.x1 = q->center->x;
 8009bc4:	8822      	ldrh	r2, [r4, #0]
            quarter_area.y2 = q->center->y + q->radius;
 8009bc6:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x1 = q->center->x;
 8009bc8:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009bcc:	9807      	ldr	r0, [sp, #28]
            quarter_area.y2 = q->center->y + q->radius;
 8009bce:	eb03 020b 	add.w	r2, r3, fp
 8009bd2:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009bd6:	f006 f86b 	bl	800fcb0 <lv_trigo_sin>
 8009bda:	fb0a fa00 	mul.w	sl, sl, r0
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009be0:	eb0b 3bea 	add.w	fp, fp, sl, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009be4:	4618      	mov	r0, r3
 8009be6:	f8b4 a000 	ldrh.w	sl, [r4]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009bea:	f8ad b08a 	strh.w	fp, [sp, #138]	; 0x8a
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009bee:	f006 f85f 	bl	800fcb0 <lv_trigo_sin>
 8009bf2:	fb08 f000 	mul.w	r0, r8, r0
 8009bf6:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8009bfa:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009bfe:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8009c02:	464a      	mov	r2, r9
 8009c04:	4651      	mov	r1, sl
 8009c06:	4650      	mov	r0, sl
 8009c08:	f005 fd6d 	bl	800f6e6 <_lv_area_intersect>
            if(ok) {
 8009c0c:	b130      	cbz	r0, 8009c1c <lv_draw_sw_arc+0x608>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009c0e:	4652      	mov	r2, sl
 8009c10:	4630      	mov	r0, r6
                q->draw_ctx->clip_area = &quarter_area;
 8009c12:	f8c6 a008 	str.w	sl, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009c16:	a928      	add	r1, sp, #160	; 0xa0
 8009c18:	f7fe fc32 	bl	8008480 <lv_draw_rect>
        if(q->end_quarter == 0) {
 8009c1c:	2d59      	cmp	r5, #89	; 0x59
 8009c1e:	f63f ae2a 	bhi.w	8009876 <lv_draw_sw_arc+0x262>
 8009c22:	e7ad      	b.n	8009b80 <lv_draw_sw_arc+0x56c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8009c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d101      	bne.n	8009c30 <lv_draw_sw_arc+0x61c>
 8009c2c:	42af      	cmp	r7, r5
 8009c2e:	d806      	bhi.n	8009c3e <lv_draw_sw_arc+0x62a>
 8009c30:	9b05      	ldr	r3, [sp, #20]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d113      	bne.n	8009c5e <lv_draw_sw_arc+0x64a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	f47f ae1c 	bne.w	8009876 <lv_draw_sw_arc+0x262>
        quarter_area.x1 = q->center->x;
 8009c3e:	f9b4 2000 	ldrsh.w	r2, [r4]
        quarter_area.y1 = q->center->y;
 8009c42:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        quarter_area.x2 = q->center->x + q->radius;
 8009c46:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x;
 8009c48:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
        quarter_area.y1 = q->center->y;
 8009c4c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x + q->radius;
 8009c50:	440a      	add	r2, r1
        quarter_area.y2 = q->center->y + q->radius;
 8009c52:	440b      	add	r3, r1
        quarter_area.x2 = q->center->x + q->radius;
 8009c54:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y + q->radius;
 8009c58:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009c5c:	e5ff      	b.n	800985e <lv_draw_sw_arc+0x24a>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8009c5e:	9b05      	ldr	r3, [sp, #20]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	f47f ae08 	bne.w	8009876 <lv_draw_sw_arc+0x262>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	f63f ae02 	bhi.w	8009876 <lv_draw_sw_arc+0x262>
 8009c72:	e7e4      	b.n	8009c3e <lv_draw_sw_arc+0x62a>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d145      	bne.n	8009d06 <lv_draw_sw_arc+0x6f2>
            quarter_area.x2 = q->center->x - 1;
 8009c7a:	8823      	ldrh	r3, [r4, #0]
            quarter_area.y2 = q->center->y + q->radius;
 8009c7c:	f8b4 a002 	ldrh.w	sl, [r4, #2]
            quarter_area.x2 = q->center->x - 1;
 8009c80:	3b01      	subs	r3, #1
 8009c82:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + q->radius;
 8009c86:	9b03      	ldr	r3, [sp, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009c88:	9808      	ldr	r0, [sp, #32]
            quarter_area.y2 = q->center->y + q->radius;
 8009c8a:	4453      	add	r3, sl
 8009c8c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009c90:	f006 f80e 	bl	800fcb0 <lv_trigo_sin>
 8009c94:	9b06      	ldr	r3, [sp, #24]
 8009c96:	eba8 0303 	sub.w	r3, r8, r3
 8009c9a:	4358      	muls	r0, r3
 8009c9c:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8009ca0:	f8ad a08a 	strh.w	sl, [sp, #138]	; 0x8a
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009ca4:	e61f      	b.n	80098e6 <lv_draw_sw_arc+0x2d2>
            quarter_area.x1 = q->center->x - q->radius;
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	8822      	ldrh	r2, [r4, #0]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009caa:	9807      	ldr	r0, [sp, #28]
            quarter_area.x1 = q->center->x - q->radius;
 8009cac:	1ad2      	subs	r2, r2, r3
 8009cae:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
            quarter_area.y1 = q->center->y;
 8009cb2:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009cb6:	f005 fffb 	bl	800fcb0 <lv_trigo_sin>
 8009cba:	fb08 f000 	mul.w	r0, r8, r0
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009cc0:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009cc4:	4618      	mov	r0, r3
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009cc6:	f8ad b08e 	strh.w	fp, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009cca:	f8b4 b000 	ldrh.w	fp, [r4]
 8009cce:	f005 ffef 	bl	800fcb0 <lv_trigo_sin>
 8009cd2:	fb0a fa00 	mul.w	sl, sl, r0
 8009cd6:	eb0b 3aea 	add.w	sl, fp, sl, asr #15
 8009cda:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009cde:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	4651      	mov	r1, sl
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	f005 fcfd 	bl	800f6e6 <_lv_area_intersect>
            if(ok) {
 8009cec:	b130      	cbz	r0, 8009cfc <lv_draw_sw_arc+0x6e8>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4630      	mov	r0, r6
                q->draw_ctx->clip_area = &quarter_area;
 8009cf2:	f8c6 a008 	str.w	sl, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009cf6:	a928      	add	r1, sp, #160	; 0xa0
 8009cf8:	f7fe fbc2 	bl	8008480 <lv_draw_rect>
        if(q->end_quarter == 1) {
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	f47f ae0a 	bne.w	8009918 <lv_draw_sw_arc+0x304>
 8009d04:	e7b9      	b.n	8009c7a <lv_draw_sw_arc+0x666>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8009d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d101      	bne.n	8009d12 <lv_draw_sw_arc+0x6fe>
 8009d0e:	42af      	cmp	r7, r5
 8009d10:	d807      	bhi.n	8009d22 <lv_draw_sw_arc+0x70e>
 8009d12:	2f59      	cmp	r7, #89	; 0x59
 8009d14:	d816      	bhi.n	8009d44 <lv_draw_sw_arc+0x730>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	3b02      	subs	r3, #2
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	f63f adfb 	bhi.w	8009918 <lv_draw_sw_arc+0x304>
        quarter_area.x1 = q->center->x - q->radius;
 8009d22:	8822      	ldrh	r2, [r4, #0]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	1ad3      	subs	r3, r2, r3
        quarter_area.x2 = q->center->x - 1;
 8009d28:	3a01      	subs	r2, #1
        quarter_area.x1 = q->center->x - q->radius;
 8009d2a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        quarter_area.x2 = q->center->x - 1;
 8009d2e:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y1 = q->center->y;
 8009d32:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        quarter_area.y2 = q->center->y + q->radius;
 8009d36:	9a03      	ldr	r2, [sp, #12]
        quarter_area.y1 = q->center->y;
 8009d38:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        quarter_area.y2 = q->center->y + q->radius;
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009d42:	e5dd      	b.n	8009900 <lv_draw_sw_arc+0x2ec>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8009d44:	9b05      	ldr	r3, [sp, #20]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f47f ade6 	bne.w	8009918 <lv_draw_sw_arc+0x304>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8009d4c:	9b04      	ldr	r3, [sp, #16]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	f47f ade2 	bne.w	8009918 <lv_draw_sw_arc+0x304>
 8009d54:	e7e5      	b.n	8009d22 <lv_draw_sw_arc+0x70e>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8009d56:	9b04      	ldr	r3, [sp, #16]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d153      	bne.n	8009e04 <lv_draw_sw_arc+0x7f0>
            quarter_area.x1 = q->center->x - q->radius;
 8009d5c:	f8b4 a000 	ldrh.w	sl, [r4]
 8009d60:	9b03      	ldr	r3, [sp, #12]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009d62:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x1 = q->center->x - q->radius;
 8009d66:	ebaa 0303 	sub.w	r3, sl, r3
 8009d6a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
            quarter_area.y2 = q->center->y - 1;
 8009d6e:	8863      	ldrh	r3, [r4, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009d70:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center->y - 1;
 8009d72:	3b01      	subs	r3, #1
 8009d74:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009d78:	f005 ff9a 	bl	800fcb0 <lv_trigo_sin>
 8009d7c:	9b06      	ldr	r3, [sp, #24]
 8009d7e:	eba8 0303 	sub.w	r3, r8, r3
 8009d82:	4358      	muls	r0, r3
 8009d84:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009d88:	9808      	ldr	r0, [sp, #32]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009d8a:	f8ad a08c 	strh.w	sl, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009d8e:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 8009d92:	f005 ff8d 	bl	800fcb0 <lv_trigo_sin>
 8009d96:	fb08 f000 	mul.w	r0, r8, r0
 8009d9a:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
 8009d9e:	f8ad a08a 	strh.w	sl, [sp, #138]	; 0x8a
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009da2:	e5f9      	b.n	8009998 <lv_draw_sw_arc+0x384>
            quarter_area.x2 = q->center->x - 1;
 8009da4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
            quarter_area.y1 = q->center->y - q->radius;
 8009da8:	9a03      	ldr	r2, [sp, #12]
            quarter_area.x2 = q->center->x - 1;
 8009daa:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y1 = q->center->y - q->radius;
 8009dae:	8863      	ldrh	r3, [r4, #2]
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009db6:	f005 ff7b 	bl	800fcb0 <lv_trigo_sin>
 8009dba:	fb08 f000 	mul.w	r0, r8, r0
 8009dbe:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009dc2:	9807      	ldr	r0, [sp, #28]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009dc4:	f8ad b088 	strh.w	fp, [sp, #136]	; 0x88
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009dc8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009dcc:	f005 ff70 	bl	800fcb0 <lv_trigo_sin>
 8009dd0:	fb0a fa00 	mul.w	sl, sl, r0
 8009dd4:	eb0b 3aea 	add.w	sl, fp, sl, asr #15
 8009dd8:	f8ad a08e 	strh.w	sl, [sp, #142]	; 0x8e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009ddc:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8009de0:	464a      	mov	r2, r9
 8009de2:	4651      	mov	r1, sl
 8009de4:	4650      	mov	r0, sl
 8009de6:	f005 fc7e 	bl	800f6e6 <_lv_area_intersect>
            if(ok) {
 8009dea:	b130      	cbz	r0, 8009dfa <lv_draw_sw_arc+0x7e6>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009dec:	4652      	mov	r2, sl
 8009dee:	4630      	mov	r0, r6
                q->draw_ctx->clip_area = &quarter_area;
 8009df0:	f8c6 a008 	str.w	sl, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009df4:	a928      	add	r1, sp, #160	; 0xa0
 8009df6:	f7fe fb43 	bl	8008480 <lv_draw_rect>
        if(q->end_quarter == 2) {
 8009dfa:	9b04      	ldr	r3, [sp, #16]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	f47f add7 	bne.w	80099b0 <lv_draw_sw_arc+0x39c>
 8009e02:	e7ab      	b.n	8009d5c <lv_draw_sw_arc+0x748>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8009e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d101      	bne.n	8009e10 <lv_draw_sw_arc+0x7fc>
 8009e0c:	42af      	cmp	r7, r5
 8009e0e:	d805      	bhi.n	8009e1c <lv_draw_sw_arc+0x808>
 8009e10:	2f59      	cmp	r7, #89	; 0x59
 8009e12:	d814      	bhi.n	8009e3e <lv_draw_sw_arc+0x82a>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	f47f adca 	bne.w	80099b0 <lv_draw_sw_arc+0x39c>
        quarter_area.x1 = q->center->x - q->radius;
 8009e1c:	8822      	ldrh	r2, [r4, #0]
 8009e1e:	9b03      	ldr	r3, [sp, #12]
        quarter_area.y1 = q->center->y - q->radius;
 8009e20:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x - q->radius;
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        quarter_area.y1 = q->center->y - q->radius;
 8009e28:	8863      	ldrh	r3, [r4, #2]
        quarter_area.x2 = q->center->x - 1;
 8009e2a:	3a01      	subs	r2, #1
        quarter_area.y1 = q->center->y - q->radius;
 8009e2c:	1a59      	subs	r1, r3, r1
        quarter_area.y2 = q->center->y - 1;
 8009e2e:	3b01      	subs	r3, #1
        quarter_area.y1 = q->center->y - q->radius;
 8009e30:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x - 1;
 8009e34:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y - 1;
 8009e38:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009e3c:	e5ac      	b.n	8009998 <lv_draw_sw_arc+0x384>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8009e3e:	9b05      	ldr	r3, [sp, #20]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	f47f adb5 	bne.w	80099b0 <lv_draw_sw_arc+0x39c>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d0e7      	beq.n	8009e1c <lv_draw_sw_arc+0x808>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8009e4c:	2d59      	cmp	r5, #89	; 0x59
 8009e4e:	f63f adaf 	bhi.w	80099b0 <lv_draw_sw_arc+0x39c>
 8009e52:	e7e3      	b.n	8009e1c <lv_draw_sw_arc+0x808>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d14b      	bne.n	8009ef2 <lv_draw_sw_arc+0x8de>
            quarter_area.y1 = q->center->y - q->radius;
 8009e5a:	9a03      	ldr	r2, [sp, #12]
 8009e5c:	8863      	ldrh	r3, [r4, #2]
            quarter_area.x1 = q->center->x;
 8009e5e:	f9b4 7000 	ldrsh.w	r7, [r4]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009e62:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.y1 = q->center->y - q->radius;
 8009e66:	1a9b      	subs	r3, r3, r2
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009e68:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center->y - q->radius;
 8009e6a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            quarter_area.x1 = q->center->x;
 8009e6e:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009e72:	f005 ff1d 	bl	800fcb0 <lv_trigo_sin>
 8009e76:	fb08 f000 	mul.w	r0, r8, r0
 8009e7a:	eb07 37e0 	add.w	r7, r7, r0, asr #15
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009e7e:	9808      	ldr	r0, [sp, #32]
 8009e80:	8865      	ldrh	r5, [r4, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009e82:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009e86:	f005 ff13 	bl	800fcb0 <lv_trigo_sin>
 8009e8a:	9b06      	ldr	r3, [sp, #24]
 8009e8c:	eba8 0803 	sub.w	r8, r8, r3
 8009e90:	fb00 f008 	mul.w	r0, r0, r8
 8009e94:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 8009e98:	e5c5      	b.n	8009a26 <lv_draw_sw_arc+0x412>
            quarter_area.x2 = q->center->x + q->radius;
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	445b      	add	r3, fp
 8009e9e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            quarter_area.y2 = q->center->y - 1;
 8009ea2:	8863      	ldrh	r3, [r4, #2]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009eaa:	f005 ff01 	bl	800fcb0 <lv_trigo_sin>
 8009eae:	fb0a fa00 	mul.w	sl, sl, r0
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009eb2:	9807      	ldr	r0, [sp, #28]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009eb4:	eb0b 3bea 	add.w	fp, fp, sl, asr #15
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009eb8:	8867      	ldrh	r7, [r4, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009eba:	f8ad b088 	strh.w	fp, [sp, #136]	; 0x88
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009ebe:	f005 fef7 	bl	800fcb0 <lv_trigo_sin>
 8009ec2:	fb08 f000 	mul.w	r0, r8, r0
 8009ec6:	eb07 37e0 	add.w	r7, r7, r0, asr #15
 8009eca:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009ece:	af22      	add	r7, sp, #136	; 0x88
 8009ed0:	464a      	mov	r2, r9
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f005 fc06 	bl	800f6e6 <_lv_area_intersect>
            if(ok) {
 8009eda:	b128      	cbz	r0, 8009ee8 <lv_draw_sw_arc+0x8d4>
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009edc:	463a      	mov	r2, r7
 8009ede:	4630      	mov	r0, r6
                q->draw_ctx->clip_area = &quarter_area;
 8009ee0:	60b7      	str	r7, [r6, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, &quarter_area);
 8009ee2:	a928      	add	r1, sp, #160	; 0xa0
 8009ee4:	f7fe facc 	bl	8008480 <lv_draw_rect>
        if(q->end_quarter == 3) {
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	f47f ada9 	bne.w	8009a42 <lv_draw_sw_arc+0x42e>
 8009ef0:	e7b3      	b.n	8009e5a <lv_draw_sw_arc+0x846>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8009ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d101      	bne.n	8009efe <lv_draw_sw_arc+0x8ea>
 8009efa:	42af      	cmp	r7, r5
 8009efc:	d805      	bhi.n	8009f0a <lv_draw_sw_arc+0x8f6>
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d119      	bne.n	8009f38 <lv_draw_sw_arc+0x924>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8009f04:	2db3      	cmp	r5, #179	; 0xb3
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8009f06:	f63f ad9c 	bhi.w	8009a42 <lv_draw_sw_arc+0x42e>
        quarter_area.y1 = q->center->y - q->radius;
 8009f0a:	8863      	ldrh	r3, [r4, #2]
 8009f0c:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x;
 8009f0e:	f9b4 2000 	ldrsh.w	r2, [r4]
        quarter_area.y1 = q->center->y - q->radius;
 8009f12:	1a59      	subs	r1, r3, r1
 8009f14:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
        quarter_area.x2 = q->center->x + q->radius;
 8009f18:	9903      	ldr	r1, [sp, #12]
        quarter_area.x1 = q->center->x;
 8009f1a:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
        quarter_area.y2 = q->center->y - 1;
 8009f1e:	3b01      	subs	r3, #1
        quarter_area.x2 = q->center->x + q->radius;
 8009f20:	440a      	add	r2, r1
 8009f22:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
        quarter_area.y2 = q->center->y - 1;
 8009f26:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009f2a:	e57e      	b.n	8009a2a <lv_draw_sw_arc+0x416>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8009f30:	a928      	add	r1, sp, #160	; 0xa0
 8009f32:	f7fe faa5 	bl	8008480 <lv_draw_rect>
 8009f36:	e586      	b.n	8009a46 <lv_draw_sw_arc+0x432>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	f47f ad81 	bne.w	8009a42 <lv_draw_sw_arc+0x42e>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8009f40:	2d59      	cmp	r5, #89	; 0x59
 8009f42:	e7e0      	b.n	8009f06 <lv_draw_sw_arc+0x8f2>

08009f44 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8009f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.full = (uint16_t)((result >> 16) | result);
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009f46:	f3c0 3342 	ubfx	r3, r0, #13, #3
 8009f4a:	f000 0407 	and.w	r4, r0, #7
 8009f4e:	f001 0507 	and.w	r5, r1, #7
 8009f52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f56:	f3c1 3442 	ubfx	r4, r1, #13, #3
 8009f5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f5e:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009f62:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009f66:	4374      	muls	r4, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009f68:	f3c1 07c4 	ubfx	r7, r1, #3, #5
 8009f6c:	4377      	muls	r7, r6
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009f6e:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8009f72:	4371      	muls	r1, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009f74:	fb02 4303 	mla	r3, r2, r3, r4
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009f78:	f3c0 04c4 	ubfx	r4, r0, #3, #5
 8009f7c:	fb02 7404 	mla	r4, r2, r4, r7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009f80:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8009f84:	fb02 1000 	mla	r0, r2, r0, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009f88:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009f8a:	3480      	adds	r4, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009f8c:	436b      	muls	r3, r5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009f8e:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009f90:	3080      	adds	r0, #128	; 0x80
 8009f92:	4368      	muls	r0, r5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009f94:	f3c3 6782 	ubfx	r7, r3, #26, #3
 8009f98:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 8009f9c:	ea47 04c4 	orr.w	r4, r7, r4, lsl #3
 8009fa0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 8009fa4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009fa8:	0ddb      	lsrs	r3, r3, #23
}
 8009faa:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8009fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fb0 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8009fb0:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8009fb2:	2a02      	cmp	r2, #2
{
 8009fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb6:	f003 0c07 	and.w	ip, r3, #7
 8009fba:	f3c3 0ec4 	ubfx	lr, r3, #3, #5
 8009fbe:	f3c3 2704 	ubfx	r7, r3, #8, #5
 8009fc2:	f3c3 3442 	ubfx	r4, r3, #13, #3
    if(opa <= LV_OPA_MIN) return bg;
 8009fc6:	d801      	bhi.n	8009fcc <color_blend_true_color_additive+0x1c>
 8009fc8:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8009fcc:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    tmp = bg.ch.red + fg.ch.red;
 8009fd0:	f3c0 05c4 	ubfx	r5, r0, #3, #5
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8009fd4:	f000 0407 	and.w	r4, r0, #7
    tmp = bg.ch.red + fg.ch.red;
 8009fd8:	4475      	add	r5, lr
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8009fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fde:	f3c0 3442 	ubfx	r4, r0, #13, #3
 8009fe2:	4423      	add	r3, r4
    fg.ch.red = LV_MIN(tmp, 31);
 8009fe4:	2d1f      	cmp	r5, #31
    tmp = bg.ch.blue + fg.ch.blue;
 8009fe6:	f3c0 2404 	ubfx	r4, r0, #8, #5
 8009fea:	443c      	add	r4, r7
    fg.ch.red = LV_MIN(tmp, 31);
 8009fec:	bf28      	it	cs
 8009fee:	251f      	movcs	r5, #31
    tmp = LV_MIN(tmp, 63);
 8009ff0:	2b3f      	cmp	r3, #63	; 0x3f
 8009ff2:	bf28      	it	cs
 8009ff4:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 8009ff6:	2c1f      	cmp	r4, #31
 8009ff8:	bf28      	it	cs
 8009ffa:	241f      	movcs	r4, #31
    if(opa == LV_OPA_COVER) return fg;
 8009ffc:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green_h = tmp >> 3;
 8009ffe:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.red = LV_MIN(tmp, 31);
 800a002:	f005 051f 	and.w	r5, r5, #31
    fg.ch.green_l = tmp & 0x7;
 800a006:	f003 0307 	and.w	r3, r3, #7
    fg.ch.blue = LV_MIN(tmp, 31);
 800a00a:	f004 041f 	and.w	r4, r4, #31
    if(opa == LV_OPA_COVER) return fg;
 800a00e:	d10a      	bne.n	800a026 <color_blend_true_color_additive+0x76>
 800a010:	f04f 0000 	mov.w	r0, #0
 800a014:	f36c 0002 	bfi	r0, ip, #0, #3
 800a018:	f365 00c7 	bfi	r0, r5, #3, #5
 800a01c:	f364 200c 	bfi	r0, r4, #8, #5
 800a020:	f363 304f 	bfi	r0, r3, #13, #3
 800a024:	e7d1      	b.n	8009fca <color_blend_true_color_additive+0x1a>
    return lv_color_mix(fg, bg, opa);
 800a026:	f36c 0002 	bfi	r0, ip, #0, #3
 800a02a:	f365 00c7 	bfi	r0, r5, #3, #5
 800a02e:	f364 200c 	bfi	r0, r4, #8, #5
 800a032:	f363 304f 	bfi	r0, r3, #13, #3
}
 800a036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return lv_color_mix(fg, bg, opa);
 800a03a:	f7ff bf83 	b.w	8009f44 <lv_color_mix>

0800a03e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800a03e:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 800a040:	2a02      	cmp	r2, #2
{
 800a042:	b4f0      	push	{r4, r5, r6, r7}
 800a044:	f003 0c07 	and.w	ip, r3, #7
 800a048:	f3c3 06c4 	ubfx	r6, r3, #3, #5
 800a04c:	f3c3 2504 	ubfx	r5, r3, #8, #5
 800a050:	f3c3 3442 	ubfx	r4, r3, #13, #3
    if(opa <= LV_OPA_MIN) return bg;
 800a054:	d802      	bhi.n	800a05c <color_blend_true_color_subtractive+0x1e>
 800a056:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 800a058:	bcf0      	pop	{r4, r5, r6, r7}
 800a05a:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 800a05c:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800a060:	1af6      	subs	r6, r6, r3
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 800a062:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
 800a066:	f000 0407 	and.w	r4, r0, #7
 800a06a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a06e:	f3c0 3442 	ubfx	r4, r0, #13, #3
 800a072:	4423      	add	r3, r4
    tmp = bg.ch.blue - fg.ch.blue;
 800a074:	f3c0 2404 	ubfx	r4, r0, #8, #5
 800a078:	1b2c      	subs	r4, r5, r4
    fg.ch.red = LV_MAX(tmp, 0);
 800a07a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    fg.ch.blue = LV_MAX(tmp, 0);
 800a07e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    if(opa == LV_OPA_COVER) return fg;
 800a082:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green_h = tmp >> 3;
 800a084:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.red = LV_MAX(tmp, 0);
 800a088:	f006 061f 	and.w	r6, r6, #31
    fg.ch.green_l = tmp & 0x7;
 800a08c:	f003 0307 	and.w	r3, r3, #7
    fg.ch.blue = LV_MAX(tmp, 0);
 800a090:	f004 041f 	and.w	r4, r4, #31
    if(opa == LV_OPA_COVER) return fg;
 800a094:	d10a      	bne.n	800a0ac <color_blend_true_color_subtractive+0x6e>
 800a096:	f04f 0000 	mov.w	r0, #0
 800a09a:	f36c 0002 	bfi	r0, ip, #0, #3
 800a09e:	f366 00c7 	bfi	r0, r6, #3, #5
 800a0a2:	f364 200c 	bfi	r0, r4, #8, #5
 800a0a6:	f363 304f 	bfi	r0, r3, #13, #3
 800a0aa:	e7d5      	b.n	800a058 <color_blend_true_color_subtractive+0x1a>
    return lv_color_mix(fg, bg, opa);
 800a0ac:	f36c 0002 	bfi	r0, ip, #0, #3
 800a0b0:	f366 00c7 	bfi	r0, r6, #3, #5
 800a0b4:	f364 200c 	bfi	r0, r4, #8, #5
 800a0b8:	f363 304f 	bfi	r0, r3, #13, #3
}
 800a0bc:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 800a0be:	f7ff bf41 	b.w	8009f44 <lv_color_mix>

0800a0c2 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800a0c2:	460b      	mov	r3, r1
    if(opa <= LV_OPA_MIN) return bg;
 800a0c4:	2a02      	cmp	r2, #2
{
 800a0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c8:	f003 0e07 	and.w	lr, r3, #7
 800a0cc:	f3c3 07c4 	ubfx	r7, r3, #3, #5
 800a0d0:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800a0d4:	f3c3 3542 	ubfx	r5, r3, #13, #3
    if(opa <= LV_OPA_MIN) return bg;
 800a0d8:	d801      	bhi.n	800a0de <color_blend_true_color_multiply+0x1c>
 800a0da:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 800a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 800a0de:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800a0e2:	435f      	muls	r7, r3
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 800a0e4:	f3c0 2304 	ubfx	r3, r0, #8, #5
 800a0e8:	435e      	muls	r6, r3
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 800a0ea:	f3c0 3442 	ubfx	r4, r0, #13, #3
 800a0ee:	f000 0307 	and.w	r3, r0, #7
 800a0f2:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 800a0f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a0fa:	436b      	muls	r3, r5
 800a0fc:	ea4f 2e63 	mov.w	lr, r3, asr #9
 800a100:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 800a104:	436c      	muls	r4, r5
    if(opa == LV_OPA_COVER) return fg;
 800a106:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 800a108:	f3c7 1744 	ubfx	r7, r7, #5, #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 800a10c:	f3c6 1644 	ubfx	r6, r6, #5, #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 800a110:	f3c3 2342 	ubfx	r3, r3, #9, #3
 800a114:	f3c4 1482 	ubfx	r4, r4, #6, #3
    if(opa == LV_OPA_COVER) return fg;
 800a118:	d10a      	bne.n	800a130 <color_blend_true_color_multiply+0x6e>
 800a11a:	f04f 0000 	mov.w	r0, #0
 800a11e:	f363 0002 	bfi	r0, r3, #0, #3
 800a122:	f367 00c7 	bfi	r0, r7, #3, #5
 800a126:	f366 200c 	bfi	r0, r6, #8, #5
 800a12a:	f364 304f 	bfi	r0, r4, #13, #3
 800a12e:	e7d5      	b.n	800a0dc <color_blend_true_color_multiply+0x1a>
    return lv_color_mix(fg, bg, opa);
 800a130:	f363 0002 	bfi	r0, r3, #0, #3
 800a134:	f367 00c7 	bfi	r0, r7, #3, #5
 800a138:	f366 200c 	bfi	r0, r6, #8, #5
 800a13c:	f364 304f 	bfi	r0, r4, #13, #3
}
 800a140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return lv_color_mix(fg, bg, opa);
 800a144:	f7ff befe 	b.w	8009f44 <lv_color_mix>

0800a148 <lv_draw_sw_blend>:
{
 800a148:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(dsc->opa <= LV_OPA_MIN) return;
 800a14a:	7e0b      	ldrb	r3, [r1, #24]
{
 800a14c:	4604      	mov	r4, r0
    if(dsc->opa <= LV_OPA_MIN) return;
 800a14e:	2b02      	cmp	r3, #2
{
 800a150:	460d      	mov	r5, r1
    if(dsc->opa <= LV_OPA_MIN) return;
 800a152:	d90d      	bls.n	800a170 <lv_draw_sw_blend+0x28>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800a154:	6882      	ldr	r2, [r0, #8]
 800a156:	6809      	ldr	r1, [r1, #0]
 800a158:	4668      	mov	r0, sp
 800a15a:	f005 fac4 	bl	800f6e6 <_lv_area_intersect>
 800a15e:	b138      	cbz	r0, 800a170 <lv_draw_sw_blend+0x28>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800a160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a162:	b10b      	cbz	r3, 800a168 <lv_draw_sw_blend+0x20>
 800a164:	4620      	mov	r0, r4
 800a166:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 800a168:	4629      	mov	r1, r5
 800a16a:	4620      	mov	r0, r4
 800a16c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a16e:	4798      	blx	r3
}
 800a170:	b003      	add	sp, #12
 800a172:	bd30      	pop	{r4, r5, pc}

0800a174 <lv_draw_sw_blend_basic>:
{
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->mask == NULL) mask = NULL;
 800a178:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
 800a17c:	4604      	mov	r4, r0
 800a17e:	4688      	mov	r8, r1
 800a180:	7c0b      	ldrb	r3, [r1, #16]
 800a182:	b08d      	sub	sp, #52	; 0x34
    if(dsc->mask && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800a184:	f1b9 0f00 	cmp.w	r9, #0
 800a188:	d002      	beq.n	800a190 <lv_draw_sw_blend_basic+0x1c>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 8081 	beq.w	800a292 <lv_draw_sw_blend_basic+0x11e>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800a190:	2b01      	cmp	r3, #1
    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 800a192:	6863      	ldr	r3, [r4, #4]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800a194:	68a2      	ldr	r2, [r4, #8]
 800a196:	f8d8 1000 	ldr.w	r1, [r8]
 800a19a:	a80a      	add	r0, sp, #40	; 0x28
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800a19c:	bf08      	it	eq
 800a19e:	f04f 0900 	moveq.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a1a2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800a1a6:	f9b3 7000 	ldrsh.w	r7, [r3]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800a1aa:	f005 fa9c 	bl	800f6e6 <_lv_area_intersect>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d06f      	beq.n	800a292 <lv_draw_sw_blend_basic+0x11e>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a1b2:	f7fc faeb 	bl	800678c <_lv_refr_get_disp_refreshing>
    if(disp->driver->set_px_cb == NULL) {
 800a1b6:	6803      	ldr	r3, [r0, #0]
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	1bed      	subs	r5, r5, r7
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a1be:	4606      	mov	r6, r0
    lv_color_t * dest_buf = draw_ctx->buf;
 800a1c0:	f8d4 a000 	ldr.w	sl, [r4]
 800a1c4:	6861      	ldr	r1, [r4, #4]
 800a1c6:	b22d      	sxth	r5, r5
    if(disp->driver->set_px_cb == NULL) {
 800a1c8:	b96b      	cbnz	r3, 800a1e6 <lv_draw_sw_blend_basic+0x72>
        dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800a1ca:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800a1ce:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800a1d2:	f9b1 0000 	ldrsh.w	r0, [r1]
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 800a1dc:	1a12      	subs	r2, r2, r0
 800a1de:	fb05 2303 	mla	r3, r5, r3, r2
 800a1e2:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
    const lv_color_t * src_buf = dsc->src_buf;
 800a1e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
    if(src_buf) {
 800a1ea:	2f00      	cmp	r7, #0
 800a1ec:	d054      	beq.n	800a298 <lv_draw_sw_blend_basic+0x124>
        src_stride = lv_area_get_width(dsc->blend_area);
 800a1ee:	f8d8 0000 	ldr.w	r0, [r8]
 800a1f2:	8883      	ldrh	r3, [r0, #4]
 800a1f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	b21b      	sxth	r3, r3
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 -  dsc->blend_area->x1);
 800a1fe:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800a202:	9306      	str	r3, [sp, #24]
 800a204:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800a208:	1a1b      	subs	r3, r3, r0
 800a20a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800a20e:	1a82      	subs	r2, r0, r2
 800a210:	9806      	ldr	r0, [sp, #24]
 800a212:	fb00 2303 	mla	r3, r0, r3, r2
 800a216:	eb07 0743 	add.w	r7, r7, r3, lsl #1
    if(mask) {
 800a21a:	f1b9 0f00 	cmp.w	r9, #0
 800a21e:	d03d      	beq.n	800a29c <lv_draw_sw_blend_basic+0x128>
        mask_stride = lv_area_get_width(dsc->mask_area);
 800a220:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a224:	889a      	ldrh	r2, [r3, #4]
 800a226:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a22a:	3201      	adds	r2, #1
 800a22c:	1a12      	subs	r2, r2, r0
 800a22e:	b212      	sxth	r2, r2
 800a230:	9204      	str	r2, [sp, #16]
        mask += mask_stride * (dsc->mask_area->y1 - blend_area.y1) + (dsc->mask_area->x1 - blend_area.x1);
 800a232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a236:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 800a240:	1a80      	subs	r0, r0, r2
 800a242:	9a04      	ldr	r2, [sp, #16]
 800a244:	fb02 0303 	mla	r3, r2, r3, r0
 800a248:	4499      	add	r9, r3
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 800a24a:	884a      	ldrh	r2, [r1, #2]
 800a24c:	8809      	ldrh	r1, [r1, #0]
 800a24e:	4252      	negs	r2, r2
 800a250:	4249      	negs	r1, r1
 800a252:	b209      	sxth	r1, r1
 800a254:	b212      	sxth	r2, r2
 800a256:	a80a      	add	r0, sp, #40	; 0x28
 800a258:	f005 fa36 	bl	800f6c8 <lv_area_move>
    if(disp->driver->set_px_cb) {
 800a25c:	6833      	ldr	r3, [r6, #0]
 800a25e:	f898 4018 	ldrb.w	r4, [r8, #24]
 800a262:	69d9      	ldr	r1, [r3, #28]
 800a264:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800a268:	2900      	cmp	r1, #0
 800a26a:	f000 80dc 	beq.w	800a426 <lv_draw_sw_blend_basic+0x2b2>
        if(dsc->src_buf == NULL) {
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d16a      	bne.n	800a348 <lv_draw_sw_blend_basic+0x1d4>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800a272:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a276:	f8ad 3018 	strh.w	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a27a:	f7fc fa87 	bl	800678c <_lv_refr_get_disp_refreshing>
 800a27e:	9005      	str	r0, [sp, #20]
    if(mask == NULL) {
 800a280:	f1b9 0f00 	cmp.w	r9, #0
 800a284:	d128      	bne.n	800a2d8 <lv_draw_sw_blend_basic+0x164>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800a286:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 800a28a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800a28e:	429e      	cmp	r6, r3
 800a290:	dd07      	ble.n	800a2a2 <lv_draw_sw_blend_basic+0x12e>
}
 800a292:	b00d      	add	sp, #52	; 0x34
 800a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        src_stride = 0;
 800a298:	9706      	str	r7, [sp, #24]
 800a29a:	e7be      	b.n	800a21a <lv_draw_sw_blend_basic+0xa6>
        mask_stride = 0;
 800a29c:	f8cd 9010 	str.w	r9, [sp, #16]
 800a2a0:	e7d3      	b.n	800a24a <lv_draw_sw_blend_basic+0xd6>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800a2a2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800a2a6:	fa0f f886 	sxth.w	r8, r6
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800a2aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 800a2ae:	429f      	cmp	r7, r3
 800a2b0:	dd01      	ble.n	800a2b6 <lv_draw_sw_blend_basic+0x142>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800a2b2:	3601      	adds	r6, #1
 800a2b4:	e7e9      	b.n	800a28a <lv_draw_sw_blend_basic+0x116>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800a2b6:	9b05      	ldr	r3, [sp, #20]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a2c0:	9402      	str	r4, [sp, #8]
 800a2c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a2c6:	f8cd 8000 	str.w	r8, [sp]
 800a2ca:	b23b      	sxth	r3, r7
 800a2cc:	4651      	mov	r1, sl
 800a2ce:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800a2d2:	47d8      	blx	fp
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800a2d4:	3701      	adds	r7, #1
 800a2d6:	e7e8      	b.n	800a2aa <lv_draw_sw_blend_basic+0x136>
 800a2d8:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 800a2dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a2e0:	3701      	adds	r7, #1
 800a2e2:	1aff      	subs	r7, r7, r3
        int32_t w = lv_area_get_width(blend_area);
 800a2e4:	b23b      	sxth	r3, r7
 800a2e6:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a2e8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800a2ec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	1a9b      	subs	r3, r3, r2
        int32_t h = lv_area_get_height(blend_area);
 800a2f4:	fa0f fb83 	sxth.w	fp, r3
        for(y = 0; y < h; y++) {
 800a2f8:	45b3      	cmp	fp, r6
 800a2fa:	ddca      	ble.n	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800a2fc:	f04f 0800 	mov.w	r8, #0
 800a300:	e01b      	b.n	800a33a <lv_draw_sw_blend_basic+0x1c6>
                if(mask[x]) {
 800a302:	f819 2008 	ldrb.w	r2, [r9, r8]
 800a306:	b1b2      	cbz	r2, 800a336 <lv_draw_sw_blend_basic+0x1c2>
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800a308:	4362      	muls	r2, r4
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800a30a:	9b05      	ldr	r3, [sp, #20]
 800a30c:	0a12      	lsrs	r2, r2, #8
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	9202      	str	r2, [sp, #8]
 800a312:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800a316:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a31a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a31e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800a322:	4443      	add	r3, r8
 800a324:	4432      	add	r2, r6
 800a326:	b212      	sxth	r2, r2
 800a328:	9200      	str	r2, [sp, #0]
 800a32a:	69c2      	ldr	r2, [r0, #28]
 800a32c:	4651      	mov	r1, sl
 800a32e:	4617      	mov	r7, r2
 800a330:	b21b      	sxth	r3, r3
 800a332:	462a      	mov	r2, r5
 800a334:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 800a336:	f108 0801 	add.w	r8, r8, #1
 800a33a:	9b07      	ldr	r3, [sp, #28]
 800a33c:	4543      	cmp	r3, r8
 800a33e:	dce0      	bgt.n	800a302 <lv_draw_sw_blend_basic+0x18e>
            mask += mask_stide;
 800a340:	9b04      	ldr	r3, [sp, #16]
        for(y = 0; y < h; y++) {
 800a342:	3601      	adds	r6, #1
            mask += mask_stide;
 800a344:	4499      	add	r9, r3
        for(y = 0; y < h; y++) {
 800a346:	e7d7      	b.n	800a2f8 <lv_draw_sw_blend_basic+0x184>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a348:	f7fc fa20 	bl	800678c <_lv_refr_get_disp_refreshing>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a34c:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
 800a350:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a354:	f10b 0b01 	add.w	fp, fp, #1
 800a358:	ebab 0b03 	sub.w	fp, fp, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a35c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800a360:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800a364:	3301      	adds	r3, #1
 800a366:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 800a368:	b21b      	sxth	r3, r3
 800a36a:	9308      	str	r3, [sp, #32]
 800a36c:	9b06      	ldr	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a36e:	9007      	str	r0, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a370:	005b      	lsls	r3, r3, #1
    int32_t w = lv_area_get_width(dest_area);
 800a372:	fa0f fb8b 	sxth.w	fp, fp
    if(mask == NULL) {
 800a376:	9306      	str	r3, [sp, #24]
 800a378:	f1b9 0f00 	cmp.w	r9, #0
 800a37c:	d028      	beq.n	800a3d0 <lv_draw_sw_blend_basic+0x25c>
        for(y = 0; y < h; y++) {
 800a37e:	f04f 0800 	mov.w	r8, #0
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	4543      	cmp	r3, r8
 800a386:	dd84      	ble.n	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800a388:	2300      	movs	r3, #0
 800a38a:	e041      	b.n	800a410 <lv_draw_sw_blend_basic+0x29c>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	4651      	mov	r1, sl
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	9402      	str	r4, [sp, #8]
 800a394:	f837 2016 	ldrh.w	r2, [r7, r6, lsl #1]
 800a398:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a39c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a3a0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800a3a4:	4433      	add	r3, r6
 800a3a6:	4442      	add	r2, r8
 800a3a8:	b212      	sxth	r2, r2
 800a3aa:	9200      	str	r2, [sp, #0]
 800a3ac:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800a3b0:	462a      	mov	r2, r5
 800a3b2:	b21b      	sxth	r3, r3
 800a3b4:	47c8      	blx	r9
            for(x = 0; x < w; x++) {
 800a3b6:	3601      	adds	r6, #1
 800a3b8:	45b3      	cmp	fp, r6
 800a3ba:	dce7      	bgt.n	800a38c <lv_draw_sw_blend_basic+0x218>
            src_buf += src_stride;
 800a3bc:	9b06      	ldr	r3, [sp, #24]
        for(y = 0; y < h; y++) {
 800a3be:	f108 0801 	add.w	r8, r8, #1
            src_buf += src_stride;
 800a3c2:	441f      	add	r7, r3
        for(y = 0; y < h; y++) {
 800a3c4:	9b08      	ldr	r3, [sp, #32]
 800a3c6:	4543      	cmp	r3, r8
 800a3c8:	f77f af63 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	e7f3      	b.n	800a3b8 <lv_draw_sw_blend_basic+0x244>
        for(y = 0; y < h; y++) {
 800a3d0:	46c8      	mov	r8, r9
 800a3d2:	e7f7      	b.n	800a3c4 <lv_draw_sw_blend_basic+0x250>
                if(mask[x]) {
 800a3d4:	9b05      	ldr	r3, [sp, #20]
 800a3d6:	f819 2003 	ldrb.w	r2, [r9, r3]
 800a3da:	b1ba      	cbz	r2, 800a40c <lv_draw_sw_blend_basic+0x298>
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800a3dc:	4362      	muls	r2, r4
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800a3de:	9b07      	ldr	r3, [sp, #28]
 800a3e0:	9905      	ldr	r1, [sp, #20]
 800a3e2:	0a12      	lsrs	r2, r2, #8
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	9202      	str	r2, [sp, #8]
 800a3e8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 800a3ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800a3f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a3f4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800a3f8:	440b      	add	r3, r1
 800a3fa:	4442      	add	r2, r8
 800a3fc:	b212      	sxth	r2, r2
 800a3fe:	9200      	str	r2, [sp, #0]
 800a400:	69c2      	ldr	r2, [r0, #28]
 800a402:	4651      	mov	r1, sl
 800a404:	4616      	mov	r6, r2
 800a406:	b21b      	sxth	r3, r3
 800a408:	462a      	mov	r2, r5
 800a40a:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	3301      	adds	r3, #1
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	459b      	cmp	fp, r3
 800a416:	dcdd      	bgt.n	800a3d4 <lv_draw_sw_blend_basic+0x260>
            mask += mask_stride;
 800a418:	9b04      	ldr	r3, [sp, #16]
        for(y = 0; y < h; y++) {
 800a41a:	f108 0801 	add.w	r8, r8, #1
            mask += mask_stride;
 800a41e:	4499      	add	r9, r3
            src_buf += src_stride;
 800a420:	9b06      	ldr	r3, [sp, #24]
 800a422:	441f      	add	r7, r3
        for(y = 0; y < h; y++) {
 800a424:	e7ad      	b.n	800a382 <lv_draw_sw_blend_basic+0x20e>
    else if(dsc->src_buf == NULL) {
 800a426:	f898 3019 	ldrb.w	r3, [r8, #25]
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	f040 81e8 	bne.w	800a800 <lv_draw_sw_blend_basic+0x68c>
        if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 816a 	bne.w	800a70a <lv_draw_sw_blend_basic+0x596>
 800a436:	9306      	str	r3, [sp, #24]
 800a438:	f8b8 6008 	ldrh.w	r6, [r8, #8]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800a43c:	f7fc f9a6 	bl	800678c <_lv_refr_get_disp_refreshing>
 800a440:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a444:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800a448:	3201      	adds	r2, #1
 800a44a:	1a52      	subs	r2, r2, r1
 800a44c:	fa0f fb82 	sxth.w	fp, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a450:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800a454:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800a458:	3201      	adds	r2, #1
 800a45a:	1a52      	subs	r2, r2, r1
    int32_t h = lv_area_get_height(dest_area);
 800a45c:	b213      	sxth	r3, r2
 800a45e:	9305      	str	r3, [sp, #20]
    if(mask == NULL) {
 800a460:	9b06      	ldr	r3, [sp, #24]
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	d178      	bne.n	800a55a <lv_draw_sw_blend_basic+0x3e6>
        if(opa >= LV_OPA_MAX) {
 800a468:	006b      	lsls	r3, r5, #1
 800a46a:	2cfc      	cmp	r4, #252	; 0xfc
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	d832      	bhi.n	800a4d6 <lv_draw_sw_blend_basic+0x362>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800a470:	4622      	mov	r2, r4
 800a472:	4649      	mov	r1, r9
 800a474:	4630      	mov	r0, r6
 800a476:	f7ff fd65 	bl	8009f44 <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800a47a:	f3c6 01c4 	ubfx	r1, r6, #3, #5
 800a47e:	4361      	muls	r1, r4
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800a480:	f006 0707 	and.w	r7, r6, #7
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800a484:	9106      	str	r1, [sp, #24]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800a486:	0b71      	lsrs	r1, r6, #13
 800a488:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a48c:	4361      	muls	r1, r4
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800a48e:	f3c6 2604 	ubfx	r6, r6, #8, #5
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800a492:	9107      	str	r1, [sp, #28]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800a494:	fb06 f104 	mul.w	r1, r6, r4
            lv_opa_t opa_inv = 255 - opa;
 800a498:	43e4      	mvns	r4, r4
 800a49a:	464d      	mov	r5, r9
            for(y = 0; y < h; y++) {
 800a49c:	46cc      	mov	ip, r9
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a49e:	f248 0881 	movw	r8, #32897	; 0x8081
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800a4a2:	f000 0e07 	and.w	lr, r0, #7
 800a4a6:	f3c0 02c4 	ubfx	r2, r0, #3, #5
 800a4aa:	f3c0 2304 	ubfx	r3, r0, #8, #5
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800a4ae:	9108      	str	r1, [sp, #32]
 800a4b0:	f3c0 3042 	ubfx	r0, r0, #13, #3
            lv_opa_t opa_inv = 255 - opa;
 800a4b4:	b2e4      	uxtb	r4, r4
            for(y = 0; y < h; y++) {
 800a4b6:	9905      	ldr	r1, [sp, #20]
 800a4b8:	4561      	cmp	r1, ip
 800a4ba:	f77f aeea 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
 800a4be:	4657      	mov	r7, sl
                for(x = 0; x < w; x++) {
 800a4c0:	2600      	movs	r6, #0
 800a4c2:	e043      	b.n	800a54c <lv_draw_sw_blend_basic+0x3d8>
                lv_color_fill(dest_buf, color, w);
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	465a      	mov	r2, fp
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	f005 faa4 	bl	800fa16 <lv_color_fill>
                dest_buf += dest_stride;
 800a4ce:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < h; y++) {
 800a4d0:	f109 0901 	add.w	r9, r9, #1
                dest_buf += dest_stride;
 800a4d4:	449a      	add	sl, r3
            for(y = 0; y < h; y++) {
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	454b      	cmp	r3, r9
 800a4da:	dcf3      	bgt.n	800a4c4 <lv_draw_sw_blend_basic+0x350>
 800a4dc:	e6d9      	b.n	800a292 <lv_draw_sw_blend_basic+0x11e>
                    if(last_dest_color.full != dest_buf[x].full) {
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f837 9b02 	ldrh.w	r9, [r7], #2
 800a4e4:	45a9      	cmp	r9, r5
 800a4e6:	d023      	beq.n	800a530 <lv_draw_sw_blend_basic+0x3bc>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a4e8:	780d      	ldrb	r5, [r1, #0]
 800a4ea:	9b06      	ldr	r3, [sp, #24]
 800a4ec:	08ea      	lsrs	r2, r5, #3
 800a4ee:	fb04 3202 	mla	r2, r4, r2, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a4f2:	784b      	ldrb	r3, [r1, #1]
 800a4f4:	f005 0507 	and.w	r5, r5, #7
 800a4f8:	0958      	lsrs	r0, r3, #5
 800a4fa:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800a4fe:	9d07      	ldr	r5, [sp, #28]
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a500:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a504:	fb04 5000 	mla	r0, r4, r0, r5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a508:	9d08      	ldr	r5, [sp, #32]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a50a:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a50c:	fb04 5303 	mla	r3, r4, r3, r5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a510:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a512:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a514:	fb08 f000 	mul.w	r0, r8, r0
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a518:	fb08 f202 	mul.w	r2, r8, r2
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a51c:	fb08 f303 	mul.w	r3, r8, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a520:	f3c0 6e82 	ubfx	lr, r0, #26, #3
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a524:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a528:	f3c0 50c2 	ubfx	r0, r0, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a52c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    dest_buf[x] = last_res_color;
 800a530:	780d      	ldrb	r5, [r1, #0]
                for(x = 0; x < w; x++) {
 800a532:	3601      	adds	r6, #1
                    dest_buf[x] = last_res_color;
 800a534:	f36e 0502 	bfi	r5, lr, #0, #3
 800a538:	f362 05c7 	bfi	r5, r2, #3, #5
 800a53c:	700d      	strb	r5, [r1, #0]
 800a53e:	784d      	ldrb	r5, [r1, #1]
 800a540:	f363 0504 	bfi	r5, r3, #0, #5
 800a544:	f360 1547 	bfi	r5, r0, #5, #3
 800a548:	704d      	strb	r5, [r1, #1]
                    if(last_dest_color.full != dest_buf[x].full) {
 800a54a:	464d      	mov	r5, r9
                for(x = 0; x < w; x++) {
 800a54c:	45b3      	cmp	fp, r6
 800a54e:	dcc6      	bgt.n	800a4de <lv_draw_sw_blend_basic+0x36a>
                dest_buf += dest_stride;
 800a550:	9904      	ldr	r1, [sp, #16]
            for(y = 0; y < h; y++) {
 800a552:	f10c 0c01 	add.w	ip, ip, #1
                dest_buf += dest_stride;
 800a556:	448a      	add	sl, r1
            for(y = 0; y < h; y++) {
 800a558:	e7ad      	b.n	800a4b6 <lv_draw_sw_blend_basic+0x342>
        if(opa >= LV_OPA_MAX) {
 800a55a:	2cfc      	cmp	r4, #252	; 0xfc
 800a55c:	f240 809c 	bls.w	800a698 <lv_draw_sw_blend_basic+0x524>
            for(y = 0; y < h; y++) {
 800a560:	461c      	mov	r4, r3
                mask += (mask_stride - w);
 800a562:	9b04      	ldr	r3, [sp, #16]
            int32_t x_end4 = w - 4;
 800a564:	f1ab 0204 	sub.w	r2, fp, #4
                dest_buf += (dest_stride - w);
 800a568:	eba5 050b 	sub.w	r5, r5, fp
            int32_t x_end4 = w - 4;
 800a56c:	9206      	str	r2, [sp, #24]
                mask += (mask_stride - w);
 800a56e:	eba3 030b 	sub.w	r3, r3, fp
                dest_buf += (dest_stride - w);
 800a572:	006a      	lsls	r2, r5, #1
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 800a574:	eb06 4806 	add.w	r8, r6, r6, lsl #16
                dest_buf += (dest_stride - w);
 800a578:	9207      	str	r2, [sp, #28]
                mask += (mask_stride - w);
 800a57a:	9308      	str	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	42a3      	cmp	r3, r4
 800a580:	f77f ae87 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
 800a584:	464f      	mov	r7, r9
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	e009      	b.n	800a5a0 <lv_draw_sw_blend_basic+0x42c>
                    FILL_NORMAL_MASK_PX(color)
 800a58c:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a590:	2aff      	cmp	r2, #255	; 0xff
 800a592:	d128      	bne.n	800a5e6 <lv_draw_sw_blend_basic+0x472>
 800a594:	f8aa 6000 	strh.w	r6, [sl]
 800a598:	f10a 0a02 	add.w	sl, sl, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800a59c:	f109 0901 	add.w	r9, r9, #1
 800a5a0:	45cb      	cmp	fp, r9
 800a5a2:	dd01      	ble.n	800a5a8 <lv_draw_sw_blend_basic+0x434>
 800a5a4:	07b8      	lsls	r0, r7, #30
 800a5a6:	d1f1      	bne.n	800a58c <lv_draw_sw_blend_basic+0x418>
 800a5a8:	4655      	mov	r5, sl
                for(; x <= x_end4; x += 4) {
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	454b      	cmp	r3, r9
 800a5ae:	da22      	bge.n	800a5f6 <lv_draw_sw_blend_basic+0x482>
 800a5b0:	463b      	mov	r3, r7
 800a5b2:	46aa      	mov	sl, r5
                for(; x < w ; x++) {
 800a5b4:	eba9 0207 	sub.w	r2, r9, r7
 800a5b8:	9204      	str	r2, [sp, #16]
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	441a      	add	r2, r3
 800a5be:	4593      	cmp	fp, r2
 800a5c0:	dc57      	bgt.n	800a672 <lv_draw_sw_blend_basic+0x4fe>
 800a5c2:	ebab 0309 	sub.w	r3, fp, r9
                dest_buf += (dest_stride - w);
 800a5c6:	45cb      	cmp	fp, r9
 800a5c8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800a5cc:	bfbc      	itt	lt
 800a5ce:	2200      	movlt	r2, #0
                mask += (mask_stride - w);
 800a5d0:	2300      	movlt	r3, #0
                dest_buf += (dest_stride - w);
 800a5d2:	9907      	ldr	r1, [sp, #28]
            for(y = 0; y < h; y++) {
 800a5d4:	3401      	adds	r4, #1
                dest_buf += (dest_stride - w);
 800a5d6:	440a      	add	r2, r1
 800a5d8:	eb05 0a02 	add.w	sl, r5, r2
                mask += (mask_stride - w);
 800a5dc:	9a08      	ldr	r2, [sp, #32]
 800a5de:	4413      	add	r3, r2
 800a5e0:	eb07 0903 	add.w	r9, r7, r3
            for(y = 0; y < h; y++) {
 800a5e4:	e7ca      	b.n	800a57c <lv_draw_sw_blend_basic+0x408>
                    FILL_NORMAL_MASK_PX(color)
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f8ba 1000 	ldrh.w	r1, [sl]
 800a5ec:	f7ff fcaa 	bl	8009f44 <lv_color_mix>
 800a5f0:	f8aa 0000 	strh.w	r0, [sl]
 800a5f4:	e7d0      	b.n	800a598 <lv_draw_sw_blend_basic+0x424>
                    uint32_t mask32 = *((uint32_t *)mask);
 800a5f6:	f857 3b04 	ldr.w	r3, [r7], #4
                    if(mask32 == 0xFFFFFFFF) {
 800a5fa:	1c59      	adds	r1, r3, #1
 800a5fc:	d10c      	bne.n	800a618 <lv_draw_sw_blend_basic+0x4a4>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 800a5fe:	07aa      	lsls	r2, r5, #30
 800a600:	d004      	beq.n	800a60c <lv_draw_sw_blend_basic+0x498>
                            *(dest_buf + 0) = color;
 800a602:	802e      	strh	r6, [r5, #0]
                            *d = c32;
 800a604:	f8c5 8002 	str.w	r8, [r5, #2]
                        FILL_NORMAL_MASK_PX(color)
 800a608:	80ee      	strh	r6, [r5, #6]
 800a60a:	e001      	b.n	800a610 <lv_draw_sw_blend_basic+0x49c>
                            *(d + 1) = c32;
 800a60c:	e9c5 8800 	strd	r8, r8, [r5]
                for(; x <= x_end4; x += 4) {
 800a610:	f109 0904 	add.w	r9, r9, #4
 800a614:	3508      	adds	r5, #8
 800a616:	e7c8      	b.n	800a5aa <lv_draw_sw_blend_basic+0x436>
                    else if(mask32) {
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0f9      	beq.n	800a610 <lv_draw_sw_blend_basic+0x49c>
                        FILL_NORMAL_MASK_PX(color)
 800a61c:	f817 2c04 	ldrb.w	r2, [r7, #-4]
 800a620:	2aff      	cmp	r2, #255	; 0xff
 800a622:	d114      	bne.n	800a64e <lv_draw_sw_blend_basic+0x4da>
 800a624:	802e      	strh	r6, [r5, #0]
                        FILL_NORMAL_MASK_PX(color)
 800a626:	f817 2c03 	ldrb.w	r2, [r7, #-3]
 800a62a:	2aff      	cmp	r2, #255	; 0xff
 800a62c:	d115      	bne.n	800a65a <lv_draw_sw_blend_basic+0x4e6>
 800a62e:	806e      	strh	r6, [r5, #2]
                        FILL_NORMAL_MASK_PX(color)
 800a630:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 800a634:	2aff      	cmp	r2, #255	; 0xff
 800a636:	d116      	bne.n	800a666 <lv_draw_sw_blend_basic+0x4f2>
 800a638:	80ae      	strh	r6, [r5, #4]
                        FILL_NORMAL_MASK_PX(color)
 800a63a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a63e:	2aff      	cmp	r2, #255	; 0xff
 800a640:	d0e2      	beq.n	800a608 <lv_draw_sw_blend_basic+0x494>
 800a642:	4630      	mov	r0, r6
 800a644:	88e9      	ldrh	r1, [r5, #6]
 800a646:	f7ff fc7d 	bl	8009f44 <lv_color_mix>
 800a64a:	80e8      	strh	r0, [r5, #6]
 800a64c:	e7e0      	b.n	800a610 <lv_draw_sw_blend_basic+0x49c>
                        FILL_NORMAL_MASK_PX(color)
 800a64e:	4630      	mov	r0, r6
 800a650:	8829      	ldrh	r1, [r5, #0]
 800a652:	f7ff fc77 	bl	8009f44 <lv_color_mix>
 800a656:	8028      	strh	r0, [r5, #0]
 800a658:	e7e5      	b.n	800a626 <lv_draw_sw_blend_basic+0x4b2>
                        FILL_NORMAL_MASK_PX(color)
 800a65a:	4630      	mov	r0, r6
 800a65c:	8869      	ldrh	r1, [r5, #2]
 800a65e:	f7ff fc71 	bl	8009f44 <lv_color_mix>
 800a662:	8068      	strh	r0, [r5, #2]
 800a664:	e7e4      	b.n	800a630 <lv_draw_sw_blend_basic+0x4bc>
                        FILL_NORMAL_MASK_PX(color)
 800a666:	4630      	mov	r0, r6
 800a668:	88a9      	ldrh	r1, [r5, #4]
 800a66a:	f7ff fc6b 	bl	8009f44 <lv_color_mix>
 800a66e:	80a8      	strh	r0, [r5, #4]
 800a670:	e7e3      	b.n	800a63a <lv_draw_sw_blend_basic+0x4c6>
                    FILL_NORMAL_MASK_PX(color)
 800a672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a676:	2aff      	cmp	r2, #255	; 0xff
 800a678:	d104      	bne.n	800a684 <lv_draw_sw_blend_basic+0x510>
 800a67a:	f8aa 6000 	strh.w	r6, [sl]
 800a67e:	f10a 0a02 	add.w	sl, sl, #2
                for(; x < w ; x++) {
 800a682:	e79a      	b.n	800a5ba <lv_draw_sw_blend_basic+0x446>
                    FILL_NORMAL_MASK_PX(color)
 800a684:	4630      	mov	r0, r6
 800a686:	f8ba 1000 	ldrh.w	r1, [sl]
 800a68a:	9309      	str	r3, [sp, #36]	; 0x24
 800a68c:	f7ff fc5a 	bl	8009f44 <lv_color_mix>
 800a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a692:	f8aa 0000 	strh.w	r0, [sl]
 800a696:	e7f2      	b.n	800a67e <lv_draw_sw_blend_basic+0x50a>
            last_dest_color.full = dest_buf[0].full;
 800a698:	f8ba c000 	ldrh.w	ip, [sl]
                dest_buf += dest_stride;
 800a69c:	006a      	lsls	r2, r5, #1
 800a69e:	9206      	str	r2, [sp, #24]
            last_res_color.full = dest_buf[0].full;
 800a6a0:	4660      	mov	r0, ip
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800a6a2:	461a      	mov	r2, r3
            for(y = 0; y < h; y++) {
 800a6a4:	461f      	mov	r7, r3
                mask += (mask_stride - w);
 800a6a6:	ea2b 78eb 	bic.w	r8, fp, fp, asr #31
            for(y = 0; y < h; y++) {
 800a6aa:	9905      	ldr	r1, [sp, #20]
 800a6ac:	42b9      	cmp	r1, r7
 800a6ae:	f77f adf0 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
                for(x = 0; x < w; x++) {
 800a6b2:	2500      	movs	r5, #0
 800a6b4:	e01e      	b.n	800a6f4 <lv_draw_sw_blend_basic+0x580>
                    if(*mask) {
 800a6b6:	f819 1005 	ldrb.w	r1, [r9, r5]
 800a6ba:	b1d1      	cbz	r1, 800a6f2 <lv_draw_sw_blend_basic+0x57e>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	eb0a 0e45 	add.w	lr, sl, r5, lsl #1
 800a6c2:	d010      	beq.n	800a6e6 <lv_draw_sw_blend_basic+0x572>
 800a6c4:	29ff      	cmp	r1, #255	; 0xff
 800a6c6:	bf0e      	itee	eq
 800a6c8:	4622      	moveq	r2, r4
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 800a6ca:	fb04 f201 	mulne.w	r2, r4, r1
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800a6ce:	0a12      	lsrne	r2, r2, #8
                                else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f8be 1000 	ldrh.w	r1, [lr]
 800a6d6:	f7ff fc35 	bl	8009f44 <lv_color_mix>
                            last_mask = *mask;
 800a6da:	f819 3005 	ldrb.w	r3, [r9, r5]
                            last_dest_color.full = dest_buf[x].full;
 800a6de:	f83a c015 	ldrh.w	ip, [sl, r5, lsl #1]
                                else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 800a6e2:	b280      	uxth	r0, r0
                            last_dest_color.full = dest_buf[x].full;
 800a6e4:	e003      	b.n	800a6ee <lv_draw_sw_blend_basic+0x57a>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800a6e6:	f83a 1015 	ldrh.w	r1, [sl, r5, lsl #1]
 800a6ea:	4561      	cmp	r1, ip
 800a6ec:	d1f0      	bne.n	800a6d0 <lv_draw_sw_blend_basic+0x55c>
                        dest_buf[x] = last_res_color;
 800a6ee:	f82a 0015 	strh.w	r0, [sl, r5, lsl #1]
                for(x = 0; x < w; x++) {
 800a6f2:	3501      	adds	r5, #1
 800a6f4:	45ab      	cmp	fp, r5
 800a6f6:	dcde      	bgt.n	800a6b6 <lv_draw_sw_blend_basic+0x542>
                dest_buf += dest_stride;
 800a6f8:	9906      	ldr	r1, [sp, #24]
            for(y = 0; y < h; y++) {
 800a6fa:	3701      	adds	r7, #1
                dest_buf += dest_stride;
 800a6fc:	448a      	add	sl, r1
                mask += (mask_stride - w);
 800a6fe:	9904      	ldr	r1, [sp, #16]
 800a700:	eba1 010b 	sub.w	r1, r1, fp
 800a704:	4441      	add	r1, r8
 800a706:	4489      	add	r9, r1
            for(y = 0; y < h; y++) {
 800a708:	e7cf      	b.n	800a6aa <lv_draw_sw_blend_basic+0x536>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	f8b8 8008 	ldrh.w	r8, [r8, #8]
    switch(blend_mode) {
 800a714:	f63f adbd 	bhi.w	800a292 <lv_draw_sw_blend_basic+0x11e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a718:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a71c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800a720:	3201      	adds	r2, #1
 800a722:	1a52      	subs	r2, r2, r1
    int32_t w = lv_area_get_width(dest_area);
 800a724:	b212      	sxth	r2, r2
 800a726:	9205      	str	r2, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a728:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800a72c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800a730:	3201      	adds	r2, #1
 800a732:	1a52      	subs	r2, r2, r1
    int32_t h = lv_area_get_height(dest_area);
 800a734:	b212      	sxth	r2, r2
 800a736:	9206      	str	r2, [sp, #24]
 800a738:	4ab2      	ldr	r2, [pc, #712]	; (800aa04 <lv_draw_sw_blend_basic+0x890>)
 800a73a:	f8ba 6000 	ldrh.w	r6, [sl]
 800a73e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
    if(mask == NULL) {
 800a742:	006b      	lsls	r3, r5, #1
 800a744:	9307      	str	r3, [sp, #28]
 800a746:	f1b9 0f00 	cmp.w	r9, #0
 800a74a:	d120      	bne.n	800a78e <lv_draw_sw_blend_basic+0x61a>
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 800a74c:	4622      	mov	r2, r4
 800a74e:	4631      	mov	r1, r6
 800a750:	4640      	mov	r0, r8
 800a752:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 800a754:	464b      	mov	r3, r9
 800a756:	9a06      	ldr	r2, [sp, #24]
 800a758:	429a      	cmp	r2, r3
 800a75a:	f77f ad9a 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
 800a75e:	46d1      	mov	r9, sl
            for(x = 0; x < w; x++) {
 800a760:	2500      	movs	r5, #0
 800a762:	e00d      	b.n	800a780 <lv_draw_sw_blend_basic+0x60c>
                if(last_dest_color.full != dest_buf[x].full) {
 800a764:	f8b9 b000 	ldrh.w	fp, [r9]
 800a768:	45b3      	cmp	fp, r6
 800a76a:	d005      	beq.n	800a778 <lv_draw_sw_blend_basic+0x604>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 800a76c:	4622      	mov	r2, r4
 800a76e:	4659      	mov	r1, fp
 800a770:	4640      	mov	r0, r8
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	47b8      	blx	r7
 800a776:	9b04      	ldr	r3, [sp, #16]
                if(last_dest_color.full != dest_buf[x].full) {
 800a778:	465e      	mov	r6, fp
                dest_buf[x] = last_res_color;
 800a77a:	f829 0b02 	strh.w	r0, [r9], #2
            for(x = 0; x < w; x++) {
 800a77e:	3501      	adds	r5, #1
 800a780:	9a05      	ldr	r2, [sp, #20]
 800a782:	42aa      	cmp	r2, r5
 800a784:	dcee      	bgt.n	800a764 <lv_draw_sw_blend_basic+0x5f0>
            dest_buf += dest_stride;
 800a786:	9a07      	ldr	r2, [sp, #28]
        for(y = 0; y < h; y++) {
 800a788:	3301      	adds	r3, #1
            dest_buf += dest_stride;
 800a78a:	4492      	add	sl, r2
        for(y = 0; y < h; y++) {
 800a78c:	e7e3      	b.n	800a756 <lv_draw_sw_blend_basic+0x5e2>
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800a78e:	f899 2000 	ldrb.w	r2, [r9]
        last_res_color =  blend_fp(color, last_dest_color, opa_tmp);
 800a792:	4631      	mov	r1, r6
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800a794:	2afc      	cmp	r2, #252	; 0xfc
 800a796:	bf94      	ite	ls
 800a798:	4362      	mulls	r2, r4
 800a79a:	4622      	movhi	r2, r4
        last_res_color =  blend_fp(color, last_dest_color, opa_tmp);
 800a79c:	4640      	mov	r0, r8
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800a79e:	bf98      	it	ls
 800a7a0:	0a12      	lsrls	r2, r2, #8
        last_res_color =  blend_fp(color, last_dest_color, opa_tmp);
 800a7a2:	47b8      	blx	r7
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800a7a4:	2100      	movs	r1, #0
        for(y = 0; y < h; y++) {
 800a7a6:	468b      	mov	fp, r1
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	455b      	cmp	r3, fp
 800a7ac:	f77f ad71 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800a7b0:	2500      	movs	r5, #0
 800a7b2:	e01b      	b.n	800a7ec <lv_draw_sw_blend_basic+0x678>
                if(mask[x] == 0) continue;
 800a7b4:	f819 2005 	ldrb.w	r2, [r9, r5]
 800a7b8:	b1ba      	cbz	r2, 800a7ea <lv_draw_sw_blend_basic+0x676>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 800a7ba:	428a      	cmp	r2, r1
 800a7bc:	eb0a 0345 	add.w	r3, sl, r5, lsl #1
 800a7c0:	d103      	bne.n	800a7ca <lv_draw_sw_blend_basic+0x656>
 800a7c2:	f83a c015 	ldrh.w	ip, [sl, r5, lsl #1]
 800a7c6:	45b4      	cmp	ip, r6
 800a7c8:	d00d      	beq.n	800a7e6 <lv_draw_sw_blend_basic+0x672>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800a7ca:	2afc      	cmp	r2, #252	; 0xfc
 800a7cc:	bf98      	it	ls
 800a7ce:	4362      	mulls	r2, r4
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 800a7d0:	8819      	ldrh	r1, [r3, #0]
 800a7d2:	bf88      	it	hi
 800a7d4:	4622      	movhi	r2, r4
 800a7d6:	4640      	mov	r0, r8
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800a7d8:	bf98      	it	ls
 800a7da:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 800a7dc:	47b8      	blx	r7
                    last_mask = mask[x];
 800a7de:	f819 1005 	ldrb.w	r1, [r9, r5]
                    last_dest_color.full = dest_buf[x].full;
 800a7e2:	f83a 6015 	ldrh.w	r6, [sl, r5, lsl #1]
                dest_buf[x] = last_res_color;
 800a7e6:	f82a 0015 	strh.w	r0, [sl, r5, lsl #1]
            for(x = 0; x < w; x++) {
 800a7ea:	3501      	adds	r5, #1
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	dce0      	bgt.n	800a7b4 <lv_draw_sw_blend_basic+0x640>
            dest_buf += dest_stride;
 800a7f2:	9b07      	ldr	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 800a7f4:	f10b 0b01 	add.w	fp, fp, #1
            dest_buf += dest_stride;
 800a7f8:	449a      	add	sl, r3
            mask += mask_stride;
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	4499      	add	r9, r3
        for(y = 0; y < h; y++) {
 800a7fe:	e7d3      	b.n	800a7a8 <lv_draw_sw_blend_basic+0x634>
        if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800a800:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
 800a804:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800a808:	f10b 0b01 	add.w	fp, fp, #1
 800a80c:	ebab 0b02 	sub.w	fp, fp, r2
 800a810:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800a814:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 800a818:	3201      	adds	r2, #1
 800a81a:	1a12      	subs	r2, r2, r0
 800a81c:	b212      	sxth	r2, r2
 800a81e:	fa0f fb8b 	sxth.w	fp, fp
 800a822:	9205      	str	r2, [sp, #20]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 80ef 	bne.w	800aa08 <lv_draw_sw_blend_basic+0x894>
    if(mask == NULL) {
 800a82a:	006a      	lsls	r2, r5, #1
 800a82c:	9207      	str	r2, [sp, #28]
 800a82e:	9a06      	ldr	r2, [sp, #24]
 800a830:	0052      	lsls	r2, r2, #1
 800a832:	9206      	str	r2, [sp, #24]
 800a834:	f1b9 0f00 	cmp.w	r9, #0
 800a838:	d12b      	bne.n	800a892 <lv_draw_sw_blend_basic+0x71e>
        if(opa >= LV_OPA_MAX) {
 800a83a:	2cfc      	cmp	r4, #252	; 0xfc
 800a83c:	d923      	bls.n	800a886 <lv_draw_sw_blend_basic+0x712>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800a83e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 800a842:	9b05      	ldr	r3, [sp, #20]
 800a844:	454b      	cmp	r3, r9
 800a846:	f77f ad24 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800a84a:	4639      	mov	r1, r7
 800a84c:	4650      	mov	r0, sl
 800a84e:	465a      	mov	r2, fp
 800a850:	f005 fae6 	bl	800fe20 <lv_memcpy>
                dest_buf += dest_stride;
 800a854:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 800a856:	f109 0901 	add.w	r9, r9, #1
                dest_buf += dest_stride;
 800a85a:	449a      	add	sl, r3
                src_buf += src_stride;
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800a860:	e7ef      	b.n	800a842 <lv_draw_sw_blend_basic+0x6ce>
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 800a862:	f83a 1015 	ldrh.w	r1, [sl, r5, lsl #1]
 800a866:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 800a86a:	4622      	mov	r2, r4
 800a86c:	f7ff fb6a 	bl	8009f44 <lv_color_mix>
 800a870:	f82a 0015 	strh.w	r0, [sl, r5, lsl #1]
                for(x = 0; x < w; x++) {
 800a874:	3501      	adds	r5, #1
 800a876:	45ab      	cmp	fp, r5
 800a878:	dcf3      	bgt.n	800a862 <lv_draw_sw_blend_basic+0x6ee>
                dest_buf += dest_stride;
 800a87a:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 800a87c:	f109 0901 	add.w	r9, r9, #1
                dest_buf += dest_stride;
 800a880:	449a      	add	sl, r3
                src_buf += src_stride;
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800a886:	9b05      	ldr	r3, [sp, #20]
 800a888:	454b      	cmp	r3, r9
 800a88a:	f77f ad02 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
                for(x = 0; x < w; x++) {
 800a88e:	2500      	movs	r5, #0
 800a890:	e7f1      	b.n	800a876 <lv_draw_sw_blend_basic+0x702>
        if(opa > LV_OPA_MAX) {
 800a892:	2cfd      	cmp	r4, #253	; 0xfd
 800a894:	f240 80b3 	bls.w	800a9fe <lv_draw_sw_blend_basic+0x88a>
            int32_t x_end4 = w - 4;
 800a898:	f1ab 0204 	sub.w	r2, fp, #4
 800a89c:	9209      	str	r2, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	9b05      	ldr	r3, [sp, #20]
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	f77f acf4 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
 800a8aa:	464d      	mov	r5, r9
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a8ac:	2400      	movs	r4, #0
 800a8ae:	e009      	b.n	800a8c4 <lv_draw_sw_blend_basic+0x750>
                    MAP_NORMAL_MASK_PX(x)
 800a8b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a8b4:	b12a      	cbz	r2, 800a8c2 <lv_draw_sw_blend_basic+0x74e>
 800a8b6:	2aff      	cmp	r2, #255	; 0xff
 800a8b8:	d11d      	bne.n	800a8f6 <lv_draw_sw_blend_basic+0x782>
 800a8ba:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800a8be:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800a8c2:	3401      	adds	r4, #1
 800a8c4:	45a3      	cmp	fp, r4
 800a8c6:	46a8      	mov	r8, r5
 800a8c8:	dd01      	ble.n	800a8ce <lv_draw_sw_blend_basic+0x75a>
 800a8ca:	07ab      	lsls	r3, r5, #30
 800a8cc:	d1f0      	bne.n	800a8b0 <lv_draw_sw_blend_basic+0x73c>
 800a8ce:	eb0a 0544 	add.w	r5, sl, r4, lsl #1
 800a8d2:	eb07 0644 	add.w	r6, r7, r4, lsl #1
                for(; x < x_end4; x += 4) {
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	dc15      	bgt.n	800a908 <lv_draw_sw_blend_basic+0x794>
 800a8dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                for(; x < w ; x++) {
 800a8e0:	45a3      	cmp	fp, r4
 800a8e2:	dc57      	bgt.n	800a994 <lv_draw_sw_blend_basic+0x820>
                dest_buf += dest_stride;
 800a8e4:	9b07      	ldr	r3, [sp, #28]
 800a8e6:	449a      	add	sl, r3
                src_buf += src_stride;
 800a8e8:	9b06      	ldr	r3, [sp, #24]
 800a8ea:	441f      	add	r7, r3
                mask += mask_stride;
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	4499      	add	r9, r3
            for(y = 0; y < h; y++) {
 800a8f0:	9b08      	ldr	r3, [sp, #32]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	e7d3      	b.n	800a89e <lv_draw_sw_blend_basic+0x72a>
                    MAP_NORMAL_MASK_PX(x)
 800a8f6:	f83a 1014 	ldrh.w	r1, [sl, r4, lsl #1]
 800a8fa:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800a8fe:	f7ff fb21 	bl	8009f44 <lv_color_mix>
 800a902:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
 800a906:	e7dc      	b.n	800a8c2 <lv_draw_sw_blend_basic+0x74e>
                    if(*mask32) {
 800a908:	f8d8 3000 	ldr.w	r3, [r8]
 800a90c:	b14b      	cbz	r3, 800a922 <lv_draw_sw_blend_basic+0x7ae>
                        if((*mask32) == 0xFFFFFFFF) {
 800a90e:	3301      	adds	r3, #1
 800a910:	d10d      	bne.n	800a92e <lv_draw_sw_blend_basic+0x7ba>
                            dest_buf[x] = src_buf[x];
 800a912:	8833      	ldrh	r3, [r6, #0]
 800a914:	802b      	strh	r3, [r5, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 800a916:	8873      	ldrh	r3, [r6, #2]
 800a918:	806b      	strh	r3, [r5, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 800a91a:	88b3      	ldrh	r3, [r6, #4]
 800a91c:	80ab      	strh	r3, [r5, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800a91e:	88f3      	ldrh	r3, [r6, #6]
 800a920:	80eb      	strh	r3, [r5, #6]
                    mask32++;
 800a922:	f108 0804 	add.w	r8, r8, #4
                for(; x < x_end4; x += 4) {
 800a926:	3404      	adds	r4, #4
 800a928:	3508      	adds	r5, #8
 800a92a:	3608      	adds	r6, #8
 800a92c:	e7d3      	b.n	800a8d6 <lv_draw_sw_blend_basic+0x762>
                            MAP_NORMAL_MASK_PX(x)
 800a92e:	f898 2000 	ldrb.w	r2, [r8]
 800a932:	b11a      	cbz	r2, 800a93c <lv_draw_sw_blend_basic+0x7c8>
 800a934:	2aff      	cmp	r2, #255	; 0xff
 800a936:	d11b      	bne.n	800a970 <lv_draw_sw_blend_basic+0x7fc>
 800a938:	8833      	ldrh	r3, [r6, #0]
 800a93a:	802b      	strh	r3, [r5, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 800a93c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a940:	b11a      	cbz	r2, 800a94a <lv_draw_sw_blend_basic+0x7d6>
 800a942:	2aff      	cmp	r2, #255	; 0xff
 800a944:	d11a      	bne.n	800a97c <lv_draw_sw_blend_basic+0x808>
 800a946:	8873      	ldrh	r3, [r6, #2]
 800a948:	806b      	strh	r3, [r5, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 800a94a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a94e:	b11a      	cbz	r2, 800a958 <lv_draw_sw_blend_basic+0x7e4>
 800a950:	2aff      	cmp	r2, #255	; 0xff
 800a952:	d119      	bne.n	800a988 <lv_draw_sw_blend_basic+0x814>
 800a954:	88b3      	ldrh	r3, [r6, #4]
 800a956:	80ab      	strh	r3, [r5, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800a958:	f898 2003 	ldrb.w	r2, [r8, #3]
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	d0e0      	beq.n	800a922 <lv_draw_sw_blend_basic+0x7ae>
 800a960:	2aff      	cmp	r2, #255	; 0xff
 800a962:	d0dc      	beq.n	800a91e <lv_draw_sw_blend_basic+0x7aa>
 800a964:	88e9      	ldrh	r1, [r5, #6]
 800a966:	88f0      	ldrh	r0, [r6, #6]
 800a968:	f7ff faec 	bl	8009f44 <lv_color_mix>
 800a96c:	80e8      	strh	r0, [r5, #6]
 800a96e:	e7d8      	b.n	800a922 <lv_draw_sw_blend_basic+0x7ae>
                            MAP_NORMAL_MASK_PX(x)
 800a970:	8829      	ldrh	r1, [r5, #0]
 800a972:	8830      	ldrh	r0, [r6, #0]
 800a974:	f7ff fae6 	bl	8009f44 <lv_color_mix>
 800a978:	8028      	strh	r0, [r5, #0]
 800a97a:	e7df      	b.n	800a93c <lv_draw_sw_blend_basic+0x7c8>
                            MAP_NORMAL_MASK_PX(x + 1)
 800a97c:	8869      	ldrh	r1, [r5, #2]
 800a97e:	8870      	ldrh	r0, [r6, #2]
 800a980:	f7ff fae0 	bl	8009f44 <lv_color_mix>
 800a984:	8068      	strh	r0, [r5, #2]
 800a986:	e7e0      	b.n	800a94a <lv_draw_sw_blend_basic+0x7d6>
                            MAP_NORMAL_MASK_PX(x + 2)
 800a988:	88a9      	ldrh	r1, [r5, #4]
 800a98a:	88b0      	ldrh	r0, [r6, #4]
 800a98c:	f7ff fada 	bl	8009f44 <lv_color_mix>
 800a990:	80a8      	strh	r0, [r5, #4]
 800a992:	e7e1      	b.n	800a958 <lv_draw_sw_blend_basic+0x7e4>
                    MAP_NORMAL_MASK_PX(x)
 800a994:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800a998:	b12a      	cbz	r2, 800a9a6 <lv_draw_sw_blend_basic+0x832>
 800a99a:	2aff      	cmp	r2, #255	; 0xff
 800a99c:	d105      	bne.n	800a9aa <lv_draw_sw_blend_basic+0x836>
 800a99e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800a9a2:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
                for(; x < w ; x++) {
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	e79a      	b.n	800a8e0 <lv_draw_sw_blend_basic+0x76c>
                    MAP_NORMAL_MASK_PX(x)
 800a9aa:	f83a 1014 	ldrh.w	r1, [sl, r4, lsl #1]
 800a9ae:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800a9b2:	f7ff fac7 	bl	8009f44 <lv_color_mix>
 800a9b6:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
 800a9ba:	e7f4      	b.n	800a9a6 <lv_draw_sw_blend_basic+0x832>
                    if(mask[x]) {
 800a9bc:	f819 2006 	ldrb.w	r2, [r9, r6]
 800a9c0:	b16a      	cbz	r2, 800a9de <lv_draw_sw_blend_basic+0x86a>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800a9c2:	2afc      	cmp	r2, #252	; 0xfc
 800a9c4:	bf94      	ite	ls
 800a9c6:	4362      	mulls	r2, r4
 800a9c8:	4622      	movhi	r2, r4
                            dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800a9ca:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 800a9ce:	f837 0016 	ldrh.w	r0, [r7, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800a9d2:	bf98      	it	ls
 800a9d4:	0a12      	lsrls	r2, r2, #8
                            dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800a9d6:	f7ff fab5 	bl	8009f44 <lv_color_mix>
 800a9da:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
                for(x = 0; x < w; x++) {
 800a9de:	3601      	adds	r6, #1
 800a9e0:	45b3      	cmp	fp, r6
 800a9e2:	dceb      	bgt.n	800a9bc <lv_draw_sw_blend_basic+0x848>
                dest_buf += dest_stride;
 800a9e4:	9b07      	ldr	r3, [sp, #28]
            for(y = 0; y < h; y++) {
 800a9e6:	3501      	adds	r5, #1
                dest_buf += dest_stride;
 800a9e8:	449a      	add	sl, r3
                src_buf += src_stride;
 800a9ea:	9b06      	ldr	r3, [sp, #24]
 800a9ec:	441f      	add	r7, r3
                mask += mask_stride;
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	4499      	add	r9, r3
            for(y = 0; y < h; y++) {
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	f77f ac4c 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
                for(x = 0; x < w; x++) {
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	e7f0      	b.n	800a9e0 <lv_draw_sw_blend_basic+0x86c>
            for(y = 0; y < h; y++) {
 800a9fe:	461d      	mov	r5, r3
 800aa00:	e7f7      	b.n	800a9f2 <lv_draw_sw_blend_basic+0x87e>
 800aa02:	bf00      	nop
 800aa04:	0801a388 	.word	0x0801a388
    switch(blend_mode) {
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	f63f ac40 	bhi.w	800a292 <lv_draw_sw_blend_basic+0x11e>
 800aa12:	4a22      	ldr	r2, [pc, #136]	; (800aa9c <lv_draw_sw_blend_basic+0x928>)
 800aa14:	006d      	lsls	r5, r5, #1
 800aa16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa1a:	9307      	str	r3, [sp, #28]
    if(mask == NULL) {
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800aa22:	f1b9 0f00 	cmp.w	r9, #0
 800aa26:	d016      	beq.n	800aa56 <lv_draw_sw_blend_basic+0x8e2>
        for(y = 0; y < h; y++) {
 800aa28:	460b      	mov	r3, r1
 800aa2a:	9a05      	ldr	r2, [sp, #20]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	f77f ac30 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800aa32:	2600      	movs	r6, #0
 800aa34:	e02a      	b.n	800aa8c <lv_draw_sw_blend_basic+0x918>
                dest_buf[x] = blend_fp(src_buf[x], dest_buf[x], opa);
 800aa36:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 800aa3a:	f837 0016 	ldrh.w	r0, [r7, r6, lsl #1]
 800aa3e:	4622      	mov	r2, r4
 800aa40:	9b07      	ldr	r3, [sp, #28]
 800aa42:	4798      	blx	r3
 800aa44:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
            for(x = 0; x < w; x++) {
 800aa48:	3601      	adds	r6, #1
 800aa4a:	45b3      	cmp	fp, r6
 800aa4c:	dcf3      	bgt.n	800aa36 <lv_draw_sw_blend_basic+0x8c2>
            dest_buf += dest_stride;
 800aa4e:	44aa      	add	sl, r5
            src_buf += src_stride;
 800aa50:	4447      	add	r7, r8
        for(y = 0; y < h; y++) {
 800aa52:	f109 0901 	add.w	r9, r9, #1
 800aa56:	9b05      	ldr	r3, [sp, #20]
 800aa58:	454b      	cmp	r3, r9
 800aa5a:	f77f ac1a 	ble.w	800a292 <lv_draw_sw_blend_basic+0x11e>
            for(x = 0; x < w; x++) {
 800aa5e:	2600      	movs	r6, #0
 800aa60:	e7f3      	b.n	800aa4a <lv_draw_sw_blend_basic+0x8d6>
                if(mask[x] == 0) continue;
 800aa62:	f819 2006 	ldrb.w	r2, [r9, r6]
 800aa66:	b182      	cbz	r2, 800aa8a <lv_draw_sw_blend_basic+0x916>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800aa68:	2afc      	cmp	r2, #252	; 0xfc
 800aa6a:	bf98      	it	ls
 800aa6c:	4362      	mulls	r2, r4
 800aa6e:	9306      	str	r3, [sp, #24]
 800aa70:	bf88      	it	hi
 800aa72:	4622      	movhi	r2, r4
                dest_buf[x] = blend_fp(src_buf[x], dest_buf[x], opa_tmp);
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
 800aa7a:	f837 0016 	ldrh.w	r0, [r7, r6, lsl #1]
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800aa7e:	bf98      	it	ls
 800aa80:	0a12      	lsrls	r2, r2, #8
                dest_buf[x] = blend_fp(src_buf[x], dest_buf[x], opa_tmp);
 800aa82:	4798      	blx	r3
 800aa84:	9b06      	ldr	r3, [sp, #24]
 800aa86:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
            for(x = 0; x < w; x++) {
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	45b3      	cmp	fp, r6
 800aa8e:	dce8      	bgt.n	800aa62 <lv_draw_sw_blend_basic+0x8ee>
            mask += mask_stride;
 800aa90:	9a04      	ldr	r2, [sp, #16]
            dest_buf += dest_stride;
 800aa92:	44aa      	add	sl, r5
            src_buf += src_stride;
 800aa94:	4447      	add	r7, r8
            mask += mask_stride;
 800aa96:	4491      	add	r9, r2
        for(y = 0; y < h; y++) {
 800aa98:	3301      	adds	r3, #1
 800aa9a:	e7c6      	b.n	800aa2a <lv_draw_sw_blend_basic+0x8b6>
 800aa9c:	0801a388 	.word	0x0801a388

0800aaa0 <lv_draw_sw_img_decoded>:
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	469a      	mov	sl, r3
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 800aaa6:	6883      	ldr	r3, [r0, #8]
{
 800aaa8:	4614      	mov	r4, r2
    dest->x1 = src->x1;
 800aaaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aaae:	b0b5      	sub	sp, #212	; 0xd4
 800aab0:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    dest->y1 = src->y1;
 800aab4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800aab8:	4683      	mov	fp, r0
 800aaba:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    dest->x2 = src->x2;
 800aabe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 800aac2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800aac6:	a816      	add	r0, sp, #88	; 0x58
{
 800aac8:	460e      	mov	r6, r1
 800aaca:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    dest->x2 = src->x2;
 800aace:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 800aad2:	f89d 80f8 	ldrb.w	r8, [sp, #248]	; 0xf8
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800aad6:	f7fd f97b 	bl	8007dd0 <lv_draw_mask_is_any>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800aada:	211c      	movs	r1, #28
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800aadc:	9003      	str	r0, [sp, #12]
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800aade:	a81a      	add	r0, sp, #104	; 0x68
 800aae0:	f005 fb66 	bl	80101b0 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 800aae4:	7af3      	ldrb	r3, [r6, #11]
 800aae6:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 800aaea:	7b33      	ldrb	r3, [r6, #12]
 800aaec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aaf0:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	b99b      	cbnz	r3, 800ab20 <lv_draw_sw_img_decoded+0x80>
 800aaf8:	6833      	ldr	r3, [r6, #0]
 800aafa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aafe:	d10f      	bne.n	800ab20 <lv_draw_sw_img_decoded+0x80>
 800ab00:	f1b8 0f04 	cmp.w	r8, #4
 800ab04:	d10c      	bne.n	800ab20 <lv_draw_sw_img_decoded+0x80>
       cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ab06:	7ab3      	ldrb	r3, [r6, #10]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 8083 	bne.w	800ac14 <lv_draw_sw_img_decoded+0x174>
        blend_dsc.blend_area = coords;
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ab0e:	4658      	mov	r0, fp
 800ab10:	a91a      	add	r1, sp, #104	; 0x68
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800ab12:	e9cd 4a1a 	strd	r4, sl, [sp, #104]	; 0x68
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ab16:	f7ff fb17 	bl	800a148 <lv_draw_sw_blend>

            lv_mem_buf_release(mask_buf);
            lv_mem_buf_release(src_buf_rgb);
        }
    }
}
 800ab1a:	b035      	add	sp, #212	; 0xd4
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = cf == LV_IMG_CF_TRUE_COLOR_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800ab20:	f1b8 0f05 	cmp.w	r8, #5
 800ab24:	bf0c      	ite	eq
 800ab26:	2303      	moveq	r3, #3
 800ab28:	2302      	movne	r3, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ab2a:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 800ab2e:	9302      	str	r3, [sp, #8]
 800ab30:	8823      	ldrh	r3, [r4, #0]
 800ab32:	f109 0901 	add.w	r9, r9, #1
 800ab36:	eba9 0903 	sub.w	r9, r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ab3a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800ab3e:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
 800ab42:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ab44:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ab48:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ab4a:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ab4e:	b21b      	sxth	r3, r3
 800ab50:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ab52:	1c4b      	adds	r3, r1, #1
 800ab54:	1a1b      	subs	r3, r3, r0
 800ab56:	b21b      	sxth	r3, r3
 800ab58:	9301      	str	r3, [sp, #4]
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800ab5a:	6833      	ldr	r3, [r6, #0]
        blend_dsc.blend_area = &blend_area;
 800ab5c:	ad18      	add	r5, sp, #96	; 0x60
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800ab5e:	9308      	str	r3, [sp, #32]
        if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR_ALPHA && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	fa0f f989 	sxth.w	r9, r9
        blend_area.x1 = draw_area.x1;
 800ab66:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
        blend_area.x2 = draw_area.x2;
 800ab6a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        blend_area.y1 = draw_area.y1;
 800ab6e:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
        blend_area.y2 = blend_area.y1;
 800ab72:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
        blend_dsc.blend_area = &blend_area;
 800ab76:	951a      	str	r5, [sp, #104]	; 0x68
        if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR_ALPHA && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 808e 	bne.w	800ac9a <lv_draw_sw_img_decoded+0x1fa>
 800ab7e:	9b08      	ldr	r3, [sp, #32]
 800ab80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab84:	f040 8089 	bne.w	800ac9a <lv_draw_sw_img_decoded+0x1fa>
 800ab88:	f1b8 0f05 	cmp.w	r8, #5
 800ab8c:	f040 8085 	bne.w	800ac9a <lv_draw_sw_img_decoded+0x1fa>
 800ab90:	7ab3      	ldrb	r3, [r6, #10]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 8081 	bne.w	800ac9a <lv_draw_sw_img_decoded+0x1fa>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800ab98:	f7fb fdf8 	bl	800678c <_lv_refr_get_disp_refreshing>
 800ab9c:	f004 fb28 	bl	800f1f0 <lv_disp_get_hor_res>
 800aba0:	4606      	mov	r6, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800aba2:	a816      	add	r0, sp, #88	; 0x58
 800aba4:	f004 fd73 	bl	800f68e <lv_area_get_size>
 800aba8:	42b0      	cmp	r0, r6
 800abaa:	d803      	bhi.n	800abb4 <lv_draw_sw_img_decoded+0x114>
 800abac:	a816      	add	r0, sp, #88	; 0x58
 800abae:	f004 fd6e 	bl	800f68e <lv_area_get_size>
 800abb2:	4606      	mov	r6, r0
            lv_color_t * src_buf_rgb = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800abb4:	0070      	lsls	r0, r6, #1
 800abb6:	f005 faad 	bl	8010114 <lv_mem_buf_get>
 800abba:	4607      	mov	r7, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800abbc:	4630      	mov	r0, r6
 800abbe:	f005 faa9 	bl	8010114 <lv_mem_buf_get>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800abc2:	2302      	movs	r3, #2
            blend_dsc.mask_area = &blend_area;
 800abc4:	951f      	str	r5, [sp, #124]	; 0x7c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800abc6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            src_buf_tmp += src_stride * (draw_area.y1 - coords->y1) * px_size_byte;
 800abca:	f9bd 505a 	ldrsh.w	r5, [sp, #90]	; 0x5a
 800abce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
            src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800abd2:	f9b4 2000 	ldrsh.w	r2, [r4]
            src_buf_tmp += src_stride * (draw_area.y1 - coords->y1) * px_size_byte;
 800abd6:	1aed      	subs	r5, r5, r3
            src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800abd8:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800abdc:	4680      	mov	r8, r0
            src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	fb09 3505 	mla	r5, r9, r5, r3
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	9a01      	ldr	r2, [sp, #4]
 800abe8:	fb05 a503 	mla	r5, r5, r3, sl
                src_buf_tmp += src_stride * px_size_byte;
 800abec:	fb03 f309 	mul.w	r3, r3, r9
            for(y = 0; y < draw_area_h; y++) {
 800abf0:	f04f 0900 	mov.w	r9, #0
                src_buf_tmp += src_stride * px_size_byte;
 800abf4:	9303      	str	r3, [sp, #12]
        uint32_t px_i = 0;
 800abf6:	464b      	mov	r3, r9
            blend_dsc.mask = mask_buf;
 800abf8:	901d      	str	r0, [sp, #116]	; 0x74
            blend_dsc.src_buf = src_buf_rgb;
 800abfa:	971b      	str	r7, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
 800abfc:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
 800ac00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac02:	454a      	cmp	r2, r9
 800ac04:	dd35      	ble.n	800ac72 <lv_draw_sw_img_decoded+0x1d2>
                map_px = src_buf_tmp;
 800ac06:	462a      	mov	r2, r5
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ac08:	2100      	movs	r1, #0
 800ac0a:	eb08 0c03 	add.w	ip, r8, r3
 800ac0e:	eb07 0e43 	add.w	lr, r7, r3, lsl #1
 800ac12:	e00e      	b.n	800ac32 <lv_draw_sw_img_decoded+0x192>
        uint8_t px_size_byte = cf == LV_IMG_CF_TRUE_COLOR_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800ac14:	2302      	movs	r3, #2
 800ac16:	e788      	b.n	800ab2a <lv_draw_sw_img_decoded+0x8a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800ac18:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
 800ac1a:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
 800ac1e:	b128      	cbz	r0, 800ac2c <lv_draw_sw_img_decoded+0x18c>
                        src_buf_rgb[px_i].full =  map_px[0] + (map_px[1] << 8);
 800ac20:	7850      	ldrb	r0, [r2, #1]
 800ac22:	7814      	ldrb	r4, [r2, #0]
 800ac24:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800ac28:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ac2c:	9802      	ldr	r0, [sp, #8]
 800ac2e:	3101      	adds	r1, #1
 800ac30:	4402      	add	r2, r0
 800ac32:	9801      	ldr	r0, [sp, #4]
 800ac34:	4288      	cmp	r0, r1
 800ac36:	dcef      	bgt.n	800ac18 <lv_draw_sw_img_decoded+0x178>
                src_buf_tmp += src_stride * px_size_byte;
 800ac38:	9a03      	ldr	r2, [sp, #12]
 800ac3a:	4453      	add	r3, sl
 800ac3c:	4415      	add	r5, r2
                if(px_i + draw_area_w <= mask_buf_size) {
 800ac3e:	4602      	mov	r2, r0
 800ac40:	441a      	add	r2, r3
 800ac42:	42b2      	cmp	r2, r6
 800ac44:	d807      	bhi.n	800ac56 <lv_draw_sw_img_decoded+0x1b6>
                    blend_area.y2 ++;
 800ac46:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
 800ac50:	f109 0901 	add.w	r9, r9, #1
 800ac54:	e7d4      	b.n	800ac00 <lv_draw_sw_img_decoded+0x160>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ac56:	4658      	mov	r0, fp
 800ac58:	a91a      	add	r1, sp, #104	; 0x68
 800ac5a:	f7ff fa75 	bl	800a148 <lv_draw_sw_blend>
                    blend_area.y1 = blend_area.y2 + 1;
 800ac5e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800ac62:	3301      	adds	r3, #1
 800ac64:	b21b      	sxth	r3, r3
 800ac66:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
 800ac6a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    px_i = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e7ee      	b.n	800ac50 <lv_draw_sw_img_decoded+0x1b0>
            if(blend_area.y1 != blend_area.y2) {
 800ac72:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800ac76:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d006      	beq.n	800ac8c <lv_draw_sw_img_decoded+0x1ec>
                blend_area.y2--;
 800ac7e:	3b01      	subs	r3, #1
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ac80:	4658      	mov	r0, fp
 800ac82:	a91a      	add	r1, sp, #104	; 0x68
                blend_area.y2--;
 800ac84:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ac88:	f7ff fa5e 	bl	800a148 <lv_draw_sw_blend>
            lv_mem_buf_release(mask_buf);
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	f005 f899 	bl	800fdc4 <lv_mem_buf_release>
            lv_mem_buf_release(src_buf_rgb);
 800ac92:	4638      	mov	r0, r7
            lv_mem_buf_release(src_buf_rgb);
 800ac94:	f005 f896 	bl	800fdc4 <lv_mem_buf_release>
}
 800ac98:	e73f      	b.n	800ab1a <lv_draw_sw_img_decoded+0x7a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800ac9a:	f7fb fd77 	bl	800678c <_lv_refr_get_disp_refreshing>
 800ac9e:	f004 faa7 	bl	800f1f0 <lv_disp_get_hor_res>
 800aca2:	4607      	mov	r7, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800aca4:	a816      	add	r0, sp, #88	; 0x58
 800aca6:	f004 fcf2 	bl	800f68e <lv_area_get_size>
 800acaa:	42b8      	cmp	r0, r7
 800acac:	d803      	bhi.n	800acb6 <lv_draw_sw_img_decoded+0x216>
 800acae:	a816      	add	r0, sp, #88	; 0x58
 800acb0:	f004 fced 	bl	800f68e <lv_area_get_size>
 800acb4:	4607      	mov	r7, r0
            lv_color_t * src_buf_rgb = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800acb6:	0078      	lsls	r0, r7, #1
 800acb8:	f005 fa2c 	bl	8010114 <lv_mem_buf_get>
 800acbc:	9009      	str	r0, [sp, #36]	; 0x24
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800acbe:	4638      	mov	r0, r7
 800acc0:	f005 fa28 	bl	8010114 <lv_mem_buf_get>
            blend_dsc.mask_area = &blend_area;
 800acc4:	ab18      	add	r3, sp, #96	; 0x60
 800acc6:	931f      	str	r3, [sp, #124]	; 0x7c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800acc8:	2302      	movs	r3, #2
 800acca:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            blend_dsc.src_buf = src_buf_rgb;
 800acce:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800acd0:	9005      	str	r0, [sp, #20]
            blend_dsc.mask = mask_buf;
 800acd2:	901d      	str	r0, [sp, #116]	; 0x74
            lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800acd4:	214c      	movs	r1, #76	; 0x4c
 800acd6:	a821      	add	r0, sp, #132	; 0x84
            blend_dsc.src_buf = src_buf_rgb;
 800acd8:	931b      	str	r3, [sp, #108]	; 0x6c
            lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800acda:	f005 fa69 	bl	80101b0 <lv_memset_00>
            if(transform) {
 800acde:	9b08      	ldr	r3, [sp, #32]
 800ace0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ace4:	d06a      	beq.n	800adbc <lv_draw_sw_img_decoded+0x31c>
                trans_dsc.cfg.angle = draw_dsc->angle;
 800ace6:	6833      	ldr	r3, [r6, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ace8:	8862      	ldrh	r2, [r4, #2]
 800acea:	9324      	str	r3, [sp, #144]	; 0x90
 800acec:	88e3      	ldrh	r3, [r4, #6]
                _lv_img_buf_transform_init(&trans_dsc);
 800acee:	a821      	add	r0, sp, #132	; 0x84
 800acf0:	3301      	adds	r3, #1
 800acf2:	1a9b      	subs	r3, r3, r2
                trans_dsc.cfg.src_h = lv_area_get_height(coords);
 800acf4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800acf8:	6873      	ldr	r3, [r6, #4]
                trans_dsc.cfg.src = src_buf;
 800acfa:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800acfe:	9323      	str	r3, [sp, #140]	; 0x8c
                trans_dsc.cfg.color = draw_dsc->recolor;
 800ad00:	8933      	ldrh	r3, [r6, #8]
                trans_dsc.cfg.src_w = src_stride;
 800ad02:	f8ad 9088 	strh.w	r9, [sp, #136]	; 0x88
                trans_dsc.cfg.color = draw_dsc->recolor;
 800ad06:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800ad0a:	7d33      	ldrb	r3, [r6, #20]
                trans_dsc.cfg.cf = cf;
 800ad0c:	f88d 8096 	strb.w	r8, [sp, #150]	; 0x96
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800ad10:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ad14:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
                _lv_img_buf_transform_init(&trans_dsc);
 800ad18:	f7fd fcf2 	bl	8008700 <_lv_img_buf_transform_init>
            const uint8_t * src_buf_tmp = NULL;
 800ad1c:	2300      	movs	r3, #0
                src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800ad1e:	9306      	str	r3, [sp, #24]
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800ad20:	7ab3      	ldrb	r3, [r6, #10]
 800ad22:	43da      	mvns	r2, r3
 800ad24:	b2d2      	uxtb	r2, r2
 800ad26:	920a      	str	r2, [sp, #40]	; 0x28
            if(draw_dsc->recolor_opa != 0) {
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d057      	beq.n	800addc <lv_draw_sw_img_decoded+0x33c>
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800ad2c:	7a32      	ldrb	r2, [r6, #8]
 800ad2e:	08d1      	lsrs	r1, r2, #3
 800ad30:	4359      	muls	r1, r3
 800ad32:	910c      	str	r1, [sp, #48]	; 0x30
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800ad34:	7a71      	ldrb	r1, [r6, #9]
 800ad36:	f002 0007 	and.w	r0, r2, #7
 800ad3a:	094a      	lsrs	r2, r1, #5
 800ad3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad40:	435a      	muls	r2, r3
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800ad42:	f001 011f 	and.w	r1, r1, #31
 800ad46:	434b      	muls	r3, r1
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800ad48:	b292      	uxth	r2, r2
 800ad4a:	920d      	str	r2, [sp, #52]	; 0x34
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800ad4c:	9307      	str	r3, [sp, #28]
            blend_dsc.mask_res = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800ad4e:	f1b8 0f04 	cmp.w	r8, #4
 800ad52:	d147      	bne.n	800ade4 <lv_draw_sw_img_decoded+0x344>
 800ad54:	6833      	ldr	r3, [r6, #0]
 800ad56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad5a:	bf14      	ite	ne
 800ad5c:	2302      	movne	r3, #2
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            if(mask_any) {
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	b11b      	cbz	r3, 800ad70 <lv_draw_sw_img_decoded+0x2d0>
                lv_memset_ff(mask_buf, mask_buf_size);
 800ad68:	4639      	mov	r1, r7
 800ad6a:	9805      	ldr	r0, [sp, #20]
 800ad6c:	f005 fa4f 	bl	801020e <lv_memset_ff>
            for(y = 0; y < draw_area_h; y++) {
 800ad70:	f04f 0a00 	mov.w	sl, #0
        uint32_t px_i = 0;
 800ad74:	4655      	mov	r5, sl
            int32_t rot_y = blend_area.y1 - coords->y1;
 800ad76:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 800ad7a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	9310      	str	r3, [sp, #64]	; 0x40
                src_buf_tmp += src_stride * px_size_byte;
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	fb03 f309 	mul.w	r3, r3, r9
 800ad88:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad90:	9315      	str	r3, [sp, #84]	; 0x54
            for(y = 0; y < draw_area_h; y++) {
 800ad92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad94:	4553      	cmp	r3, sl
 800ad96:	dc27      	bgt.n	800ade8 <lv_draw_sw_img_decoded+0x348>
            if(blend_area.y1 != blend_area.y2) {
 800ad98:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800ad9c:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d006      	beq.n	800adb2 <lv_draw_sw_img_decoded+0x312>
                blend_area.y2--;
 800ada4:	3b01      	subs	r3, #1
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ada6:	4658      	mov	r0, fp
 800ada8:	a91a      	add	r1, sp, #104	; 0x68
                blend_area.y2--;
 800adaa:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800adae:	f7ff f9cb 	bl	800a148 <lv_draw_sw_blend>
            lv_mem_buf_release(mask_buf);
 800adb2:	9805      	ldr	r0, [sp, #20]
 800adb4:	f005 f806 	bl	800fdc4 <lv_mem_buf_release>
            lv_mem_buf_release(src_buf_rgb);
 800adb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adba:	e76b      	b.n	800ac94 <lv_draw_sw_img_decoded+0x1f4>
                src_buf_tmp += src_stride * (draw_area.y1 - coords->y1) * px_size_byte;
 800adbc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800adc0:	f9bd 505a 	ldrsh.w	r5, [sp, #90]	; 0x5a
                src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800adc4:	f9b4 2000 	ldrsh.w	r2, [r4]
                src_buf_tmp += src_stride * (draw_area.y1 - coords->y1) * px_size_byte;
 800adc8:	1aed      	subs	r5, r5, r3
                src_buf_tmp += (draw_area.x1 - coords->x1) * px_size_byte;
 800adca:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	fb09 3505 	mla	r5, r9, r5, r3
 800add4:	9b02      	ldr	r3, [sp, #8]
 800add6:	fb05 a303 	mla	r3, r5, r3, sl
 800adda:	e7a0      	b.n	800ad1e <lv_draw_sw_img_decoded+0x27e>
            uint16_t recolor_premult[3] = {0};
 800addc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800ade0:	9307      	str	r3, [sp, #28]
 800ade2:	e7b4      	b.n	800ad4e <lv_draw_sw_img_decoded+0x2ae>
            blend_dsc.mask_res = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800ade4:	2302      	movs	r3, #2
 800ade6:	e7bb      	b.n	800ad60 <lv_draw_sw_img_decoded+0x2c0>
                for(x = 0; x < draw_area_w; x++, px_i++, map_px += px_size_byte) {
 800ade8:	f04f 0900 	mov.w	r9, #0
                int32_t rot_x = blend_area.x1 - coords->x1;
 800adec:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 800adf0:	f9b4 3000 	ldrsh.w	r3, [r4]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf8:	9311      	str	r3, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, px_i++, map_px += px_size_byte) {
 800adfa:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800adfe:	9212      	str	r2, [sp, #72]	; 0x48
                map_px = src_buf_tmp;
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	9204      	str	r2, [sp, #16]
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800ae06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae08:	442b      	add	r3, r5
 800ae0a:	4452      	add	r2, sl
 800ae0c:	b212      	sxth	r2, r2
 800ae0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae10:	9214      	str	r2, [sp, #80]	; 0x50
                for(x = 0; x < draw_area_w; x++, px_i++, map_px += px_size_byte) {
 800ae12:	9901      	ldr	r1, [sp, #4]
 800ae14:	4549      	cmp	r1, r9
 800ae16:	dc28      	bgt.n	800ae6a <lv_draw_sw_img_decoded+0x3ca>
 800ae18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1a:	441d      	add	r5, r3
                if(mask_any) {
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	b19b      	cbz	r3, 800ae48 <lv_draw_sw_img_decoded+0x3a8>
                                                      y + blend_area.y1, draw_area_w);
 800ae20:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, blend_area.x1,
 800ae24:	460b      	mov	r3, r1
                                                      y + blend_area.y1, draw_area_w);
 800ae26:	4452      	add	r2, sl
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, blend_area.x1,
 800ae28:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800ae2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae2e:	b212      	sxth	r2, r2
 800ae30:	f7fc ff5a 	bl	8007ce8 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f040 808d 	bne.w	800af54 <lv_draw_sw_img_decoded+0x4b4>
                        lv_memset_00(mask_buf + px_i_start, draw_area_w);
 800ae3a:	9901      	ldr	r1, [sp, #4]
 800ae3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae3e:	f005 f9b7 	bl	80101b0 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ae42:	2302      	movs	r3, #2
 800ae44:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
                src_buf_tmp += src_stride * px_size_byte;
 800ae48:	9b06      	ldr	r3, [sp, #24]
 800ae4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae4c:	4413      	add	r3, r2
 800ae4e:	9306      	str	r3, [sp, #24]
                if(px_i + draw_area_w < mask_buf_size) {
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	18eb      	adds	r3, r5, r3
 800ae54:	42bb      	cmp	r3, r7
 800ae56:	f080 8082 	bcs.w	800af5e <lv_draw_sw_img_decoded+0x4be>
                    blend_area.y2 ++;
 800ae5a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 800ae5e:	3301      	adds	r3, #1
 800ae60:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
 800ae64:	f10a 0a01 	add.w	sl, sl, #1
 800ae68:	e793      	b.n	800ad92 <lv_draw_sw_img_decoded+0x2f2>
                    if(transform) {
 800ae6a:	9908      	ldr	r1, [sp, #32]
 800ae6c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800ae70:	d055      	beq.n	800af1e <lv_draw_sw_img_decoded+0x47e>
 800ae72:	930f      	str	r3, [sp, #60]	; 0x3c
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800ae74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae78:	eb03 0109 	add.w	r1, r3, r9
 800ae7c:	b209      	sxth	r1, r1
 800ae7e:	a821      	add	r0, sp, #132	; 0x84
 800ae80:	f7fd fef0 	bl	8008c64 <_lv_img_buf_transform>
                        if(ret == false) {
 800ae84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae86:	b940      	cbnz	r0, 800ae9a <lv_draw_sw_img_decoded+0x3fa>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800ae88:	7018      	strb	r0, [r3, #0]
                for(x = 0; x < draw_area_w; x++, px_i++, map_px += px_size_byte) {
 800ae8a:	9904      	ldr	r1, [sp, #16]
 800ae8c:	9802      	ldr	r0, [sp, #8]
 800ae8e:	f109 0901 	add.w	r9, r9, #1
 800ae92:	4401      	add	r1, r0
 800ae94:	9104      	str	r1, [sp, #16]
 800ae96:	3301      	adds	r3, #1
 800ae98:	e7bb      	b.n	800ae12 <lv_draw_sw_img_decoded+0x372>
                            mask_buf[px_i] = trans_dsc.res.opa;
 800ae9a:	f89d 109a 	ldrb.w	r1, [sp, #154]	; 0x9a
 800ae9e:	7019      	strb	r1, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800aea0:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
                    if(draw_dsc->recolor_opa != 0) {
 800aea4:	7ab0      	ldrb	r0, [r6, #10]
 800aea6:	b3b0      	cbz	r0, 800af16 <lv_draw_sw_img_decoded+0x476>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800aea8:	f001 0007 	and.w	r0, r1, #7
 800aeac:	ea4f 3c51 	mov.w	ip, r1, lsr #13
 800aeb0:	eb0c 0cc0 	add.w	ip, ip, r0, lsl #3
 800aeb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeb6:	4686      	mov	lr, r0
 800aeb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aeba:	fb0e 0c0c 	mla	ip, lr, ip, r0
 800aebe:	f248 0081 	movw	r0, #32897	; 0x8081
 800aec2:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800aec6:	fb00 f20c 	mul.w	r2, r0, ip
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800aeca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aecc:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
 800aed0:	4684      	mov	ip, r0
 800aed2:	980c      	ldr	r0, [sp, #48]	; 0x30
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800aed4:	920f      	str	r2, [sp, #60]	; 0x3c
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800aed6:	fb0c 0e0e 	mla	lr, ip, lr, r0
 800aeda:	f248 0081 	movw	r0, #32897	; 0x8081
 800aede:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
 800aee2:	fb00 fe0e 	mul.w	lr, r0, lr
 800aee6:	f3ce 50c4 	ubfx	r0, lr, #23, #5
 800aeea:	f3c2 6e82 	ubfx	lr, r2, #26, #3
 800aeee:	ea4e 0ec0 	orr.w	lr, lr, r0, lsl #3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800aef2:	f3c1 2004 	ubfx	r0, r1, #8, #5
 800aef6:	9907      	ldr	r1, [sp, #28]
 800aef8:	fb0c 1000 	mla	r0, ip, r0, r1
 800aefc:	f248 0181 	movw	r1, #32897	; 0x8081
 800af00:	3080      	adds	r0, #128	; 0x80
 800af02:	4348      	muls	r0, r1
 800af04:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 800af08:	ea4e 2100 	orr.w	r1, lr, r0, lsl #8
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800af0c:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 800af10:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
 800af14:	b289      	uxth	r1, r1
                    src_buf_rgb[px_i].full = c.full;
 800af16:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af18:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
 800af1c:	e7b5      	b.n	800ae8a <lv_draw_sw_img_decoded+0x3ea>
                        if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800af1e:	f1b8 0f05 	cmp.w	r8, #5
 800af22:	d114      	bne.n	800af4e <lv_draw_sw_img_decoded+0x4ae>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800af24:	9904      	ldr	r1, [sp, #16]
 800af26:	7889      	ldrb	r1, [r1, #2]
                            mask_buf[px_i] = px_opa;
 800af28:	7019      	strb	r1, [r3, #0]
                            if(px_opa == 0) {
 800af2a:	2900      	cmp	r1, #0
 800af2c:	d0ad      	beq.n	800ae8a <lv_draw_sw_img_decoded+0x3ea>
                        c.full =  map_px[0] + (map_px[1] << 8);
 800af2e:	9904      	ldr	r1, [sp, #16]
                        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800af30:	f1b8 0f06 	cmp.w	r8, #6
                        c.full =  map_px[0] + (map_px[1] << 8);
 800af34:	7848      	ldrb	r0, [r1, #1]
 800af36:	7809      	ldrb	r1, [r1, #0]
 800af38:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800af3c:	b289      	uxth	r1, r1
                        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800af3e:	d1b1      	bne.n	800aea4 <lv_draw_sw_img_decoded+0x404>
                            if(c.full == chroma_keyed_color.full) {
 800af40:	f24e 0007 	movw	r0, #57351	; 0xe007
 800af44:	4281      	cmp	r1, r0
 800af46:	d1ad      	bne.n	800aea4 <lv_draw_sw_img_decoded+0x404>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800af48:	2100      	movs	r1, #0
 800af4a:	7019      	strb	r1, [r3, #0]
                                continue;
 800af4c:	e79d      	b.n	800ae8a <lv_draw_sw_img_decoded+0x3ea>
                            mask_buf[px_i] = 0xFF;
 800af4e:	21ff      	movs	r1, #255	; 0xff
 800af50:	7019      	strb	r1, [r3, #0]
 800af52:	e7ec      	b.n	800af2e <lv_draw_sw_img_decoded+0x48e>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 800af54:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800af56:	bf08      	it	eq
 800af58:	f88d 0078 	strbeq.w	r0, [sp, #120]	; 0x78
 800af5c:	e774      	b.n	800ae48 <lv_draw_sw_img_decoded+0x3a8>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800af5e:	4658      	mov	r0, fp
 800af60:	a91a      	add	r1, sp, #104	; 0x68
 800af62:	f7ff f8f1 	bl	800a148 <lv_draw_sw_blend>
                    blend_area.y1 = blend_area.y2 + 1;
 800af66:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
                    blend_dsc.mask_res = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800af6a:	f1b8 0f04 	cmp.w	r8, #4
                    blend_area.y1 = blend_area.y2 + 1;
 800af6e:	f103 0301 	add.w	r3, r3, #1
 800af72:	b21b      	sxth	r3, r3
 800af74:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
 800af78:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    blend_dsc.mask_res = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800af7c:	d10f      	bne.n	800af9e <lv_draw_sw_img_decoded+0x4fe>
 800af7e:	6833      	ldr	r3, [r6, #0]
 800af80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af84:	bf14      	ite	ne
 800af86:	2302      	movne	r3, #2
 800af88:	2301      	moveq	r3, #1
 800af8a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
                    if(mask_any) {
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	b13b      	cbz	r3, 800afa2 <lv_draw_sw_img_decoded+0x502>
                        lv_memset_ff(mask_buf, mask_buf_size);
 800af92:	4639      	mov	r1, r7
 800af94:	9805      	ldr	r0, [sp, #20]
 800af96:	f005 f93a 	bl	801020e <lv_memset_ff>
                    px_i = 0;
 800af9a:	2500      	movs	r5, #0
 800af9c:	e762      	b.n	800ae64 <lv_draw_sw_img_decoded+0x3c4>
                    blend_dsc.mask_res = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800af9e:	2302      	movs	r3, #2
 800afa0:	e7f3      	b.n	800af8a <lv_draw_sw_img_decoded+0x4ea>
                    px_i = 0;
 800afa2:	9d03      	ldr	r5, [sp, #12]
 800afa4:	e75e      	b.n	800ae64 <lv_draw_sw_img_decoded+0x3c4>
	...

0800afa8 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	468a      	mov	sl, r1
 800afae:	461c      	mov	r4, r3
 800afb0:	b09f      	sub	sp, #124	; 0x7c
 800afb2:	4615      	mov	r5, r2
 800afb4:	9003      	str	r0, [sp, #12]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 800afb6:	2300      	movs	r3, #0
 800afb8:	4622      	mov	r2, r4
 800afba:	f8da 0000 	ldr.w	r0, [sl]
 800afbe:	a913      	add	r1, sp, #76	; 0x4c
 800afc0:	f003 fefb 	bl	800edba <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f000 812c 	beq.w	800b222 <lv_draw_sw_letter+0x27a>
        }
        return;
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800afca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8127 	beq.w	800b222 <lv_draw_sw_letter+0x27a>
 800afd4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 800afd8:	2a00      	cmp	r2, #0
 800afda:	f000 8122 	beq.w	800b222 <lv_draw_sw_letter+0x27a>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 800afde:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800afe2:	f8b5 8000 	ldrh.w	r8, [r5]
 800afe6:	4488      	add	r8, r1
 800afe8:	fa1f f188 	uxth.w	r1, r8
 800afec:	9106      	str	r1, [sp, #24]
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800afee:	9903      	ldr	r1, [sp, #12]
    gpos.x = pos_p->x + g.ofs_x;
 800aff0:	fa0f f888 	sxth.w	r8, r8
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800aff4:	6889      	ldr	r1, [r1, #8]
 800aff6:	4442      	add	r2, r8
 800aff8:	f9b1 0000 	ldrsh.w	r0, [r1]
 800affc:	4282      	cmp	r2, r0
 800affe:	f2c0 8110 	blt.w	800b222 <lv_draw_sw_letter+0x27a>
 800b002:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 800b006:	4542      	cmp	r2, r8
 800b008:	f2c0 810b 	blt.w	800b222 <lv_draw_sw_letter+0x27a>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 800b00c:	f8bd b058 	ldrh.w	fp, [sp, #88]	; 0x58
 800b010:	f8da 0000 	ldr.w	r0, [sl]
 800b014:	eb03 020b 	add.w	r2, r3, fp
 800b018:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800b01c:	ebab 0b02 	sub.w	fp, fp, r2
 800b020:	8902      	ldrh	r2, [r0, #8]
 800b022:	4493      	add	fp, r2
 800b024:	8942      	ldrh	r2, [r0, #10]
 800b026:	ebab 0b02 	sub.w	fp, fp, r2
 800b02a:	fa1f f28b 	uxth.w	r2, fp
 800b02e:	9208      	str	r2, [sp, #32]
 800b030:	fa0f fb8b 	sxth.w	fp, fp
       gpos.x > draw_ctx->clip_area->x2 ||
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800b034:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800b038:	445b      	add	r3, fp
       gpos.x > draw_ctx->clip_area->x2 ||
 800b03a:	4293      	cmp	r3, r2
 800b03c:	f2c0 80f1 	blt.w	800b222 <lv_draw_sw_letter+0x27a>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800b040:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800b044:	455b      	cmp	r3, fp
 800b046:	f2c0 80ec 	blt.w	800b222 <lv_draw_sw_letter+0x27a>
       gpos.y > draw_ctx->clip_area->y2)  {
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 800b04a:	4621      	mov	r1, r4
 800b04c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b04e:	f003 feb0 	bl	800edb2 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800b052:	2800      	cmp	r0, #0
 800b054:	f000 80e5 	beq.w	800b222 <lv_draw_sw_letter+0x27a>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 800b058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b05a:	7b1b      	ldrb	r3, [r3, #12]
 800b05c:	079b      	lsls	r3, r3, #30
 800b05e:	f040 80e0 	bne.w	800b222 <lv_draw_sw_letter+0x27a>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800b062:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
    lv_opa_t opa = dsc->opa;
 800b066:	f89a 101a 	ldrb.w	r1, [sl, #26]
    uint32_t bpp = g->bpp;
 800b06a:	f003 030f 	and.w	r3, r3, #15
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800b06e:	2b03      	cmp	r3, #3
 800b070:	f000 80e1 	beq.w	800b236 <lv_draw_sw_letter+0x28e>

    switch(bpp) {
 800b074:	3b01      	subs	r3, #1
 800b076:	2b07      	cmp	r3, #7
 800b078:	f200 80d3 	bhi.w	800b222 <lv_draw_sw_letter+0x27a>
 800b07c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b080:	00e10008 	.word	0x00e10008
 800b084:	00db00d1 	.word	0x00db00d1
 800b088:	00d100d1 	.word	0x00d100d1
 800b08c:	00d400d1 	.word	0x00d400d1
    if(bpp == 3) bpp = 4;
 800b090:	2280      	movs	r2, #128	; 0x80
 800b092:	2501      	movs	r5, #1
 800b094:	2302      	movs	r3, #2
 800b096:	4eab      	ldr	r6, [pc, #684]	; (800b344 <lv_draw_sw_letter+0x39c>)
 800b098:	9201      	str	r2, [sp, #4]
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800b09a:	29fc      	cmp	r1, #252	; 0xfc
 800b09c:	d80d      	bhi.n	800b0ba <lv_draw_sw_letter+0x112>
        if(prev_opa != opa || prev_bpp != bpp) {
 800b09e:	4caa      	ldr	r4, [pc, #680]	; (800b348 <lv_draw_sw_letter+0x3a0>)
 800b0a0:	7822      	ldrb	r2, [r4, #0]
 800b0a2:	428a      	cmp	r2, r1
 800b0a4:	f040 80d3 	bne.w	800b24e <lv_draw_sw_letter+0x2a6>
 800b0a8:	4aa8      	ldr	r2, [pc, #672]	; (800b34c <lv_draw_sw_letter+0x3a4>)
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	42aa      	cmp	r2, r5
 800b0ae:	f040 80ce 	bne.w	800b24e <lv_draw_sw_letter+0x2a6>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 800b0b2:	4ba6      	ldr	r3, [pc, #664]	; (800b34c <lv_draw_sw_letter+0x3a4>)
        bpp_opa_table_p = opa_table;
 800b0b4:	4ea6      	ldr	r6, [pc, #664]	; (800b350 <lv_draw_sw_letter+0x3a8>)
        prev_opa = opa;
 800b0b6:	7021      	strb	r1, [r4, #0]
        prev_bpp = bpp;
 800b0b8:	601d      	str	r5, [r3, #0]
    int32_t box_w = g->box_w;
    int32_t box_h = g->box_h;
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800b0ba:	9a03      	ldr	r2, [sp, #12]
    int32_t box_w = g->box_w;
 800b0bc:	f8bd 9052 	ldrh.w	r9, [sp, #82]	; 0x52
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800b0c0:	6892      	ldr	r2, [r2, #8]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800b0c2:	eb08 0c09 	add.w	ip, r8, r9
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800b0c6:	f9b2 7000 	ldrsh.w	r7, [r2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800b0ca:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800b0ce:	45b8      	cmp	r8, r7
 800b0d0:	bfb4      	ite	lt
 800b0d2:	eba7 0708 	sublt.w	r7, r7, r8
 800b0d6:	2700      	movge	r7, #0
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800b0d8:	458c      	cmp	ip, r1
 800b0da:	bfc4      	itt	gt
 800b0dc:	eba1 0808 	subgt.w	r8, r1, r8
 800b0e0:	f108 0101 	addgt.w	r1, r8, #1
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800b0e4:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800b0e8:	bfcc      	ite	gt
 800b0ea:	9100      	strgt	r1, [sp, #0]
 800b0ec:	f8cd 9000 	strle.w	r9, [sp]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800b0f0:	45c3      	cmp	fp, r8
 800b0f2:	bfa8      	it	ge
 800b0f4:	f04f 0800 	movge.w	r8, #0
    int32_t box_h = g->box_h;
 800b0f8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800b0fc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b100:	eb0b 0103 	add.w	r1, fp, r3
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800b104:	bfb8      	it	lt
 800b106:	eba8 080b 	sublt.w	r8, r8, fp
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800b10a:	4291      	cmp	r1, r2
 800b10c:	bfc2      	ittt	gt
 800b10e:	eba2 0b0b 	subgt.w	fp, r2, fp
 800b112:	f10b 0201 	addgt.w	r2, fp, #1
 800b116:	9205      	strgt	r2, [sp, #20]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800b118:	fb05 f409 	mul.w	r4, r5, r9

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800b11c:	fb07 f205 	mul.w	r2, r7, r5
 800b120:	fb08 2404 	mla	r4, r8, r4, r2
    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b124:	f10d 0b5c 	add.w	fp, sp, #92	; 0x5c
 800b128:	f04f 011c 	mov.w	r1, #28
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800b12c:	bfd8      	it	le
 800b12e:	9305      	strle	r3, [sp, #20]
 800b130:	9304      	str	r3, [sp, #16]
    map_p += bit_ofs >> 3;
 800b132:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b136:	4658      	mov	r0, fp
    map_p += bit_ofs >> 3;
 800b138:	9302      	str	r3, [sp, #8]
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b13a:	f005 f839 	bl	80101b0 <lv_memset_00>
    blend_dsc.color = dsc->color;
 800b13e:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800b142:	f004 0407 	and.w	r4, r4, #7
    blend_dsc.color = dsc->color;
 800b146:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_dsc.opa = dsc->opa;
 800b14a:	f89a 201a 	ldrb.w	r2, [sl, #26]
 800b14e:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    blend_dsc.blend_mode = dsc->blend_mode;
 800b152:	f89a 201e 	ldrb.w	r2, [sl, #30]

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
    blend_dsc.mask = mask_buf;
    int32_t mask_p = 0;
 800b156:	f04f 0a00 	mov.w	sl, #0
    blend_dsc.blend_mode = dsc->blend_mode;
 800b15a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 800b15e:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800b162:	f7fb fb13 	bl	800678c <_lv_refr_get_disp_refreshing>
 800b166:	f004 f843 	bl	800f1f0 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800b16a:	9b04      	ldr	r3, [sp, #16]
 800b16c:	fb03 f309 	mul.w	r3, r3, r9
 800b170:	4283      	cmp	r3, r0
 800b172:	bfa8      	it	ge
 800b174:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b176:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800b178:	9307      	str	r3, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b17a:	f004 ffcb 	bl	8010114 <lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 800b17e:	9b06      	ldr	r3, [sp, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 800b180:	9900      	ldr	r1, [sp, #0]
    fill_area.x1 = col_start + pos->x;
 800b182:	19da      	adds	r2, r3, r7
 800b184:	fa1f fe82 	uxth.w	lr, r2
    fill_area.x2 = col_end  + pos->x - 1;
 800b188:	3b01      	subs	r3, #1
 800b18a:	440b      	add	r3, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b18c:	f1ce 0e01 	rsb	lr, lr, #1
 800b190:	fa0f fc83 	sxth.w	ip, r3
    fill_area.y1 = row_start + pos->y;
 800b194:	9908      	ldr	r1, [sp, #32]
 800b196:	4473      	add	r3, lr
 800b198:	b21b      	sxth	r3, r3
 800b19a:	4441      	add	r1, r8
 800b19c:	9306      	str	r3, [sp, #24]
    fill_area.y2 = fill_area.y1;
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
    mask_area.y2 = mask_area.y1 + row_end;
 800b19e:	9b05      	ldr	r3, [sp, #20]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b1a0:	9004      	str	r0, [sp, #16]
    blend_dsc.mask = mask_buf;
 800b1a2:	901a      	str	r0, [sp, #104]	; 0x68
    fill_area.y1 = row_start + pos->y;
 800b1a4:	b208      	sxth	r0, r1
    fill_area.x1 = col_start + pos->x;
 800b1a6:	b212      	sxth	r2, r2
    mask_area.y2 = mask_area.y1 + row_end;
 800b1a8:	4419      	add	r1, r3
    fill_area.y1 = row_start + pos->y;
 800b1aa:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    fill_area.y2 = fill_area.y1;
 800b1ae:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    dest->y1 = src->y1;
 800b1b2:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800b1b6:	a811      	add	r0, sp, #68	; 0x44
    fill_area.x1 = col_start + pos->x;
 800b1b8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    fill_area.x2 = col_end  + pos->x - 1;
 800b1bc:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
    dest->x1 = src->x1;
 800b1c0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    dest->x2 = src->x2;
 800b1c4:	f8ad c048 	strh.w	ip, [sp, #72]	; 0x48
    mask_area.y2 = mask_area.y1 + row_end;
 800b1c8:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800b1cc:	f7fc fe00 	bl	8007dd0 <lv_draw_mask_is_any>
#endif
    blend_dsc.blend_area = &fill_area;
 800b1d0:	ab0f      	add	r3, sp, #60	; 0x3c
 800b1d2:	9317      	str	r3, [sp, #92]	; 0x5c
    blend_dsc.mask_area = &fill_area;
 800b1d4:	931c      	str	r3, [sp, #112]	; 0x70

    uint32_t col_bit_max = 8 - bpp;
 800b1d6:	f1c5 0308 	rsb	r3, r5, #8
 800b1da:	9308      	str	r3, [sp, #32]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800b1dc:	9b00      	ldr	r3, [sp, #0]
 800b1de:	44b9      	add	r9, r7
 800b1e0:	eba9 0903 	sub.w	r9, r9, r3
 800b1e4:	fb05 f309 	mul.w	r3, r5, r9
 800b1e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1ea:	9b00      	ldr	r3, [sp, #0]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800b1ec:	900a      	str	r0, [sp, #40]	; 0x28

    for(row = row_start ; row < row_end; row++) {
 800b1ee:	1bdb      	subs	r3, r3, r7
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b1f2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    for(row = row_start ; row < row_end; row++) {
 800b1f6:	9b05      	ldr	r3, [sp, #20]
 800b1f8:	4543      	cmp	r3, r8
 800b1fa:	dc36      	bgt.n	800b26a <lv_draw_sw_letter+0x2c2>
        map_p += (col_bit >> 3);
        col_bit = col_bit & 0x7;
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800b1fc:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800b200:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800b204:	429a      	cmp	r2, r3
 800b206:	d009      	beq.n	800b21c <lv_draw_sw_letter+0x274>
        fill_area.y2--;
 800b208:	3b01      	subs	r3, #1
 800b20a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b20e:	2302      	movs	r3, #2
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b210:	9803      	ldr	r0, [sp, #12]
 800b212:	a917      	add	r1, sp, #92	; 0x5c
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b214:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b218:	f7fe ff96 	bl	800a148 <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800b21c:	9804      	ldr	r0, [sp, #16]
 800b21e:	f004 fdd1 	bl	800fdc4 <lv_mem_buf_release>
}
 800b222:	b01f      	add	sp, #124	; 0x7c
 800b224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 800b228:	22ff      	movs	r2, #255	; 0xff
            break;       /*No opa table, pixel value will be used directly*/
 800b22a:	2508      	movs	r5, #8
            shades = 256;
 800b22c:	f44f 7380 	mov.w	r3, #256	; 0x100
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800b230:	4e48      	ldr	r6, [pc, #288]	; (800b354 <lv_draw_sw_letter+0x3ac>)
            bitmask_init  = 0xFF;
 800b232:	9201      	str	r2, [sp, #4]
            break;       /*No opa table, pixel value will be used directly*/
 800b234:	e731      	b.n	800b09a <lv_draw_sw_letter+0xf2>
            bitmask_init  = 0xF0;
 800b236:	22f0      	movs	r2, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800b238:	2504      	movs	r5, #4
            shades = 16;
 800b23a:	2310      	movs	r3, #16
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800b23c:	4e46      	ldr	r6, [pc, #280]	; (800b358 <lv_draw_sw_letter+0x3b0>)
            bitmask_init  = 0xF0;
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	e72b      	b.n	800b09a <lv_draw_sw_letter+0xf2>
            bitmask_init  = 0xC0;
 800b242:	22c0      	movs	r2, #192	; 0xc0
    if(bpp == 3) bpp = 4;
 800b244:	2502      	movs	r5, #2
            shades = 4;
 800b246:	2304      	movs	r3, #4
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800b248:	4e44      	ldr	r6, [pc, #272]	; (800b35c <lv_draw_sw_letter+0x3b4>)
            bitmask_init  = 0xC0;
 800b24a:	9201      	str	r2, [sp, #4]
 800b24c:	e725      	b.n	800b09a <lv_draw_sw_letter+0xf2>
 800b24e:	4f40      	ldr	r7, [pc, #256]	; (800b350 <lv_draw_sw_letter+0x3a8>)
 800b250:	4433      	add	r3, r6
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800b252:	f816 2b01 	ldrb.w	r2, [r6], #1
 800b256:	2aff      	cmp	r2, #255	; 0xff
 800b258:	bf0e      	itee	eq
 800b25a:	460a      	moveq	r2, r1
 800b25c:	434a      	mulne	r2, r1
 800b25e:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
 800b260:	42b3      	cmp	r3, r6
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800b262:	f807 2b01 	strb.w	r2, [r7], #1
            for(i = 0; i < shades; i++) {
 800b266:	d1f4      	bne.n	800b252 <lv_draw_sw_letter+0x2aa>
 800b268:	e723      	b.n	800b0b2 <lv_draw_sw_letter+0x10a>
        bitmask = bitmask_init >> col_bit;
 800b26a:	9b01      	ldr	r3, [sp, #4]
        for(col = col_start; col < col_end; col++) {
 800b26c:	4638      	mov	r0, r7
        bitmask = bitmask_init >> col_bit;
 800b26e:	fa23 f104 	lsr.w	r1, r3, r4
        for(col = col_start; col < col_end; col++) {
 800b272:	9b04      	ldr	r3, [sp, #16]
 800b274:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b278:	eb03 0b0a 	add.w	fp, r3, sl
 800b27c:	465a      	mov	r2, fp
 800b27e:	9b00      	ldr	r3, [sp, #0]
 800b280:	4283      	cmp	r3, r0
 800b282:	dc2e      	bgt.n	800b2e2 <lv_draw_sw_letter+0x33a>
 800b284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b286:	9a00      	ldr	r2, [sp, #0]
 800b288:	4297      	cmp	r7, r2
 800b28a:	bfc8      	it	gt
 800b28c:	2300      	movgt	r3, #0
 800b28e:	4699      	mov	r9, r3
 800b290:	449a      	add	sl, r3
        if(mask_any) {
 800b292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b294:	b173      	cbz	r3, 800b2b4 <lv_draw_sw_letter+0x30c>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800b296:	4658      	mov	r0, fp
 800b298:	9b06      	ldr	r3, [sp, #24]
 800b29a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800b29e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800b2a2:	f7fc fd21 	bl	8007ce8 <lv_draw_mask_apply>
 800b2a6:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800b2aa:	b918      	cbnz	r0, 800b2b4 <lv_draw_sw_letter+0x30c>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 800b2ac:	4658      	mov	r0, fp
 800b2ae:	9906      	ldr	r1, [sp, #24]
 800b2b0:	f004 ff7e 	bl	80101b0 <lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	4499      	add	r9, r3
 800b2b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ba:	4499      	add	r9, r3
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	454b      	cmp	r3, r9
 800b2c0:	d92c      	bls.n	800b31c <lv_draw_sw_letter+0x374>
            fill_area.y2 ++;
 800b2c2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        col_bit += col_bit_row_ofs;
 800b2cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for(row = row_start ; row < row_end; row++) {
 800b2ce:	f108 0801 	add.w	r8, r8, #1
        col_bit += col_bit_row_ofs;
 800b2d2:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 800b2da:	9302      	str	r3, [sp, #8]
        col_bit = col_bit & 0x7;
 800b2dc:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
 800b2e0:	e789      	b.n	800b1f6 <lv_draw_sw_letter+0x24e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800b2e2:	9b02      	ldr	r3, [sp, #8]
        for(col = col_start; col < col_end; col++) {
 800b2e4:	3001      	adds	r0, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	3201      	adds	r2, #1
 800b2ea:	ea03 0e01 	and.w	lr, r3, r1
 800b2ee:	9b08      	ldr	r3, [sp, #32]
 800b2f0:	eba3 0c04 	sub.w	ip, r3, r4
 800b2f4:	fa2e f30c 	lsr.w	r3, lr, ip
            if(letter_px) {
 800b2f8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800b2fc:	bf18      	it	ne
 800b2fe:	5cf3      	ldrbne	r3, [r6, r3]
                mask_buf[mask_p] = 0;
 800b300:	f802 3c01 	strb.w	r3, [r2, #-1]
            if(col_bit < col_bit_max) {
 800b304:	9b08      	ldr	r3, [sp, #32]
 800b306:	42a3      	cmp	r3, r4
                map_p++;
 800b308:	bf9f      	itttt	ls
 800b30a:	9b02      	ldrls	r3, [sp, #8]
                col_bit = 0;
 800b30c:	2400      	movls	r4, #0
                map_p++;
 800b30e:	3301      	addls	r3, #1
                bitmask = bitmask_init;
 800b310:	9901      	ldrls	r1, [sp, #4]
                col_bit += bpp;
 800b312:	bf86      	itte	hi
 800b314:	1964      	addhi	r4, r4, r5
                bitmask = bitmask >> bpp;
 800b316:	40e9      	lsrhi	r1, r5
                map_p++;
 800b318:	9302      	strls	r3, [sp, #8]
        for(col = col_start; col < col_end; col++) {
 800b31a:	e7b0      	b.n	800b27e <lv_draw_sw_letter+0x2d6>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b31c:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b320:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b322:	9803      	ldr	r0, [sp, #12]
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b324:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b328:	f7fe ff0e 	bl	800a148 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800b32c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            mask_p = 0;
 800b330:	f04f 0a00 	mov.w	sl, #0
            fill_area.y1 = fill_area.y2 + 1;
 800b334:	3301      	adds	r3, #1
 800b336:	b21b      	sxth	r3, r3
 800b338:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            fill_area.y2 = fill_area.y1;
 800b33c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            mask_p = 0;
 800b340:	e7c4      	b.n	800b2cc <lv_draw_sw_letter+0x324>
 800b342:	bf00      	nop
 800b344:	0801a394 	.word	0x0801a394
 800b348:	20001b94 	.word	0x20001b94
 800b34c:	20001b90 	.word	0x20001b90
 800b350:	20001a90 	.word	0x20001a90
 800b354:	0801a3aa 	.word	0x0801a3aa
 800b358:	0801a39a 	.word	0x0801a39a
 800b35c:	0801a396 	.word	0x0801a396

0800b360 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	b0c7      	sub	sp, #284	; 0x11c
 800b366:	e9cd 2305 	strd	r2, r3, [sp, #20]
    if(dsc->width == 0) return;
 800b36a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 800b36e:	460c      	mov	r4, r1
 800b370:	9004      	str	r0, [sp, #16]
    if(dsc->width == 0) return;
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 80ec 	beq.w	800b550 <lv_draw_sw_line+0x1f0>
    if(dsc->opa <= LV_OPA_MIN) return;
 800b378:	7a0a      	ldrb	r2, [r1, #8]
 800b37a:	2a02      	cmp	r2, #2
 800b37c:	f240 80e8 	bls.w	800b550 <lv_draw_sw_line+0x1f0>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800b380:	9906      	ldr	r1, [sp, #24]
 800b382:	9a05      	ldr	r2, [sp, #20]
 800b384:	f9b1 5000 	ldrsh.w	r5, [r1]
 800b388:	9905      	ldr	r1, [sp, #20]
 800b38a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b38e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800b392:	9906      	ldr	r1, [sp, #24]
 800b394:	42aa      	cmp	r2, r5
 800b396:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b39a:	d102      	bne.n	800b3a2 <lv_draw_sw_line+0x42>
 800b39c:	4288      	cmp	r0, r1
 800b39e:	f000 80d7 	beq.w	800b550 <lv_draw_sw_line+0x1f0>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800b3a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b3a6:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800b3aa:	42aa      	cmp	r2, r5
 800b3ac:	bfd4      	ite	le
 800b3ae:	ebc3 0602 	rsble	r6, r3, r2
 800b3b2:	ebc3 0605 	rsbgt	r6, r3, r5
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800b3b6:	42aa      	cmp	r2, r5
 800b3b8:	bfac      	ite	ge
 800b3ba:	189a      	addge	r2, r3, r2
 800b3bc:	195a      	addlt	r2, r3, r5
 800b3be:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800b3c2:	4288      	cmp	r0, r1
 800b3c4:	bfd4      	ite	le
 800b3c6:	ebc3 0200 	rsble	r2, r3, r0
 800b3ca:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800b3ce:	4288      	cmp	r0, r1
 800b3d0:	bfac      	ite	ge
 800b3d2:	181b      	addge	r3, r3, r0
 800b3d4:	185b      	addlt	r3, r3, r1
 800b3d6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800b3e0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	689a      	ldr	r2, [r3, #8]
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800b3ea:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800b3ee:	f004 f97a 	bl	800f6e6 <_lv_area_intersect>
    if(!is_common) return;
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f000 80ac 	beq.w	800b550 <lv_draw_sw_line+0x1f0>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	9308      	str	r3, [sp, #32]
    draw_ctx->clip_area = &clip_line;
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	f8c3 9008 	str.w	r9, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800b408:	9b05      	ldr	r3, [sp, #20]
 800b40a:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800b40e:	9b06      	ldr	r3, [sp, #24]
 800b410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b414:	9303      	str	r3, [sp, #12]
 800b416:	9b05      	ldr	r3, [sp, #20]
 800b418:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b41c:	9b06      	ldr	r3, [sp, #24]
 800b41e:	f9b3 7000 	ldrsh.w	r7, [r3]
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	4598      	cmp	r8, r3
 800b426:	f040 8102 	bne.w	800b62e <lv_draw_sw_line+0x2ce>
    int32_t w = dsc->width - 1;
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800b42a:	42be      	cmp	r6, r7
 800b42c:	4633      	mov	r3, r6
 800b42e:	bfa8      	it	ge
 800b430:	463b      	movge	r3, r7
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800b432:	42be      	cmp	r6, r7
 800b434:	bfb8      	it	lt
 800b436:	463e      	movlt	r6, r7
    int32_t w = dsc->width - 1;
 800b438:	3d01      	subs	r5, #1
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800b43a:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b43e:	f005 0301 	and.w	r3, r5, #1
    blend_area.y1 = point1->y - w_half1;
 800b442:	fa1f f888 	uxth.w	r8, r8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b446:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.y2 = point1->y + w_half0;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b44a:	a92e      	add	r1, sp, #184	; 0xb8
    blend_area.y1 = point1->y - w_half1;
 800b44c:	eba8 0303 	sub.w	r3, r8, r3
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800b450:	1e77      	subs	r7, r6, #1
    blend_area.y2 = point1->y + w_half0;
 800b452:	eb08 0865 	add.w	r8, r8, r5, asr #1
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b456:	464a      	mov	r2, r9
 800b458:	4608      	mov	r0, r1
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800b45a:	f8ad 70bc 	strh.w	r7, [sp, #188]	; 0xbc
    blend_area.y1 = point1->y - w_half1;
 800b45e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    blend_area.y2 = point1->y + w_half0;
 800b462:	f8ad 80be 	strh.w	r8, [sp, #190]	; 0xbe
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b466:	f004 f93e 	bl	800f6e6 <_lv_area_intersect>
    if(!is_common) return;
 800b46a:	b300      	cbz	r0, 800b4ae <lv_draw_sw_line+0x14e>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b46c:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800b470:	b125      	cbz	r5, 800b47c <lv_draw_sw_line+0x11c>
 800b472:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800b476:	3d00      	subs	r5, #0
 800b478:	bf18      	it	ne
 800b47a:	2501      	movne	r5, #1
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800b47c:	a82e      	add	r0, sp, #184	; 0xb8
 800b47e:	f7fc fca7 	bl	8007dd0 <lv_draw_mask_is_any>
 800b482:	2800      	cmp	r0, #0
 800b484:	d167      	bne.n	800b556 <lv_draw_sw_line+0x1f6>
    else if(dashed) simple_mode = false;
 800b486:	f085 0601 	eor.w	r6, r5, #1

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b48a:	211c      	movs	r1, #28
 800b48c:	a839      	add	r0, sp, #228	; 0xe4
 800b48e:	f004 fe8f 	bl	80101b0 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800b492:	ab2e      	add	r3, sp, #184	; 0xb8
 800b494:	9339      	str	r3, [sp, #228]	; 0xe4
    blend_dsc.color = dsc->color;
 800b496:	8823      	ldrh	r3, [r4, #0]
 800b498:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    blend_dsc.opa = dsc->opa;
 800b49c:	7a23      	ldrb	r3, [r4, #8]
 800b49e:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800b4a2:	2e00      	cmp	r6, #0
 800b4a4:	d059      	beq.n	800b55a <lv_draw_sw_line+0x1fa>
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b4a6:	9804      	ldr	r0, [sp, #16]
 800b4a8:	a939      	add	r1, sp, #228	; 0xe4
 800b4aa:	f7fe fe4d 	bl	800a148 <lv_draw_sw_blend>
    if(dsc->round_end || dsc->round_start) {
 800b4ae:	7a63      	ldrb	r3, [r4, #9]
 800b4b0:	f013 0f0c 	tst.w	r3, #12
 800b4b4:	d048      	beq.n	800b548 <lv_draw_sw_line+0x1e8>
        lv_draw_rect_dsc_init(&cir_dsc);
 800b4b6:	a839      	add	r0, sp, #228	; 0xe4
 800b4b8:	f7fc ffc0 	bl	800843c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800b4bc:	8823      	ldrh	r3, [r4, #0]
 800b4be:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800b4c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b4c6:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
        cir_dsc.bg_opa = dsc->opa;
 800b4ca:	7a23      	ldrb	r3, [r4, #8]
 800b4cc:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
        int32_t r = (dsc->width >> 1);
 800b4d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800b4d4:	105d      	asrs	r5, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800b4d6:	43db      	mvns	r3, r3
 800b4d8:	f003 0601 	and.w	r6, r3, #1
        if(dsc->round_start) {
 800b4dc:	7a63      	ldrb	r3, [r4, #9]
 800b4de:	075a      	lsls	r2, r3, #29
 800b4e0:	d517      	bpl.n	800b512 <lv_draw_sw_line+0x1b2>
            cir_area.x1 = point1->x - r;
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	881a      	ldrh	r2, [r3, #0]
 800b4e6:	b2ab      	uxth	r3, r5
 800b4e8:	1ad1      	subs	r1, r2, r3
 800b4ea:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            cir_area.y1 = point1->y - r;
 800b4ee:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point1->x + r - r_corr;
 800b4f0:	441a      	add	r2, r3
            cir_area.y1 = point1->y - r;
 800b4f2:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800b4f4:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
 800b4f6:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800b4f8:	440b      	add	r3, r1
            cir_area.y1 = point1->y - r;
 800b4fa:	f8ad 00ba 	strh.w	r0, [sp, #186]	; 0xba
            cir_area.x2 = point1->x + r - r_corr;
 800b4fe:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            cir_area.y2 = point1->y + r - r_corr ;
 800b502:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800b504:	9804      	ldr	r0, [sp, #16]
 800b506:	aa2e      	add	r2, sp, #184	; 0xb8
 800b508:	a939      	add	r1, sp, #228	; 0xe4
            cir_area.y2 = point1->y + r - r_corr ;
 800b50a:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800b50e:	f7fc ffb7 	bl	8008480 <lv_draw_rect>
        if(dsc->round_end) {
 800b512:	7a63      	ldrb	r3, [r4, #9]
 800b514:	071b      	lsls	r3, r3, #28
 800b516:	d517      	bpl.n	800b548 <lv_draw_sw_line+0x1e8>
            cir_area.x1 = point2->x - r;
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	881a      	ldrh	r2, [r3, #0]
 800b51c:	b2ab      	uxth	r3, r5
 800b51e:	1ad1      	subs	r1, r2, r3
 800b520:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            cir_area.y1 = point2->y - r;
 800b524:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
 800b526:	441a      	add	r2, r3
            cir_area.y1 = point2->y - r;
 800b528:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800b52a:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
 800b52c:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800b52e:	440b      	add	r3, r1
            cir_area.y1 = point2->y - r;
 800b530:	f8ad 00ba 	strh.w	r0, [sp, #186]	; 0xba
            cir_area.x2 = point2->x + r - r_corr;
 800b534:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
            cir_area.y2 = point2->y + r - r_corr ;
 800b538:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800b53a:	9804      	ldr	r0, [sp, #16]
 800b53c:	aa2e      	add	r2, sp, #184	; 0xb8
 800b53e:	a939      	add	r1, sp, #228	; 0xe4
            cir_area.y2 = point2->y + r - r_corr ;
 800b540:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800b544:	f7fc ff9c 	bl	8008480 <lv_draw_rect>
    draw_ctx->clip_area = clip_area_ori;
 800b548:	9b04      	ldr	r3, [sp, #16]
 800b54a:	461a      	mov	r2, r3
 800b54c:	9b08      	ldr	r3, [sp, #32]
 800b54e:	6093      	str	r3, [r2, #8]
}
 800b550:	b047      	add	sp, #284	; 0x11c
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800b556:	2600      	movs	r6, #0
 800b558:	e797      	b.n	800b48a <lv_draw_sw_line+0x12a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b55a:	f8bd 60bc 	ldrh.w	r6, [sp, #188]	; 0xbc
 800b55e:	f9bd 20b8 	ldrsh.w	r2, [sp, #184]	; 0xb8
        blend_area.y2 = blend_area.y1;
 800b562:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
 800b566:	3601      	adds	r6, #1
 800b568:	1ab6      	subs	r6, r6, r2
        lv_coord_t y2 = blend_area.y2;
 800b56a:	f9bd a0be 	ldrsh.w	sl, [sp, #190]	; 0xbe
 800b56e:	b236      	sxth	r6, r6
        blend_area.y2 = blend_area.y1;
 800b570:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        if(dashed) {
 800b574:	b1dd      	cbz	r5, 800b5ae <lv_draw_sw_line+0x24e>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800b576:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
 800b57a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b57e:	4443      	add	r3, r8
 800b580:	fb92 f8f3 	sdiv	r8, r2, r3
 800b584:	fb03 2818 	mls	r8, r3, r8, r2
 800b588:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800b58c:	4630      	mov	r0, r6
 800b58e:	f004 fdc1 	bl	8010114 <lv_mem_buf_get>
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800b592:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800b596:	4607      	mov	r7, r0
        blend_dsc.mask_area = &blend_area;
 800b598:	ab2e      	add	r3, sp, #184	; 0xb8
        for(h = blend_area.y1; h <= y2; h++) {
 800b59a:	f9bd 90ba 	ldrsh.w	r9, [sp, #186]	; 0xba
        blend_dsc.mask = mask_buf;
 800b59e:	903c      	str	r0, [sp, #240]	; 0xf0
        blend_dsc.mask_area = &blend_area;
 800b5a0:	933e      	str	r3, [sp, #248]	; 0xf8
        for(h = blend_area.y1; h <= y2; h++) {
 800b5a2:	45d1      	cmp	r9, sl
 800b5a4:	dd05      	ble.n	800b5b2 <lv_draw_sw_line+0x252>
        lv_mem_buf_release(mask_buf);
 800b5a6:	4638      	mov	r0, r7
            lv_draw_sw_blend(draw_ctx, &blend_dsc);

            blend_area.y1++;
            blend_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800b5a8:	f004 fc0c 	bl	800fdc4 <lv_mem_buf_release>
 800b5ac:	e77f      	b.n	800b4ae <lv_draw_sw_line+0x14e>
        lv_coord_t dash_start = 0;
 800b5ae:	46a8      	mov	r8, r5
 800b5b0:	e7ec      	b.n	800b58c <lv_draw_sw_line+0x22c>
            lv_memset_ff(mask_buf, blend_area_w);
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f004 fe2a 	bl	801020e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 800b5ba:	4633      	mov	r3, r6
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	; 0xb8
 800b5c2:	fa0f f289 	sxth.w	r2, r9
 800b5c6:	f7fc fb8f 	bl	8007ce8 <lv_draw_mask_apply>
 800b5ca:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
            if(dashed) {
 800b5ce:	b19d      	cbz	r5, 800b5f8 <lv_draw_sw_line+0x298>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b5d0:	b190      	cbz	r0, 800b5f8 <lv_draw_sw_line+0x298>
                    lv_coord_t dash_cnt = dash_start;
 800b5d2:	4641      	mov	r1, r8
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e00a      	b.n	800b5ee <lv_draw_sw_line+0x28e>
                        if(dash_cnt <= dsc->dash_width) {
 800b5d8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800b5dc:	428a      	cmp	r2, r1
 800b5de:	db1c      	blt.n	800b61a <lv_draw_sw_line+0x2ba>
                            i += diff;
 800b5e0:	4413      	add	r3, r2
 800b5e2:	1a5b      	subs	r3, r3, r1
 800b5e4:	b21b      	sxth	r3, r3
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	3201      	adds	r2, #1
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	b211      	sxth	r1, r2
 800b5ee:	429e      	cmp	r6, r3
 800b5f0:	dcf2      	bgt.n	800b5d8 <lv_draw_sw_line+0x278>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	f88d 30f4 	strb.w	r3, [sp, #244]	; 0xf4
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b5f8:	9804      	ldr	r0, [sp, #16]
 800b5fa:	a939      	add	r1, sp, #228	; 0xe4
 800b5fc:	f7fe fda4 	bl	800a148 <lv_draw_sw_blend>
            blend_area.y1++;
 800b600:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
        for(h = blend_area.y1; h <= y2; h++) {
 800b604:	f109 0901 	add.w	r9, r9, #1
            blend_area.y1++;
 800b608:	3301      	adds	r3, #1
 800b60a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            blend_area.y2++;
 800b60e:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 800b612:	3301      	adds	r3, #1
 800b614:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        for(h = blend_area.y1; h <= y2; h++) {
 800b618:	e7c3      	b.n	800b5a2 <lv_draw_sw_line+0x242>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b61a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800b61e:	4402      	add	r2, r0
 800b620:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800b622:	bfb6      	itet	lt
 800b624:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800b626:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800b628:	f807 b003 	strblt.w	fp, [r7, r3]
 800b62c:	e7db      	b.n	800b5e6 <lv_draw_sw_line+0x286>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	4543      	cmp	r3, r8
 800b632:	bfa8      	it	ge
 800b634:	4643      	movge	r3, r8
 800b636:	b218      	sxth	r0, r3
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	4543      	cmp	r3, r8
 800b63c:	bfb8      	it	lt
 800b63e:	4643      	movlt	r3, r8
 800b640:	42be      	cmp	r6, r7
 800b642:	b29a      	uxth	r2, r3
 800b644:	f040 8092 	bne.w	800b76c <lv_draw_sw_line+0x40c>
    int32_t w = dsc->width - 1;
 800b648:	3d01      	subs	r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b64a:	f005 0301 	and.w	r3, r5, #1
    blend_area.x1 = point1->x - w_half1;
 800b64e:	b2b6      	uxth	r6, r6
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b650:	eb03 0365 	add.w	r3, r3, r5, asr #1
    blend_area.x1 = point1->x - w_half1;
 800b654:	1af3      	subs	r3, r6, r3
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b656:	a92e      	add	r1, sp, #184	; 0xb8
    blend_area.x1 = point1->x - w_half1;
 800b658:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    blend_area.x2 = point1->x + w_half0;
 800b65c:	eb06 0665 	add.w	r6, r6, r5, asr #1
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b660:	1e53      	subs	r3, r2, #1
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800b662:	f8ad 00ba 	strh.w	r0, [sp, #186]	; 0xba
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b666:	464a      	mov	r2, r9
 800b668:	4608      	mov	r0, r1
    blend_area.x2 = point1->x + w_half0;
 800b66a:	f8ad 60bc 	strh.w	r6, [sp, #188]	; 0xbc
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b66e:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b672:	f004 f838 	bl	800f6e6 <_lv_area_intersect>
    if(!is_common) return;
 800b676:	2800      	cmp	r0, #0
 800b678:	f43f af19 	beq.w	800b4ae <lv_draw_sw_line+0x14e>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b67c:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 800b680:	b126      	cbz	r6, 800b68c <lv_draw_sw_line+0x32c>
 800b682:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800b686:	3e00      	subs	r6, #0
 800b688:	bf18      	it	ne
 800b68a:	2601      	movne	r6, #1
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800b68c:	a82e      	add	r0, sp, #184	; 0xb8
 800b68e:	f7fc fb9f 	bl	8007dd0 <lv_draw_mask_is_any>
 800b692:	2800      	cmp	r0, #0
 800b694:	d137      	bne.n	800b706 <lv_draw_sw_line+0x3a6>
    else if(dashed) simple_mode = false;
 800b696:	f086 0501 	eor.w	r5, r6, #1
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b69a:	211c      	movs	r1, #28
 800b69c:	a839      	add	r0, sp, #228	; 0xe4
 800b69e:	f004 fd87 	bl	80101b0 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800b6a2:	ab2e      	add	r3, sp, #184	; 0xb8
 800b6a4:	9339      	str	r3, [sp, #228]	; 0xe4
    blend_dsc.color = dsc->color;
 800b6a6:	8823      	ldrh	r3, [r4, #0]
 800b6a8:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    blend_dsc.opa = dsc->opa;
 800b6ac:	7a23      	ldrb	r3, [r4, #8]
 800b6ae:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    if(simple_mode) {
 800b6b2:	2d00      	cmp	r5, #0
 800b6b4:	f47f aef7 	bne.w	800b4a6 <lv_draw_sw_line+0x146>
 800b6b8:	f8bd 70bc 	ldrh.w	r7, [sp, #188]	; 0xbc
 800b6bc:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 800b6c0:	3701      	adds	r7, #1
 800b6c2:	1aff      	subs	r7, r7, r3
 800b6c4:	b23f      	sxth	r7, r7
        blend_area.y2 = blend_area.y1;
 800b6c6:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b6ca:	4638      	mov	r0, r7
        lv_coord_t y2 = blend_area.y2;
 800b6cc:	f9bd a0be 	ldrsh.w	sl, [sp, #190]	; 0xbe
        blend_area.y2 = blend_area.y1;
 800b6d0:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b6d4:	f004 fd1e 	bl	8010114 <lv_mem_buf_get>
        blend_dsc.mask_area = &blend_area;
 800b6d8:	ab2e      	add	r3, sp, #184	; 0xb8
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b6da:	4681      	mov	r9, r0
        blend_dsc.mask = mask_buf;
 800b6dc:	f9bd 80ba 	ldrsh.w	r8, [sp, #186]	; 0xba
 800b6e0:	903c      	str	r0, [sp, #240]	; 0xf0
        blend_dsc.mask_area = &blend_area;
 800b6e2:	933e      	str	r3, [sp, #248]	; 0xf8
        if(dashed) {
 800b6e4:	b18e      	cbz	r6, 800b70a <lv_draw_sw_line+0x3aa>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800b6e6:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800b6ea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b6ee:	442b      	add	r3, r5
 800b6f0:	fb98 f5f3 	sdiv	r5, r8, r3
 800b6f4:	fb03 8515 	mls	r5, r3, r5, r8
 800b6f8:	b22d      	sxth	r5, r5
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800b6fa:	f04f 0b00 	mov.w	fp, #0
        for(h = blend_area.y1; h <= y2; h++) {
 800b6fe:	45d0      	cmp	r8, sl
 800b700:	dd05      	ble.n	800b70e <lv_draw_sw_line+0x3ae>
        lv_mem_buf_release(mask_buf);
 800b702:	4648      	mov	r0, r9
 800b704:	e750      	b.n	800b5a8 <lv_draw_sw_line+0x248>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800b706:	2500      	movs	r5, #0
 800b708:	e7c7      	b.n	800b69a <lv_draw_sw_line+0x33a>
        lv_coord_t dash_start = 0;
 800b70a:	4635      	mov	r5, r6
 800b70c:	e7f5      	b.n	800b6fa <lv_draw_sw_line+0x39a>
            lv_memset_ff(mask_buf, draw_area_w);
 800b70e:	4639      	mov	r1, r7
 800b710:	4648      	mov	r0, r9
 800b712:	f004 fd7c 	bl	801020e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 800b716:	463b      	mov	r3, r7
 800b718:	4648      	mov	r0, r9
 800b71a:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	; 0xb8
 800b71e:	fa0f f288 	sxth.w	r2, r8
 800b722:	f7fc fae1 	bl	8007ce8 <lv_draw_mask_apply>
 800b726:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
            if(dashed) {
 800b72a:	b176      	cbz	r6, 800b74a <lv_draw_sw_line+0x3ea>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b72c:	b158      	cbz	r0, 800b746 <lv_draw_sw_line+0x3e6>
                    if(dash_cnt > dsc->dash_width) {
 800b72e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b732:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                    if(dash_cnt > dsc->dash_width) {
 800b736:	42aa      	cmp	r2, r5
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b738:	4413      	add	r3, r2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800b73a:	bfb8      	it	lt
 800b73c:	f88d b0f4 	strblt.w	fp, [sp, #244]	; 0xf4
                        dash_cnt = 0;
 800b740:	429d      	cmp	r5, r3
 800b742:	bfa8      	it	ge
 800b744:	2500      	movge	r5, #0
                dash_cnt ++;
 800b746:	3501      	adds	r5, #1
 800b748:	b22d      	sxth	r5, r5
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b74a:	9804      	ldr	r0, [sp, #16]
 800b74c:	a939      	add	r1, sp, #228	; 0xe4
 800b74e:	f7fe fcfb 	bl	800a148 <lv_draw_sw_blend>
            blend_area.y1++;
 800b752:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
        for(h = blend_area.y1; h <= y2; h++) {
 800b756:	f108 0801 	add.w	r8, r8, #1
            blend_area.y1++;
 800b75a:	3301      	adds	r3, #1
 800b75c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            blend_area.y2++;
 800b760:	f8bd 30be 	ldrh.w	r3, [sp, #190]	; 0xbe
 800b764:	3301      	adds	r3, #1
 800b766:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        for(h = blend_area.y1; h <= y2; h++) {
 800b76a:	e7c8      	b.n	800b6fe <lv_draw_sw_line+0x39e>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	4598      	cmp	r8, r3
 800b770:	db06      	blt.n	800b780 <lv_draw_sw_line+0x420>
 800b772:	4643      	mov	r3, r8
 800b774:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b778:	9303      	str	r3, [sp, #12]
 800b77a:	4633      	mov	r3, r6
 800b77c:	463e      	mov	r6, r7
 800b77e:	461f      	mov	r7, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800b780:	1bbb      	subs	r3, r7, r6
 800b782:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800b784:	9b03      	ldr	r3, [sp, #12]
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b786:	49bd      	ldr	r1, [pc, #756]	; (800ba7c <lv_draw_sw_line+0x71c>)
    int32_t ydiff = p2.y - p1.y;
 800b788:	eba3 0308 	sub.w	r3, r3, r8
 800b78c:	9307      	str	r3, [sp, #28]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800b78e:	1bbb      	subs	r3, r7, r6
 800b790:	2b00      	cmp	r3, #0
 800b792:	bfb8      	it	lt
 800b794:	425b      	neglt	r3, r3
 800b796:	469b      	mov	fp, r3
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	bfb8      	it	lt
 800b79e:	425b      	neglt	r3, r3
 800b7a0:	469a      	mov	sl, r3
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b7a2:	459b      	cmp	fp, r3
 800b7a4:	bfcb      	itete	gt
 800b7a6:	015b      	lslgt	r3, r3, #5
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b7a8:	ea4f 134b 	movle.w	r3, fp, lsl #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b7ac:	fbb3 f3fb 	udivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b7b0:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b7b4:	5cc9      	ldrb	r1, [r1, r3]
 800b7b6:	434d      	muls	r5, r1
 800b7b8:	353f      	adds	r5, #63	; 0x3f
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800b7ba:	f3c5 13cf 	ubfx	r3, r5, #7, #16
 800b7be:	42b7      	cmp	r7, r6
 800b7c0:	bfd4      	ite	le
 800b7c2:	ebc3 0107 	rsble	r1, r3, r7
 800b7c6:	ebc3 0106 	rsbgt	r1, r3, r6
 800b7ca:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800b7ce:	42b7      	cmp	r7, r6
 800b7d0:	bfac      	ite	ge
 800b7d2:	19d9      	addge	r1, r3, r7
 800b7d4:	1999      	addlt	r1, r3, r6
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b7d6:	1ac0      	subs	r0, r0, r3
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800b7d8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b7dc:	a90f      	add	r1, sp, #60	; 0x3c
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b7de:	4413      	add	r3, r2
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b7e0:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b7e4:	aa0d      	add	r2, sp, #52	; 0x34
 800b7e6:	4608      	mov	r0, r1
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b7e8:	ea4f 19e5 	mov.w	r9, r5, asr #7
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b7ec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800b7f0:	f003 ff79 	bl	800f6e6 <_lv_area_intersect>
    if(is_common == false) return;
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f43f ae5a 	beq.w	800b4ae <lv_draw_sw_line+0x14e>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b7fa:	f009 0901 	and.w	r9, r9, #1
 800b7fe:	eb09 2925 	add.w	r9, r9, r5, asr #8
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800b802:	45d3      	cmp	fp, sl
 800b804:	fa1f f989 	uxth.w	r9, r9
 800b808:	f3c5 250f 	ubfx	r5, r5, #8, #16
 800b80c:	f340 80dd 	ble.w	800b9ca <lv_draw_sw_line+0x66a>
        if(xdiff > 0) {
 800b810:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b814:	fa1f fa88 	uxth.w	sl, r8
 800b818:	eb09 0b0a 	add.w	fp, r9, sl
 800b81c:	4499      	add	r9, r3
 800b81e:	ebaa 0a05 	sub.w	sl, sl, r5
 800b822:	1b5d      	subs	r5, r3, r5
 800b824:	1bbb      	subs	r3, r7, r6
 800b826:	2b00      	cmp	r3, #0
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	fa0f fb8b 	sxth.w	fp, fp
 800b830:	fa0f f989 	sxth.w	r9, r9
 800b834:	fa0f fa8a 	sxth.w	sl, sl
 800b838:	b22d      	sxth	r5, r5
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b83a:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800b83c:	f340 80b7 	ble.w	800b9ae <lv_draw_sw_line+0x64e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b840:	463b      	mov	r3, r7
 800b842:	4652      	mov	r2, sl
 800b844:	4631      	mov	r1, r6
 800b846:	9500      	str	r5, [sp, #0]
 800b848:	a818      	add	r0, sp, #96	; 0x60
 800b84a:	f7fc faeb 	bl	8007e24 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b84e:	2301      	movs	r3, #1
 800b850:	465a      	mov	r2, fp
 800b852:	e9cd 9300 	strd	r9, r3, [sp]
 800b856:	463b      	mov	r3, r7
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b858:	4631      	mov	r1, r6
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b85a:	a823      	add	r0, sp, #140	; 0x8c
 800b85c:	f7fc fae2 	bl	8007e24 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b860:	2100      	movs	r1, #0
 800b862:	a818      	add	r0, sp, #96	; 0x60
 800b864:	f7fc fa2a 	bl	8007cbc <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b868:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b86a:	900a      	str	r0, [sp, #40]	; 0x28
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b86c:	a823      	add	r0, sp, #140	; 0x8c
 800b86e:	f7fc fa25 	bl	8007cbc <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800b872:	f894 a009 	ldrb.w	sl, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b876:	900b      	str	r0, [sp, #44]	; 0x2c
    if(!dsc->raw_end) {
 800b878:	f01a 0a10 	ands.w	sl, sl, #16
 800b87c:	f040 80c3 	bne.w	800ba06 <lv_draw_sw_line+0x6a6>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b880:	2203      	movs	r2, #3
 800b882:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 800b886:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 800b88a:	9201      	str	r2, [sp, #4]
 800b88c:	eb05 0208 	add.w	r2, r5, r8
 800b890:	b212      	sxth	r2, r2
 800b892:	eba6 0309 	sub.w	r3, r6, r9
 800b896:	4631      	mov	r1, r6
 800b898:	9200      	str	r2, [sp, #0]
 800b89a:	b21b      	sxth	r3, r3
 800b89c:	4642      	mov	r2, r8
 800b89e:	a82e      	add	r0, sp, #184	; 0xb8
 800b8a0:	f7fc fac0 	bl	8007e24 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	9a03      	ldr	r2, [sp, #12]
 800b8aa:	eba7 0309 	sub.w	r3, r7, r9
 800b8ae:	4415      	add	r5, r2
 800b8b0:	b22d      	sxth	r5, r5
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	a839      	add	r0, sp, #228	; 0xe4
 800b8b8:	9500      	str	r5, [sp, #0]
 800b8ba:	f7fc fab3 	bl	8007e24 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b8be:	4651      	mov	r1, sl
 800b8c0:	a82e      	add	r0, sp, #184	; 0xb8
 800b8c2:	f7fc f9fb 	bl	8007cbc <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b8c6:	4651      	mov	r1, sl
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b8c8:	9003      	str	r0, [sp, #12]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b8ca:	a839      	add	r0, sp, #228	; 0xe4
 800b8cc:	f7fc f9f6 	bl	8007cbc <lv_draw_mask_add>
 800b8d0:	4683      	mov	fp, r0
 800b8d2:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b8d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b8da:	3501      	adds	r5, #1
 800b8dc:	1aed      	subs	r5, r5, r3
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800b8de:	f7fa ff55 	bl	800678c <_lv_refr_get_disp_refreshing>
 800b8e2:	f003 fc85 	bl	800f1f0 <lv_disp_get_hor_res>
 800b8e6:	4606      	mov	r6, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800b8e8:	a80f      	add	r0, sp, #60	; 0x3c
 800b8ea:	f003 fed0 	bl	800f68e <lv_area_get_size>
 800b8ee:	4286      	cmp	r6, r0
 800b8f0:	b22d      	sxth	r5, r5
 800b8f2:	d903      	bls.n	800b8fc <lv_draw_sw_line+0x59c>
 800b8f4:	a80f      	add	r0, sp, #60	; 0x3c
 800b8f6:	f003 feca 	bl	800f68e <lv_area_get_size>
 800b8fa:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f004 fc09 	bl	8010114 <lv_mem_buf_get>
 800b902:	4607      	mov	r7, r0

    lv_coord_t y2 = blend_area.y2;
    blend_area.y2 = blend_area.y1;

    uint32_t mask_p = 0;
 800b904:	f04f 0800 	mov.w	r8, #0
    lv_coord_t y2 = blend_area.y2;
 800b908:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    lv_memset_ff(mask_buf, mask_buf_size);
 800b90c:	4631      	mov	r1, r6
    lv_coord_t y2 = blend_area.y2;
 800b90e:	9307      	str	r3, [sp, #28]
    blend_area.y2 = blend_area.y1;
 800b910:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b914:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
    blend_area.y2 = blend_area.y1;
 800b918:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_memset_ff(mask_buf, mask_buf_size);
 800b91c:	f004 fc77 	bl	801020e <lv_memset_ff>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800b920:	211c      	movs	r1, #28
 800b922:	4650      	mov	r0, sl
 800b924:	f004 fc44 	bl	80101b0 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
 800b928:	8822      	ldrh	r2, [r4, #0]
    blend_dsc.blend_area = &blend_area;
 800b92a:	ab0f      	add	r3, sp, #60	; 0x3c
    blend_dsc.color = dsc->color;
 800b92c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    blend_dsc.opa = dsc->opa;
 800b930:	7a22      	ldrb	r2, [r4, #8]
    blend_dsc.mask = mask_buf;
    blend_dsc.mask_area = &blend_area;

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 800b932:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
    blend_dsc.blend_area = &blend_area;
 800b936:	9311      	str	r3, [sp, #68]	; 0x44
    blend_dsc.opa = dsc->opa;
 800b938:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    blend_dsc.mask = mask_buf;
 800b93c:	9714      	str	r7, [sp, #80]	; 0x50
    blend_dsc.mask_area = &blend_area;
 800b93e:	9316      	str	r3, [sp, #88]	; 0x58
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            blend_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b940:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    for(h = blend_area.y1; h <= y2; h++) {
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	4599      	cmp	r9, r3
 800b948:	dd62      	ble.n	800ba10 <lv_draw_sw_line+0x6b0>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 800b94a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800b94e:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 800b952:	429a      	cmp	r2, r3
 800b954:	d009      	beq.n	800b96a <lv_draw_sw_line+0x60a>
        blend_area.y2--;
 800b956:	3b01      	subs	r3, #1
 800b958:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b95c:	2302      	movs	r3, #2
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b95e:	9804      	ldr	r0, [sp, #16]
 800b960:	a911      	add	r1, sp, #68	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b962:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800b966:	f7fe fbef 	bl	800a148 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 800b96a:	4638      	mov	r0, r7
 800b96c:	f004 fa2a 	bl	800fdc4 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 800b970:	a818      	add	r0, sp, #96	; 0x60
 800b972:	f7fc fa03 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 800b976:	a823      	add	r0, sp, #140	; 0x8c
 800b978:	f7fc fa00 	bl	8007d7c <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	d002      	beq.n	800b988 <lv_draw_sw_line+0x628>
 800b982:	a82e      	add	r0, sp, #184	; 0xb8
 800b984:	f7fc f9fa 	bl	8007d7c <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800b988:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800b98c:	d002      	beq.n	800b994 <lv_draw_sw_line+0x634>
 800b98e:	a839      	add	r0, sp, #228	; 0xe4
 800b990:	f7fc f9f4 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 800b994:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b996:	f7fc f9c9 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800b99a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b99c:	f7fc f9c6 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800b9a0:	9803      	ldr	r0, [sp, #12]
 800b9a2:	f7fc f9c3 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	f7fc f9c0 	bl	8007d2c <lv_draw_mask_remove_id>
 800b9ac:	e57f      	b.n	800b4ae <lv_draw_sw_line+0x14e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	465a      	mov	r2, fp
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	f8cd 9000 	str.w	r9, [sp]
 800b9b8:	a818      	add	r0, sp, #96	; 0x60
 800b9ba:	f7fc fa33 	bl	8007e24 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	e9cd 5300 	strd	r5, r3, [sp]
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	e746      	b.n	800b858 <lv_draw_sw_line+0x4f8>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	fa1f fa86 	uxth.w	sl, r6
 800b9d0:	fa1f fb87 	uxth.w	fp, r7
 800b9d4:	9201      	str	r2, [sp, #4]
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	eb0b 0309 	add.w	r3, fp, r9
 800b9dc:	44d1      	add	r9, sl
 800b9de:	9200      	str	r2, [sp, #0]
 800b9e0:	b21b      	sxth	r3, r3
 800b9e2:	4642      	mov	r2, r8
 800b9e4:	fa0f f189 	sxth.w	r1, r9
 800b9e8:	a818      	add	r0, sp, #96	; 0x60
 800b9ea:	f7fc fa1b 	bl	8007e24 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	9201      	str	r2, [sp, #4]
 800b9f2:	9a03      	ldr	r2, [sp, #12]
 800b9f4:	ebab 0305 	sub.w	r3, fp, r5
 800b9f8:	ebaa 0105 	sub.w	r1, sl, r5
 800b9fc:	9200      	str	r2, [sp, #0]
 800b9fe:	b21b      	sxth	r3, r3
 800ba00:	4642      	mov	r2, r8
 800ba02:	b209      	sxth	r1, r1
 800ba04:	e729      	b.n	800b85a <lv_draw_sw_line+0x4fa>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800ba06:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
 800ba0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba0e:	e760      	b.n	800b8d2 <lv_draw_sw_line+0x572>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 800ba10:	eb07 0a08 	add.w	sl, r7, r8
 800ba14:	462b      	mov	r3, r5
 800ba16:	4650      	mov	r0, sl
 800ba18:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800ba1c:	fa0f f289 	sxth.w	r2, r9
 800ba20:	f7fc f962 	bl	8007ce8 <lv_draw_mask_apply>
 800ba24:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800ba28:	b918      	cbnz	r0, 800ba32 <lv_draw_sw_line+0x6d2>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f004 fbbf 	bl	80101b0 <lv_memset_00>
        mask_p += draw_area_w;
 800ba32:	44a8      	add	r8, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800ba34:	eb08 0305 	add.w	r3, r8, r5
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	d907      	bls.n	800ba4c <lv_draw_sw_line+0x6ec>
            blend_area.y2 ++;
 800ba3c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ba40:	3301      	adds	r3, #1
 800ba42:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    for(h = blend_area.y1; h <= y2; h++) {
 800ba46:	f109 0901 	add.w	r9, r9, #1
 800ba4a:	e77b      	b.n	800b944 <lv_draw_sw_line+0x5e4>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ba4c:	f04f 0302 	mov.w	r3, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ba50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba52:	9804      	ldr	r0, [sp, #16]
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ba54:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ba58:	f7fe fb76 	bl	800a148 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800ba5c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            lv_memset_ff(mask_buf, mask_buf_size);
 800ba60:	4631      	mov	r1, r6
            blend_area.y1 = blend_area.y2 + 1;
 800ba62:	3301      	adds	r3, #1
 800ba64:	b21b      	sxth	r3, r3
            lv_memset_ff(mask_buf, mask_buf_size);
 800ba66:	4638      	mov	r0, r7
            blend_area.y1 = blend_area.y2 + 1;
 800ba68:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            blend_area.y2 = blend_area.y1;
 800ba6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            mask_p = 0;
 800ba70:	f04f 0800 	mov.w	r8, #0
            lv_memset_ff(mask_buf, mask_buf_size);
 800ba74:	f004 fbcb 	bl	801020e <lv_memset_ff>
 800ba78:	e7e5      	b.n	800ba46 <lv_draw_sw_line+0x6e6>
 800ba7a:	bf00      	nop
 800ba7c:	0801a4aa 	.word	0x0801a4aa

0800ba80 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 800ba84:	2b02      	cmp	r3, #2
{
 800ba86:	b08d      	sub	sp, #52	; 0x34
 800ba88:	4683      	mov	fp, r0
 800ba8a:	4616      	mov	r6, r2
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	9107      	str	r1, [sp, #28]
    if(point_cnt < 3) return;
 800ba90:	d93f      	bls.n	800bb12 <lv_draw_sw_polygon+0x92>
    if(points == NULL) return;
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	d03d      	beq.n	800bb12 <lv_draw_sw_polygon+0x92>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 800ba96:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f004 fb3a 	bl	8010114 <lv_mem_buf_get>
    if(p == NULL) return;
 800baa0:	4604      	mov	r4, r0
 800baa2:	b3b0      	cbz	r0, 800bb12 <lv_draw_sw_polygon+0x92>
    uint16_t i;
    uint16_t pcnt = 0;
 800baa4:	2500      	movs	r5, #0
    p[0] = points[0];
    for(i = 0; i < point_cnt - 1; i++) {
 800baa6:	462a      	mov	r2, r5
    p[0] = points[0];
 800baa8:	6833      	ldr	r3, [r6, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 800baaa:	3f01      	subs	r7, #1
    p[0] = points[0];
 800baac:	6003      	str	r3, [r0, #0]
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 800baae:	0091      	lsls	r1, r2, #2
 800bab0:	3104      	adds	r1, #4
 800bab2:	f936 0022 	ldrsh.w	r0, [r6, r2, lsl #2]
 800bab6:	eb06 0c01 	add.w	ip, r6, r1
 800baba:	5e71      	ldrsh	r1, [r6, r1]
 800babc:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 800bac0:	4288      	cmp	r0, r1
 800bac2:	d105      	bne.n	800bad0 <lv_draw_sw_polygon+0x50>
 800bac4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800bac8:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 800bacc:	4288      	cmp	r0, r1
 800bace:	d004      	beq.n	800bada <lv_draw_sw_polygon+0x5a>
            p[pcnt] = points[i];
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            pcnt++;
 800bad6:	3501      	adds	r5, #1
 800bad8:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 800bada:	3201      	adds	r2, #1
 800badc:	b292      	uxth	r2, r2
 800bade:	42ba      	cmp	r2, r7
 800bae0:	dbe5      	blt.n	800baae <lv_draw_sw_polygon+0x2e>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800bae2:	f1a8 0004 	sub.w	r0, r8, #4
 800bae6:	f9b6 1000 	ldrsh.w	r1, [r6]
 800baea:	5e32      	ldrsh	r2, [r6, r0]
 800baec:	1833      	adds	r3, r6, r0
 800baee:	4291      	cmp	r1, r2
 800baf0:	d105      	bne.n	800bafe <lv_draw_sw_polygon+0x7e>
 800baf2:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800baf6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800bafa:	4291      	cmp	r1, r2
 800bafc:	d004      	beq.n	800bb08 <lv_draw_sw_polygon+0x88>
        p[pcnt] = points[point_cnt - 1];
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 800bb04:	3501      	adds	r5, #1
 800bb06:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 800bb08:	2d02      	cmp	r5, #2
 800bb0a:	d805      	bhi.n	800bb18 <lv_draw_sw_polygon+0x98>

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
    if(!is_common) {
        lv_mem_buf_release(p);
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f004 f959 	bl	800fdc4 <lv_mem_buf_release>
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800bb12:	b00d      	add	sp, #52	; 0x34
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 800bb18:	4a77      	ldr	r2, [pc, #476]	; (800bcf8 <lv_draw_sw_polygon+0x278>)
 800bb1a:	ab08      	add	r3, sp, #32
 800bb1c:	6810      	ldr	r0, [r2, #0]
 800bb1e:	6851      	ldr	r1, [r2, #4]
 800bb20:	1e6f      	subs	r7, r5, #1
 800bb22:	c303      	stmia	r3!, {r0, r1}
    for(i = 0; i < point_cnt; i++) {
 800bb24:	4623      	mov	r3, r4
 800bb26:	fa1f fc87 	uxth.w	ip, r7
 800bb2a:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800bb2e:	1d27      	adds	r7, r4, #4
 800bb30:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
 800bb34:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800bb38:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 800bb3c:	eb07 078c 	add.w	r7, r7, ip, lsl #2
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800bb40:	f9b3 e000 	ldrsh.w	lr, [r3]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800bb44:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800bb48:	4576      	cmp	r6, lr
 800bb4a:	bfa8      	it	ge
 800bb4c:	4676      	movge	r6, lr
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800bb4e:	4560      	cmp	r0, ip
 800bb50:	bfa8      	it	ge
 800bb52:	4660      	movge	r0, ip
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800bb54:	4571      	cmp	r1, lr
 800bb56:	bfb8      	it	lt
 800bb58:	4671      	movlt	r1, lr
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4562      	cmp	r2, ip
 800bb5e:	bfb8      	it	lt
 800bb60:	4662      	movlt	r2, ip
    for(i = 0; i < point_cnt; i++) {
 800bb62:	429f      	cmp	r7, r3
 800bb64:	d1ec      	bne.n	800bb40 <lv_draw_sw_polygon+0xc0>
 800bb66:	f8ad 6020 	strh.w	r6, [sp, #32]
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 800bb6a:	ae0a      	add	r6, sp, #40	; 0x28
 800bb6c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800bb70:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800bb74:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f8db 2008 	ldr.w	r2, [fp, #8]
 800bb7e:	a908      	add	r1, sp, #32
 800bb80:	f003 fdb1 	bl	800f6e6 <_lv_area_intersect>
    if(!is_common) {
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d0c1      	beq.n	800bb0c <lv_draw_sw_polygon+0x8c>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800bb88:	f8db 3008 	ldr.w	r3, [fp, #8]
    lv_coord_t y_min = p[0].y;
 800bb8c:	4622      	mov	r2, r4
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800bb8e:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 800bb90:	f8cb 6008 	str.w	r6, [fp, #8]
    lv_coord_t y_min = p[0].y;
 800bb94:	2301      	movs	r3, #1
    int16_t y_min_i = 0;
 800bb96:	2600      	movs	r6, #0
    lv_coord_t y_min = p[0].y;
 800bb98:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
        if(p[i].y < y_min) {
 800bb9c:	f932 0023 	ldrsh.w	r0, [r2, r3, lsl #2]
 800bba0:	4288      	cmp	r0, r1
            y_min_i = i;
 800bba2:	bfb8      	it	lt
 800bba4:	b21e      	sxthlt	r6, r3
 800bba6:	f103 0301 	add.w	r3, r3, #1
 800bbaa:	bfb8      	it	lt
 800bbac:	4601      	movlt	r1, r0
    for(i = 1; i < point_cnt; i++) {
 800bbae:	b298      	uxth	r0, r3
 800bbb0:	4285      	cmp	r5, r0
 800bbb2:	d8f3      	bhi.n	800bb9c <lv_draw_sw_polygon+0x11c>
    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800bbb4:	202c      	movs	r0, #44	; 0x2c
 800bbb6:	4368      	muls	r0, r5
 800bbb8:	f004 faac 	bl	8010114 <lv_mem_buf_get>
 800bbbc:	4681      	mov	r9, r0
    i_next_right = y_min_i + 1;
 800bbbe:	f106 0c01 	add.w	ip, r6, #1
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800bbc2:	1e70      	subs	r0, r6, #1
 800bbc4:	bf48      	it	mi
 800bbc6:	1940      	addmi	r0, r0, r5
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 800bbc8:	45ac      	cmp	ip, r5
 800bbca:	bfa8      	it	ge
 800bbcc:	f04f 0c00 	movge.w	ip, #0
    if(dyl * dxr < dyr * dxl) inv = true;
 800bbd0:	46c8      	mov	r8, r9
 800bbd2:	f04f 0a00 	mov.w	sl, #0
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800bbd6:	eb04 028c 	add.w	r2, r4, ip, lsl #2
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800bbda:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 800bbde:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800bbe2:	885b      	ldrh	r3, [r3, #2]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800bbe4:	8852      	ldrh	r2, [r2, #2]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800bbe6:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800bbe8:	f834 7026 	ldrh.w	r7, [r4, r6, lsl #2]
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800bbec:	1ac9      	subs	r1, r1, r3
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800bbee:	f834 c02c 	ldrh.w	ip, [r4, ip, lsl #2]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800bbf2:	1ad3      	subs	r3, r2, r3
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800bbf4:	f834 2020 	ldrh.w	r2, [r4, r0, lsl #2]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800bbf8:	ebac 0c07 	sub.w	ip, ip, r7
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800bbfc:	1bd2      	subs	r2, r2, r7
    if(dyl * dxr < dyr * dxl) inv = true;
 800bbfe:	b209      	sxth	r1, r1
 800bc00:	fa0f fc8c 	sxth.w	ip, ip
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	b212      	sxth	r2, r2
 800bc08:	fb0c f101 	mul.w	r1, ip, r1
 800bc0c:	4353      	muls	r3, r2
    int32_t i_prev_left = y_min_i;
 800bc0e:	9602      	str	r6, [sp, #8]
    if(dyl * dxr < dyr * dxl) inv = true;
 800bc10:	9104      	str	r1, [sp, #16]
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	9603      	str	r6, [sp, #12]
        if(!inv) {
 800bc16:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800bc1a:	4293      	cmp	r3, r2
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800bc1c:	9b02      	ldr	r3, [sp, #8]
        if(!inv) {
 800bc1e:	db3e      	blt.n	800bc9e <lv_draw_sw_polygon+0x21e>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800bc20:	1e5f      	subs	r7, r3, #1
            i_next_right = i_prev_right + 1;
 800bc22:	9b03      	ldr	r3, [sp, #12]
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800bc24:	bf48      	it	mi
 800bc26:	197f      	addmi	r7, r7, r5
            i_next_right = i_prev_right + 1;
 800bc28:	1c5e      	adds	r6, r3, #1
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 800bc2a:	42ae      	cmp	r6, r5
 800bc2c:	bfa8      	it	ge
 800bc2e:	2600      	movge	r6, #0
        if(p[i_next_left].y >=  p[i_prev_left].y) {
 800bc30:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800bc34:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800bc38:	9a02      	ldr	r2, [sp, #8]
 800bc3a:	00bb      	lsls	r3, r7, #2
 800bc3c:	0091      	lsls	r1, r2, #2
 800bc3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc42:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bc46:	4290      	cmp	r0, r2
 800bc48:	db15      	blt.n	800bc76 <lv_draw_sw_polygon+0x1f6>
            if(p[i_next_left].y != p[i_prev_left].y &&
 800bc4a:	d011      	beq.n	800bc70 <lv_draw_sw_polygon+0x1f0>
               p[i_next_left].x !=  p[i_prev_left].x) {
 800bc4c:	f934 c003 	ldrsh.w	ip, [r4, r3]
 800bc50:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 800bc52:	458c      	cmp	ip, r1
 800bc54:	d00c      	beq.n	800bc70 <lv_draw_sw_polygon+0x1f0>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 800bc56:	2301      	movs	r3, #1
 800bc58:	e9cd 0300 	strd	r0, r3, [sp]
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	4663      	mov	r3, ip
 800bc60:	f7fc f8e0 	bl	8007e24 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800bc64:	4640      	mov	r0, r8
 800bc66:	4649      	mov	r1, r9
 800bc68:	f7fc f828 	bl	8007cbc <lv_draw_mask_add>
                mp_next++;
 800bc6c:	f108 082c 	add.w	r8, r8, #44	; 0x2c
            mask_cnt++;
 800bc70:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_left = i_next_left;
 800bc74:	9702      	str	r7, [sp, #8]
        if(mask_cnt == point_cnt) break;
 800bc76:	4555      	cmp	r5, sl
 800bc78:	d11a      	bne.n	800bcb0 <lv_draw_sw_polygon+0x230>
    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 800bc7a:	9907      	ldr	r1, [sp, #28]
 800bc7c:	aa08      	add	r2, sp, #32
 800bc7e:	4658      	mov	r0, fp
 800bc80:	f7fc fbfe 	bl	8008480 <lv_draw_rect>
    lv_draw_mask_remove_custom(mp);
 800bc84:	4648      	mov	r0, r9
 800bc86:	f7fc f863 	bl	8007d50 <lv_draw_mask_remove_custom>
    lv_mem_buf_release(mp);
 800bc8a:	4648      	mov	r0, r9
 800bc8c:	f004 f89a 	bl	800fdc4 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 800bc90:	4620      	mov	r0, r4
 800bc92:	f004 f897 	bl	800fdc4 <lv_mem_buf_release>
    draw_ctx->clip_area = clip_area_ori;
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	f8cb 3008 	str.w	r3, [fp, #8]
 800bc9c:	e739      	b.n	800bb12 <lv_draw_sw_polygon+0x92>
            i_next_left = i_prev_left + 1;
 800bc9e:	1c5f      	adds	r7, r3, #1
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800bca0:	9b03      	ldr	r3, [sp, #12]
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 800bca2:	42af      	cmp	r7, r5
 800bca4:	bfa8      	it	ge
 800bca6:	2700      	movge	r7, #0
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800bca8:	1e5e      	subs	r6, r3, #1
 800bcaa:	bf48      	it	mi
 800bcac:	1976      	addmi	r6, r6, r5
 800bcae:	e7bf      	b.n	800bc30 <lv_draw_sw_polygon+0x1b0>
        if(p[i_next_right].y >=  p[i_prev_right].y) {
 800bcb0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
 800bcb4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800bcb8:	9a03      	ldr	r2, [sp, #12]
 800bcba:	00b3      	lsls	r3, r6, #2
 800bcbc:	0091      	lsls	r1, r2, #2
 800bcbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bcc2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bcc6:	4290      	cmp	r0, r2
 800bcc8:	db13      	blt.n	800bcf2 <lv_draw_sw_polygon+0x272>
            if(p[i_next_right].y != p[i_prev_right].y &&
 800bcca:	d00f      	beq.n	800bcec <lv_draw_sw_polygon+0x26c>
               p[i_next_right].x !=  p[i_prev_right].x) {
 800bccc:	5ee3      	ldrsh	r3, [r4, r3]
 800bcce:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 800bcd0:	428b      	cmp	r3, r1
 800bcd2:	d00b      	beq.n	800bcec <lv_draw_sw_polygon+0x26c>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 800bcd4:	2700      	movs	r7, #0
 800bcd6:	e9cd 0700 	strd	r0, r7, [sp]
 800bcda:	4640      	mov	r0, r8
 800bcdc:	f7fc f8a2 	bl	8007e24 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800bce0:	4640      	mov	r0, r8
 800bce2:	4649      	mov	r1, r9
 800bce4:	f7fb ffea 	bl	8007cbc <lv_draw_mask_add>
                mp_next++;
 800bce8:	f108 082c 	add.w	r8, r8, #44	; 0x2c
            mask_cnt++;
 800bcec:	f10a 0a01 	add.w	sl, sl, #1
            i_prev_right = i_next_right;
 800bcf0:	9603      	str	r6, [sp, #12]
    } while(mask_cnt < point_cnt);
 800bcf2:	4555      	cmp	r5, sl
 800bcf4:	d88f      	bhi.n	800bc16 <lv_draw_sw_polygon+0x196>
 800bcf6:	e7c0      	b.n	800bc7a <lv_draw_sw_polygon+0x1fa>
 800bcf8:	0801545e 	.word	0x0801545e

0800bcfc <grad_get>:
}


#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800bcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800bcfe:	7a04      	ldrb	r4, [r0, #8]
 800bd00:	fb01 f304 	mul.w	r3, r1, r4
    if(i <= min) return dsc->bg_color;
 800bd04:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800bd08:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
 800bd0c:	dc01      	bgt.n	800bd12 <grad_get+0x16>
 800bd0e:	8880      	ldrh	r0, [r0, #4]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800bd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800bd12:	7a43      	ldrb	r3, [r0, #9]
 800bd14:	fb03 f601 	mul.w	r6, r3, r1
    if(i >= max) return dsc->bg_grad_color;
 800bd18:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800bd1c:	db01      	blt.n	800bd22 <grad_get+0x26>
 800bd1e:	88c0      	ldrh	r0, [r0, #6]
 800bd20:	e7f6      	b.n	800bd10 <grad_get+0x14>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800bd22:	1b1b      	subs	r3, r3, r4
    d = (s * d) >> 8;
 800bd24:	434b      	muls	r3, r1
    i -= min;
 800bd26:	1b52      	subs	r2, r2, r5
    lv_opa_t mix = (i * 255) / d;
 800bd28:	b212      	sxth	r2, r2
 800bd2a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800bd2e:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
 800bd30:	fb92 f3f3 	sdiv	r3, r2, r3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd34:	7981      	ldrb	r1, [r0, #6]
 800bd36:	79c4      	ldrb	r4, [r0, #7]
 800bd38:	f890 c004 	ldrb.w	ip, [r0, #4]
 800bd3c:	7947      	ldrb	r7, [r0, #5]
 800bd3e:	f001 0507 	and.w	r5, r1, #7
 800bd42:	0962      	lsrs	r2, r4, #5
 800bd44:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bd48:	0978      	lsrs	r0, r7, #5
 800bd4a:	f00c 0507 	and.w	r5, ip, #7
 800bd4e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800bd52:	f248 0581 	movw	r5, #32897	; 0x8081
 800bd56:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd58:	f1c3 06ff 	rsb	r6, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd5c:	4370      	muls	r0, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd5e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd62:	fb03 0202 	mla	r2, r3, r2, r0
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd66:	f007 071f 	and.w	r7, r7, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd6a:	08c8      	lsrs	r0, r1, #3
 800bd6c:	fb06 f10c 	mul.w	r1, r6, ip
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd70:	437e      	muls	r6, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd72:	fb03 1000 	mla	r0, r3, r0, r1
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd76:	f004 041f 	and.w	r4, r4, #31
 800bd7a:	fb03 6304 	mla	r3, r3, r4, r6
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd7e:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd80:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd82:	436a      	muls	r2, r5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bd84:	4368      	muls	r0, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bd86:	3380      	adds	r3, #128	; 0x80
 800bd88:	436b      	muls	r3, r5
 800bd8a:	f3c2 6182 	ubfx	r1, r2, #26, #3
 800bd8e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 800bd92:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
 800bd96:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 800bd9a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bd9e:	0dd2      	lsrs	r2, r2, #23
 800bda0:	ea40 3042 	orr.w	r0, r0, r2, lsl #13
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 800bda4:	e7b4      	b.n	800bd10 <grad_get+0x14>

0800bda6 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800bda6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdaa:	4614      	mov	r4, r2
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800bdac:	0042      	lsls	r2, r0, #1
{
 800bdae:	b087      	sub	sp, #28
    int32_t s_left = sw >> 1;
 800bdb0:	ea4f 0861 	mov.w	r8, r1, asr #1
    if((sw & 1) == 0) s_left--;
 800bdb4:	07cb      	lsls	r3, r1, #31
{
 800bdb6:	4605      	mov	r5, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800bdb8:	4610      	mov	r0, r2
    int32_t s_left = sw >> 1;
 800bdba:	46c2      	mov	sl, r8
{
 800bdbc:	460e      	mov	r6, r1
    if((sw & 1) == 0) s_left--;
 800bdbe:	bf58      	it	pl
 800bdc0:	f108 3aff 	addpl.w	sl, r8, #4294967295	; 0xffffffff
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800bdc4:	9201      	str	r2, [sp, #4]
 800bdc6:	f004 f9a5 	bl	8010114 <lv_mem_buf_get>
 800bdca:	f06f 0701 	mvn.w	r7, #1
 800bdce:	4601      	mov	r1, r0
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
 800bdd0:	46a1      	mov	r9, r4
 800bdd2:	f04f 0b00 	mov.w	fp, #0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800bdd6:	9a01      	ldr	r2, [sp, #4]
 800bdd8:	fb0a 7707 	mla	r7, sl, r7, r7
 800bddc:	1e93      	subs	r3, r2, #2
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	f10a 0301 	add.w	r3, sl, #1
 800bde4:	9302      	str	r3, [sp, #8]
 800bde6:	4427      	add	r7, r4
 800bde8:	eb04 0348 	add.w	r3, r4, r8, lsl #1
    for(y = 0; y < size; y++) {
 800bdec:	455d      	cmp	r5, fp
 800bdee:	dc1e      	bgt.n	800be2e <shadow_blur_corner+0x88>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
 800bdf0:	f44f 577f 	mov.w	r7, #16320	; 0x3fc0
    for(i = 0; i < (uint32_t)size * size; i++) {
 800bdf4:	2300      	movs	r3, #0
    uint32_t max_v_div = max_v / sw;
 800bdf6:	fbb7 f7f6 	udiv	r7, r7, r6
    for(i = 0; i < (uint32_t)size * size; i++) {
 800bdfa:	fb05 fc05 	mul.w	ip, r5, r5
 800bdfe:	459c      	cmp	ip, r3
 800be00:	d143      	bne.n	800be8a <shadow_blur_corner+0xe4>
        if(sh_ups_buf[i] == 0) continue;
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
    }

    for(x = 0; x < size; x++) {
 800be02:	f04f 0c00 	mov.w	ip, #0
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800be06:	1e6f      	subs	r7, r5, #1
 800be08:	fb02 4307 	mla	r3, r2, r7, r4
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	3c02      	subs	r4, #2
 800be12:	4353      	muls	r3, r2
 800be14:	9303      	str	r3, [sp, #12]
 800be16:	f1c8 0300 	rsb	r3, r8, #0
 800be1a:	4353      	muls	r3, r2
 800be1c:	9304      	str	r3, [sp, #16]
    for(x = 0; x < size; x++) {
 800be1e:	4565      	cmp	r5, ip
 800be20:	dc41      	bgt.n	800bea6 <shadow_blur_corner+0x100>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 800be22:	4608      	mov	r0, r1
}
 800be24:	b007      	add	sp, #28
 800be26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 800be2a:	f003 bfcb 	b.w	800fdc4 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800be2e:	9801      	ldr	r0, [sp, #4]
 800be30:	f839 c000 	ldrh.w	ip, [r9, r0]
        for(x = size - 1; x >= 0; x--) {
 800be34:	1e68      	subs	r0, r5, #1
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800be36:	fb06 fc0c 	mul.w	ip, r6, ip
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800be3a:	eb00 0e08 	add.w	lr, r0, r8
 800be3e:	4575      	cmp	r5, lr
            uint32_t right_val = 0;
 800be40:	bfd8      	it	le
 800be42:	f04f 0e00 	movle.w	lr, #0
            sh_ups_blur_buf[x] = v;
 800be46:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800be4a:	bfc8      	it	gt
 800be4c:	f833 e010 	ldrhgt.w	lr, [r3, r0, lsl #1]
            v -= right_val;
 800be50:	ebac 0e0e 	sub.w	lr, ip, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800be54:	eba0 0c0a 	sub.w	ip, r0, sl
 800be58:	f1bc 0f00 	cmp.w	ip, #0
 800be5c:	bfd4      	ite	le
 800be5e:	f8b9 c000 	ldrhle.w	ip, [r9]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800be62:	f837 c010 	ldrhgt.w	ip, [r7, r0, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800be66:	3801      	subs	r0, #1
            v += left_val;
 800be68:	44f4      	add	ip, lr
        for(x = size - 1; x >= 0; x--) {
 800be6a:	d2e6      	bcs.n	800be3a <shadow_blur_corner+0x94>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800be6c:	4648      	mov	r0, r9
 800be6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be72:	9103      	str	r1, [sp, #12]
 800be74:	f003 ffd4 	bl	800fe20 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800be78:	9a04      	ldr	r2, [sp, #16]
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	9903      	ldr	r1, [sp, #12]
 800be7e:	4491      	add	r9, r2
    for(y = 0; y < size; y++) {
 800be80:	f10b 0b01 	add.w	fp, fp, #1
 800be84:	4417      	add	r7, r2
 800be86:	4413      	add	r3, r2
 800be88:	e7b0      	b.n	800bdec <shadow_blur_corner+0x46>
        if(sh_ups_buf[i] == 0) continue;
 800be8a:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 800be8e:	b140      	cbz	r0, 800bea2 <shadow_blur_corner+0xfc>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800be90:	f5b0 5f7f 	cmp.w	r0, #16320	; 0x3fc0
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800be94:	bf16      	itet	ne
 800be96:	fb90 f0f6 	sdivne	r0, r0, r6
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800be9a:	f824 7013 	strheq.w	r7, [r4, r3, lsl #1]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800be9e:	f824 0013 	strhne.w	r0, [r4, r3, lsl #1]
    for(i = 0; i < (uint32_t)size * size; i++) {
 800bea2:	3301      	adds	r3, #1
 800bea4:	e7ab      	b.n	800bdfe <shadow_blur_corner+0x58>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800bea6:	9803      	ldr	r0, [sp, #12]
 800bea8:	3402      	adds	r4, #2
 800beaa:	1820      	adds	r0, r4, r0
 800beac:	4607      	mov	r7, r0
 800beae:	9804      	ldr	r0, [sp, #16]
 800beb0:	46a6      	mov	lr, r4
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800beb2:	eb04 0900 	add.w	r9, r4, r0
 800beb6:	46a2      	mov	sl, r4
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800beb8:	2000      	movs	r0, #0
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800beba:	8823      	ldrh	r3, [r4, #0]
 800bebc:	4373      	muls	r3, r6
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bfb4      	ite	lt
 800bec2:	f04f 0b00 	movlt.w	fp, #0
 800bec6:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 800beca:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800bece:	eba0 0b08 	sub.w	fp, r0, r8
 800bed2:	f1bb 0f00 	cmp.w	fp, #0
 800bed6:	bfd4      	ite	le
 800bed8:	f8ba b000 	ldrhle.w	fp, [sl]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800bedc:	f8b9 b000 	ldrhgt.w	fp, [r9]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800bee0:	4492      	add	sl, r2
            v -= top_val;
 800bee2:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	4491      	add	r9, r2
 800beea:	18c3      	adds	r3, r0, r3
 800beec:	429d      	cmp	r5, r3
 800beee:	bfcc      	ite	gt
 800bef0:	463b      	movgt	r3, r7
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800bef2:	9b01      	ldrle	r3, [sp, #4]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800bef4:	3001      	adds	r0, #1
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800bef6:	881b      	ldrh	r3, [r3, #0]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800bef8:	4285      	cmp	r5, r0
            v += bottom_val;
 800befa:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800befc:	4417      	add	r7, r2
 800befe:	dcde      	bgt.n	800bebe <shadow_blur_corner+0x118>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800bf00:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800bf02:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800bf06:	3301      	adds	r3, #1
 800bf08:	429d      	cmp	r5, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800bf0a:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800bf0e:	4496      	add	lr, r2
 800bf10:	dcf7      	bgt.n	800bf02 <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	f10c 0c01 	add.w	ip, ip, #1
 800bf18:	3302      	adds	r3, #2
 800bf1a:	9301      	str	r3, [sp, #4]
 800bf1c:	e77f      	b.n	800be1e <shadow_blur_corner+0x78>

0800bf1e <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800bf1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf22:	4681      	mov	r9, r0
 800bf24:	b0a7      	sub	sp, #156	; 0x9c
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 800bf26:	4608      	mov	r0, r1
{
 800bf28:	460c      	mov	r4, r1
 800bf2a:	4615      	mov	r5, r2
 800bf2c:	461e      	mov	r6, r3
 800bf2e:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 800bf32:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
    bool mask_any = lv_draw_mask_is_any(outer_area);
 800bf36:	f7fb ff4b 	bl	8007dd0 <lv_draw_mask_is_any>

    if(!mask_any && rout == 0 && rin == 0) {
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d170      	bne.n	800c022 <draw_border_generic+0x104>
 800bf40:	ea56 030a 	orrs.w	r3, r6, sl
 800bf44:	d16d      	bne.n	800c022 <draw_border_generic+0x104>
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800bf46:	211c      	movs	r1, #28
 800bf48:	a81f      	add	r0, sp, #124	; 0x7c
 800bf4a:	f004 f931 	bl	80101b0 <lv_memset_00>
    blend_dsc.blend_area = &a;
 800bf4e:	ab19      	add	r3, sp, #100	; 0x64
 800bf50:	931f      	str	r3, [sp, #124]	; 0x7c
    blend_dsc.color = color;
 800bf52:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
    blend_dsc.opa = opa;

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800bf56:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    blend_dsc.color = color;
 800bf5a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800bf5e:	f9b5 3000 	ldrsh.w	r3, [r5]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800bf62:	f9b5 b002 	ldrsh.w	fp, [r5, #2]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800bf66:	9302      	str	r3, [sp, #8]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800bf68:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800bf6c:	f9b4 7000 	ldrsh.w	r7, [r4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]

    /*Top*/
    a.x1 = outer_area->x1;
    a.x2 = outer_area->x2;
    a.y1 = outer_area->y1;
    a.y2 = inner_area->y1 - 1;
 800bf76:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800bf7a:	9303      	str	r3, [sp, #12]
    a.x2 = outer_area->x2;
 800bf7c:	9b01      	ldr	r3, [sp, #4]
    if(top_side) {
 800bf7e:	455e      	cmp	r6, fp
    blend_dsc.opa = opa;
 800bf80:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 800bf84:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800bf88:	f9b5 8006 	ldrsh.w	r8, [r5, #6]
    a.x1 = outer_area->x1;
 800bf8c:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 800bf90:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = outer_area->y1;
 800bf94:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
    a.y2 = inner_area->y1 - 1;
 800bf98:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(top_side) {
 800bf9c:	dc03      	bgt.n	800bfa6 <draw_border_generic+0x88>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	a91f      	add	r1, sp, #124	; 0x7c
 800bfa2:	f7fe f8d1 	bl	800a148 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 800bfa6:	88e9      	ldrh	r1, [r5, #6]
    a.y2 = outer_area->y2;
    if(bottom_side) {
 800bfa8:	45c2      	cmp	sl, r8
    a.y1 = inner_area->y2 + 1;
 800bfaa:	f101 0101 	add.w	r1, r1, #1
 800bfae:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    a.y2 = outer_area->y2;
 800bfb2:	88e1      	ldrh	r1, [r4, #6]
 800bfb4:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    if(bottom_side) {
 800bfb8:	db03      	blt.n	800bfc2 <draw_border_generic+0xa4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800bfba:	4648      	mov	r0, r9
 800bfbc:	a91f      	add	r1, sp, #124	; 0x7c
 800bfbe:	f7fe f8c3 	bl	800a148 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
    a.x2 = inner_area->x1 - 1;
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800bfc2:	455e      	cmp	r6, fp
 800bfc4:	bfd4      	ite	le
 800bfc6:	f9b5 3002 	ldrshle.w	r3, [r5, #2]
 800bfca:	f9b4 3002 	ldrshgt.w	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800bfce:	45c2      	cmp	sl, r8
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800bfd0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.x1 = outer_area->x1;
 800bfd4:	8821      	ldrh	r1, [r4, #0]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800bfd6:	bfac      	ite	ge
 800bfd8:	f9b5 3006 	ldrshge.w	r3, [r5, #6]
 800bfdc:	f9b4 3006 	ldrshlt.w	r3, [r4, #6]
    a.x1 = outer_area->x1;
 800bfe0:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800bfe4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    a.x2 = inner_area->x1 - 1;
 800bfe8:	8829      	ldrh	r1, [r5, #0]
    if(left_side) {
 800bfea:	9b02      	ldr	r3, [sp, #8]
    a.x2 = inner_area->x1 - 1;
 800bfec:	3901      	subs	r1, #1
    if(left_side) {
 800bfee:	429f      	cmp	r7, r3
    a.x2 = inner_area->x1 - 1;
 800bff0:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    if(left_side) {
 800bff4:	dc03      	bgt.n	800bffe <draw_border_generic+0xe0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800bff6:	4648      	mov	r0, r9
 800bff8:	a91f      	add	r1, sp, #124	; 0x7c
 800bffa:	f7fe f8a5 	bl	800a148 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 800bffe:	88ab      	ldrh	r3, [r5, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 800c000:	9a03      	ldr	r2, [sp, #12]
    a.x1 = inner_area->x2 + 1;
 800c002:	3301      	adds	r3, #1
 800c004:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = outer_area->x2;
 800c008:	88a3      	ldrh	r3, [r4, #4]
 800c00a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    if(right_side) {
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	4293      	cmp	r3, r2
 800c012:	db03      	blt.n	800c01c <draw_border_generic+0xfe>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c014:	4648      	mov	r0, r9
 800c016:	a91f      	add	r1, sp, #124	; 0x7c
 800c018:	f7fe f896 	bl	800a148 <lv_draw_sw_blend>
}
 800c01c:	b027      	add	sp, #156	; 0x9c
 800c01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 800c022:	4621      	mov	r1, r4
 800c024:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c028:	a80f      	add	r0, sp, #60	; 0x3c
 800c02a:	f003 fb5c 	bl	800f6e6 <_lv_area_intersect>
 800c02e:	9003      	str	r0, [sp, #12]
 800c030:	2800      	cmp	r0, #0
 800c032:	d0f3      	beq.n	800c01c <draw_border_generic+0xfe>
 800c034:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 800c038:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c03c:	f10b 0b01 	add.w	fp, fp, #1
 800c040:	ebab 0b03 	sub.w	fp, fp, r3
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800c044:	211c      	movs	r1, #28
 800c046:	a81f      	add	r0, sp, #124	; 0x7c
 800c048:	fa0f fb8b 	sxth.w	fp, fp
 800c04c:	f004 f8b0 	bl	80101b0 <lv_memset_00>
    blend_dsc.mask = lv_mem_buf_get(draw_area_w);;
 800c050:	4658      	mov	r0, fp
 800c052:	f004 f85f 	bl	8010114 <lv_mem_buf_get>
    if(rout > 0) {
 800c056:	2e00      	cmp	r6, #0
    blend_dsc.mask = lv_mem_buf_get(draw_area_w);;
 800c058:	9022      	str	r0, [sp, #136]	; 0x88
    if(rout > 0) {
 800c05a:	dd5f      	ble.n	800c11c <draw_border_generic+0x1fe>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 800c05c:	2300      	movs	r3, #0
 800c05e:	4632      	mov	r2, r6
 800c060:	4621      	mov	r1, r4
 800c062:	a813      	add	r0, sp, #76	; 0x4c
 800c064:	f7fb ffd6 	bl	8008014 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c068:	2100      	movs	r1, #0
 800c06a:	a813      	add	r0, sp, #76	; 0x4c
 800c06c:	f7fb fe26 	bl	8007cbc <lv_draw_mask_add>
 800c070:	900a      	str	r0, [sp, #40]	; 0x28
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 800c072:	4652      	mov	r2, sl
 800c074:	2301      	movs	r3, #1
 800c076:	4629      	mov	r1, r5
 800c078:	a819      	add	r0, sp, #100	; 0x64
 800c07a:	f7fb ffcb 	bl	8008014 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c07e:	2100      	movs	r1, #0
 800c080:	a819      	add	r0, sp, #100	; 0x64
 800c082:	f7fb fe1b 	bl	8007cbc <lv_draw_mask_add>
    blend_dsc.blend_area = &blend_area;
 800c086:	ab11      	add	r3, sp, #68	; 0x44
 800c088:	931f      	str	r3, [sp, #124]	; 0x7c
    blend_dsc.mask_area = &blend_area;
 800c08a:	9324      	str	r3, [sp, #144]	; 0x90
    blend_dsc.color = color;
 800c08c:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
    blend_dsc.opa = opa;
 800c090:	f88d 8094 	strb.w	r8, [sp, #148]	; 0x94
    blend_dsc.color = color;
 800c094:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    blend_dsc.blend_mode = blend_mode;
 800c098:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800c09c:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    blend_dsc.blend_mode = blend_mode;
 800c0a0:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800c0a4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800c0a8:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	4433      	add	r3, r6
 800c0b0:	4543      	cmp	r3, r8
 800c0b2:	bfb8      	it	lt
 800c0b4:	4643      	movlt	r3, r8
 800c0b6:	b21b      	sxth	r3, r3
 800c0b8:	9308      	str	r3, [sp, #32]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800c0ba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c0be:	900d      	str	r0, [sp, #52]	; 0x34
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800c0c0:	9302      	str	r3, [sp, #8]
 800c0c2:	9a02      	ldr	r2, [sp, #8]
 800c0c4:	ebaa 0306 	sub.w	r3, sl, r6
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	bfa8      	it	ge
 800c0cc:	4613      	movge	r3, r2
 800c0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c0d0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c0d4:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask_any) {
 800c0d6:	2f00      	cmp	r7, #0
 800c0d8:	d048      	beq.n	800c16c <draw_border_generic+0x24e>
        blend_area.x1 = draw_area.x1;
 800c0da:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c0de:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
        blend_area.x1 = draw_area.x1;
 800c0e2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = draw_area.x2;
 800c0e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c0ea:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c0ee:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800c0f2:	42a3      	cmp	r3, r4
 800c0f4:	da16      	bge.n	800c124 <draw_border_generic+0x206>
        lv_draw_mask_free_param(&mask_rin_param);
 800c0f6:	a819      	add	r0, sp, #100	; 0x64
 800c0f8:	f7fb fe40 	bl	8007d7c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 800c0fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c0fe:	f7fb fe15 	bl	8007d2c <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 800c102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c104:	3301      	adds	r3, #1
 800c106:	d005      	beq.n	800c114 <draw_border_generic+0x1f6>
            lv_draw_mask_free_param(&mask_rout_param);
 800c108:	a813      	add	r0, sp, #76	; 0x4c
 800c10a:	f7fb fe37 	bl	8007d7c <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 800c10e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c110:	f7fb fe0c 	bl	8007d2c <lv_draw_mask_remove_id>
        lv_mem_buf_release(blend_dsc.mask);
 800c114:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c116:	f003 fe55 	bl	800fdc4 <lv_mem_buf_release>
        return;
 800c11a:	e77f      	b.n	800c01c <draw_border_generic+0xfe>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800c11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c120:	930a      	str	r3, [sp, #40]	; 0x28
 800c122:	e7a6      	b.n	800c072 <draw_border_generic+0x154>
            if(!top_side && h < core_area.y1) continue;
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	4598      	cmp	r8, r3
 800c128:	da02      	bge.n	800c130 <draw_border_generic+0x212>
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	dc1b      	bgt.n	800c168 <draw_border_generic+0x24a>
            if(!bottom_side && h > core_area.y2) break;
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	4553      	cmp	r3, sl
 800c134:	dd02      	ble.n	800c13c <draw_border_generic+0x21e>
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	42a3      	cmp	r3, r4
 800c13a:	dbdc      	blt.n	800c0f6 <draw_border_generic+0x1d8>
            blend_area.y1 = h;
 800c13c:	b225      	sxth	r5, r4
            lv_memset_ff(blend_dsc.mask, draw_area_w);
 800c13e:	4659      	mov	r1, fp
 800c140:	9822      	ldr	r0, [sp, #136]	; 0x88
            blend_area.y1 = h;
 800c142:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            blend_area.y2 = h;
 800c146:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
            lv_memset_ff(blend_dsc.mask, draw_area_w);
 800c14a:	f004 f860 	bl	801020e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, draw_area.x1, h, draw_area_w);
 800c14e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c152:	465b      	mov	r3, fp
 800c154:	462a      	mov	r2, r5
 800c156:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c158:	f7fb fdc6 	bl	8007ce8 <lv_draw_mask_apply>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c15c:	a91f      	add	r1, sp, #124	; 0x7c
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, draw_area.x1, h, draw_area_w);
 800c15e:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c162:	4648      	mov	r0, r9
 800c164:	f7fd fff0 	bl	800a148 <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c168:	3401      	adds	r4, #1
 800c16a:	e7c0      	b.n	800c0ee <draw_border_generic+0x1d0>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800c16c:	f9b5 3000 	ldrsh.w	r3, [r5]
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c176:	199f      	adds	r7, r3, r6
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	9b04      	ldr	r3, [sp, #16]
 800c17c:	429f      	cmp	r7, r3
 800c17e:	bfb8      	it	lt
 800c180:	461f      	movlt	r7, r3
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800c182:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c186:	9306      	str	r3, [sp, #24]
 800c188:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800c18c:	9a06      	ldr	r2, [sp, #24]
 800c18e:	9307      	str	r3, [sp, #28]
 800c190:	1b9b      	subs	r3, r3, r6
 800c192:	4293      	cmp	r3, r2
 800c194:	bfa8      	it	ge
 800c196:	4613      	movge	r3, r2
    if(left_side && right_side && top_side && bottom_side &&
 800c198:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c19c:	428a      	cmp	r2, r1
 800c19e:	db11      	blt.n	800c1c4 <draw_border_generic+0x2a6>
 800c1a0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 800c1a4:	428a      	cmp	r2, r1
 800c1a6:	dc0d      	bgt.n	800c1c4 <draw_border_generic+0x2a6>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	4590      	cmp	r8, r2
 800c1ac:	db0a      	blt.n	800c1c4 <draw_border_generic+0x2a6>
 800c1ae:	9a02      	ldr	r2, [sp, #8]
 800c1b0:	4552      	cmp	r2, sl
 800c1b2:	dc07      	bgt.n	800c1c4 <draw_border_generic+0x2a6>
 800c1b4:	1c58      	adds	r0, r3, #1
 800c1b6:	1bc0      	subs	r0, r0, r7
 800c1b8:	b200      	sxth	r0, r0
 800c1ba:	2831      	cmp	r0, #49	; 0x31
 800c1bc:	bfd4      	ite	le
 800c1be:	2200      	movle	r2, #0
 800c1c0:	2201      	movgt	r2, #1
 800c1c2:	9203      	str	r2, [sp, #12]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800c1c4:	b21b      	sxth	r3, r3
 800c1c6:	930b      	str	r3, [sp, #44]	; 0x2c
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    if(top_side && split_hor) {
 800c1ce:	9b01      	ldr	r3, [sp, #4]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800c1d0:	b23f      	sxth	r7, r7
    if(top_side && split_hor) {
 800c1d2:	4598      	cmp	r8, r3
 800c1d4:	db6c      	blt.n	800c2b0 <draw_border_generic+0x392>
 800c1d6:	9b03      	ldr	r3, [sp, #12]
 800c1d8:	b313      	cbz	r3, 800c220 <draw_border_generic+0x302>
        blend_area.x2 = core_area.x2;
 800c1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c1dc:	4648      	mov	r0, r9
        blend_area.x2 = core_area.x2;
 800c1de:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = outer_area->y1;
 800c1e2:	9b01      	ldr	r3, [sp, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c1e4:	a91f      	add	r1, sp, #124	; 0x7c
        blend_area.y1 = outer_area->y1;
 800c1e6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = inner_area->y1 - 1;
 800c1ea:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c1ee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        blend_area.x1 = core_area.x1;
 800c1f2:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c1f6:	f7fd ffa7 	bl	800a148 <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	4553      	cmp	r3, sl
 800c1fe:	dc0f      	bgt.n	800c220 <draw_border_generic+0x302>
        blend_area.x2 = core_area.x2;
 800c200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c202:	4648      	mov	r0, r9
        blend_area.x2 = core_area.x2;
 800c204:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = inner_area->y2 + 1;
 800c208:	88eb      	ldrh	r3, [r5, #6]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c20a:	a91f      	add	r1, sp, #124	; 0x7c
        blend_area.y1 = inner_area->y2 + 1;
 800c20c:	3301      	adds	r3, #1
 800c20e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = outer_area->y2;
 800c212:	88e3      	ldrh	r3, [r4, #6]
        blend_area.x1 = core_area.x1;
 800c214:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
        blend_area.y2 = outer_area->y2;
 800c218:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c21c:	f7fd ff94 	bl	800a148 <lv_draw_sw_blend>
    if(left_side) {
 800c220:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c224:	4293      	cmp	r3, r2
 800c226:	db10      	blt.n	800c24a <draw_border_generic+0x32c>
        blend_area.x1 = outer_area->x1;
 800c228:	8823      	ldrh	r3, [r4, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c22a:	4648      	mov	r0, r9
        blend_area.x1 = outer_area->x1;
 800c22c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = inner_area->x1 - 1;
 800c230:	882b      	ldrh	r3, [r5, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c232:	a91f      	add	r1, sp, #124	; 0x7c
        blend_area.x2 = inner_area->x1 - 1;
 800c234:	3b01      	subs	r3, #1
 800c236:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 800c240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c242:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c246:	f7fd ff7f 	bl	800a148 <lv_draw_sw_blend>
    if(right_side) {
 800c24a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c24e:	4293      	cmp	r3, r2
 800c250:	dc10      	bgt.n	800c274 <draw_border_generic+0x356>
        blend_area.x1 = inner_area->x2 + 1;
 800c252:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c254:	4648      	mov	r0, r9
        blend_area.x1 = inner_area->x2 + 1;
 800c256:	3301      	adds	r3, #1
 800c258:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        blend_area.x2 = outer_area->x2;
 800c25c:	88a3      	ldrh	r3, [r4, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c25e:	a91f      	add	r1, sp, #124	; 0x7c
        blend_area.x2 = outer_area->x2;
 800c260:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        blend_area.y1 = core_area.y1;
 800c264:	9b08      	ldr	r3, [sp, #32]
 800c266:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_area.y2 = core_area.y2;
 800c26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c270:	f7fd ff6a 	bl	800a148 <lv_draw_sw_blend>
    if(!split_hor) {
 800c274:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800c278:	9903      	ldr	r1, [sp, #12]
 800c27a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
        blend_area.x1 = draw_area.x1;
 800c27e:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    if(!split_hor) {
 800c282:	2900      	cmp	r1, #0
 800c284:	d153      	bne.n	800c32e <draw_border_generic+0x410>
        lv_coord_t max_h = LV_MAX(rout, outer_area->y1 - inner_area->y1);
 800c286:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
        blend_area.x2 = draw_area.x2;
 800c28a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        lv_coord_t max_h = LV_MAX(rout, outer_area->y1 - inner_area->y1);
 800c28e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        for(h = 0; h < max_h; h++) {
 800c292:	460f      	mov	r7, r1
        lv_coord_t max_h = LV_MAX(rout, outer_area->y1 - inner_area->y1);
 800c294:	1a9b      	subs	r3, r3, r2
 800c296:	429e      	cmp	r6, r3
 800c298:	bfb8      	it	lt
 800c29a:	461e      	movlt	r6, r3
 800c29c:	b236      	sxth	r6, r6
        for(h = 0; h < max_h; h++) {
 800c29e:	42be      	cmp	r6, r7
 800c2a0:	dc0d      	bgt.n	800c2be <draw_border_generic+0x3a0>
    lv_draw_mask_free_param(&mask_rin_param);
 800c2a2:	a819      	add	r0, sp, #100	; 0x64
 800c2a4:	f7fb fd6a 	bl	8007d7c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 800c2a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c2aa:	f7fb fd3f 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 800c2ae:	e72b      	b.n	800c108 <draw_border_generic+0x1ea>
    if(bottom_side && split_hor) {
 800c2b0:	9b02      	ldr	r3, [sp, #8]
 800c2b2:	4553      	cmp	r3, sl
 800c2b4:	dcb4      	bgt.n	800c220 <draw_border_generic+0x302>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d0b1      	beq.n	800c220 <draw_border_generic+0x302>
 800c2bc:	e7a0      	b.n	800c200 <draw_border_generic+0x2e2>
            lv_coord_t bottom_y = outer_area->y2 - h;
 800c2be:	88e3      	ldrh	r3, [r4, #6]
            lv_coord_t top_y = outer_area->y1 + h;
 800c2c0:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800c2c4:	b2bd      	uxth	r5, r7
 800c2c6:	44a8      	add	r8, r5
            lv_coord_t bottom_y = outer_area->y2 - h;
 800c2c8:	1b5d      	subs	r5, r3, r5
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800c2ca:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            lv_coord_t top_y = outer_area->y1 + h;
 800c2ce:	fa0f f888 	sxth.w	r8, r8
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800c2d2:	4543      	cmp	r3, r8
            lv_coord_t bottom_y = outer_area->y2 - h;
 800c2d4:	b22d      	sxth	r5, r5
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800c2d6:	dd03      	ble.n	800c2e0 <draw_border_generic+0x3c2>
 800c2d8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	db24      	blt.n	800c32a <draw_border_generic+0x40c>
            lv_memset_ff(blend_dsc.mask, draw_area_w);
 800c2e0:	4659      	mov	r1, fp
 800c2e2:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c2e4:	f003 ff93 	bl	801020e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, top_y, draw_area_w);
 800c2e8:	465b      	mov	r3, fp
 800c2ea:	4642      	mov	r2, r8
 800c2ec:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c2f0:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c2f2:	f7fb fcf9 	bl	8007ce8 <lv_draw_mask_apply>
            if(top_y >= draw_area.y1) {
 800c2f6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, top_y, draw_area_w);
 800c2fa:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
            if(top_y >= draw_area.y1) {
 800c2fe:	4543      	cmp	r3, r8
 800c300:	dc07      	bgt.n	800c312 <draw_border_generic+0x3f4>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c302:	4648      	mov	r0, r9
 800c304:	a91f      	add	r1, sp, #124	; 0x7c
                blend_area.y1 = top_y;
 800c306:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
                blend_area.y2 = top_y;
 800c30a:	f8ad 804a 	strh.w	r8, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c30e:	f7fd ff1b 	bl	800a148 <lv_draw_sw_blend>
            if(bottom_y <= draw_area.y2) {
 800c312:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 800c316:	42ab      	cmp	r3, r5
 800c318:	db07      	blt.n	800c32a <draw_border_generic+0x40c>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c31a:	4648      	mov	r0, r9
 800c31c:	a91f      	add	r1, sp, #124	; 0x7c
                blend_area.y1 = bottom_y;
 800c31e:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                blend_area.y2 = bottom_y;
 800c322:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c326:	f7fd ff0f 	bl	800a148 <lv_draw_sw_blend>
        for(h = 0; h < max_h; h++) {
 800c32a:	3701      	adds	r7, #1
 800c32c:	e7b7      	b.n	800c29e <draw_border_generic+0x380>
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 800c32e:	3f01      	subs	r7, #1
 800c330:	429f      	cmp	r7, r3
 800c332:	bfa8      	it	ge
 800c334:	461f      	movge	r7, r3
 800c336:	f1c2 0201 	rsb	r2, r2, #1
 800c33a:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 800c33e:	4417      	add	r7, r2
 800c340:	b23f      	sxth	r7, r7
        if(blend_w > 0) {
 800c342:	2f00      	cmp	r7, #0
 800c344:	dc3c      	bgt.n	800c3c0 <draw_border_generic+0x4a2>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800c346:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c348:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 800c34c:	3601      	adds	r6, #1
 800c34e:	42b2      	cmp	r2, r6
 800c350:	bfb8      	it	lt
 800c352:	4632      	movlt	r2, r6
        blend_area.x2 = draw_area.x2;
 800c354:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800c358:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 800c35c:	1c5e      	adds	r6, r3, #1
 800c35e:	1ab6      	subs	r6, r6, r2
 800c360:	b236      	sxth	r6, r6
        if(blend_w > 0) {
 800c362:	2e00      	cmp	r6, #0
        blend_area.x2 = draw_area.x2;
 800c364:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(blend_w > 0) {
 800c368:	dd9b      	ble.n	800c2a2 <draw_border_generic+0x384>
            if(right_side || top_side) {
 800c36a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c36e:	4293      	cmp	r3, r2
 800c370:	dd73      	ble.n	800c45a <draw_border_generic+0x53c>
 800c372:	9b01      	ldr	r3, [sp, #4]
 800c374:	4598      	cmp	r8, r3
 800c376:	da70      	bge.n	800c45a <draw_border_generic+0x53c>
            if(right_side || bottom_side) {
 800c378:	9b02      	ldr	r3, [sp, #8]
 800c37a:	4553      	cmp	r3, sl
 800c37c:	dc91      	bgt.n	800c2a2 <draw_border_generic+0x384>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800c37e:	2500      	movs	r5, #0
 800c380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c382:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800c386:	3501      	adds	r5, #1
 800c388:	442b      	add	r3, r5
 800c38a:	429a      	cmp	r2, r3
 800c38c:	db89      	blt.n	800c2a2 <draw_border_generic+0x384>
                    blend_area.y1 = h;
 800c38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c390:	4631      	mov	r1, r6
 800c392:	18ec      	adds	r4, r5, r3
 800c394:	b224      	sxth	r4, r4
 800c396:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 800c398:	f8ad 4046 	strh.w	r4, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 800c39c:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c3a0:	f003 ff35 	bl	801020e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c3a4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c3a8:	4633      	mov	r3, r6
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c3ae:	f7fb fc9b 	bl	8007ce8 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c3b2:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c3b4:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c3b8:	4648      	mov	r0, r9
 800c3ba:	f7fd fec5 	bl	800a148 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800c3be:	e7df      	b.n	800c380 <draw_border_generic+0x462>
            if(left_side || top_side) {
 800c3c0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	da26      	bge.n	800c416 <draw_border_generic+0x4f8>
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	4598      	cmp	r8, r3
 800c3cc:	da23      	bge.n	800c416 <draw_border_generic+0x4f8>
            if(left_side || bottom_side) {
 800c3ce:	9b02      	ldr	r3, [sp, #8]
 800c3d0:	4553      	cmp	r3, sl
 800c3d2:	dcb8      	bgt.n	800c346 <draw_border_generic+0x428>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800c3d4:	2400      	movs	r4, #0
 800c3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800c3dc:	3401      	adds	r4, #1
 800c3de:	4423      	add	r3, r4
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	dbb0      	blt.n	800c346 <draw_border_generic+0x428>
                    blend_area.y1 = h;
 800c3e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	18e5      	adds	r5, r4, r3
 800c3ea:	b22d      	sxth	r5, r5
 800c3ec:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 800c3ee:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 800c3f2:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c3f6:	f003 ff0a 	bl	801020e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c3fa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c3fe:	463b      	mov	r3, r7
 800c400:	462a      	mov	r2, r5
 800c402:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c404:	f7fb fc70 	bl	8007ce8 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c408:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c40a:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c40e:	4648      	mov	r0, r9
 800c410:	f7fd fe9a 	bl	800a148 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800c414:	e7df      	b.n	800c3d6 <draw_border_generic+0x4b8>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800c416:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
 800c41a:	9b08      	ldr	r3, [sp, #32]
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	dc04      	bgt.n	800c42a <draw_border_generic+0x50c>
            if(left_side || bottom_side) {
 800c420:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c424:	4293      	cmp	r3, r2
 800c426:	dad5      	bge.n	800c3d4 <draw_border_generic+0x4b6>
 800c428:	e7d1      	b.n	800c3ce <draw_border_generic+0x4b0>
                    blend_area.y1 = h;
 800c42a:	b225      	sxth	r5, r4
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c42c:	4639      	mov	r1, r7
 800c42e:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 800c430:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 800c434:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c438:	f003 fee9 	bl	801020e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c43c:	463b      	mov	r3, r7
 800c43e:	462a      	mov	r2, r5
 800c440:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c444:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c446:	f7fb fc4f 	bl	8007ce8 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c44a:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c44c:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c450:	4648      	mov	r0, r9
 800c452:	f7fd fe79 	bl	800a148 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800c456:	3401      	adds	r4, #1
 800c458:	e7df      	b.n	800c41a <draw_border_generic+0x4fc>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800c45a:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
 800c45e:	9b08      	ldr	r3, [sp, #32]
 800c460:	42a3      	cmp	r3, r4
 800c462:	dc04      	bgt.n	800c46e <draw_border_generic+0x550>
            if(right_side || bottom_side) {
 800c464:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c468:	4293      	cmp	r3, r2
 800c46a:	dd88      	ble.n	800c37e <draw_border_generic+0x460>
 800c46c:	e784      	b.n	800c378 <draw_border_generic+0x45a>
                    blend_area.y1 = h;
 800c46e:	b225      	sxth	r5, r4
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c470:	4631      	mov	r1, r6
 800c472:	9822      	ldr	r0, [sp, #136]	; 0x88
                    blend_area.y1 = h;
 800c474:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
                    blend_area.y2 = h;
 800c478:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
                    lv_memset_ff(blend_dsc.mask, blend_w);
 800c47c:	f003 fec7 	bl	801020e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c480:	4633      	mov	r3, r6
 800c482:	462a      	mov	r2, r5
 800c484:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c488:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c48a:	f7fb fc2d 	bl	8007ce8 <lv_draw_mask_apply>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c48e:	a91f      	add	r1, sp, #124	; 0x7c
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask, blend_area.x1, h, blend_w);
 800c490:	f88d 008c 	strb.w	r0, [sp, #140]	; 0x8c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c494:	4648      	mov	r0, r9
 800c496:	f7fd fe57 	bl	800a148 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800c49a:	3401      	adds	r4, #1
 800c49c:	e7df      	b.n	800c45e <draw_border_generic+0x540>

0800c49e <lv_draw_sw_rect>:
{
 800c49e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->shadow_width == 0) return;
 800c4a2:	f9b1 302a 	ldrsh.w	r3, [r1, #42]	; 0x2a
{
 800c4a6:	b0a9      	sub	sp, #164	; 0xa4
 800c4a8:	4689      	mov	r9, r1
 800c4aa:	9004      	str	r0, [sp, #16]
 800c4ac:	9205      	str	r2, [sp, #20]
    if(dsc->shadow_width == 0) return;
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f000 83fb 	beq.w	800ccaa <lv_draw_sw_rect+0x80c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800c4b4:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 800c4b8:	2a02      	cmp	r2, #2
 800c4ba:	920a      	str	r2, [sp, #40]	; 0x28
 800c4bc:	f240 83f5 	bls.w	800ccaa <lv_draw_sw_rect+0x80c>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	f9b1 8030 	ldrsh.w	r8, [r1, #48]	; 0x30
 800c4c6:	d106      	bne.n	800c4d6 <lv_draw_sw_rect+0x38>
 800c4c8:	f1b8 0f00 	cmp.w	r8, #0
 800c4cc:	dc03      	bgt.n	800c4d6 <lv_draw_sw_rect+0x38>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 800c4ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	f000 83ea 	beq.w	800ccaa <lv_draw_sw_rect+0x80c>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c4d6:	9a05      	ldr	r2, [sp, #20]
 800c4d8:	f8b9 502c 	ldrh.w	r5, [r9, #44]	; 0x2c
 800c4dc:	8816      	ldrh	r6, [r2, #0]
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c4de:	9905      	ldr	r1, [sp, #20]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c4e0:	fa1f f888 	uxth.w	r8, r8
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c4e4:	8892      	ldrh	r2, [r2, #4]
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c4e6:	442e      	add	r6, r5
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c4e8:	4445      	add	r5, r8
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c4ea:	884f      	ldrh	r7, [r1, #2]
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c4ec:	4415      	add	r5, r2
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c4ee:	f8b9 202e 	ldrh.w	r2, [r9, #46]	; 0x2e
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c4f2:	b2b6      	uxth	r6, r6
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c4f4:	4417      	add	r7, r2
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c4f6:	eb08 0402 	add.w	r4, r8, r2
 800c4fa:	88ca      	ldrh	r2, [r1, #6]
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 800c4fc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c500:	4414      	add	r4, r2
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c502:	eba6 0208 	sub.w	r2, r6, r8
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 800c506:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800c50a:	3a01      	subs	r2, #1
 800c50c:	1ad2      	subs	r2, r2, r3
 800c50e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	b292      	uxth	r2, r2
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c516:	b2ad      	uxth	r5, r5
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 800c518:	1951      	adds	r1, r2, r5
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c51a:	b2bf      	uxth	r7, r7
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 800c51c:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c520:	eba7 0108 	sub.w	r1, r7, r8
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 800c524:	3901      	subs	r1, #1
 800c526:	1acb      	subs	r3, r1, r3
 800c528:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c52e:	b2a4      	uxth	r4, r4
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c530:	2bfe      	cmp	r3, #254	; 0xfe
 800c532:	bf28      	it	cs
 800c534:	23ff      	movcs	r3, #255	; 0xff
 800c536:	930a      	str	r3, [sp, #40]	; 0x28
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 800c538:	9b04      	ldr	r3, [sp, #16]
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 800c53a:	4422      	add	r2, r4
 800c53c:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 800c540:	a910      	add	r1, sp, #64	; 0x40
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	a812      	add	r0, sp, #72	; 0x48
 800c546:	f003 f8ce 	bl	800f6e6 <_lv_area_intersect>
 800c54a:	9007      	str	r0, [sp, #28]
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f000 83ac 	beq.w	800ccaa <lv_draw_sw_rect+0x80c>
    lv_area_increase(&bg_area, -1, -1);
 800c552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dest->x1 = src->x1;
 800c556:	9b05      	ldr	r3, [sp, #20]
 800c558:	4611      	mov	r1, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	a814      	add	r0, sp, #80	; 0x50
 800c55e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    dest->y1 = src->y1;
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	f108 0801 	add.w	r8, r8, #1
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	fa1f f888 	uxth.w	r8, r8
 800c56e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    dest->x2 = src->x2;
 800c572:	9b05      	ldr	r3, [sp, #20]
 800c574:	4445      	add	r5, r8
 800c576:	889b      	ldrh	r3, [r3, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c578:	44a0      	add	r8, r4
    dest->x2 = src->x2;
 800c57a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    dest->y2 = src->y2;
 800c57e:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c580:	eba8 0707 	sub.w	r7, r8, r7
    dest->y2 = src->y2;
 800c584:	88db      	ldrh	r3, [r3, #6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c586:	fa1f fa87 	uxth.w	sl, r7
    dest->y2 = src->y2;
 800c58a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 800c58e:	f003 f88c 	bl	800f6aa <lv_area_increase>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c592:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c596:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 800c59a:	3301      	adds	r3, #1
 800c59c:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c59e:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800c5a2:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
 800c5a6:	3101      	adds	r1, #1
 800c5a8:	1a09      	subs	r1, r1, r0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	b209      	sxth	r1, r1
 800c5ae:	428b      	cmp	r3, r1
 800c5b0:	bfa8      	it	ge
 800c5b2:	460b      	movge	r3, r1
    int32_t r_bg = dsc->radius;
 800c5b4:	f9b9 2000 	ldrsh.w	r2, [r9]
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800c5b8:	b2a9      	uxth	r1, r5
 800c5ba:	105b      	asrs	r3, r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c5bc:	1b8c      	subs	r4, r1, r6
 800c5be:	4293      	cmp	r3, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800c5c0:	b224      	sxth	r4, r4
 800c5c2:	b23f      	sxth	r7, r7
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800c5c4:	bfa8      	it	ge
 800c5c6:	4613      	movge	r3, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800c5c8:	42a7      	cmp	r7, r4
 800c5ca:	bfa8      	it	ge
 800c5cc:	4627      	movge	r7, r4
 800c5ce:	107f      	asrs	r7, r7, #1
 800c5d0:	4297      	cmp	r7, r2
 800c5d2:	bfa8      	it	ge
 800c5d4:	4617      	movge	r7, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800c5d6:	9308      	str	r3, [sp, #32]
    int32_t corner_size = dsc->shadow_width  + r_sh;
 800c5d8:	f9b9 302a 	ldrsh.w	r3, [r9, #42]	; 0x2a
 800c5dc:	9109      	str	r1, [sp, #36]	; 0x24
 800c5de:	eb03 0b07 	add.w	fp, r3, r7
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c5e2:	fb0b f00b 	mul.w	r0, fp, fp
 800c5e6:	0040      	lsls	r0, r0, #1
 800c5e8:	f003 fd94 	bl	8010114 <lv_mem_buf_get>
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800c5ec:	f9b9 402a 	ldrsh.w	r4, [r9, #42]	; 0x2a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c5f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5f2:	f004 0301 	and.w	r3, r4, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c5f6:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 800c5fa:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800c5fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c600:	f064 0301 	orn	r3, r4, #1
 800c604:	4413      	add	r3, r2
 800c606:	443b      	add	r3, r7
    sh_area.y1 = sw / 2 + 1;
 800c608:	3201      	adds	r2, #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c60a:	b29b      	uxth	r3, r3
    sh_area.y1 = sw / 2 + 1;
 800c60c:	b292      	uxth	r2, r2
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c60e:	1a76      	subs	r6, r6, r1
    int32_t size = sw_ori  + r;
 800c610:	193d      	adds	r5, r7, r4
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800c612:	4492      	add	sl, r2
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c614:	9006      	str	r0, [sp, #24]
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c616:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    sh_area.y1 = sw / 2 + 1;
 800c61a:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c61e:	441e      	add	r6, r3
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c620:	463a      	mov	r2, r7
 800c622:	2300      	movs	r3, #0
 800c624:	a91a      	add	r1, sp, #104	; 0x68
 800c626:	a820      	add	r0, sp, #128	; 0x80
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800c628:	f8ad a06e 	strh.w	sl, [sp, #110]	; 0x6e
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c62c:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c630:	f7fb fcf0 	bl	8008014 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800c634:	2c01      	cmp	r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c636:	4628      	mov	r0, r5
    else sw = sw_ori >> 1;
 800c638:	bf18      	it	ne
 800c63a:	1064      	asrne	r4, r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c63c:	f003 fd6a 	bl	8010114 <lv_mem_buf_get>
    for(y = 0; y < size; y++) {
 800c640:	2300      	movs	r3, #0
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c642:	4607      	mov	r7, r0
    for(y = 0; y < size; y++) {
 800c644:	9309      	str	r3, [sp, #36]	; 0x24
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c646:	f8dd 8018 	ldr.w	r8, [sp, #24]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800c64a:	b22b      	sxth	r3, r5
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800c64c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800c650:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
 800c652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c654:	429d      	cmp	r5, r3
 800c656:	dc0c      	bgt.n	800c672 <lv_draw_sw_rect+0x1d4>
    lv_mem_buf_release(mask_line);
 800c658:	4638      	mov	r0, r7
 800c65a:	f003 fbb3 	bl	800fdc4 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 800c65e:	a820      	add	r0, sp, #128	; 0x80
 800c660:	f7fb fb8c 	bl	8007d7c <lv_draw_mask_free_param>
    if(sw == 1) {
 800c664:	2c01      	cmp	r4, #1
 800c666:	fb05 f605 	mul.w	r6, r5, r5
 800c66a:	f040 84b0 	bne.w	800cfce <lv_draw_sw_rect+0xb30>
        for(i = 0; i < size * size; i++) {
 800c66e:	2300      	movs	r3, #0
 800c670:	e039      	b.n	800c6e6 <lv_draw_sw_rect+0x248>
        lv_memset_ff(mask_line, size);
 800c672:	4629      	mov	r1, r5
 800c674:	4638      	mov	r0, r7
 800c676:	f003 fdca 	bl	801020e <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800c67a:	ab20      	add	r3, sp, #128	; 0x80
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	2100      	movs	r1, #0
 800c680:	4638      	mov	r0, r7
 800c682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c684:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800c688:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c68a:	47b0      	blx	r6
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800c68c:	b940      	cbnz	r0, 800c6a0 <lv_draw_sw_rect+0x202>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800c68e:	4651      	mov	r1, sl
 800c690:	4640      	mov	r0, r8
 800c692:	f003 fd8d 	bl	80101b0 <lv_memset_00>
    for(y = 0; y < size; y++) {
 800c696:	9b09      	ldr	r3, [sp, #36]	; 0x24
        sh_ups_tmp_buf += size;
 800c698:	44d0      	add	r8, sl
    for(y = 0; y < size; y++) {
 800c69a:	3301      	adds	r3, #1
 800c69c:	9309      	str	r3, [sp, #36]	; 0x24
 800c69e:	e7d8      	b.n	800c652 <lv_draw_sw_rect+0x1b4>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800c6a0:	783b      	ldrb	r3, [r7, #0]
 800c6a2:	4642      	mov	r2, r8
 800c6a4:	019b      	lsls	r3, r3, #6
 800c6a6:	fb93 f3f4 	sdiv	r3, r3, r4
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f822 3b02 	strh.w	r3, [r2], #2
            for(i = 1; i < size; i++) {
 800c6b0:	eb0a 0008 	add.w	r0, sl, r8
 800c6b4:	4290      	cmp	r0, r2
 800c6b6:	d0ee      	beq.n	800c696 <lv_draw_sw_rect+0x1f8>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800c6b8:	468c      	mov	ip, r1
 800c6ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6be:	f89c c000 	ldrb.w	ip, [ip]
 800c6c2:	3202      	adds	r2, #2
 800c6c4:	459c      	cmp	ip, r3
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800c6c6:	bf1a      	itte	ne
 800c6c8:	019b      	lslne	r3, r3, #6
 800c6ca:	fb93 f3f4 	sdivne	r3, r3, r4
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800c6ce:	f832 3c04 	ldrheq.w	r3, [r2, #-4]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800c6d2:	f822 3c02 	strh.w	r3, [r2, #-2]
            for(i = 1; i < size; i++) {
 800c6d6:	e7ed      	b.n	800c6b4 <lv_draw_sw_rect+0x216>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800c6d8:	9a06      	ldr	r2, [sp, #24]
 800c6da:	9906      	ldr	r1, [sp, #24]
 800c6dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c6e0:	0992      	lsrs	r2, r2, #6
 800c6e2:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	42b3      	cmp	r3, r6
 800c6e8:	d1f6      	bne.n	800c6d8 <lv_draw_sw_rect+0x23a>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 800c6ea:	a810      	add	r0, sp, #64	; 0x40
 800c6ec:	f7fb fb70 	bl	8007dd0 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f000 849f 	beq.w	800d034 <lv_draw_sw_rect+0xb96>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	9a08      	ldr	r2, [sp, #32]
 800c6fa:	a914      	add	r1, sp, #80	; 0x50
 800c6fc:	a81a      	add	r0, sp, #104	; 0x68
 800c6fe:	f7fb fc89 	bl	8008014 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c702:	2100      	movs	r1, #0
 800c704:	a81a      	add	r0, sp, #104	; 0x68
 800c706:	f7fb fad9 	bl	8007cbc <lv_draw_mask_add>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800c70a:	2300      	movs	r3, #0
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c70c:	900e      	str	r0, [sp, #56]	; 0x38
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800c70e:	9307      	str	r3, [sp, #28]
 800c710:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800c714:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c718:	3001      	adds	r0, #1
 800c71a:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 800c71c:	b200      	sxth	r0, r0
 800c71e:	f003 fcf9 	bl	8010114 <lv_mem_buf_get>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800c722:	211c      	movs	r1, #28
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 800c724:	4604      	mov	r4, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800c726:	a820      	add	r0, sp, #128	; 0x80
 800c728:	f003 fd42 	bl	80101b0 <lv_memset_00>
    blend_dsc.color = dsc->shadow_color;
 800c72c:	f8b9 3028 	ldrh.w	r3, [r9, #40]	; 0x28
 800c730:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 800c734:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    blend_dsc.opa = dsc->shadow_opa;
 800c738:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800c73c:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    blend_dsc.opa = dsc->shadow_opa;
 800c740:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800c744:	1c68      	adds	r0, r5, #1
    blend_dsc.blend_mode = dsc->blend_mode;
 800c746:	f899 3002 	ldrb.w	r3, [r9, #2]
 800c74a:	b280      	uxth	r0, r0
 800c74c:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
 800c750:	1b83      	subs	r3, r0, r6
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800c752:	b21a      	sxth	r2, r3
 800c754:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800c758:	4413      	add	r3, r2
 800c75a:	eb06 0363 	add.w	r3, r6, r3, asr #1
 800c75e:	b21b      	sxth	r3, r3
 800c760:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c762:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800c766:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c76a:	3301      	adds	r3, #1
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	b21f      	sxth	r7, r3
 800c770:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800c774:	443b      	add	r3, r7
 800c776:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800c77a:	b29f      	uxth	r7, r3
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c77c:	fa1f fa8b 	uxth.w	sl, fp
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800c780:	b21b      	sxth	r3, r3
 800c782:	9309      	str	r3, [sp, #36]	; 0x24
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c784:	eba0 000a 	sub.w	r0, r0, sl
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c78a:	b200      	sxth	r0, r0
 800c78c:	4298      	cmp	r0, r3
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800c78e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c792:	bfb8      	it	lt
 800c794:	4618      	movlt	r0, r3
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800c796:	4452      	add	r2, sl
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800c798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79a:	b212      	sxth	r2, r2
 800c79c:	429a      	cmp	r2, r3
 800c79e:	bfa8      	it	ge
 800c7a0:	461a      	movge	r2, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c7a2:	9b04      	ldr	r3, [sp, #16]
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800c7a4:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
    blend_dsc.blend_area = &blend_area;
 800c7a8:	a916      	add	r1, sp, #88	; 0x58
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c7aa:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800c7ae:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c7b2:	a818      	add	r0, sp, #96	; 0x60
 800c7b4:	689a      	ldr	r2, [r3, #8]
    blend_dsc.blend_area = &blend_area;
 800c7b6:	9120      	str	r1, [sp, #128]	; 0x80
    blend_dsc.mask_area = &blend_area;
 800c7b8:	9125      	str	r1, [sp, #148]	; 0x94
    blend_dsc.mask = mask_buf;
 800c7ba:	9423      	str	r4, [sp, #140]	; 0x8c
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800c7bc:	970d      	str	r7, [sp, #52]	; 0x34
    blend_area.x2 = shadow_area.x2;
 800c7be:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y1;
 800c7c2:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c7c6:	f002 ff8e 	bl	800f6e6 <_lv_area_intersect>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f040 8441 	bne.w	800d052 <lv_draw_sw_rect+0xbb4>
    blend_area.x2 = shadow_area.x2;
 800c7d0:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c7d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    blend_area.x2 = shadow_area.x2;
 800c7d6:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c7da:	3201      	adds	r2, #1
 800c7dc:	eba2 020a 	sub.w	r2, r2, sl
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c7e0:	b212      	sxth	r2, r2
 800c7e2:	428a      	cmp	r2, r1
 800c7e4:	bfb8      	it	lt
 800c7e6:	460a      	movlt	r2, r1
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800c7e8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800c7ec:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    blend_area.y2 = shadow_area.y2;
 800c7f0:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800c7f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	eba3 030a 	sub.w	r3, r3, sl
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800c7fc:	3201      	adds	r2, #1
 800c7fe:	b21b      	sxth	r3, r3
 800c800:	4293      	cmp	r3, r2
 800c802:	bfb8      	it	lt
 800c804:	4613      	movlt	r3, r2
 800c806:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c80a:	9b04      	ldr	r3, [sp, #16]
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800c80c:	920c      	str	r2, [sp, #48]	; 0x30
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c80e:	a916      	add	r1, sp, #88	; 0x58
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	a818      	add	r0, sp, #96	; 0x60
 800c814:	f002 ff67 	bl	800f6e6 <_lv_area_intersect>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d03e      	beq.n	800c89a <lv_draw_sw_rect+0x3fc>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800c81c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800c820:	a914      	add	r1, sp, #80	; 0x50
 800c822:	a818      	add	r0, sp, #96	; 0x60
 800c824:	920f      	str	r2, [sp, #60]	; 0x3c
 800c826:	f003 f85e 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c82a:	bbb0      	cbnz	r0, 800c89a <lv_draw_sw_rect+0x3fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c82c:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 800c830:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 800c834:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c836:	9907      	ldr	r1, [sp, #28]
 800c838:	1b7f      	subs	r7, r7, r5
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800c83a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 800c83e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800c842:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c848:	b23f      	sxth	r7, r7
 800c84a:	b129      	cbz	r1, 800c858 <lv_draw_sw_rect+0x3ba>
 800c84c:	a914      	add	r1, sp, #80	; 0x50
 800c84e:	a818      	add	r0, sp, #96	; 0x60
 800c850:	930f      	str	r3, [sp, #60]	; 0x3c
 800c852:	f003 f891 	bl	800f978 <_lv_area_is_out>
 800c856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if(w > 0) {
 800c858:	2f00      	cmp	r7, #0
 800c85a:	dd1e      	ble.n	800c89a <lv_draw_sw_rect+0x3fc>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800c85c:	eba8 080b 	sub.w	r8, r8, fp
 800c860:	f108 0801 	add.w	r8, r8, #1
 800c864:	eba5 0508 	sub.w	r5, r5, r8
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800c868:	f04f 0802 	mov.w	r8, #2
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800c86c:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800c86e:	fb0b 5506 	mla	r5, fp, r6, r5
 800c872:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800c874:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800c878:	441d      	add	r5, r3
            blend_area.x1 = clip_area_sub.x1;
 800c87a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask = mask_buf;
 800c87e:	9423      	str	r4, [sp, #140]	; 0x8c
            blend_area.x1 = clip_area_sub.x1;
 800c880:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800c884:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800c888:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x2 = clip_area_sub.x2;
 800c88c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800c890:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800c894:	42b3      	cmp	r3, r6
 800c896:	f340 8440 	ble.w	800d11a <lv_draw_sw_rect+0xc7c>
    blend_area.x1 = shadow_area.x1 + corner_size;
 800c89a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800c89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    blend_area.x1 = shadow_area.x1 + corner_size;
 800c8a0:	4453      	add	r3, sl
 800c8a2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800c8a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c8aa:	a916      	add	r1, sp, #88	; 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800c8ac:	eba3 030a 	sub.w	r3, r3, sl
 800c8b0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y1;
 800c8b4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c8b8:	a818      	add	r0, sp, #96	; 0x60
    blend_area.y1 = shadow_area.y1;
 800c8ba:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	4453      	add	r3, sl
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	bfa8      	it	ge
 800c8c8:	4613      	movge	r3, r2
 800c8ca:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	f002 ff08 	bl	800f6e6 <_lv_area_intersect>
 800c8d6:	b1f8      	cbz	r0, 800c918 <lv_draw_sw_rect+0x47a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800c8d8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800c8dc:	a914      	add	r1, sp, #80	; 0x50
 800c8de:	a818      	add	r0, sp, #96	; 0x60
 800c8e0:	920f      	str	r2, [sp, #60]	; 0x3c
 800c8e2:	f003 f800 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	b9b0      	cbnz	r0, 800c918 <lv_draw_sw_rect+0x47a>
 800c8ea:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800c8ee:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800c8f2:	3501      	adds	r5, #1
 800c8f4:	1aed      	subs	r5, r5, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c8f6:	9b07      	ldr	r3, [sp, #28]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800c8f8:	f9bd 7062 	ldrsh.w	r7, [sp, #98]	; 0x62
 800c8fc:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c902:	b22d      	sxth	r5, r5
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 87de 	beq.w	800d8c6 <lv_draw_sw_rect+0x1428>
 800c90a:	a914      	add	r1, sp, #80	; 0x50
 800c90c:	a818      	add	r0, sp, #96	; 0x60
 800c90e:	f003 f833 	bl	800f978 <_lv_area_is_out>
        if(w > 0) {
 800c912:	2d00      	cmp	r5, #0
 800c914:	f300 8424 	bgt.w	800d160 <lv_draw_sw_rect+0xcc2>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800c918:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800c91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800c91e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    blend_area.x1 = shadow_area.x1 + corner_size;
 800c922:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c926:	a916      	add	r1, sp, #88	; 0x58
    blend_area.x1 = shadow_area.x1 + corner_size;
 800c928:	4453      	add	r3, sl
 800c92a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800c92e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c932:	a818      	add	r0, sp, #96	; 0x60
    blend_area.x2 = shadow_area.x2 - corner_size;
 800c934:	eba3 030a 	sub.w	r3, r3, sl
 800c938:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800c93c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    blend_area.y2 = shadow_area.y2;
 800c940:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800c944:	3301      	adds	r3, #1
 800c946:	eba3 030a 	sub.w	r3, r3, sl
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800c94a:	b21b      	sxth	r3, r3
 800c94c:	4293      	cmp	r3, r2
 800c94e:	bfb8      	it	lt
 800c950:	4613      	movlt	r3, r2
 800c952:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	f002 fec4 	bl	800f6e6 <_lv_area_intersect>
 800c95e:	b3a8      	cbz	r0, 800c9cc <lv_draw_sw_rect+0x52e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800c960:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800c964:	a914      	add	r1, sp, #80	; 0x50
 800c966:	463a      	mov	r2, r7
 800c968:	a818      	add	r0, sp, #96	; 0x60
 800c96a:	f002 ffbc 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800c96e:	4680      	mov	r8, r0
 800c970:	bb60      	cbnz	r0, 800c9cc <lv_draw_sw_rect+0x52e>
 800c972:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800c976:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800c97a:	3501      	adds	r5, #1
 800c97c:	1aed      	subs	r5, r5, r3
 800c97e:	b22d      	sxth	r5, r5
        if(w > 0) {
 800c980:	2d00      	cmp	r5, #0
 800c982:	dd23      	ble.n	800c9cc <lv_draw_sw_rect+0x52e>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c984:	9a07      	ldr	r2, [sp, #28]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800c986:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 800c98a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800c98e:	2a00      	cmp	r2, #0
 800c990:	f000 8796 	beq.w	800d8c0 <lv_draw_sw_rect+0x1422>
 800c994:	463a      	mov	r2, r7
 800c996:	a914      	add	r1, sp, #80	; 0x50
 800c998:	a818      	add	r0, sp, #96	; 0x60
 800c99a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c99c:	f002 ffec 	bl	800f978 <_lv_area_is_out>
                blend_dsc.mask = NULL;
 800c9a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9a2:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800c9a6:	1af6      	subs	r6, r6, r3
 800c9a8:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800c9aa:	f9bd 8066 	ldrsh.w	r8, [sp, #102]	; 0x66
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800c9ae:	fb0b 3606 	mla	r6, fp, r6, r3
            blend_area.x1 = clip_area_sub.x1;
 800c9b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800c9b6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800c9ba:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800c9be:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800c9c2:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800c9c6:	4543      	cmp	r3, r8
 800c9c8:	f340 83d6 	ble.w	800d178 <lv_draw_sw_rect+0xcda>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800c9cc:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
    blend_area.y2 = shadow_area.y2 - corner_size;
 800c9d0:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800c9d4:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c9d8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c9de:	1c5a      	adds	r2, r3, #1
    blend_area.x2 = shadow_area.x2;
 800c9e0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800c9e4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c9e8:	eba2 020a 	sub.w	r2, r2, sl
    blend_area.y1 = shadow_area.y1 + corner_size;
 800c9ec:	4453      	add	r3, sl
 800c9ee:	b21b      	sxth	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 800c9f0:	eba1 010a 	sub.w	r1, r1, sl
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800c9f4:	4298      	cmp	r0, r3
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800c9f6:	b212      	sxth	r2, r2
    blend_area.y2 = shadow_area.y2 - corner_size;
 800c9f8:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800c9fa:	da02      	bge.n	800ca02 <lv_draw_sw_rect+0x564>
 800c9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9fe:	3301      	adds	r3, #1
 800ca00:	b21b      	sxth	r3, r3
 800ca02:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca08:	a818      	add	r0, sp, #96	; 0x60
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800ca0a:	428b      	cmp	r3, r1
 800ca0c:	bfb8      	it	lt
 800ca0e:	460b      	movlt	r3, r1
 800ca10:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800ca14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca16:	a916      	add	r1, sp, #88	; 0x58
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bfb8      	it	lt
 800ca1c:	461a      	movlt	r2, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca1e:	9b04      	ldr	r3, [sp, #16]
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800ca20:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca24:	689a      	ldr	r2, [r3, #8]
 800ca26:	f002 fe5e 	bl	800f6e6 <_lv_area_intersect>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	f040 83cb 	bne.w	800d1c6 <lv_draw_sw_rect+0xd28>
        for(x = 0; x < corner_size / 2; x++) {
 800ca30:	2100      	movs	r1, #0
 800ca32:	9b06      	ldr	r3, [sp, #24]
 800ca34:	eb0b 70db 	add.w	r0, fp, fp, lsr #31
 800ca38:	1040      	asrs	r0, r0, #1
 800ca3a:	3b01      	subs	r3, #1
    for(y = 0; y < corner_size; y++) {
 800ca3c:	b20a      	sxth	r2, r1
 800ca3e:	4593      	cmp	fp, r2
 800ca40:	f300 841f 	bgt.w	800d282 <lv_draw_sw_rect+0xde4>
    blend_area.y1 = shadow_area.y1 + corner_size;
 800ca44:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800ca48:	9809      	ldr	r0, [sp, #36]	; 0x24
    blend_area.y1 = shadow_area.y1 + corner_size;
 800ca4a:	4453      	add	r3, sl
 800ca4c:	b21b      	sxth	r3, r3
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800ca4e:	4298      	cmp	r0, r3
 800ca50:	bfb8      	it	lt
 800ca52:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
    blend_area.y2 = shadow_area.y2 - corner_size;
 800ca54:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800ca58:	bfbc      	itt	lt
 800ca5a:	3301      	addlt	r3, #1
 800ca5c:	b21b      	sxthlt	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 800ca5e:	eba1 010a 	sub.w	r1, r1, sl
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800ca62:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800ca66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    blend_area.y2 = shadow_area.y2 - corner_size;
 800ca68:	b209      	sxth	r1, r1
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800ca6a:	428b      	cmp	r3, r1
 800ca6c:	bfb8      	it	lt
 800ca6e:	460b      	movlt	r3, r1
    blend_area.x1 = shadow_area.x1;
 800ca70:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800ca74:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    blend_area.x1 = shadow_area.x1;
 800ca78:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800ca7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800ca7e:	3a01      	subs	r2, #1
 800ca80:	4452      	add	r2, sl
 800ca82:	b212      	sxth	r2, r2
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800ca84:	3b01      	subs	r3, #1
 800ca86:	429a      	cmp	r2, r3
 800ca88:	bfa8      	it	ge
 800ca8a:	461a      	movge	r2, r3
 800ca8c:	930a      	str	r3, [sp, #40]	; 0x28
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca8e:	9b04      	ldr	r3, [sp, #16]
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800ca90:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ca94:	a916      	add	r1, sp, #88	; 0x58
 800ca96:	689a      	ldr	r2, [r3, #8]
 800ca98:	a818      	add	r0, sp, #96	; 0x60
 800ca9a:	f002 fe24 	bl	800f6e6 <_lv_area_intersect>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f040 8400 	bne.w	800d2a4 <lv_draw_sw_rect+0xe06>
    blend_area.x1 = shadow_area.x1;
 800caa4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800caa8:	990a      	ldr	r1, [sp, #40]	; 0x28
    blend_area.x1 = shadow_area.x1;
 800caaa:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800caae:	3a01      	subs	r2, #1
 800cab0:	4452      	add	r2, sl
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800cab2:	b212      	sxth	r2, r2
 800cab4:	428a      	cmp	r2, r1
 800cab6:	bfa8      	it	ge
 800cab8:	460a      	movge	r2, r1
    blend_area.y1 = shadow_area.y1;
 800caba:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800cabe:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y1;
 800cac2:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800cac6:	3b01      	subs	r3, #1
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800cac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800caca:	4453      	add	r3, sl
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800cacc:	b21b      	sxth	r3, r3
 800cace:	4293      	cmp	r3, r2
 800cad0:	bfa8      	it	ge
 800cad2:	4613      	movge	r3, r2
 800cad4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cad8:	9b04      	ldr	r3, [sp, #16]
 800cada:	a916      	add	r1, sp, #88	; 0x58
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	a818      	add	r0, sp, #96	; 0x60
 800cae0:	f002 fe01 	bl	800f6e6 <_lv_area_intersect>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d03b      	beq.n	800cb60 <lv_draw_sw_rect+0x6c2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800cae8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800caec:	a914      	add	r1, sp, #80	; 0x50
 800caee:	a818      	add	r0, sp, #96	; 0x60
 800caf0:	9209      	str	r2, [sp, #36]	; 0x24
 800caf2:	f002 fef8 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800caf6:	bb98      	cbnz	r0, 800cb60 <lv_draw_sw_rect+0x6c2>
 800caf8:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 800cafc:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 800cb00:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800cb02:	9907      	ldr	r1, [sp, #28]
 800cb04:	eba7 0708 	sub.w	r7, r7, r8
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800cb08:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
 800cb0c:	f9bd 505a 	ldrsh.w	r5, [sp, #90]	; 0x5a
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cb10:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800cb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb16:	b23f      	sxth	r7, r7
 800cb18:	b129      	cbz	r1, 800cb26 <lv_draw_sw_rect+0x688>
 800cb1a:	a914      	add	r1, sp, #80	; 0x50
 800cb1c:	a818      	add	r0, sp, #96	; 0x60
 800cb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb20:	f002 ff2a 	bl	800f978 <_lv_area_is_out>
 800cb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(w > 0) {
 800cb26:	2f00      	cmp	r7, #0
        blend_dsc.mask = mask_buf;
 800cb28:	9423      	str	r4, [sp, #140]	; 0x8c
        if(w > 0) {
 800cb2a:	dd19      	ble.n	800cb60 <lv_draw_sw_rect+0x6c2>
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cb2c:	eba8 0803 	sub.w	r8, r8, r3
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800cb30:	1b75      	subs	r5, r6, r5
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cb32:	fb0b 8505 	mla	r5, fp, r5, r8
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800cb36:	f04f 0802 	mov.w	r8, #2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cb3a:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800cb3c:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cb40:	441d      	add	r5, r3
            blend_area.x1 = clip_area_sub.x1;
 800cb42:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800cb46:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x1 = clip_area_sub.x1;
 800cb4a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800cb4e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800cb52:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800cb56:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800cb5a:	42b3      	cmp	r3, r6
 800cb5c:	f280 83fd 	bge.w	800d35a <lv_draw_sw_rect+0xebc>
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800cb60:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800cb64:	990c      	ldr	r1, [sp, #48]	; 0x30
    blend_area.y2 = shadow_area.y2;
 800cb66:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	eba2 020a 	sub.w	r2, r2, sl
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800cb70:	b212      	sxth	r2, r2
 800cb72:	428a      	cmp	r2, r1
 800cb74:	bfb8      	it	lt
 800cb76:	460a      	movlt	r2, r1
    blend_area.x1 = shadow_area.x1 ;
 800cb78:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800cb7c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    blend_area.x1 = shadow_area.x1 ;
 800cb80:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800cb84:	3b01      	subs	r3, #1
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800cb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800cb88:	4453      	add	r3, sl
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800cb8a:	b21b      	sxth	r3, r3
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	bfa8      	it	ge
 800cb90:	4613      	movge	r3, r2
 800cb92:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cb96:	9b04      	ldr	r3, [sp, #16]
 800cb98:	a916      	add	r1, sp, #88	; 0x58
 800cb9a:	689a      	ldr	r2, [r3, #8]
 800cb9c:	a818      	add	r0, sp, #96	; 0x60
 800cb9e:	f002 fda2 	bl	800f6e6 <_lv_area_intersect>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d03b      	beq.n	800cc1e <lv_draw_sw_rect+0x780>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800cba6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800cbaa:	a914      	add	r1, sp, #80	; 0x50
 800cbac:	a818      	add	r0, sp, #96	; 0x60
 800cbae:	9209      	str	r2, [sp, #36]	; 0x24
 800cbb0:	f002 fe99 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cbb4:	bb98      	cbnz	r0, 800cc1e <lv_draw_sw_rect+0x780>
 800cbb6:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 800cbba:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 800cbbe:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800cbc0:	9907      	ldr	r1, [sp, #28]
 800cbc2:	eba7 0708 	sub.w	r7, r7, r8
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800cbc6:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 800cbca:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cbce:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800cbd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbd4:	b23f      	sxth	r7, r7
 800cbd6:	b129      	cbz	r1, 800cbe4 <lv_draw_sw_rect+0x746>
 800cbd8:	a914      	add	r1, sp, #80	; 0x50
 800cbda:	a818      	add	r0, sp, #96	; 0x60
 800cbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbde:	f002 fecb 	bl	800f978 <_lv_area_is_out>
 800cbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(w > 0) {
 800cbe4:	2f00      	cmp	r7, #0
        blend_dsc.mask = mask_buf;
 800cbe6:	9423      	str	r4, [sp, #140]	; 0x8c
        if(w > 0) {
 800cbe8:	dd19      	ble.n	800cc1e <lv_draw_sw_rect+0x780>
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cbea:	eba8 0803 	sub.w	r8, r8, r3
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800cbee:	1b75      	subs	r5, r6, r5
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cbf0:	fb0b 8505 	mla	r5, fp, r5, r8
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800cbf4:	f04f 0802 	mov.w	r8, #2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cbf8:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800cbfa:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800cbfe:	441d      	add	r5, r3
            blend_area.x1 = clip_area_sub.x1;
 800cc00:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800cc04:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x1 = clip_area_sub.x1;
 800cc08:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800cc0c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800cc10:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800cc14:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800cc18:	42b3      	cmp	r3, r6
 800cc1a:	f340 83c1 	ble.w	800d3a0 <lv_draw_sw_rect+0xf02>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800cc1e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cc22:	a916      	add	r1, sp, #88	; 0x58
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800cc24:	4453      	add	r3, sl
 800cc26:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800cc2a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cc2e:	a818      	add	r0, sp, #96	; 0x60
    blend_area.x2 = shadow_area.x2 - corner_size;
 800cc30:	eba3 030a 	sub.w	r3, r3, sl
 800cc34:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800cc38:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    blend_dsc.mask = mask_buf;
 800cc3c:	9423      	str	r4, [sp, #140]	; 0x8c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800cc3e:	4453      	add	r3, sl
 800cc40:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    blend_area.y2 = shadow_area.y2 - corner_size;
 800cc44:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800cc48:	eba3 0a0a 	sub.w	sl, r3, sl
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cc4c:	9b04      	ldr	r3, [sp, #16]
    blend_area.y2 = shadow_area.y2 - corner_size;
 800cc4e:	f8ad a05e 	strh.w	sl, [sp, #94]	; 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cc52:	689a      	ldr	r2, [r3, #8]
 800cc54:	f002 fd47 	bl	800f6e6 <_lv_area_intersect>
 800cc58:	b1c8      	cbz	r0, 800cc8e <lv_draw_sw_rect+0x7f0>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800cc5a:	9a08      	ldr	r2, [sp, #32]
 800cc5c:	a914      	add	r1, sp, #80	; 0x50
 800cc5e:	a818      	add	r0, sp, #96	; 0x60
 800cc60:	f002 fe41 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800cc64:	b998      	cbnz	r0, 800cc8e <lv_draw_sw_rect+0x7f0>
 800cc66:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800cc6a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800cc6e:	1c53      	adds	r3, r2, #1
 800cc70:	1a5b      	subs	r3, r3, r1
 800cc72:	b21e      	sxth	r6, r3
        if(w > 0) {
 800cc74:	2e00      	cmp	r6, #0
 800cc76:	dd0a      	ble.n	800cc8e <lv_draw_sw_rect+0x7f0>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800cc78:	f9bd 5062 	ldrsh.w	r5, [sp, #98]	; 0x62
            blend_area.x1 = clip_area_sub.x1;
 800cc7c:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800cc80:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800cc84:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	f280 83ab 	bge.w	800d3e4 <lv_draw_sw_rect+0xf46>
    if(!simple) {
 800cc8e:	9b07      	ldr	r3, [sp, #28]
 800cc90:	b92b      	cbnz	r3, 800cc9e <lv_draw_sw_rect+0x800>
        lv_draw_mask_free_param(&mask_rout_param);
 800cc92:	a81a      	add	r0, sp, #104	; 0x68
 800cc94:	f7fb f872 	bl	8007d7c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 800cc98:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cc9a:	f7fb f847 	bl	8007d2c <lv_draw_mask_remove_id>
    lv_mem_buf_release(sh_buf);
 800cc9e:	9806      	ldr	r0, [sp, #24]
 800cca0:	f003 f890 	bl	800fdc4 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 800cca4:	4620      	mov	r0, r4
 800cca6:	f003 f88d 	bl	800fdc4 <lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800ccaa:	f899 300a 	ldrb.w	r3, [r9, #10]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d968      	bls.n	800cd84 <lv_draw_sw_rect+0x8e6>
    dest->x1 = src->x1;
 800ccb2:	9b05      	ldr	r3, [sp, #20]
 800ccb4:	f9b3 0000 	ldrsh.w	r0, [r3]
    dest->y1 = src->y1;
 800ccb8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
    dest->x2 = src->x2;
 800ccbc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 800ccc0:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800ccc4:	f9b9 301c 	ldrsh.w	r3, [r9, #28]
    dest->x1 = src->x1;
 800ccc8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800cccc:	2b01      	cmp	r3, #1
    dest->y1 = src->y1;
 800ccce:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    dest->x2 = src->x2;
 800ccd2:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    dest->y2 = src->y2;
 800ccd6:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 800ccda:	dd1c      	ble.n	800cd16 <lv_draw_sw_rect+0x878>
 800ccdc:	f899 301e 	ldrb.w	r3, [r9, #30]
 800cce0:	2bfc      	cmp	r3, #252	; 0xfc
 800cce2:	d918      	bls.n	800cd16 <lv_draw_sw_rect+0x878>
 800cce4:	f9b9 3000 	ldrsh.w	r3, [r9]
 800cce8:	b1ab      	cbz	r3, 800cd16 <lv_draw_sw_rect+0x878>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800ccea:	f899 301f 	ldrb.w	r3, [r9, #31]
 800ccee:	f3c3 05c0 	ubfx	r5, r3, #3, #1
 800ccf2:	4428      	add	r0, r5
 800ccf4:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800ccf8:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800ccfc:	4401      	add	r1, r0
 800ccfe:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800cd02:	f3c3 1100 	ubfx	r1, r3, #4, #1
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800cd06:	f3c3 0340 	ubfx	r3, r3, #1, #1
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800cd0a:	1a52      	subs	r2, r2, r1
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800cd0c:	1ae3      	subs	r3, r4, r3
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800cd0e:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800cd12:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 800cd16:	9b04      	ldr	r3, [sp, #16]
 800cd18:	ac12      	add	r4, sp, #72	; 0x48
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	a814      	add	r0, sp, #80	; 0x50
 800cd20:	f002 fce1 	bl	800f6e6 <_lv_area_intersect>
 800cd24:	b370      	cbz	r0, 800cd84 <lv_draw_sw_rect+0x8e6>
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800cd26:	f899 600b 	ldrb.w	r6, [r9, #11]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800cd2a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800cd2e:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800cd32:	4620      	mov	r0, r4
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800cd34:	f006 0607 	and.w	r6, r6, #7
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	bf08      	it	eq
 800cd3c:	2600      	moveq	r6, #0
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800cd3e:	f7fb f847 	bl	8007dd0 <lv_draw_mask_is_any>
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800cd42:	f9b9 2000 	ldrsh.w	r2, [r9]
 800cd46:	9008      	str	r0, [sp, #32]
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f040 8363 	bne.w	800d414 <lv_draw_sw_rect+0xf76>
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	f040 8360 	bne.w	800d414 <lv_draw_sw_rect+0xf76>
 800cd54:	2e00      	cmp	r6, #0
 800cd56:	f040 835d 	bne.w	800d414 <lv_draw_sw_rect+0xf76>
        lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800cd5a:	211c      	movs	r1, #28
 800cd5c:	a820      	add	r0, sp, #128	; 0x80
 800cd5e:	f003 fa27 	bl	80101b0 <lv_memset_00>
        blend_dsc.blend_mode = dsc->blend_mode;
 800cd62:	f899 3002 	ldrb.w	r3, [r9, #2]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cd66:	9804      	ldr	r0, [sp, #16]
        blend_dsc.blend_mode = dsc->blend_mode;
 800cd68:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
        blend_dsc.color = dsc->bg_color;
 800cd6c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cd70:	a920      	add	r1, sp, #128	; 0x80
        blend_dsc.color = dsc->bg_color;
 800cd72:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        blend_dsc.opa = dsc->bg_opa;
 800cd76:	f899 300a 	ldrb.w	r3, [r9, #10]
        blend_dsc.blend_area = &bg_coords;
 800cd7a:	9420      	str	r4, [sp, #128]	; 0x80
        blend_dsc.opa = dsc->bg_opa;
 800cd7c:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cd80:	f7fd f9e2 	bl	800a148 <lv_draw_sw_blend>
    if(dsc->bg_img_src == NULL) return;
 800cd84:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d05a      	beq.n	800ce42 <lv_draw_sw_rect+0x9a4>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800cd8c:	f899 3016 	ldrb.w	r3, [r9, #22]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d956      	bls.n	800ce42 <lv_draw_sw_rect+0x9a4>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800cd94:	f7f9 ff5c 	bl	8006c50 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800cd98:	2802      	cmp	r0, #2
 800cd9a:	f040 84df 	bne.w	800d75c <lv_draw_sw_rect+0x12be>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800cd9e:	e9d9 1203 	ldrd	r1, r2, [r9, #12]
 800cda2:	2400      	movs	r4, #0
 800cda4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800cda8:	a818      	add	r0, sp, #96	; 0x60
 800cdaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdae:	9400      	str	r4, [sp, #0]
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	f004 fe0a 	bl	80119ca <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800cdb6:	9b05      	ldr	r3, [sp, #20]
 800cdb8:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cdbc:	8899      	ldrh	r1, [r3, #4]
 800cdbe:	881a      	ldrh	r2, [r3, #0]
 800cdc0:	3101      	adds	r1, #1
 800cdc2:	1a89      	subs	r1, r1, r2
 800cdc4:	b20b      	sxth	r3, r1
 800cdc6:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 800cdca:	4419      	add	r1, r3
 800cdcc:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800cdd0:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800cdd4:	eb03 0361 	add.w	r3, r3, r1, asr #1
        a.x2 = a.x1 + size.x - 1;
 800cdd8:	1e42      	subs	r2, r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        a.x2 = a.x1 + size.x - 1;
 800cde0:	4413      	add	r3, r2
 800cde2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800cde6:	9b05      	ldr	r3, [sp, #20]
 800cde8:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
 800cdec:	8859      	ldrh	r1, [r3, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cdee:	88db      	ldrh	r3, [r3, #6]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	b21a      	sxth	r2, r3
 800cdf6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800cdfa:	4413      	add	r3, r2
 800cdfc:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 800ce00:	eba1 0262 	sub.w	r2, r1, r2, asr #1
 800ce04:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800ce08:	b292      	uxth	r2, r2
        a.y2 = a.y1 + size.y - 1;
 800ce0a:	1e43      	subs	r3, r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800ce0c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        lv_draw_label_dsc_init(&label_draw_dsc);
 800ce10:	a820      	add	r0, sp, #128	; 0x80
        a.y2 = a.y1 + size.y - 1;
 800ce12:	441a      	add	r2, r3
 800ce14:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        lv_draw_label_dsc_init(&label_draw_dsc);
 800ce18:	f7fa f84a 	bl	8006eb0 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800ce1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800ce20:	9804      	ldr	r0, [sp, #16]
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800ce22:	9320      	str	r3, [sp, #128]	; 0x80
        label_draw_dsc.color = dsc->bg_img_recolor;
 800ce24:	f8b9 3014 	ldrh.w	r3, [r9, #20]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800ce28:	9400      	str	r4, [sp, #0]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800ce2a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
        label_draw_dsc.opa = dsc->bg_img_opa;
 800ce2e:	f899 3016 	ldrb.w	r3, [r9, #22]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800ce32:	aa1a      	add	r2, sp, #104	; 0x68
        label_draw_dsc.opa = dsc->bg_img_opa;
 800ce34:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800ce38:	a920      	add	r1, sp, #128	; 0x80
 800ce3a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ce3e:	f7fa f855 	bl	8006eec <lv_draw_label>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800ce42:	f899 501e 	ldrb.w	r5, [r9, #30]
 800ce46:	2d02      	cmp	r5, #2
 800ce48:	d965      	bls.n	800cf16 <lv_draw_sw_rect+0xa78>
    if(dsc->border_width == 0) return;
 800ce4a:	f9b9 201c 	ldrsh.w	r2, [r9, #28]
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	d061      	beq.n	800cf16 <lv_draw_sw_rect+0xa78>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800ce52:	f899 001f 	ldrb.w	r0, [r9, #31]
 800ce56:	f010 0f3e 	tst.w	r0, #62	; 0x3e
 800ce5a:	d05c      	beq.n	800cf16 <lv_draw_sw_rect+0xa78>
    if(dsc->border_post) return;
 800ce5c:	07c4      	lsls	r4, r0, #31
 800ce5e:	d45a      	bmi.n	800cf16 <lv_draw_sw_rect+0xa78>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ce60:	9b05      	ldr	r3, [sp, #20]
    int32_t rout = dsc->radius;
 800ce62:	f9b9 1000 	ldrsh.w	r1, [r9]
 800ce66:	889c      	ldrh	r4, [r3, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ce68:	88de      	ldrh	r6, [r3, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ce6a:	f8b3 e000 	ldrh.w	lr, [r3]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ce6e:	885f      	ldrh	r7, [r3, #2]
 800ce70:	f106 0c01 	add.w	ip, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ce74:	1c63      	adds	r3, r4, #1
 800ce76:	eba3 030e 	sub.w	r3, r3, lr
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ce7a:	ebac 0c07 	sub.w	ip, ip, r7
    int32_t coords_w = lv_area_get_width(coords);
 800ce7e:	b21b      	sxth	r3, r3
    int32_t coords_h = lv_area_get_height(coords);
 800ce80:	fa0f fc8c 	sxth.w	ip, ip
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800ce84:	4563      	cmp	r3, ip
 800ce86:	bfa8      	it	ge
 800ce88:	4663      	movge	r3, ip
    if(rout > short_side >> 1) rout = short_side >> 1;
 800ce8a:	105b      	asrs	r3, r3, #1
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	bfa8      	it	ge
 800ce90:	460b      	movge	r3, r1
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800ce92:	f3c0 0c44 	ubfx	ip, r0, #1, #5
 800ce96:	b292      	uxth	r2, r2
 800ce98:	0700      	lsls	r0, r0, #28
 800ce9a:	bf48      	it	mi
 800ce9c:	4610      	movmi	r0, r2
 800ce9e:	b299      	uxth	r1, r3
 800cea0:	bf5e      	ittt	pl
 800cea2:	1850      	addpl	r0, r2, r1
 800cea4:	4240      	negpl	r0, r0
 800cea6:	b280      	uxthpl	r0, r0
 800cea8:	4470      	add	r0, lr
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800ceaa:	f01c 0f08 	tst.w	ip, #8
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800ceae:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800ceb2:	bf11      	iteee	ne
 800ceb4:	4610      	movne	r0, r2
 800ceb6:	1850      	addeq	r0, r2, r1
 800ceb8:	4240      	negeq	r0, r0
 800ceba:	b280      	uxtheq	r0, r0
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800cebc:	f01c 0f02 	tst.w	ip, #2
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800cec0:	eba4 0000 	sub.w	r0, r4, r0
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800cec4:	bf05      	ittet	eq
 800cec6:	1854      	addeq	r4, r2, r1
 800cec8:	4264      	negeq	r4, r4
 800ceca:	4614      	movne	r4, r2
 800cecc:	b2a4      	uxtheq	r4, r4
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800cece:	f01c 0f01 	tst.w	ip, #1
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800ced2:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800ced6:	bf14      	ite	ne
 800ced8:	4610      	movne	r0, r2
 800ceda:	1850      	addeq	r0, r2, r1
    lv_coord_t rin = rout - dsc->border_width;
 800cedc:	eba1 0202 	sub.w	r2, r1, r2
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cee0:	f899 1002 	ldrb.w	r1, [r9, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800cee4:	bf08      	it	eq
 800cee6:	4240      	negeq	r0, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cee8:	e9cd 5102 	strd	r5, r1, [sp, #8]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800ceec:	bf08      	it	eq
 800ceee:	b280      	uxtheq	r0, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cef0:	f8b9 101a 	ldrh.w	r1, [r9, #26]
    lv_coord_t rin = rout - dsc->border_width;
 800cef4:	b212      	sxth	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800cef6:	1a30      	subs	r0, r6, r0
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cef8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800cefc:	443c      	add	r4, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800cefe:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cf02:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cf06:	9200      	str	r2, [sp, #0]
 800cf08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf0c:	aa20      	add	r2, sp, #128	; 0x80
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800cf0e:	f8ad 4082 	strh.w	r4, [sp, #130]	; 0x82
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800cf12:	f7ff f804 	bl	800bf1e <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800cf16:	f899 4026 	ldrb.w	r4, [r9, #38]	; 0x26
 800cf1a:	2c02      	cmp	r4, #2
 800cf1c:	d954      	bls.n	800cfc8 <lv_draw_sw_rect+0xb2a>
    if(dsc->outline_width == 0) return;
 800cf1e:	f9b9 3022 	ldrsh.w	r3, [r9, #34]	; 0x22
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d050      	beq.n	800cfc8 <lv_draw_sw_rect+0xb2a>
    dest->y2 = src->y2;
 800cf26:	9905      	ldr	r1, [sp, #20]
    area_inner.x1 -= pad;
 800cf28:	9d05      	ldr	r5, [sp, #20]
 800cf2a:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 800cf2e:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    dest->x2 = src->x2;
 800cf32:	9a05      	ldr	r2, [sp, #20]
    area_inner.x1 -= pad;
 800cf34:	882e      	ldrh	r6, [r5, #0]
    lv_coord_t pad = dsc->outline_pad - 1;
 800cf36:	3901      	subs	r1, #1
 800cf38:	b289      	uxth	r1, r1
    area_inner.y1 -= pad;
 800cf3a:	886f      	ldrh	r7, [r5, #2]
 800cf3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    area_inner.x1 -= pad;
 800cf40:	eba6 0c01 	sub.w	ip, r6, r1
    area_outer.x1 -= dsc->outline_width;
 800cf44:	b29b      	uxth	r3, r3
    area_inner.y1 -= pad;
 800cf46:	1a7d      	subs	r5, r7, r1
    area_inner.x1 -= pad;
 800cf48:	fa1f fc8c 	uxth.w	ip, ip
    area_inner.x2 += pad;
 800cf4c:	440a      	add	r2, r1
    area_inner.y2 += pad;
 800cf4e:	4408      	add	r0, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cf50:	f1c6 0601 	rsb	r6, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cf54:	f1c7 0701 	rsb	r7, r7, #1
 800cf58:	b280      	uxth	r0, r0
    area_inner.x2 += pad;
 800cf5a:	b292      	uxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cf5c:	440e      	add	r6, r1
    area_inner.x1 -= pad;
 800cf5e:	f8ad c068 	strh.w	ip, [sp, #104]	; 0x68
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cf62:	4439      	add	r1, r7
    area_outer.x1 -= dsc->outline_width;
 800cf64:	ebac 0c03 	sub.w	ip, ip, r3
 800cf68:	4401      	add	r1, r0
    area_inner.x2 += pad;
 800cf6a:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_outer.x1 -= dsc->outline_width;
 800cf6e:	f8ad c080 	strh.w	ip, [sp, #128]	; 0x80
    area_outer.x2 += dsc->outline_width;
 800cf72:	eb02 0c03 	add.w	ip, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cf76:	4432      	add	r2, r6
    int32_t inner_w = lv_area_get_width(&area_inner);
 800cf78:	b212      	sxth	r2, r2
    int32_t inner_h = lv_area_get_height(&area_inner);
 800cf7a:	b209      	sxth	r1, r1
    int32_t short_side = LV_MIN(inner_w, inner_h);
 800cf7c:	428a      	cmp	r2, r1
 800cf7e:	bfa8      	it	ge
 800cf80:	460a      	movge	r2, r1
    area_inner.y1 -= pad;
 800cf82:	b2ad      	uxth	r5, r5
 800cf84:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
    area_outer.y1 -= dsc->outline_width;
 800cf88:	1aed      	subs	r5, r5, r3
 800cf8a:	f8ad 5082 	strh.w	r5, [sp, #130]	; 0x82
    area_outer.y2 += dsc->outline_width;
 800cf8e:	18c5      	adds	r5, r0, r3
 800cf90:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
    int32_t rin = dsc->radius;
 800cf94:	f9b9 5000 	ldrsh.w	r5, [r9]
    if(rin > short_side >> 1) rin = short_side >> 1;
 800cf98:	1052      	asrs	r2, r2, #1
 800cf9a:	42aa      	cmp	r2, r5
 800cf9c:	bfa8      	it	ge
 800cf9e:	462a      	movge	r2, r5
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800cfa0:	f899 1002 	ldrb.w	r1, [r9, #2]
    lv_coord_t rout = rin + dsc->outline_width;
 800cfa4:	4413      	add	r3, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800cfa6:	e9cd 4102 	strd	r4, r1, [sp, #8]
 800cfaa:	f8b9 1020 	ldrh.w	r1, [r9, #32]
    area_inner.y2 += pad;
 800cfae:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800cfb2:	f8ad 1004 	strh.w	r1, [sp, #4]
 800cfb6:	9200      	str	r2, [sp, #0]
 800cfb8:	9804      	ldr	r0, [sp, #16]
 800cfba:	b21b      	sxth	r3, r3
 800cfbc:	aa1a      	add	r2, sp, #104	; 0x68
 800cfbe:	a920      	add	r1, sp, #128	; 0x80
    area_outer.x2 += dsc->outline_width;
 800cfc0:	f8ad c084 	strh.w	ip, [sp, #132]	; 0x84
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800cfc4:	f7fe ffab 	bl	800bf1e <draw_border_generic>
}
 800cfc8:	b029      	add	sp, #164	; 0xa4
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shadow_blur_corner(size, sw, sh_buf);
 800cfce:	b22d      	sxth	r5, r5
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	9a06      	ldr	r2, [sp, #24]
 800cfd6:	f7fe fee6 	bl	800bda6 <shadow_blur_corner>
    sw += sw_ori & 1;
 800cfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfdc:	4423      	add	r3, r4
    if(sw > 1) {
 800cfde:	2b01      	cmp	r3, #1
    sw += sw_ori & 1;
 800cfe0:	4619      	mov	r1, r3
    if(sw > 1) {
 800cfe2:	dd0a      	ble.n	800cffa <lv_draw_sw_rect+0xb5c>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800cfe4:	f44f 507f 	mov.w	r0, #16320	; 0x3fc0
        for(i = 0; i < (uint32_t)size * size; i++) {
 800cfe8:	2200      	movs	r2, #0
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800cfea:	fbb0 f0f3 	udiv	r0, r0, r3
        for(i = 0; i < (uint32_t)size * size; i++) {
 800cfee:	42b2      	cmp	r2, r6
 800cff0:	d10e      	bne.n	800d010 <lv_draw_sw_rect+0xb72>
        shadow_blur_corner(size, sw, sh_buf);
 800cff2:	4628      	mov	r0, r5
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	f7fe fed6 	bl	800bda6 <shadow_blur_corner>
        for(i = 0; i < (uint32_t)size * size; i++) {
 800cffa:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
 800cffc:	42b3      	cmp	r3, r6
 800cffe:	f43f ab74 	beq.w	800c6ea <lv_draw_sw_rect+0x24c>
        res_buf[x] = sh_buf[x];
 800d002:	9a06      	ldr	r2, [sp, #24]
 800d004:	9906      	ldr	r1, [sp, #24]
 800d006:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d00a:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800d00c:	3301      	adds	r3, #1
 800d00e:	e7f5      	b.n	800cffc <lv_draw_sw_rect+0xb5e>
            if(sh_buf[i] == 0) continue;
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d016:	b15b      	cbz	r3, 800d030 <lv_draw_sw_rect+0xb92>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800d018:	2bff      	cmp	r3, #255	; 0xff
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d01a:	bf1b      	ittet	ne
 800d01c:	019b      	lslne	r3, r3, #6
 800d01e:	fbb3 f3f1 	udivne	r3, r3, r1
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800d022:	9b06      	ldreq	r3, [sp, #24]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d024:	9c06      	ldrne	r4, [sp, #24]
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800d026:	bf0c      	ite	eq
 800d028:	f823 0012 	strheq.w	r0, [r3, r2, lsl #1]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d02c:	f824 3012 	strhne.w	r3, [r4, r2, lsl #1]
        for(i = 0; i < (uint32_t)size * size; i++) {
 800d030:	3201      	adds	r2, #1
 800d032:	e7dc      	b.n	800cfee <lv_draw_sw_rect+0xb50>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800d034:	f899 300a 	ldrb.w	r3, [r9, #10]
 800d038:	2bff      	cmp	r3, #255	; 0xff
 800d03a:	f47f ab5c 	bne.w	800c6f6 <lv_draw_sw_rect+0x258>
 800d03e:	f899 3002 	ldrb.w	r3, [r9, #2]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f47f ab57 	bne.w	800c6f6 <lv_draw_sw_rect+0x258>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800d048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d04c:	930e      	str	r3, [sp, #56]	; 0x38
 800d04e:	f7ff bb5f 	b.w	800c710 <lv_draw_sw_rect+0x272>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800d052:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d056:	a914      	add	r1, sp, #80	; 0x50
 800d058:	a818      	add	r0, sp, #96	; 0x60
 800d05a:	920c      	str	r2, [sp, #48]	; 0x30
 800d05c:	f002 fc43 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800d060:	2800      	cmp	r0, #0
 800d062:	f47f abb5 	bne.w	800c7d0 <lv_draw_sw_rect+0x332>
 800d066:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 800d06a:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 800d06e:	3701      	adds	r7, #1
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d070:	9907      	ldr	r1, [sp, #28]
 800d072:	1b7f      	subs	r7, r7, r5
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800d074:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
 800d078:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d07c:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d082:	b23f      	sxth	r7, r7
 800d084:	b129      	cbz	r1, 800d092 <lv_draw_sw_rect+0xbf4>
 800d086:	a914      	add	r1, sp, #80	; 0x50
 800d088:	a818      	add	r0, sp, #96	; 0x60
 800d08a:	930c      	str	r3, [sp, #48]	; 0x30
 800d08c:	f002 fc74 	bl	800f978 <_lv_area_is_out>
 800d090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if(w > 0) {
 800d092:	2f00      	cmp	r7, #0
 800d094:	f77f ab9c 	ble.w	800c7d0 <lv_draw_sw_rect+0x332>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d098:	eba8 080b 	sub.w	r8, r8, fp
 800d09c:	f108 0801 	add.w	r8, r8, #1
 800d0a0:	eba5 0508 	sub.w	r5, r5, r8
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d0a4:	f04f 0802 	mov.w	r8, #2
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800d0a8:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d0aa:	fb0b 5506 	mla	r5, fp, r6, r5
 800d0ae:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d0b0:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d0b4:	441d      	add	r5, r3
            blend_area.x1 = clip_area_sub.x1;
 800d0b6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            blend_dsc.mask = mask_buf;
 800d0ba:	9423      	str	r4, [sp, #140]	; 0x8c
            blend_area.x1 = clip_area_sub.x1;
 800d0bc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800d0c0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d0c4:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x2 = clip_area_sub.x2;
 800d0c8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d0cc:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d0d0:	42b3      	cmp	r3, r6
 800d0d2:	f6ff ab7d 	blt.w	800c7d0 <lv_draw_sw_rect+0x332>
                if(!simple_sub) {
 800d0d6:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d0d8:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d0dc:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d0e0:	b9cb      	cbnz	r3, 800d116 <lv_draw_sw_rect+0xc78>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800d0e2:	465a      	mov	r2, fp
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f002 fe9a 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d0ec:	463b      	mov	r3, r7
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d0f6:	f7fa fdf7 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d0fa:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d0fc:	bf14      	ite	ne
 800d0fe:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d102:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d106:	9804      	ldr	r0, [sp, #16]
 800d108:	a920      	add	r1, sp, #128	; 0x80
 800d10a:	3601      	adds	r6, #1
 800d10c:	f7fd f81c 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d110:	445d      	add	r5, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d112:	b236      	sxth	r6, r6
 800d114:	e7da      	b.n	800d0cc <lv_draw_sw_rect+0xc2e>
                    blend_dsc.mask = sh_buf_tmp;
 800d116:	9523      	str	r5, [sp, #140]	; 0x8c
 800d118:	e7f5      	b.n	800d106 <lv_draw_sw_rect+0xc68>
                if(!simple_sub) {
 800d11a:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d11c:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d120:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d124:	b9d3      	cbnz	r3, 800d15c <lv_draw_sw_rect+0xcbe>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800d126:	465a      	mov	r2, fp
 800d128:	4629      	mov	r1, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	f002 fe78 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d130:	463b      	mov	r3, r7
 800d132:	4632      	mov	r2, r6
 800d134:	4620      	mov	r0, r4
 800d136:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d13a:	f7fa fdd5 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d13e:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d140:	bf14      	ite	ne
 800d142:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d146:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d14a:	9804      	ldr	r0, [sp, #16]
 800d14c:	a920      	add	r1, sp, #128	; 0x80
 800d14e:	3e01      	subs	r6, #1
 800d150:	f7fc fffa 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d154:	445d      	add	r5, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800d156:	b236      	sxth	r6, r6
 800d158:	f7ff bb9a 	b.w	800c890 <lv_draw_sw_rect+0x3f2>
                    blend_dsc.mask = sh_buf_tmp;
 800d15c:	9523      	str	r5, [sp, #140]	; 0x8c
 800d15e:	e7f4      	b.n	800d14a <lv_draw_sw_rect+0xcac>
                blend_dsc.mask = NULL;
 800d160:	9623      	str	r6, [sp, #140]	; 0x8c
 800d162:	e3b4      	b.n	800d8ce <lv_draw_sw_rect+0x1430>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800d164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d166:	2bff      	cmp	r3, #255	; 0xff
 800d168:	bf1e      	ittt	ne
 800d16a:	f899 3032 	ldrbne.w	r3, [r9, #50]	; 0x32
 800d16e:	4359      	mulne	r1, r3
 800d170:	0a09      	lsrne	r1, r1, #8
 800d172:	f88d 1098 	strb.w	r1, [sp, #152]	; 0x98
 800d176:	e3da      	b.n	800d92e <lv_draw_sw_rect+0x1490>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d178:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d17a:	f8ad 805a 	strh.w	r8, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d17e:	f8ad 805e 	strh.w	r8, [sp, #94]	; 0x5e
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 838a 	beq.w	800d89c <lv_draw_sw_rect+0x13fe>
 800d188:	463a      	mov	r2, r7
 800d18a:	a914      	add	r1, sp, #80	; 0x50
 800d18c:	a818      	add	r0, sp, #96	; 0x60
 800d18e:	f002 fbf3 	bl	800f978 <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800d192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d194:	2bff      	cmp	r3, #255	; 0xff
 800d196:	7833      	ldrb	r3, [r6, #0]
 800d198:	d110      	bne.n	800d1bc <lv_draw_sw_rect+0xd1e>
 800d19a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800d19e:	e003      	b.n	800d1a8 <lv_draw_sw_rect+0xd0a>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d1a0:	f04f 0302 	mov.w	r3, #2
 800d1a4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d1a8:	9804      	ldr	r0, [sp, #16]
 800d1aa:	a920      	add	r1, sp, #128	; 0x80
 800d1ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d1b0:	f7fc ffca 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d1b4:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800d1b6:	fa0f f888 	sxth.w	r8, r8
 800d1ba:	e402      	b.n	800c9c2 <lv_draw_sw_rect+0x524>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800d1bc:	f899 2032 	ldrb.w	r2, [r9, #50]	; 0x32
 800d1c0:	4353      	muls	r3, r2
 800d1c2:	0a1b      	lsrs	r3, r3, #8
 800d1c4:	e7e9      	b.n	800d19a <lv_draw_sw_rect+0xcfc>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800d1c6:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800d1ca:	a914      	add	r1, sp, #80	; 0x50
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	a818      	add	r0, sp, #96	; 0x60
 800d1d0:	f002 fb89 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	f47f ac2b 	bne.w	800ca30 <lv_draw_sw_rect+0x592>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d1da:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 800d1de:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800d1e2:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 800d1e6:	eba3 030b 	sub.w	r3, r3, fp
 800d1ea:	3501      	adds	r5, #1
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	1afb      	subs	r3, r7, r3
 800d1f0:	1bed      	subs	r5, r5, r7
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800d1f2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d1f6:	fb0b 3707 	mla	r7, fp, r7, r3
 800d1fa:	9b06      	ldr	r3, [sp, #24]
 800d1fc:	b22d      	sxth	r5, r5
 800d1fe:	441f      	add	r7, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d200:	9b07      	ldr	r3, [sp, #28]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d03b      	beq.n	800d27e <lv_draw_sw_rect+0xde0>
 800d206:	4632      	mov	r2, r6
 800d208:	a914      	add	r1, sp, #80	; 0x50
 800d20a:	a818      	add	r0, sp, #96	; 0x60
 800d20c:	f002 fbb4 	bl	800f978 <_lv_area_is_out>
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d210:	463b      	mov	r3, r7
        if(w > 0) {
 800d212:	2d00      	cmp	r5, #0
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d214:	9323      	str	r3, [sp, #140]	; 0x8c
        if(w > 0) {
 800d216:	f77f ac0b 	ble.w	800ca30 <lv_draw_sw_rect+0x592>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d21a:	f04f 0802 	mov.w	r8, #2
            blend_area.x1 = clip_area_sub.x1;
 800d21e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d222:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
            blend_area.x1 = clip_area_sub.x1;
 800d226:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800d22a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d22e:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x2 = clip_area_sub.x2;
 800d232:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d236:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d23a:	42b3      	cmp	r3, r6
 800d23c:	f6ff abf8 	blt.w	800ca30 <lv_draw_sw_rect+0x592>
                if(!simple_sub) {
 800d240:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d242:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d246:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d24a:	b98b      	cbnz	r3, 800d270 <lv_draw_sw_rect+0xdd2>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d24c:	462a      	mov	r2, r5
 800d24e:	4639      	mov	r1, r7
 800d250:	4620      	mov	r0, r4
 800d252:	f002 fde5 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d256:	462b      	mov	r3, r5
 800d258:	4632      	mov	r2, r6
 800d25a:	4620      	mov	r0, r4
 800d25c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d260:	f7fa fd42 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d264:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d266:	bf14      	ite	ne
 800d268:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d26c:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d270:	9804      	ldr	r0, [sp, #16]
 800d272:	a920      	add	r1, sp, #128	; 0x80
 800d274:	3601      	adds	r6, #1
 800d276:	f7fc ff67 	bl	800a148 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d27a:	b236      	sxth	r6, r6
 800d27c:	e7db      	b.n	800d236 <lv_draw_sw_rect+0xd98>
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d27e:	4623      	mov	r3, r4
 800d280:	e7c7      	b.n	800d212 <lv_draw_sw_rect+0xd74>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 800d282:	eb0b 0503 	add.w	r5, fp, r3
 800d286:	462a      	mov	r2, r5
        for(x = 0; x < corner_size / 2; x++) {
 800d288:	1aae      	subs	r6, r5, r2
 800d28a:	42b0      	cmp	r0, r6
 800d28c:	dc03      	bgt.n	800d296 <lv_draw_sw_rect+0xdf8>
 800d28e:	462b      	mov	r3, r5
 800d290:	3101      	adds	r1, #1
 800d292:	f7ff bbd3 	b.w	800ca3c <lv_draw_sw_rect+0x59e>
            lv_opa_t tmp = *start;
 800d296:	f813 6f01 	ldrb.w	r6, [r3, #1]!
            *start = *end;
 800d29a:	7817      	ldrb	r7, [r2, #0]
 800d29c:	701f      	strb	r7, [r3, #0]
            *end = tmp;
 800d29e:	f802 6901 	strb.w	r6, [r2], #-1
        for(x = 0; x < corner_size / 2; x++) {
 800d2a2:	e7f1      	b.n	800d288 <lv_draw_sw_rect+0xdea>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800d2a4:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800d2a8:	a914      	add	r1, sp, #80	; 0x50
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	a818      	add	r0, sp, #96	; 0x60
 800d2ae:	f002 fb1a 	bl	800f8e6 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	f47f abf6 	bne.w	800caa4 <lv_draw_sw_rect+0x606>
 800d2b8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800d2bc:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800d2c0:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	1aed      	subs	r5, r5, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800d2c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800d2cc:	1a9b      	subs	r3, r3, r2
 800d2ce:	fb0b 3707 	mla	r7, fp, r7, r3
 800d2d2:	9b06      	ldr	r3, [sp, #24]
 800d2d4:	b22d      	sxth	r5, r5
 800d2d6:	441f      	add	r7, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d2d8:	9b07      	ldr	r3, [sp, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d03b      	beq.n	800d356 <lv_draw_sw_rect+0xeb8>
 800d2de:	4632      	mov	r2, r6
 800d2e0:	a914      	add	r1, sp, #80	; 0x50
 800d2e2:	a818      	add	r0, sp, #96	; 0x60
 800d2e4:	f002 fb48 	bl	800f978 <_lv_area_is_out>
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d2e8:	463b      	mov	r3, r7
        if(w > 0) {
 800d2ea:	2d00      	cmp	r5, #0
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d2ec:	9323      	str	r3, [sp, #140]	; 0x8c
        if(w > 0) {
 800d2ee:	f77f abd9 	ble.w	800caa4 <lv_draw_sw_rect+0x606>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d2f2:	f04f 0802 	mov.w	r8, #2
            blend_area.x1 = clip_area_sub.x1;
 800d2f6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d2fa:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
            blend_area.x1 = clip_area_sub.x1;
 800d2fe:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800d302:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d306:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
            blend_area.x2 = clip_area_sub.x2;
 800d30a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d30e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d312:	42b3      	cmp	r3, r6
 800d314:	f6ff abc6 	blt.w	800caa4 <lv_draw_sw_rect+0x606>
                if(!simple_sub) {
 800d318:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d31a:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d31e:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d322:	b98b      	cbnz	r3, 800d348 <lv_draw_sw_rect+0xeaa>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d324:	462a      	mov	r2, r5
 800d326:	4639      	mov	r1, r7
 800d328:	4620      	mov	r0, r4
 800d32a:	f002 fd79 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d32e:	462b      	mov	r3, r5
 800d330:	4632      	mov	r2, r6
 800d332:	4620      	mov	r0, r4
 800d334:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d338:	f7fa fcd6 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d33c:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d33e:	bf14      	ite	ne
 800d340:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d344:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d348:	9804      	ldr	r0, [sp, #16]
 800d34a:	a920      	add	r1, sp, #128	; 0x80
 800d34c:	3601      	adds	r6, #1
 800d34e:	f7fc fefb 	bl	800a148 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d352:	b236      	sxth	r6, r6
 800d354:	e7db      	b.n	800d30e <lv_draw_sw_rect+0xe70>
        blend_dsc.mask = simple_sub ? sh_buf_tmp : mask_buf;
 800d356:	4623      	mov	r3, r4
 800d358:	e7c7      	b.n	800d2ea <lv_draw_sw_rect+0xe4c>
                if(!simple_sub) {
 800d35a:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d35c:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d360:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d364:	b9d3      	cbnz	r3, 800d39c <lv_draw_sw_rect+0xefe>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800d366:	465a      	mov	r2, fp
 800d368:	4629      	mov	r1, r5
 800d36a:	4620      	mov	r0, r4
 800d36c:	f002 fd58 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d370:	463b      	mov	r3, r7
 800d372:	4632      	mov	r2, r6
 800d374:	4620      	mov	r0, r4
 800d376:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d37a:	f7fa fcb5 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d37e:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d380:	bf14      	ite	ne
 800d382:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d386:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d38a:	9804      	ldr	r0, [sp, #16]
 800d38c:	a920      	add	r1, sp, #128	; 0x80
 800d38e:	3601      	adds	r6, #1
 800d390:	f7fc feda 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d394:	445d      	add	r5, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d396:	b236      	sxth	r6, r6
 800d398:	f7ff bbdd 	b.w	800cb56 <lv_draw_sw_rect+0x6b8>
                    blend_dsc.mask = sh_buf_tmp;
 800d39c:	9523      	str	r5, [sp, #140]	; 0x8c
 800d39e:	e7f4      	b.n	800d38a <lv_draw_sw_rect+0xeec>
                if(!simple_sub) {
 800d3a0:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d3a2:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d3a6:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d3aa:	b9cb      	cbnz	r3, 800d3e0 <lv_draw_sw_rect+0xf42>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800d3ac:	465a      	mov	r2, fp
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f002 fd35 	bl	800fe20 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d3b6:	463b      	mov	r3, r7
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d3c0:	f7fa fc92 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d3c4:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d3c6:	bf14      	ite	ne
 800d3c8:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d3cc:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d3d0:	9804      	ldr	r0, [sp, #16]
 800d3d2:	a920      	add	r1, sp, #128	; 0x80
 800d3d4:	3e01      	subs	r6, #1
 800d3d6:	f7fc feb7 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d3da:	445d      	add	r5, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800d3dc:	b236      	sxth	r6, r6
 800d3de:	e419      	b.n	800cc14 <lv_draw_sw_rect+0x776>
                    blend_dsc.mask = sh_buf_tmp;
 800d3e0:	9523      	str	r5, [sp, #140]	; 0x8c
 800d3e2:	e7f5      	b.n	800d3d0 <lv_draw_sw_rect+0xf32>
                lv_memset_ff(mask_buf, w);
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	4620      	mov	r0, r4
                blend_area.y1 = y;
 800d3e8:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d3ec:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
                lv_memset_ff(mask_buf, w);
 800d3f0:	f002 ff0d 	bl	801020e <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	4633      	mov	r3, r6
 800d3f8:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7fa fc73 	bl	8007ce8 <lv_draw_mask_apply>
 800d402:	3501      	adds	r5, #1
 800d404:	f88d 0090 	strb.w	r0, [sp, #144]	; 0x90
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d408:	a920      	add	r1, sp, #128	; 0x80
 800d40a:	9804      	ldr	r0, [sp, #16]
 800d40c:	f7fc fe9c 	bl	800a148 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d410:	b22d      	sxth	r5, r5
 800d412:	e437      	b.n	800cc84 <lv_draw_sw_rect+0x7e6>
 800d414:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 800d418:	f899 700a 	ldrb.w	r7, [r9, #10]
 800d41c:	1c59      	adds	r1, r3, #1
 800d41e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d422:	2ffd      	cmp	r7, #253	; 0xfd
 800d424:	eba1 0303 	sub.w	r3, r1, r3
 800d428:	fa0f fa83 	sxth.w	sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d42c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d430:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800d434:	f103 0301 	add.w	r3, r3, #1
 800d438:	eba3 0301 	sub.w	r3, r3, r1
 800d43c:	b21b      	sxth	r3, r3
 800d43e:	bf28      	it	cs
 800d440:	27ff      	movcs	r7, #255	; 0xff
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 800d442:	4553      	cmp	r3, sl
 800d444:	9307      	str	r3, [sp, #28]
 800d446:	bfa8      	it	ge
 800d448:	4653      	movge	r3, sl
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 800d44a:	ea4f 0863 	mov.w	r8, r3, asr #1
 800d44e:	4590      	cmp	r8, r2
 800d450:	bfa8      	it	ge
 800d452:	4690      	movge	r8, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d454:	f8bd 4054 	ldrh.w	r4, [sp, #84]	; 0x54
 800d458:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d45c:	3401      	adds	r4, #1
 800d45e:	1ae4      	subs	r4, r4, r3
    if(rout > 0 || mask_any) {
 800d460:	f1b8 0f00 	cmp.w	r8, #0
 800d464:	b224      	sxth	r4, r4
 800d466:	dc02      	bgt.n	800d46e <lv_draw_sw_rect+0xfd0>
 800d468:	9b08      	ldr	r3, [sp, #32]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d066      	beq.n	800d53c <lv_draw_sw_rect+0x109e>
        mask_buf = lv_mem_buf_get(clipped_w);
 800d46e:	4620      	mov	r0, r4
 800d470:	f002 fe50 	bl	8010114 <lv_mem_buf_get>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800d474:	2300      	movs	r3, #0
 800d476:	4642      	mov	r2, r8
 800d478:	a912      	add	r1, sp, #72	; 0x48
        mask_buf = lv_mem_buf_get(clipped_w);
 800d47a:	4605      	mov	r5, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800d47c:	a81a      	add	r0, sp, #104	; 0x68
 800d47e:	f7fa fdc9 	bl	8008014 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800d482:	2100      	movs	r1, #0
 800d484:	a81a      	add	r0, sp, #104	; 0x68
 800d486:	f7fa fc19 	bl	8007cbc <lv_draw_mask_add>
 800d48a:	9009      	str	r0, [sp, #36]	; 0x24
    blend_area.x1 = clipped_coords.x1;
 800d48c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d490:	211c      	movs	r1, #28
    blend_area.x1 = clipped_coords.x1;
 800d492:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_area.x2 = clipped_coords.x2;
 800d496:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d49a:	a820      	add	r0, sp, #128	; 0x80
    blend_area.x2 = clipped_coords.x2;
 800d49c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d4a0:	f002 fe86 	bl	80101b0 <lv_memset_00>
    blend_dsc.blend_mode = dsc->blend_mode;
 800d4a4:	f899 3002 	ldrb.w	r3, [r9, #2]
    if(grad_dir == LV_GRAD_DIR_HOR) {
 800d4a8:	2e02      	cmp	r6, #2
    blend_dsc.blend_mode = dsc->blend_mode;
 800d4aa:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
    blend_dsc.color = dsc->bg_color;
 800d4ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    blend_dsc.mask = mask_buf;
 800d4b2:	9523      	str	r5, [sp, #140]	; 0x8c
    blend_dsc.color = dsc->bg_color;
 800d4b4:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    blend_dsc.opa = LV_OPA_COVER;
 800d4b8:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800d4bc:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    blend_dsc.blend_area = &blend_area;
 800d4c0:	ab16      	add	r3, sp, #88	; 0x58
 800d4c2:	9320      	str	r3, [sp, #128]	; 0x80
    blend_dsc.mask_area = &blend_area;
 800d4c4:	9325      	str	r3, [sp, #148]	; 0x94
    if(grad_dir == LV_GRAD_DIR_HOR) {
 800d4c6:	d14a      	bne.n	800d55e <lv_draw_sw_rect+0x10c0>
        grad_map = lv_mem_buf_get(coords_bg_w * sizeof(lv_color_t));
 800d4c8:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800d4cc:	f002 fe22 	bl	8010114 <lv_mem_buf_get>
        for(i = 0; i < coords_bg_w; i++) grad_map[i] = grad_get(dsc, coords_bg_w, i);
 800d4d0:	f04f 0b00 	mov.w	fp, #0
        grad_map = lv_mem_buf_get(coords_bg_w * sizeof(lv_color_t));
 800d4d4:	9006      	str	r0, [sp, #24]
        for(i = 0; i < coords_bg_w; i++) grad_map[i] = grad_get(dsc, coords_bg_w, i);
 800d4d6:	45d3      	cmp	fp, sl
 800d4d8:	db35      	blt.n	800d546 <lv_draw_sw_rect+0x10a8>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) grad_map_ofs += clipped_coords.x1 - bg_coords.x1;
 800d4da:	f899 300b 	ldrb.w	r3, [r9, #11]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	bf05      	ittet	eq
 800d4e6:	f9bd 3050 	ldrsheq.w	r3, [sp, #80]	; 0x50
 800d4ea:	f9bd 2048 	ldrsheq.w	r2, [sp, #72]	; 0x48
        grad_map_ofs = grad_map;
 800d4ee:	9b06      	ldrne	r3, [sp, #24]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) grad_map_ofs += clipped_coords.x1 - bg_coords.x1;
 800d4f0:	1a9b      	subeq	r3, r3, r2
 800d4f2:	bf04      	itt	eq
 800d4f4:	9a06      	ldreq	r2, [sp, #24]
 800d4f6:	eb02 0343 	addeq.w	r3, r2, r3, lsl #1
        blend_dsc.src_buf = grad_map_ofs;
 800d4fa:	9321      	str	r3, [sp, #132]	; 0x84
    if(mask_any) {
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 80be 	beq.w	800d680 <lv_draw_sw_rect+0x11e2>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d504:	f04f 0b02 	mov.w	fp, #2
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800d508:	f9bd 8052 	ldrsh.w	r8, [sp, #82]	; 0x52
 800d50c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800d510:	4598      	cmp	r8, r3
 800d512:	dd27      	ble.n	800d564 <lv_draw_sw_rect+0x10c6>
    if(grad_map) lv_mem_buf_release(grad_map);
 800d514:	9b06      	ldr	r3, [sp, #24]
 800d516:	b113      	cbz	r3, 800d51e <lv_draw_sw_rect+0x1080>
 800d518:	4618      	mov	r0, r3
 800d51a:	f002 fc53 	bl	800fdc4 <lv_mem_buf_release>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 800d51e:	b115      	cbz	r5, 800d526 <lv_draw_sw_rect+0x1088>
 800d520:	4628      	mov	r0, r5
 800d522:	f002 fc4f 	bl	800fdc4 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 800d526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d528:	1c5d      	adds	r5, r3, #1
 800d52a:	f43f ac2b 	beq.w	800cd84 <lv_draw_sw_rect+0x8e6>
        lv_draw_mask_remove_id(mask_rout_id);
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fa fbfc 	bl	8007d2c <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 800d534:	a81a      	add	r0, sp, #104	; 0x68
 800d536:	f7fa fc21 	bl	8007d7c <lv_draw_mask_free_param>
 800d53a:	e423      	b.n	800cd84 <lv_draw_sw_rect+0x8e6>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800d53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_opa_t * mask_buf = NULL;
 800d540:	9d08      	ldr	r5, [sp, #32]
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800d542:	9309      	str	r3, [sp, #36]	; 0x24
 800d544:	e7a2      	b.n	800d48c <lv_draw_sw_rect+0xfee>
        for(i = 0; i < coords_bg_w; i++) grad_map[i] = grad_get(dsc, coords_bg_w, i);
 800d546:	fa0f f28b 	sxth.w	r2, fp
 800d54a:	4651      	mov	r1, sl
 800d54c:	4648      	mov	r0, r9
 800d54e:	f7fe fbd5 	bl	800bcfc <grad_get>
 800d552:	9b06      	ldr	r3, [sp, #24]
 800d554:	f823 001b 	strh.w	r0, [r3, fp, lsl #1]
 800d558:	f10b 0b01 	add.w	fp, fp, #1
 800d55c:	e7bb      	b.n	800d4d6 <lv_draw_sw_rect+0x1038>
    lv_color_t * grad_map = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	9306      	str	r3, [sp, #24]
 800d562:	e7cb      	b.n	800d4fc <lv_draw_sw_rect+0x105e>
            blend_area.y1 = h;
 800d564:	fa1f f388 	uxth.w	r3, r8
 800d568:	fa0f fa88 	sxth.w	sl, r8
            lv_memset(mask_buf, opa, clipped_w);
 800d56c:	4622      	mov	r2, r4
 800d56e:	4639      	mov	r1, r7
 800d570:	4628      	mov	r0, r5
 800d572:	9308      	str	r3, [sp, #32]
            blend_area.y1 = h;
 800d574:	f8ad a05a 	strh.w	sl, [sp, #90]	; 0x5a
            blend_area.y2 = h;
 800d578:	f8ad a05e 	strh.w	sl, [sp, #94]	; 0x5e
            lv_memset(mask_buf, opa, clipped_w);
 800d57c:	f002 fd40 	bl	8010000 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800d580:	4623      	mov	r3, r4
 800d582:	4652      	mov	r2, sl
 800d584:	4628      	mov	r0, r5
 800d586:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 800d58a:	f7fa fbad 	bl	8007ce8 <lv_draw_mask_apply>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d58e:	2801      	cmp	r0, #1
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800d590:	bf14      	ite	ne
 800d592:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d596:	f88d b090 	strbeq.w	fp, [sp, #144]	; 0x90
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, h - bg_coords.y1);
 800d59a:	2e01      	cmp	r6, #1
 800d59c:	d10a      	bne.n	800d5b4 <lv_draw_sw_rect+0x1116>
 800d59e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d5a2:	9b08      	ldr	r3, [sp, #32]
 800d5a4:	4648      	mov	r0, r9
 800d5a6:	1a9a      	subs	r2, r3, r2
 800d5a8:	9907      	ldr	r1, [sp, #28]
 800d5aa:	b212      	sxth	r2, r2
 800d5ac:	f7fe fba6 	bl	800bcfc <grad_get>
 800d5b0:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d5b4:	9804      	ldr	r0, [sp, #16]
 800d5b6:	a920      	add	r1, sp, #128	; 0x80
 800d5b8:	f7fc fdc6 	bl	800a148 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800d5bc:	f108 0801 	add.w	r8, r8, #1
 800d5c0:	e7a4      	b.n	800d50c <lv_draw_sw_rect+0x106e>
        lv_coord_t top_y = bg_coords.y1 + h;
 800d5c2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d5c6:	4452      	add	r2, sl
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800d5c8:	eba3 0a0a 	sub.w	sl, r3, sl
 800d5cc:	fa1f f38a 	uxth.w	r3, sl
 800d5d0:	930b      	str	r3, [sp, #44]	; 0x2c
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800d5d2:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
        lv_coord_t top_y = bg_coords.y1 + h;
 800d5d6:	fa0f fb82 	sxth.w	fp, r2
 800d5da:	b291      	uxth	r1, r2
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800d5dc:	455b      	cmp	r3, fp
        lv_coord_t top_y = bg_coords.y1 + h;
 800d5de:	910a      	str	r1, [sp, #40]	; 0x28
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800d5e0:	fa0f fa8a 	sxth.w	sl, sl
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800d5e4:	dd03      	ble.n	800d5ee <lv_draw_sw_rect+0x1150>
 800d5e6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800d5ea:	4553      	cmp	r3, sl
 800d5ec:	db45      	blt.n	800d67a <lv_draw_sw_rect+0x11dc>
        lv_memset(mask_buf, opa, clipped_w);
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f002 fd04 	bl	8010000 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 800d5f8:	4623      	mov	r3, r4
 800d5fa:	465a      	mov	r2, fp
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
 800d602:	f7fa fb71 	bl	8007ce8 <lv_draw_mask_apply>
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d606:	2801      	cmp	r0, #1
 800d608:	bf04      	itt	eq
 800d60a:	2302      	moveq	r3, #2
 800d60c:	f88d 3090 	strbeq.w	r3, [sp, #144]	; 0x90
        if(top_y >= clipped_coords.y1) {
 800d610:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 800d614:	bf18      	it	ne
 800d616:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
        if(top_y >= clipped_coords.y1) {
 800d61a:	455b      	cmp	r3, fp
 800d61c:	dc14      	bgt.n	800d648 <lv_draw_sw_rect+0x11aa>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, top_y - bg_coords.y1);
 800d61e:	2e01      	cmp	r6, #1
            blend_area.y1 = top_y;
 800d620:	f8ad b05a 	strh.w	fp, [sp, #90]	; 0x5a
            blend_area.y2 = top_y;
 800d624:	f8ad b05e 	strh.w	fp, [sp, #94]	; 0x5e
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, top_y - bg_coords.y1);
 800d628:	d10a      	bne.n	800d640 <lv_draw_sw_rect+0x11a2>
 800d62a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d630:	4648      	mov	r0, r9
 800d632:	1a9a      	subs	r2, r3, r2
 800d634:	9907      	ldr	r1, [sp, #28]
 800d636:	b212      	sxth	r2, r2
 800d638:	f7fe fb60 	bl	800bcfc <grad_get>
 800d63c:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d640:	9804      	ldr	r0, [sp, #16]
 800d642:	a920      	add	r1, sp, #128	; 0x80
 800d644:	f7fc fd80 	bl	800a148 <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 800d648:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800d64c:	4553      	cmp	r3, sl
 800d64e:	db14      	blt.n	800d67a <lv_draw_sw_rect+0x11dc>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, bottom_y - bg_coords.y1);
 800d650:	2e01      	cmp	r6, #1
            blend_area.y1 = bottom_y;
 800d652:	f8ad a05a 	strh.w	sl, [sp, #90]	; 0x5a
            blend_area.y2 = bottom_y;
 800d656:	f8ad a05e 	strh.w	sl, [sp, #94]	; 0x5e
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, bottom_y - bg_coords.y1);
 800d65a:	d10a      	bne.n	800d672 <lv_draw_sw_rect+0x11d4>
 800d65c:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d662:	4648      	mov	r0, r9
 800d664:	1a9a      	subs	r2, r3, r2
 800d666:	9907      	ldr	r1, [sp, #28]
 800d668:	b212      	sxth	r2, r2
 800d66a:	f7fe fb47 	bl	800bcfc <grad_get>
 800d66e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d672:	9804      	ldr	r0, [sp, #16]
 800d674:	a920      	add	r1, sp, #128	; 0x80
 800d676:	f7fc fd67 	bl	800a148 <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 800d67a:	9b08      	ldr	r3, [sp, #32]
 800d67c:	3301      	adds	r3, #1
 800d67e:	9308      	str	r3, [sp, #32]
 800d680:	9908      	ldr	r1, [sp, #32]
 800d682:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d686:	4588      	cmp	r8, r1
 800d688:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d68c:	dc99      	bgt.n	800d5c2 <lv_draw_sw_rect+0x1124>
    center_coords.x1 = bg_coords.x1;
 800d68e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    center_coords.y1 = bg_coords.y1 + rout;
 800d692:	fa1f fb88 	uxth.w	fp, r8
    center_coords.x1 = bg_coords.x1;
 800d696:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
    center_coords.x2 = bg_coords.x2;
 800d69a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
    center_coords.y2 = bg_coords.y2 - rout;
 800d69e:	eba3 0a0b 	sub.w	sl, r3, fp
    center_coords.y1 = bg_coords.y1 + rout;
 800d6a2:	445a      	add	r2, fp
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 800d6a4:	a818      	add	r0, sp, #96	; 0x60
    center_coords.y2 = bg_coords.y2 - rout;
 800d6a6:	f8ad a066 	strh.w	sl, [sp, #102]	; 0x66
    center_coords.x2 = bg_coords.x2;
 800d6aa:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    center_coords.y1 = bg_coords.y1 + rout;
 800d6ae:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 800d6b2:	f7fa fb8d 	bl	8007dd0 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 800d6b6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d6ba:	4682      	mov	sl, r0
 800d6bc:	b988      	cbnz	r0, 800d6e2 <lv_draw_sw_rect+0x1244>
 800d6be:	b986      	cbnz	r6, 800d6e2 <lv_draw_sw_rect+0x1244>
        blend_area.y1 = bg_coords.y1 + rout;
 800d6c0:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d6c4:	9804      	ldr	r0, [sp, #16]
        blend_area.y1 = bg_coords.y1 + rout;
 800d6c6:	445a      	add	r2, fp
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d6c8:	a920      	add	r1, sp, #128	; 0x80
        blend_area.y2 = bg_coords.y2 - rout;
 800d6ca:	eba3 0b0b 	sub.w	fp, r3, fp
        blend_area.y1 = bg_coords.y1 + rout;
 800d6ce:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
        blend_area.y2 = bg_coords.y2 - rout;
 800d6d2:	f8ad b05e 	strh.w	fp, [sp, #94]	; 0x5e
        blend_dsc.opa = opa;
 800d6d6:	f88d 7098 	strb.w	r7, [sp, #152]	; 0x98
        blend_dsc.mask = NULL;
 800d6da:	9623      	str	r6, [sp, #140]	; 0x8c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d6dc:	f7fc fd34 	bl	800a148 <lv_draw_sw_blend>
 800d6e0:	e718      	b.n	800d514 <lv_draw_sw_rect+0x1076>
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800d6e2:	2201      	movs	r2, #1
        int32_t h_end = bg_coords.y2 - rout;
 800d6e4:	eba3 0308 	sub.w	r3, r3, r8
 800d6e8:	9308      	str	r3, [sp, #32]
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800d6ea:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        blend_dsc.opa = opa;
 800d6ee:	f88d 7098 	strb.w	r7, [sp, #152]	; 0x98
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800d6f2:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800d6f6:	4498      	add	r8, r3
 800d6f8:	9b08      	ldr	r3, [sp, #32]
 800d6fa:	4543      	cmp	r3, r8
 800d6fc:	f6ff af0a 	blt.w	800d514 <lv_draw_sw_rect+0x1076>
            if(mask_any_center) {
 800d700:	fa1f f388 	uxth.w	r3, r8
 800d704:	930a      	str	r3, [sp, #40]	; 0x28
 800d706:	fa0f fb88 	sxth.w	fp, r8
 800d70a:	f1ba 0f00 	cmp.w	sl, #0
 800d70e:	d00d      	beq.n	800d72c <lv_draw_sw_rect+0x128e>
                lv_memset(mask_buf, opa, clipped_w);
 800d710:	4622      	mov	r2, r4
 800d712:	4639      	mov	r1, r7
 800d714:	4628      	mov	r0, r5
 800d716:	f002 fc73 	bl	8010000 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800d71a:	4623      	mov	r3, r4
 800d71c:	465a      	mov	r2, fp
 800d71e:	4628      	mov	r0, r5
 800d720:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 800d724:	f7fa fae0 	bl	8007ce8 <lv_draw_mask_apply>
 800d728:	f88d 0090 	strb.w	r0, [sp, #144]	; 0x90
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, h - bg_coords.y1);
 800d72c:	2e01      	cmp	r6, #1
            blend_area.y1 = h;
 800d72e:	f8ad b05a 	strh.w	fp, [sp, #90]	; 0x5a
            blend_area.y2 = h;
 800d732:	f8ad b05e 	strh.w	fp, [sp, #94]	; 0x5e
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad_get(dsc, coords_bg_h, h - bg_coords.y1);
 800d736:	d10a      	bne.n	800d74e <lv_draw_sw_rect+0x12b0>
 800d738:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d73e:	4648      	mov	r0, r9
 800d740:	1a9a      	subs	r2, r3, r2
 800d742:	9907      	ldr	r1, [sp, #28]
 800d744:	b212      	sxth	r2, r2
 800d746:	f7fe fad9 	bl	800bcfc <grad_get>
 800d74a:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d74e:	9804      	ldr	r0, [sp, #16]
 800d750:	a920      	add	r1, sp, #128	; 0x80
 800d752:	f7fc fcf9 	bl	800a148 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800d756:	f108 0801 	add.w	r8, r8, #1
 800d75a:	e7cd      	b.n	800d6f8 <lv_draw_sw_rect+0x125a>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800d75c:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800d760:	a918      	add	r1, sp, #96	; 0x60
 800d762:	f7fb fe11 	bl	8009388 <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 800d766:	2801      	cmp	r0, #1
 800d768:	f47f ab6b 	bne.w	800ce42 <lv_draw_sw_rect+0x9a4>
        lv_draw_img_dsc_init(&img_dsc);
 800d76c:	a820      	add	r0, sp, #128	; 0x80
 800d76e:	f7f9 fa3c 	bl	8006bea <lv_draw_img_dsc_init>
        img_dsc.blend_mode = dsc->blend_mode;
 800d772:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 800d776:	f899 2002 	ldrb.w	r2, [r9, #2]
 800d77a:	f362 0303 	bfi	r3, r2, #0, #4
 800d77e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        img_dsc.recolor = dsc->bg_img_recolor;
 800d782:	f8b9 3014 	ldrh.w	r3, [r9, #20]
        if(dsc->bg_img_tiled == false) {
 800d786:	f899 2018 	ldrb.w	r2, [r9, #24]
        img_dsc.recolor = dsc->bg_img_recolor;
 800d78a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800d78e:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800d792:	ba5b      	rev16	r3, r3
 800d794:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        if(dsc->bg_img_tiled == false) {
 800d798:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 800d79c:	2a00      	cmp	r2, #0
 800d79e:	d139      	bne.n	800d814 <lv_draw_sw_rect+0x1376>
 800d7a0:	9805      	ldr	r0, [sp, #20]
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800d7a2:	9a05      	ldr	r2, [sp, #20]
 800d7a4:	8880      	ldrh	r0, [r0, #4]
 800d7a6:	8812      	ldrh	r2, [r2, #0]
 800d7a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	1a80      	subs	r0, r0, r2
 800d7ae:	b204      	sxth	r4, r0
 800d7b0:	f3c1 258a 	ubfx	r5, r1, #10, #11
 800d7b4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800d7b8:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 800d7bc:	1a51      	subs	r1, r2, r1
 800d7be:	4420      	add	r0, r4
 800d7c0:	eb01 0060 	add.w	r0, r1, r0, asr #1
 800d7c4:	b281      	uxth	r1, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d7c6:	9805      	ldr	r0, [sp, #20]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800d7c8:	9a05      	ldr	r2, [sp, #20]
 800d7ca:	88c0      	ldrh	r0, [r0, #6]
 800d7cc:	8852      	ldrh	r2, [r2, #2]
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	1a80      	subs	r0, r0, r2
 800d7d2:	b206      	sxth	r6, r0
 800d7d4:	f3c3 144a 	ubfx	r4, r3, #5, #11
 800d7d8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800d7dc:	f3c3 1389 	ubfx	r3, r3, #6, #10
 800d7e0:	4430      	add	r0, r6
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	eb03 0360 	add.w	r3, r3, r0, asr #1
 800d7e8:	b29b      	uxth	r3, r3
            area.x2 = area.x1 + header.w - 1;
 800d7ea:	3d01      	subs	r5, #1
            area.y2 = area.y1 + header.h - 1;
 800d7ec:	3c01      	subs	r4, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800d7ee:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800d7f2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            area.x2 = area.x1 + header.w - 1;
 800d7f6:	4429      	add	r1, r5
            area.y2 = area.y1 + header.h - 1;
 800d7f8:	4423      	add	r3, r4
            area.x2 = area.x1 + header.w - 1;
 800d7fa:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            area.y2 = area.y1 + header.h - 1;
 800d7fe:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800d802:	9804      	ldr	r0, [sp, #16]
 800d804:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d808:	aa1a      	add	r2, sp, #104	; 0x68
 800d80a:	a920      	add	r1, sp, #128	; 0x80
 800d80c:	f7f9 fa3c 	bl	8006c88 <lv_draw_img>
 800d810:	f7ff bb17 	b.w	800ce42 <lv_draw_sw_rect+0x9a4>
            area.y1 = coords->y1;
 800d814:	9a05      	ldr	r2, [sp, #20]
            area.y2 = area.y1 + header.h - 1;
 800d816:	f3c3 134a 	ubfx	r3, r3, #5, #11
            area.y1 = coords->y1;
 800d81a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            area.y2 = area.y1 + header.h - 1;
 800d81e:	3b01      	subs	r3, #1
            area.y1 = coords->y1;
 800d820:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800d824:	4413      	add	r3, r2
 800d826:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 800d830:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d834:	429a      	cmp	r2, r3
 800d836:	f73f ab04 	bgt.w	800ce42 <lv_draw_sw_rect+0x9a4>
                area.x1 = coords->x1;
 800d83a:	9b05      	ldr	r3, [sp, #20]
 800d83c:	f9b3 2000 	ldrsh.w	r2, [r3]
                area.x2 = area.x1 + header.w - 1;
 800d840:	9b18      	ldr	r3, [sp, #96]	; 0x60
                area.x1 = coords->x1;
 800d842:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
                area.x2 = area.x1 + header.w - 1;
 800d846:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d84a:	3b01      	subs	r3, #1
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800d84c:	4413      	add	r3, r2
 800d84e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800d852:	9b05      	ldr	r3, [sp, #20]
 800d854:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 800d858:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	dd0b      	ble.n	800d878 <lv_draw_sw_rect+0x13da>
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800d860:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 800d864:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 800d868:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800d86c:	441a      	add	r2, r3
 800d86e:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 800d872:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d876:	e7d5      	b.n	800d824 <lv_draw_sw_rect+0x1386>
                    lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800d878:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d87c:	aa1a      	add	r2, sp, #104	; 0x68
 800d87e:	9804      	ldr	r0, [sp, #16]
 800d880:	a920      	add	r1, sp, #128	; 0x80
 800d882:	f7f9 fa01 	bl	8006c88 <lv_draw_img>
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800d886:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d888:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800d88c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d890:	441a      	add	r2, r3
 800d892:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800d896:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800d89a:	e7d7      	b.n	800d84c <lv_draw_sw_rect+0x13ae>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800d89c:	462a      	mov	r2, r5
 800d89e:	4620      	mov	r0, r4
 800d8a0:	7831      	ldrb	r1, [r6, #0]
 800d8a2:	f002 fbad 	bl	8010000 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d8b0:	f7fa fa1a 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d8b4:	2801      	cmp	r0, #1
 800d8b6:	f43f ac73 	beq.w	800d1a0 <lv_draw_sw_rect+0xd02>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d8ba:	f88d 0090 	strb.w	r0, [sp, #144]	; 0x90
 800d8be:	e473      	b.n	800d1a8 <lv_draw_sw_rect+0xd0a>
                blend_dsc.mask = mask_buf;
 800d8c0:	9423      	str	r4, [sp, #140]	; 0x8c
 800d8c2:	f7ff b870 	b.w	800c9a6 <lv_draw_sw_rect+0x508>
        if(w > 0) {
 800d8c6:	2d00      	cmp	r5, #0
 800d8c8:	f77f a826 	ble.w	800c918 <lv_draw_sw_rect+0x47a>
                blend_dsc.mask = mask_buf;
 800d8cc:	9423      	str	r4, [sp, #140]	; 0x8c
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800d8ce:	eba7 0708 	sub.w	r7, r7, r8
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d8d2:	f04f 0802 	mov.w	r8, #2
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800d8d6:	9b06      	ldr	r3, [sp, #24]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d8d8:	f9bd 6062 	ldrsh.w	r6, [sp, #98]	; 0x62
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800d8dc:	fb0b 3707 	mla	r7, fp, r7, r3
            blend_area.x1 = clip_area_sub.x1;
 800d8e0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800d8e4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            blend_area.x2 = clip_area_sub.x2;
 800d8e8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800d8ec:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d8f0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d8f4:	42b3      	cmp	r3, r6
 800d8f6:	f6ff a80f 	blt.w	800c918 <lv_draw_sw_rect+0x47a>
                if(!simple_sub) {
 800d8fa:	9b07      	ldr	r3, [sp, #28]
                blend_area.y1 = y;
 800d8fc:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                blend_area.y2 = y;
 800d900:	f8ad 605e 	strh.w	r6, [sp, #94]	; 0x5e
                if(!simple_sub) {
 800d904:	7839      	ldrb	r1, [r7, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f47f ac2c 	bne.w	800d164 <lv_draw_sw_rect+0xcc6>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800d90c:	462a      	mov	r2, r5
 800d90e:	4620      	mov	r0, r4
 800d910:	f002 fb76 	bl	8010000 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d914:	462b      	mov	r3, r5
 800d916:	4632      	mov	r2, r6
 800d918:	4620      	mov	r0, r4
 800d91a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800d91e:	f7fa f9e3 	bl	8007ce8 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d922:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800d924:	bf14      	ite	ne
 800d926:	f88d 0090 	strbne.w	r0, [sp, #144]	; 0x90
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d92a:	f88d 8090 	strbeq.w	r8, [sp, #144]	; 0x90
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d92e:	9804      	ldr	r0, [sp, #16]
 800d930:	a920      	add	r1, sp, #128	; 0x80
 800d932:	3601      	adds	r6, #1
 800d934:	f7fc fc08 	bl	800a148 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d938:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d93a:	b236      	sxth	r6, r6
 800d93c:	e7d8      	b.n	800d8f0 <lv_draw_sw_rect+0x1452>

0800d93e <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d93e:	8883      	ldrh	r3, [r0, #4]
 800d940:	8800      	ldrh	r0, [r0, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	1a18      	subs	r0, r3, r0
}
 800d946:	b200      	sxth	r0, r0
 800d948:	4770      	bx	lr

0800d94a <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d94a:	88c3      	ldrh	r3, [r0, #6]
 800d94c:	8840      	ldrh	r0, [r0, #2]
 800d94e:	3301      	adds	r3, #1
 800d950:	1a18      	subs	r0, r3, r0
}
 800d952:	b200      	sxth	r0, r0
 800d954:	4770      	bx	lr

0800d956 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 800d956:	b570      	push	{r4, r5, r6, lr}
    if(item_cnt <= 1) {
 800d958:	2b01      	cmp	r3, #1
{
 800d95a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 800d95e:	dc02      	bgt.n	800d966 <place_content+0x10>
        switch(place) {
 800d960:	1ec6      	subs	r6, r0, #3
 800d962:	2e02      	cmp	r6, #2
 800d964:	d907      	bls.n	800d976 <place_content+0x20>
            default:
                break;
        }
    }

    switch(place) {
 800d966:	3801      	subs	r0, #1
 800d968:	2804      	cmp	r0, #4
 800d96a:	d835      	bhi.n	800d9d8 <place_content+0x82>
 800d96c:	e8df f000 	tbb	[pc, r0]
 800d970:	1b2a030d 	.word	0x1b2a030d
 800d974:	13          	.byte	0x13
 800d975:	00          	.byte	0x00
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	802b      	strh	r3, [r5, #0]
            *start_pos += (max_size - content_size) / 2;
 800d97a:	8823      	ldrh	r3, [r4, #0]
 800d97c:	1a89      	subs	r1, r1, r2
 800d97e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800d982:	eb03 0161 	add.w	r1, r3, r1, asr #1
            break;
        case LV_FLEX_ALIGN_END:
            *gap = 0;
            *start_pos += max_size - content_size;
 800d986:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 800d988:	bd70      	pop	{r4, r5, r6, pc}
            *gap = 0;
 800d98a:	2300      	movs	r3, #0
 800d98c:	802b      	strh	r3, [r5, #0]
            *start_pos += max_size - content_size;
 800d98e:	1a89      	subs	r1, r1, r2
 800d990:	8822      	ldrh	r2, [r4, #0]
 800d992:	4411      	add	r1, r2
 800d994:	e7f7      	b.n	800d986 <place_content+0x30>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 800d996:	1a89      	subs	r1, r1, r2
 800d998:	3b01      	subs	r3, #1
 800d99a:	b209      	sxth	r1, r1
 800d99c:	b21b      	sxth	r3, r3
 800d99e:	fb91 f1f3 	sdiv	r1, r1, r3
 800d9a2:	8029      	strh	r1, [r5, #0]
            break;
 800d9a4:	e7f0      	b.n	800d988 <place_content+0x32>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 800d9a6:	1a89      	subs	r1, r1, r2
 800d9a8:	b209      	sxth	r1, r1
 800d9aa:	fb91 f3f3 	sdiv	r3, r1, r3
 800d9ae:	8829      	ldrh	r1, [r5, #0]
 800d9b0:	440b      	add	r3, r1
 800d9b2:	b21b      	sxth	r3, r3
 800d9b4:	802b      	strh	r3, [r5, #0]
            *start_pos += *gap / 2;
 800d9b6:	8822      	ldrh	r2, [r4, #0]
 800d9b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d9bc:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800d9c0:	8023      	strh	r3, [r4, #0]
            break;
 800d9c2:	e7e1      	b.n	800d988 <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 800d9c4:	1a89      	subs	r1, r1, r2
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	b209      	sxth	r1, r1
 800d9cc:	fb91 f1f3 	sdiv	r1, r1, r3
 800d9d0:	8029      	strh	r1, [r5, #0]
            *start_pos += *gap;
 800d9d2:	8823      	ldrh	r3, [r4, #0]
 800d9d4:	4419      	add	r1, r3
 800d9d6:	e7d6      	b.n	800d986 <place_content+0x30>
            *gap = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	802b      	strh	r3, [r5, #0]
}
 800d9dc:	e7d4      	b.n	800d988 <place_content+0x32>

0800d9de <get_next_item.isra.0>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	b151      	cbz	r1, 800d9f8 <get_next_item.isra.0+0x1a>
        (*item_id)--;
 800d9e2:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800d9e4:	2b00      	cmp	r3, #0
        (*item_id)--;
 800d9e6:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800d9e8:	da01      	bge.n	800d9ee <get_next_item.isra.0+0x10>
        else return NULL;
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800d9ee:	6802      	ldr	r2, [r0, #0]
    }
    else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800d9f0:	6812      	ldr	r2, [r2, #0]
 800d9f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 800d9f6:	4770      	bx	lr
        (*item_id)++;
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800d9fc:	6802      	ldr	r2, [r0, #0]
 800d9fe:	6851      	ldr	r1, [r2, #4]
 800da00:	428b      	cmp	r3, r1
 800da02:	dbf5      	blt.n	800d9f0 <get_next_item.isra.0+0x12>
 800da04:	e7f1      	b.n	800d9ea <get_next_item.isra.0+0xc>
	...

0800da08 <find_track_end>:
{
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	460d      	mov	r5, r1
 800da0e:	b087      	sub	sp, #28
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800da10:	2100      	movs	r1, #0
 800da12:	4617      	mov	r7, r2
 800da14:	f241 0201 	movw	r2, #4097	; 0x1001
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	4606      	mov	r6, r0
 800da1c:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 800da20:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800da24:	f7f7 fcb0 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800da28:	f241 0204 	movw	r2, #4100	; 0x1004
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800da2c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800da2e:	2100      	movs	r1, #0
 800da30:	4630      	mov	r0, r6
 800da32:	f7f7 fca9 	bl	8005388 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800da36:	78ea      	ldrb	r2, [r5, #3]
 800da38:	0793      	lsls	r3, r2, #30
 800da3a:	d50b      	bpl.n	800da54 <find_track_end+0x4c>
 800da3c:	f012 0f01 	tst.w	r2, #1
 800da40:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800da44:	d00e      	beq.n	800da64 <find_track_end+0x5c>
 800da46:	b224      	sxth	r4, r4
 800da48:	4294      	cmp	r4, r2
 800da4a:	d106      	bne.n	800da5a <find_track_end+0x52>
        f->wrap = false;
 800da4c:	78ea      	ldrb	r2, [r5, #3]
 800da4e:	f36f 0241 	bfc	r2, #1, #1
 800da52:	70ea      	strb	r2, [r5, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800da54:	78ea      	ldrb	r2, [r5, #3]
 800da56:	07d1      	lsls	r1, r2, #31
 800da58:	d507      	bpl.n	800da6a <find_track_end+0x62>
 800da5a:	4b7e      	ldr	r3, [pc, #504]	; (800dc54 <find_track_end+0x24c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800da5c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800dc58 <find_track_end+0x250>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	e006      	b.n	800da72 <find_track_end+0x6a>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800da64:	b200      	sxth	r0, r0
 800da66:	4290      	cmp	r0, r2
 800da68:	d0f0      	beq.n	800da4c <find_track_end+0x44>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800da6a:	4b7b      	ldr	r3, [pc, #492]	; (800dc58 <find_track_end+0x250>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800da6c:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800dc54 <find_track_end+0x24c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800da70:	9301      	str	r3, [sp, #4]
    t->grow_item_cnt = 0;
 800da72:	2200      	movs	r2, #0
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800da74:	4639      	mov	r1, r7
    t->grow_dsc = NULL;
 800da76:	e9c9 2202 	strd	r2, r2, [r9, #8]
    t->grow_item_cnt = 0;
 800da7a:	f8c9 2010 	str.w	r2, [r9, #16]
    t->track_cross_size = 0;
 800da7e:	f8c9 2000 	str.w	r2, [r9]
    t->track_fix_main_size = 0;
 800da82:	f8a9 2004 	strh.w	r2, [r9, #4]
    int32_t item_id = item_start_id;
 800da86:	9705      	str	r7, [sp, #20]
        item = lv_obj_get_child(cont, item_id);
 800da88:	4630      	mov	r0, r6
 800da8a:	f7f8 fa54 	bl	8005f36 <lv_obj_get_child>
 800da8e:	9a05      	ldr	r2, [sp, #20]
 800da90:	4604      	mov	r4, r0
    while(item) {
 800da92:	b390      	cbz	r0, 800dafa <find_track_end+0xf2>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800da94:	4297      	cmp	r7, r2
 800da96:	d129      	bne.n	800daec <find_track_end+0xe4>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800da98:	4970      	ldr	r1, [pc, #448]	; (800dc5c <find_track_end+0x254>)
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7f4 fec7 	bl	800282e <lv_obj_has_flag_any>
 800daa0:	4601      	mov	r1, r0
 800daa2:	2800      	cmp	r0, #0
 800daa4:	f040 80b4 	bne.w	800dc10 <find_track_end+0x208>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800daa8:	4b6d      	ldr	r3, [pc, #436]	; (800dc60 <find_track_end+0x258>)
 800daaa:	4620      	mov	r0, r4
 800daac:	881a      	ldrh	r2, [r3, #0]
 800daae:	f7f7 fc6b 	bl	8005388 <lv_obj_get_style_prop>
            if(grow_value) {
 800dab2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800dab6:	9003      	str	r0, [sp, #12]
 800dab8:	f000 80b8 	beq.w	800dc2c <find_track_end+0x224>
                t->track_fix_main_size += item_gap;
 800dabc:	f8b9 2004 	ldrh.w	r2, [r9, #4]
                t->grow_item_cnt++;
 800dac0:	f8d9 0010 	ldr.w	r0, [r9, #16]
                t->track_fix_main_size += item_gap;
 800dac4:	445a      	add	r2, fp
 800dac6:	f8a9 2004 	strh.w	r2, [r9, #4]
                if(t->grow_dsc_calc) {
 800daca:	f899 2014 	ldrb.w	r2, [r9, #20]
                t->grow_item_cnt++;
 800dace:	3001      	adds	r0, #1
                if(t->grow_dsc_calc) {
 800dad0:	07d2      	lsls	r2, r2, #31
                t->grow_item_cnt++;
 800dad2:	f8c9 0010 	str.w	r0, [r9, #16]
                if(t->grow_dsc_calc) {
 800dad6:	f140 808b 	bpl.w	800dbf0 <find_track_end+0x1e8>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800dada:	2214      	movs	r2, #20
 800dadc:	4350      	muls	r0, r2
 800dade:	f002 fb19 	bl	8010114 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800dae2:	2214      	movs	r2, #20
 800dae4:	4680      	mov	r8, r0
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d13a      	bne.n	800db60 <find_track_end+0x158>
 800daea:	e7fe      	b.n	800daea <find_track_end+0xe2>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800daec:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7f4 fe95 	bl	8002820 <lv_obj_has_flag>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d0ce      	beq.n	800da98 <find_track_end+0x90>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800dafa:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800dafe:	2a00      	cmp	r2, #0
 800db00:	bfc8      	it	gt
 800db02:	eba2 0b0b 	subgt.w	fp, r2, fp
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800db06:	f8d9 2010 	ldr.w	r2, [r9, #16]
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800db0a:	bfc8      	it	gt
 800db0c:	f8a9 b004 	strhgt.w	fp, [r9, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800db10:	b912      	cbnz	r2, 800db18 <find_track_end+0x110>
 800db12:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 800db16:	9302      	str	r3, [sp, #8]
 800db18:	9b02      	ldr	r3, [sp, #8]
 800db1a:	f8a9 3002 	strh.w	r3, [r9, #2]
    if(item && item_id == item_start_id) {
 800db1e:	b1dc      	cbz	r4, 800db58 <find_track_end+0x150>
 800db20:	9a05      	ldr	r2, [sp, #20]
 800db22:	42ba      	cmp	r2, r7
 800db24:	d118      	bne.n	800db58 <find_track_end+0x150>
        item = cont->spec_attr->children[item_id];
 800db26:	4630      	mov	r0, r6
 800db28:	f850 2f08 	ldr.w	r2, [r0, #8]!
        get_next_item(cont, f->rev, &item_id);
 800db2c:	78e9      	ldrb	r1, [r5, #3]
        item = cont->spec_attr->children[item_id];
 800db2e:	6812      	ldr	r2, [r2, #0]
        get_next_item(cont, f->rev, &item_id);
 800db30:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800db34:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800db38:	aa05      	add	r2, sp, #20
 800db3a:	f7ff ff50 	bl	800d9de <get_next_item.isra.0>
        if(item) {
 800db3e:	b15c      	cbz	r4, 800db58 <find_track_end+0x150>
            t->track_cross_size = get_cross_size(item);
 800db40:	4620      	mov	r0, r4
 800db42:	47d0      	blx	sl
            t->track_main_size = get_main_size(item);
 800db44:	9b01      	ldr	r3, [sp, #4]
            t->track_cross_size = get_cross_size(item);
 800db46:	f8a9 0000 	strh.w	r0, [r9]
            t->track_main_size = get_main_size(item);
 800db4a:	4620      	mov	r0, r4
 800db4c:	4798      	blx	r3
            t->item_cnt = 1;
 800db4e:	2201      	movs	r2, #1
            t->track_main_size = get_main_size(item);
 800db50:	f8a9 0002 	strh.w	r0, [r9, #2]
            t->item_cnt = 1;
 800db54:	f8c9 2008 	str.w	r2, [r9, #8]
}
 800db58:	9805      	ldr	r0, [sp, #20]
 800db5a:	b007      	add	sp, #28
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(t->grow_dsc) {
 800db60:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800db64:	b149      	cbz	r1, 800db7a <find_track_end+0x172>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800db66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db6a:	435a      	muls	r2, r3
 800db6c:	3a14      	subs	r2, #20
 800db6e:	f002 f957 	bl	800fe20 <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 800db72:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800db76:	f002 f925 	bl	800fdc4 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800db7a:	2114      	movs	r1, #20
 800db7c:	f8d9 2010 	ldr.w	r2, [r9, #16]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800db80:	4620      	mov	r0, r4
 800db82:	fb01 8202 	mla	r2, r1, r2, r8
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 800db86:	78e9      	ldrb	r1, [r5, #3]
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800db88:	f842 4c14 	str.w	r4, [r2, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 800db8c:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800db90:	bf1a      	itte	ne
 800db92:	f241 0202 	movwne	r2, #4098	; 0x1002
 800db96:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800db98:	f241 0205 	movweq	r2, #4101	; 0x1005
 800db9c:	f7f7 fbf4 	bl	8005388 <lv_obj_get_style_prop>
 800dba0:	2114      	movs	r1, #20
 800dba2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    return (lv_coord_t)v.num;
 800dba6:	b200      	sxth	r0, r0
 800dba8:	fb01 8202 	mla	r2, r1, r2, r8
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 800dbac:	78e9      	ldrb	r1, [r5, #3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 800dbae:	f822 0c10 	strh.w	r0, [r2, #-16]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 800dbb2:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800dbb6:	bf1a      	itte	ne
 800dbb8:	f241 0203 	movwne	r2, #4099	; 0x1003
 800dbbc:	2100      	movne	r1, #0
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800dbbe:	f241 0206 	movweq	r2, #4102	; 0x1006
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f7f7 fbe0 	bl	8005388 <lv_obj_get_style_prop>
 800dbc8:	2114      	movs	r1, #20
 800dbca:	f8d9 2010 	ldr.w	r2, [r9, #16]
    return (lv_coord_t)v.num;
 800dbce:	b200      	sxth	r0, r0
 800dbd0:	fb01 8202 	mla	r2, r1, r2, r8
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800dbd4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 800dbd8:	f822 0c0e 	strh.w	r0, [r2, #-14]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800dbdc:	f89d 000c 	ldrb.w	r0, [sp, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800dbe0:	f36f 0100 	bfc	r1, #0, #1
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800dbe4:	f842 0c08 	str.w	r0, [r2, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800dbe8:	f802 1c04 	strb.w	r1, [r2, #-4]
                    t->grow_dsc = new_dsc;
 800dbec:	f8c9 800c 	str.w	r8, [r9, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	47d0      	blx	sl
 800dbf4:	f9b9 2000 	ldrsh.w	r2, [r9]
 800dbf8:	4290      	cmp	r0, r2
 800dbfa:	dd02      	ble.n	800dc02 <find_track_end+0x1fa>
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	47d0      	blx	sl
 800dc00:	4602      	mov	r2, r0
 800dc02:	f8a9 2000 	strh.w	r2, [r9]
            t->item_cnt++;
 800dc06:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800dc0a:	3201      	adds	r2, #1
 800dc0c:	f8c9 2008 	str.w	r2, [r9, #8]
        item_id += f->rev ? -1 : +1;
 800dc10:	78ea      	ldrb	r2, [r5, #3]
 800dc12:	f012 0f04 	tst.w	r2, #4
 800dc16:	bf14      	ite	ne
 800dc18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800dc1c:	2101      	moveq	r1, #1
 800dc1e:	9a05      	ldr	r2, [sp, #20]
 800dc20:	4411      	add	r1, r2
        if(item_id < 0) break;
 800dc22:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800dc24:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800dc26:	f6bf af2f 	bge.w	800da88 <find_track_end+0x80>
 800dc2a:	e766      	b.n	800dafa <find_track_end+0xf2>
                lv_coord_t item_size = get_main_size(item);
 800dc2c:	9b01      	ldr	r3, [sp, #4]
 800dc2e:	4620      	mov	r0, r4
 800dc30:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800dc32:	78ea      	ldrb	r2, [r5, #3]
 800dc34:	0793      	lsls	r3, r2, #30
 800dc36:	d506      	bpl.n	800dc46 <find_track_end+0x23e>
 800dc38:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	4402      	add	r2, r0
 800dc40:	429a      	cmp	r2, r3
 800dc42:	f73f af5a 	bgt.w	800dafa <find_track_end+0xf2>
                t->track_fix_main_size += item_size + item_gap;
 800dc46:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800dc4a:	445a      	add	r2, fp
 800dc4c:	4410      	add	r0, r2
 800dc4e:	f8a9 0004 	strh.w	r0, [r9, #4]
 800dc52:	e7cd      	b.n	800dbf0 <find_track_end+0x1e8>
 800dc54:	080034eb 	.word	0x080034eb
 800dc58:	080034f7 	.word	0x080034f7
 800dc5c:	00030001 	.word	0x00030001
 800dc60:	200046ca 	.word	0x200046ca

0800dc64 <flex_update>:
{
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800dc68:	4b9f      	ldr	r3, [pc, #636]	; (800dee8 <flex_update+0x284>)
 800dc6a:	b0a1      	sub	sp, #132	; 0x84
 800dc6c:	881a      	ldrh	r2, [r3, #0]
 800dc6e:	2100      	movs	r1, #0
 800dc70:	4604      	mov	r4, r0
 800dc72:	f7f7 fb89 	bl	8005388 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800dc76:	43c3      	mvns	r3, r0
 800dc78:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800dc84:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
 800dc88:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800dc8c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800dc90:	f022 0207 	bic.w	r2, r2, #7
 800dc94:	4313      	orrs	r3, r2
 800dc96:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800dc9a:	4b94      	ldr	r3, [pc, #592]	; (800deec <flex_update+0x288>)
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	881a      	ldrh	r2, [r3, #0]
 800dca0:	4620      	mov	r0, r4
 800dca2:	f7f7 fb71 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800dca6:	4b92      	ldr	r3, [pc, #584]	; (800def0 <flex_update+0x28c>)
 800dca8:	2100      	movs	r1, #0
 800dcaa:	881a      	ldrh	r2, [r3, #0]
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800dcac:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7f7 fb69 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800dcb6:	4b8f      	ldr	r3, [pc, #572]	; (800def4 <flex_update+0x290>)
 800dcb8:	2100      	movs	r1, #0
 800dcba:	881a      	ldrh	r2, [r3, #0]
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800dcbc:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f7f7 fb61 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800dcc6:	f241 426a 	movw	r2, #5226	; 0x146a
 800dcca:	2100      	movs	r1, #0
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800dccc:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f7f7 fb59 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800dcd6:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
    return (lv_base_dir_t)v.num;
 800dcda:	b2c3      	uxtb	r3, r0
 800dcdc:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800dce0:	bf0e      	itee	eq
 800dce2:	f641 0215 	movweq	r2, #6165	; 0x1815
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800dce6:	f641 0214 	movwne	r2, #6164	; 0x1814
 800dcea:	2100      	movne	r1, #0
 800dcec:	4620      	mov	r0, r4
    return (lv_base_dir_t)v.num;
 800dcee:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800dcf0:	f7f7 fb4a 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 800dcf4:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
    return (lv_coord_t)v.num;
 800dcf8:	b203      	sxth	r3, r0
 800dcfa:	f011 0101 	ands.w	r1, r1, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800dcfe:	bf1a      	itte	ne
 800dd00:	f641 0215 	movwne	r2, #6165	; 0x1815
 800dd04:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800dd06:	f641 0214 	movweq	r2, #6164	; 0x1814
 800dd0a:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800dd0c:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800dd0e:	f7f7 fb3b 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800dd12:	b203      	sxth	r3, r0
 800dd14:	9303      	str	r3, [sp, #12]
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800dd16:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	07de      	lsls	r6, r3, #31
 800dd1e:	d559      	bpl.n	800ddd4 <flex_update+0x170>
 800dd20:	f7f5 fbef 	bl	8003502 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800dd24:	f241 0232 	movw	r2, #4146	; 0x1032
 800dd28:	2100      	movs	r1, #0
 800dd2a:	9006      	str	r0, [sp, #24]
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f7f7 fb2b 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800dd32:	f641 0210 	movw	r2, #6160	; 0x1810
 800dd36:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800dd38:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800dd3a:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800dd3c:	8ae6      	ldrh	r6, [r4, #22]
 800dd3e:	f7f7 fb23 	bl	8005388 <lv_obj_get_style_prop>
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 800dd42:	b2ad      	uxth	r5, r5
 800dd44:	4428      	add	r0, r5
 800dd46:	4406      	add	r6, r0
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f7f6 fab6 	bl	80042ba <lv_obj_get_scroll_y>
 800dd4e:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800dd50:	f641 0212 	movw	r2, #6162	; 0x1812
 800dd54:	2100      	movs	r1, #0
 800dd56:	1a36      	subs	r6, r6, r0
 800dd58:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 800dd5a:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800dd5e:	8aa6      	ldrh	r6, [r4, #20]
 800dd60:	f7f7 fb12 	bl	8005388 <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800dd64:	4405      	add	r5, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7f6 fa95 	bl	8004296 <lv_obj_get_scroll_x>
 800dd6c:	442e      	add	r6, r5
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800dd6e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800dd72:	b2b6      	uxth	r6, r6
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800dd74:	07dd      	lsls	r5, r3, #31
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800dd76:	f241 0201 	movw	r2, #4097	; 0x1001
 800dd7a:	f04f 0100 	mov.w	r1, #0
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 800dd7e:	eba6 0600 	sub.w	r6, r6, r0
 800dd82:	4620      	mov	r0, r4
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800dd84:	bf54      	ite	pl
 800dd86:	ad14      	addpl	r5, sp, #80	; 0x50
 800dd88:	f10d 054e 	addmi.w	r5, sp, #78	; 0x4e
    lv_flex_align_t track_cross_place = f.track_place;
 800dd8c:	f89d 705a 	ldrb.w	r7, [sp, #90]	; 0x5a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 800dd90:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
 800dd94:	f7f7 faf8 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800dd98:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800dd9c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800dda2:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800dda4:	f7f7 faf0 	bl	8005388 <lv_obj_get_style_prop>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800dda8:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
    return (lv_coord_t)v.num;
 800ddac:	b203      	sxth	r3, r0
 800ddae:	f012 0f01 	tst.w	r2, #1
 800ddb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ddb4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800ddb8:	d00f      	beq.n	800ddda <flex_update+0x176>
 800ddba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ddbc:	4299      	cmp	r1, r3
 800ddbe:	d103      	bne.n	800ddc8 <flex_update+0x164>
 800ddc0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800ddc4:	0798      	lsls	r0, r3, #30
 800ddc6:	d545      	bpl.n	800de54 <flex_update+0x1f0>
    lv_coord_t gap = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800ddce:	b9a7      	cbnz	r7, 800ddfa <flex_update+0x196>
    lv_coord_t total_track_cross_size = 0;
 800ddd0:	463e      	mov	r6, r7
 800ddd2:	e042      	b.n	800de5a <flex_update+0x1f6>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800ddd4:	f7f5 fbab 	bl	800352e <lv_obj_get_content_height>
 800ddd8:	e7a4      	b.n	800dd24 <flex_update+0xc0>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800ddda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dddc:	4299      	cmp	r1, r3
 800ddde:	d104      	bne.n	800ddea <flex_update+0x186>
 800dde0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800dde4:	0759      	lsls	r1, r3, #29
 800dde6:	f140 82a9 	bpl.w	800e33c <flex_update+0x6d8>
    if(rtl && !f.row) {
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d1eb      	bne.n	800ddc8 <flex_update+0x164>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800ddf0:	bb77      	cbnz	r7, 800de50 <flex_update+0x1ec>
    lv_coord_t gap = 0;
 800ddf2:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800ddf4:	2701      	movs	r7, #1
    lv_coord_t gap = 0;
 800ddf6:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800ddfa:	f04f 0800 	mov.w	r8, #0
 800ddfe:	4646      	mov	r6, r8
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	f012 0204 	ands.w	r2, r2, #4
 800de06:	6858      	ldr	r0, [r3, #4]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800de08:	f10d 0968 	add.w	r9, sp, #104	; 0x68
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800de0c:	bf18      	it	ne
 800de0e:	f100 32ff 	addne.w	r2, r0, #4294967295	; 0xffffffff
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	4293      	cmp	r3, r2
 800de18:	dd01      	ble.n	800de1e <flex_update+0x1ba>
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	da47      	bge.n	800deae <flex_update+0x24a>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800de1e:	f1b8 0f00 	cmp.w	r8, #0
 800de22:	d002      	beq.n	800de2a <flex_update+0x1c6>
 800de24:	9b05      	ldr	r3, [sp, #20]
 800de26:	1af6      	subs	r6, r6, r3
 800de28:	b236      	sxth	r6, r6
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800de2a:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800de2e:	4620      	mov	r0, r4
 800de30:	07db      	lsls	r3, r3, #31
 800de32:	d555      	bpl.n	800dee0 <flex_update+0x27c>
 800de34:	f7f5 fb7b 	bl	800352e <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800de38:	f10d 0352 	add.w	r3, sp, #82	; 0x52
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800de3c:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800de3e:	e9cd 5300 	strd	r5, r3, [sp]
 800de42:	4632      	mov	r2, r6
 800de44:	4638      	mov	r0, r7
 800de46:	fa0f f388 	sxth.w	r3, r8
 800de4a:	f7ff fd84 	bl	800d956 <place_content>
 800de4e:	e004      	b.n	800de5a <flex_update+0x1f6>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800de50:	2f01      	cmp	r7, #1
 800de52:	d1b9      	bne.n	800ddc8 <flex_update+0x164>
    lv_coord_t gap = 0;
 800de54:	2600      	movs	r6, #0
 800de56:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
    track_first_item =  f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800de5a:	68a2      	ldr	r2, [r4, #8]
 800de5c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800de60:	6852      	ldr	r2, [r2, #4]
 800de62:	f013 0704 	ands.w	r7, r3, #4
 800de66:	bf18      	it	ne
 800de68:	f102 37ff 	addne.w	r7, r2, #4294967295	; 0xffffffff
    if(rtl && !f.row) {
 800de6c:	9a04      	ldr	r2, [sp, #16]
 800de6e:	2a01      	cmp	r2, #1
 800de70:	d104      	bne.n	800de7c <flex_update+0x218>
 800de72:	07d9      	lsls	r1, r3, #31
 800de74:	d402      	bmi.n	800de7c <flex_update+0x218>
        *cross_pos += total_track_cross_size;
 800de76:	882b      	ldrh	r3, [r5, #0]
 800de78:	441e      	add	r6, r3
 800de7a:	802e      	strh	r6, [r5, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800de7c:	68a3      	ldr	r3, [r4, #8]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	42bb      	cmp	r3, r7
 800de82:	dd01      	ble.n	800de88 <flex_update+0x224>
 800de84:	2f00      	cmp	r7, #0
 800de86:	da37      	bge.n	800def8 <flex_update+0x294>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800de88:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800de8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de8e:	429a      	cmp	r2, r3
 800de90:	d002      	beq.n	800de98 <flex_update+0x234>
 800de92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de94:	429a      	cmp	r2, r3
 800de96:	d102      	bne.n	800de9e <flex_update+0x23a>
        lv_obj_refr_size(cont);
 800de98:	4620      	mov	r0, r4
 800de9a:	f7f5 fe8d 	bl	8003bb8 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800de9e:	2200      	movs	r2, #0
 800dea0:	212b      	movs	r1, #43	; 0x2b
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7f3 fedc 	bl	8001c60 <lv_event_send>
}
 800dea8:	b021      	add	sp, #132	; 0x84
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            t.grow_dsc_calc = 0;
 800deae:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800deb2:	a916      	add	r1, sp, #88	; 0x58
            t.grow_dsc_calc = 0;
 800deb4:	f36f 0300 	bfc	r3, #0, #1
 800deb8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	4620      	mov	r0, r4
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	f8cd 9004 	str.w	r9, [sp, #4]
 800dec6:	9b06      	ldr	r3, [sp, #24]
 800dec8:	f7ff fd9e 	bl	800da08 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800decc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800ded0:	9905      	ldr	r1, [sp, #20]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800ded2:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800ded4:	440b      	add	r3, r1
 800ded6:	441e      	add	r6, r3
 800ded8:	b236      	sxth	r6, r6
            track_cnt++;
 800deda:	f108 0801 	add.w	r8, r8, #1
            track_first_item = next_track_first_item;
 800dede:	e798      	b.n	800de12 <flex_update+0x1ae>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800dee0:	f7f5 fb0f 	bl	8003502 <lv_obj_get_content_width>
 800dee4:	e7a8      	b.n	800de38 <flex_update+0x1d4>
 800dee6:	bf00      	nop
 800dee8:	200046c8 	.word	0x200046c8
 800deec:	200046cc 	.word	0x200046cc
 800def0:	200046c4 	.word	0x200046c4
 800def4:	200046c6 	.word	0x200046c6
        t.grow_dsc_calc = 1;
 800def8:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800defc:	463a      	mov	r2, r7
        t.grow_dsc_calc = 1;
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800df06:	ab1a      	add	r3, sp, #104	; 0x68
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	4620      	mov	r0, r4
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	a916      	add	r1, sp, #88	; 0x58
 800df12:	9b06      	ldr	r3, [sp, #24]
 800df14:	f7ff fd78 	bl	800da08 <find_track_end>
        if(rtl && !f.row) {
 800df18:	9b04      	ldr	r3, [sp, #16]
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800df1a:	9009      	str	r0, [sp, #36]	; 0x24
        if(rtl && !f.row) {
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800df22:	d106      	bne.n	800df32 <flex_update+0x2ce>
 800df24:	07da      	lsls	r2, r3, #31
            *cross_pos -= t.track_cross_size;
 800df26:	bf5f      	itttt	pl
 800df28:	882a      	ldrhpl	r2, [r5, #0]
 800df2a:	f8bd 1068 	ldrhpl.w	r1, [sp, #104]	; 0x68
 800df2e:	1a52      	subpl	r2, r2, r1
 800df30:	802a      	strhpl	r2, [r5, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800df32:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800df36:	f003 0301 	and.w	r3, r3, #1
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800df3a:	920d      	str	r2, [sp, #52]	; 0x34
 800df3c:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800df40:	2b00      	cmp	r3, #0
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800df42:	920e      	str	r2, [sp, #56]	; 0x38
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800df44:	4a65      	ldr	r2, [pc, #404]	; (800e0dc <flex_update+0x478>)
 800df46:	4b66      	ldr	r3, [pc, #408]	; (800e0e0 <flex_update+0x47c>)
 800df48:	bf08      	it	eq
 800df4a:	4613      	moveq	r3, r2
 800df4c:	4a65      	ldr	r2, [pc, #404]	; (800e0e4 <flex_update+0x480>)
 800df4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df50:	4b65      	ldr	r3, [pc, #404]	; (800e0e8 <flex_update+0x484>)
 800df52:	bf12      	itee	ne
 800df54:	4611      	movne	r1, r2
 800df56:	4619      	moveq	r1, r3
 800df58:	4613      	moveq	r3, r2
 800df5a:	f04f 0e14 	mov.w	lr, #20
 800df5e:	9108      	str	r1, [sp, #32]
 800df60:	930c      	str	r3, [sp, #48]	; 0x30
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800df62:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 800df66:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800df6a:	9717      	str	r7, [sp, #92]	; 0x5c
 800df6c:	1ac9      	subs	r1, r1, r3
 800df6e:	e9dd a31d 	ldrd	sl, r3, [sp, #116]	; 0x74
 800df72:	fb0e ae03 	mla	lr, lr, r3, sl
 800df76:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 800df78:	4650      	mov	r0, sl
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800df7a:	460f      	mov	r7, r1
        lv_coord_t grow_value_sum = 0;
 800df7c:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800df80:	4586      	cmp	lr, r0
 800df82:	d152      	bne.n	800e02a <flex_update+0x3c6>
 800df84:	4653      	mov	r3, sl
        grow_reiterate = false;
 800df86:	2600      	movs	r6, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800df88:	459e      	cmp	lr, r3
 800df8a:	d15d      	bne.n	800e048 <flex_update+0x3e4>
    while(grow_reiterate) {
 800df8c:	2e00      	cmp	r6, #0
 800df8e:	d1f3      	bne.n	800df78 <flex_update+0x314>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800df90:	f241 426a 	movw	r2, #5226	; 0x146a
 800df94:	4631      	mov	r1, r6
 800df96:	4620      	mov	r0, r4
 800df98:	f7f7 f9f6 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800df9c:	b2c3      	uxtb	r3, r0
 800df9e:	9307      	str	r3, [sp, #28]
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800dfa0:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	ab15      	add	r3, sp, #84	; 0x54
 800dfa8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	9906      	ldr	r1, [sp, #24]
 800dfb0:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800dfb4:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
    lv_coord_t main_pos = 0;
 800dfb8:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    lv_coord_t place_gap = 0;
 800dfbc:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800dfc0:	f7ff fcc9 	bl	800d956 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800dfc4:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800dfc8:	07da      	lsls	r2, r3, #31
 800dfca:	d50a      	bpl.n	800dfe2 <flex_update+0x37e>
 800dfcc:	9b07      	ldr	r3, [sp, #28]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d107      	bne.n	800dfe2 <flex_update+0x37e>
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7f5 fa95 	bl	8003502 <lv_obj_get_content_width>
 800dfd8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800dfdc:	4418      	add	r0, r3
 800dfde:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800dfe6:	f7f7 ffa6 	bl	8005f36 <lv_obj_get_child>
 800dfea:	4606      	mov	r6, r0
    while(item && item_first_id != item_last_id) {
 800dfec:	f104 0a08 	add.w	sl, r4, #8
 800dff0:	b11e      	cbz	r6, 800dffa <flex_update+0x396>
 800dff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d14e      	bne.n	800e098 <flex_update+0x434>
        lv_mem_buf_release(t.grow_dsc);
 800dffa:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dffc:	f001 fee2 	bl	800fdc4 <lv_mem_buf_release>
        if(rtl && !f.row) {
 800e000:	9a04      	ldr	r2, [sp, #16]
 800e002:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800e006:	2a01      	cmp	r2, #1
 800e008:	f040 818f 	bne.w	800e32a <flex_update+0x6c6>
 800e00c:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
 800e010:	f9b5 2000 	ldrsh.w	r2, [r5]
 800e014:	07c0      	lsls	r0, r0, #31
 800e016:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 800e01a:	f100 8186 	bmi.w	800e32a <flex_update+0x6c6>
            *cross_pos -= gap + track_gap;
 800e01e:	440b      	add	r3, r1
 800e020:	1ad3      	subs	r3, r2, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800e022:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800e024:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e026:	802b      	strh	r3, [r5, #0]
 800e028:	e728      	b.n	800de7c <flex_update+0x218>
            if(t->grow_dsc[i].clamped == 0) {
 800e02a:	7c03      	ldrb	r3, [r0, #16]
 800e02c:	3014      	adds	r0, #20
 800e02e:	07de      	lsls	r6, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800e030:	bf55      	itete	pl
 800e032:	f850 3c08 	ldrpl.w	r3, [r0, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800e036:	f830 2c0c 	ldrhmi.w	r2, [r0, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800e03a:	449c      	addpl	ip, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800e03c:	1abf      	submi	r7, r7, r2
                grow_value_sum += t->grow_dsc[i].grow_value;
 800e03e:	bf54      	ite	pl
 800e040:	fa0f fc8c 	sxthpl.w	ip, ip
                grow_max_size -= t->grow_dsc[i].final_size;
 800e044:	b23f      	sxthmi	r7, r7
        for(i = 0; i < t->grow_item_cnt; i++) {
 800e046:	e79b      	b.n	800df80 <flex_update+0x31c>
            if(t->grow_dsc[i].clamped == 0) {
 800e048:	f893 9010 	ldrb.w	r9, [r3, #16]
 800e04c:	f019 0f01 	tst.w	r9, #1
 800e050:	d120      	bne.n	800e094 <flex_update+0x430>
                grow_unit = grow_max_size / grow_value_sum;
 800e052:	fb97 f0fc 	sdiv	r0, r7, ip
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800e056:	f8b3 800c 	ldrh.w	r8, [r3, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800e05a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800e05e:	fb00 f008 	mul.w	r0, r0, r8
 800e062:	b200      	sxth	r0, r0
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800e064:	4282      	cmp	r2, r0
 800e066:	bfa8      	it	ge
 800e068:	4602      	movge	r2, r0
 800e06a:	f9b3 b004 	ldrsh.w	fp, [r3, #4]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800e06e:	ebac 0c08 	sub.w	ip, ip, r8
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800e072:	455a      	cmp	r2, fp
 800e074:	bfb8      	it	lt
 800e076:	465a      	movlt	r2, fp
                if(size_clamp != size) {
 800e078:	4290      	cmp	r0, r2
                    grow_reiterate = true;
 800e07a:	bf1c      	itt	ne
 800e07c:	2601      	movne	r6, #1
                    t->grow_dsc[i].clamped = 1;
 800e07e:	f049 0901 	orrne.w	r9, r9, #1
                t->grow_dsc[i].final_size = size_clamp;
 800e082:	811a      	strh	r2, [r3, #8]
                grow_max_size  -= t->grow_dsc[i].final_size;
 800e084:	eba7 0202 	sub.w	r2, r7, r2
                    t->grow_dsc[i].clamped = 1;
 800e088:	bf18      	it	ne
 800e08a:	f883 9010 	strbne.w	r9, [r3, #16]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800e08e:	fa0f fc8c 	sxth.w	ip, ip
                grow_max_size  -= t->grow_dsc[i].final_size;
 800e092:	b217      	sxth	r7, r2
        for(i = 0; i < t->grow_item_cnt; i++) {
 800e094:	3314      	adds	r3, #20
 800e096:	e777      	b.n	800df88 <flex_update+0x324>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800e098:	4630      	mov	r0, r6
 800e09a:	4914      	ldr	r1, [pc, #80]	; (800e0ec <flex_update+0x488>)
 800e09c:	f7f4 fbc7 	bl	800282e <lv_obj_has_flag_any>
 800e0a0:	4607      	mov	r7, r0
 800e0a2:	b148      	cbz	r0, 800e0b8 <flex_update+0x454>
        item = get_next_item(cont, f->rev, &item_first_id);
 800e0a4:	f89d 105b 	ldrb.w	r1, [sp, #91]	; 0x5b
 800e0a8:	4650      	mov	r0, sl
 800e0aa:	aa17      	add	r2, sp, #92	; 0x5c
 800e0ac:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800e0b0:	f7ff fc95 	bl	800d9de <get_next_item.isra.0>
 800e0b4:	4606      	mov	r6, r0
 800e0b6:	e79b      	b.n	800dff0 <flex_update+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800e0b8:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <flex_update+0x48c>)
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	881a      	ldrh	r2, [r3, #0]
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7f7 f962 	bl	8005388 <lv_obj_get_style_prop>
        if(grow_size) {
 800e0c4:	f010 0fff 	tst.w	r0, #255	; 0xff
 800e0c8:	f000 8110 	beq.w	800e2ec <flex_update+0x688>
 800e0cc:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
            for(i = 0; i < t->grow_item_cnt; i++) {
 800e0d0:	4639      	mov	r1, r7
 800e0d2:	4291      	cmp	r1, r2
 800e0d4:	d10e      	bne.n	800e0f4 <flex_update+0x490>
            lv_coord_t s = 0;
 800e0d6:	2700      	movs	r7, #0
 800e0d8:	e014      	b.n	800e104 <flex_update+0x4a0>
 800e0da:	bf00      	nop
 800e0dc:	0800f685 	.word	0x0800f685
 800e0e0:	0800f67b 	.word	0x0800f67b
 800e0e4:	0800d93f 	.word	0x0800d93f
 800e0e8:	0800d94b 	.word	0x0800d94b
 800e0ec:	00030001 	.word	0x00030001
 800e0f0:	200046ca 	.word	0x200046ca
                if(t->grow_dsc[i].item == item) {
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f853 7b14 	ldr.w	r7, [r3], #20
 800e0fa:	42be      	cmp	r6, r7
 800e0fc:	f040 80f4 	bne.w	800e2e8 <flex_update+0x684>
                    s = t->grow_dsc[i].final_size;
 800e100:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
            if(f->row) item->w_layout = 1;
 800e104:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
            if(s != area_get_main_size(&item->coords)) {
 800e108:	f106 0814 	add.w	r8, r6, #20
            if(f->row) item->w_layout = 1;
 800e10c:	f013 0f01 	tst.w	r3, #1
 800e110:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 800e114:	4640      	mov	r0, r8
            if(f->row) item->w_layout = 1;
 800e116:	bf14      	ite	ne
 800e118:	f043 0304 	orrne.w	r3, r3, #4
            else item->h_layout = 1;
 800e11c:	f043 0302 	orreq.w	r3, r3, #2
 800e120:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 800e124:	9b08      	ldr	r3, [sp, #32]
 800e126:	4798      	blx	r3
 800e128:	42b8      	cmp	r0, r7
 800e12a:	d021      	beq.n	800e170 <flex_update+0x50c>
                lv_obj_invalidate(item);
 800e12c:	4630      	mov	r0, r6
 800e12e:	f7f5 fb26 	bl	800377e <lv_obj_invalidate>
    dest->x1 = src->x1;
 800e132:	8ab3      	ldrh	r3, [r6, #20]
                area_set_main_size(&item->coords, s);
 800e134:	4639      	mov	r1, r7
 800e136:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    dest->y1 = src->y1;
 800e13a:	8af3      	ldrh	r3, [r6, #22]
 800e13c:	4640      	mov	r0, r8
 800e13e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    dest->x2 = src->x2;
 800e142:	8b33      	ldrh	r3, [r6, #24]
 800e144:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    dest->y2 = src->y2;
 800e148:	8b73      	ldrh	r3, [r6, #26]
 800e14a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
 800e14e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e150:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800e152:	2129      	movs	r1, #41	; 0x29
 800e154:	aa18      	add	r2, sp, #96	; 0x60
 800e156:	4630      	mov	r0, r6
 800e158:	f7f3 fd82 	bl	8001c60 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800e15c:	4630      	mov	r0, r6
 800e15e:	f7f7 fee7 	bl	8005f30 <lv_obj_get_parent>
 800e162:	4632      	mov	r2, r6
 800e164:	2122      	movs	r1, #34	; 0x22
 800e166:	f7f3 fd7b 	bl	8001c60 <lv_event_send>
                lv_obj_invalidate(item);
 800e16a:	4630      	mov	r0, r6
 800e16c:	f7f5 fb07 	bl	800377e <lv_obj_invalidate>
        switch(f->cross_place) {
 800e170:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800e174:	2b01      	cmp	r3, #1
 800e176:	f000 80c0 	beq.w	800e2fa <flex_update+0x696>
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	f040 80c6 	bne.w	800e30c <flex_update+0x6a8>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800e180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e182:	f106 0014 	add.w	r0, r6, #20
 800e186:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 800e18a:	4798      	blx	r3
 800e18c:	3701      	adds	r7, #1
 800e18e:	f027 0701 	bic.w	r7, r7, #1
 800e192:	1a3f      	subs	r7, r7, r0
 800e194:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800e198:	f347 074f 	sbfx	r7, r7, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800e19c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e1a0:	07db      	lsls	r3, r3, #31
 800e1a2:	d50b      	bpl.n	800e1bc <flex_update+0x558>
 800e1a4:	9b07      	ldr	r3, [sp, #28]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d108      	bne.n	800e1bc <flex_update+0x558>
 800e1aa:	9b08      	ldr	r3, [sp, #32]
 800e1ac:	f106 0014 	add.w	r0, r6, #20
 800e1b0:	4798      	blx	r3
 800e1b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e1b6:	1a1b      	subs	r3, r3, r0
 800e1b8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800e1bc:	f243 020c 	movw	r2, #12300	; 0x300c
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f7f7 f8e0 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800e1c8:	f243 020d 	movw	r2, #12301	; 0x300d
 800e1cc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800e1ce:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800e1d0:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f7f7 f8d7 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e1da:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800e1dc:	4680      	mov	r8, r0
        lv_coord_t w = lv_obj_get_width(item);
 800e1de:	4630      	mov	r0, r6
    return (lv_coord_t)v.num;
 800e1e0:	9311      	str	r3, [sp, #68]	; 0x44
 800e1e2:	f7f5 f982 	bl	80034ea <lv_obj_get_width>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800e1e6:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
        lv_coord_t w = lv_obj_get_width(item);
 800e1ea:	9010      	str	r0, [sp, #64]	; 0x40
        lv_coord_t h = lv_obj_get_height(item);
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7f5 f982 	bl	80034f6 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800e1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e1f6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800e1fa:	d111      	bne.n	800e220 <flex_update+0x5bc>
 800e1fc:	f42b 41c0 	bic.w	r1, fp, #24576	; 0x6000
 800e200:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800e204:	dc0c      	bgt.n	800e220 <flex_update+0x5bc>
 800e206:	468b      	mov	fp, r1
 800e208:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800e20c:	bfc8      	it	gt
 800e20e:	f5c1 7b7a 	rsbgt	fp, r1, #1000	; 0x3e8
 800e212:	fb0b fb02 	mul.w	fp, fp, r2
 800e216:	2264      	movs	r2, #100	; 0x64
 800e218:	fb9b fbf2 	sdiv	fp, fp, r2
 800e21c:	fa0f fb8b 	sxth.w	fp, fp
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800e220:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800e224:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800e228:	d10f      	bne.n	800e24a <flex_update+0x5e6>
 800e22a:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800e22e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800e232:	dc0a      	bgt.n	800e24a <flex_update+0x5e6>
 800e234:	4613      	mov	r3, r2
 800e236:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800e23a:	bfc8      	it	gt
 800e23c:	f5c2 737a 	rsbgt	r3, r2, #1000	; 0x3e8
 800e240:	4343      	muls	r3, r0
 800e242:	2064      	movs	r0, #100	; 0x64
 800e244:	fb93 f3f0 	sdiv	r3, r3, r0
 800e248:	b21b      	sxth	r3, r3
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800e24a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e24c:	8ab1      	ldrh	r1, [r6, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800e24e:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800e252:	1a51      	subs	r1, r2, r1
 800e254:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800e256:	8af2      	ldrh	r2, [r6, #22]
 800e258:	990e      	ldr	r1, [sp, #56]	; 0x38
        diff_x += f->row ? main_pos : cross_pos;
 800e25a:	f010 0001 	ands.w	r0, r0, #1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800e25e:	eba1 0202 	sub.w	r2, r1, r2
        diff_x += f->row ? main_pos : cross_pos;
 800e262:	bf18      	it	ne
 800e264:	f8bd 1054 	ldrhne.w	r1, [sp, #84]	; 0x54
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800e268:	fa1f fb8b 	uxth.w	fp, fp
        diff_x += f->row ? main_pos : cross_pos;
 800e26c:	bf08      	it	eq
 800e26e:	b2b9      	uxtheq	r1, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800e270:	4413      	add	r3, r2
        diff_x += f->row ? main_pos : cross_pos;
 800e272:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800e274:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 800e276:	fa1f fb8b 	uxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d048      	beq.n	800e310 <flex_update+0x6ac>
 800e27e:	b2bf      	uxth	r7, r7
 800e280:	441f      	add	r7, r3
 800e282:	b2bf      	uxth	r7, r7
        if(diff_x || diff_y) {
 800e284:	ea5b 0307 	orrs.w	r3, fp, r7
 800e288:	d018      	beq.n	800e2bc <flex_update+0x658>
            lv_obj_invalidate(item);
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7f5 fa77 	bl	800377e <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800e290:	8ab3      	ldrh	r3, [r6, #20]
            lv_obj_invalidate(item);
 800e292:	4630      	mov	r0, r6
            item->coords.x1 += diff_x;
 800e294:	445b      	add	r3, fp
 800e296:	82b3      	strh	r3, [r6, #20]
            item->coords.x2 += diff_x;
 800e298:	8b33      	ldrh	r3, [r6, #24]
 800e29a:	445b      	add	r3, fp
 800e29c:	8333      	strh	r3, [r6, #24]
            item->coords.y1 += diff_y;
 800e29e:	8af3      	ldrh	r3, [r6, #22]
 800e2a0:	443b      	add	r3, r7
 800e2a2:	82f3      	strh	r3, [r6, #22]
            item->coords.y2 += diff_y;
 800e2a4:	8b73      	ldrh	r3, [r6, #26]
 800e2a6:	443b      	add	r3, r7
 800e2a8:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(item);
 800e2aa:	f7f5 fa68 	bl	800377e <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, true);
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	b23a      	sxth	r2, r7
 800e2b4:	fa0f f18b 	sxth.w	r1, fp
 800e2b8:	f7f5 f9b7 	bl	800362a <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800e2bc:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800e2c0:	07df      	lsls	r7, r3, #31
 800e2c2:	d502      	bpl.n	800e2ca <flex_update+0x666>
 800e2c4:	9b07      	ldr	r3, [sp, #28]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d025      	beq.n	800e316 <flex_update+0x6b2>
 800e2ca:	9b08      	ldr	r3, [sp, #32]
 800e2cc:	f106 0014 	add.w	r0, r6, #20
 800e2d0:	4798      	blx	r3
 800e2d2:	9b03      	ldr	r3, [sp, #12]
 800e2d4:	4418      	add	r0, r3
 800e2d6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800e2da:	4418      	add	r0, r3
 800e2dc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e2e0:	4418      	add	r0, r3
 800e2e2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 800e2e6:	e6dd      	b.n	800e0a4 <flex_update+0x440>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800e2e8:	3101      	adds	r1, #1
 800e2ea:	e6f2      	b.n	800e0d2 <flex_update+0x46e>
            item->h_layout = 0;
 800e2ec:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800e2f0:	f023 0306 	bic.w	r3, r3, #6
 800e2f4:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 800e2f8:	e73a      	b.n	800e170 <flex_update+0x50c>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800e2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2fc:	f106 0014 	add.w	r0, r6, #20
 800e300:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 800e304:	4798      	blx	r3
 800e306:	1a3f      	subs	r7, r7, r0
 800e308:	b23f      	sxth	r7, r7
                break;
 800e30a:	e747      	b.n	800e19c <flex_update+0x538>
        switch(f->cross_place) {
 800e30c:	2700      	movs	r7, #0
 800e30e:	e745      	b.n	800e19c <flex_update+0x538>
        diff_y += f->row ? cross_pos : main_pos;
 800e310:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800e314:	e7b4      	b.n	800e280 <flex_update+0x61c>
        else main_pos -= item_gap + place_gap;
 800e316:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e31a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800e31e:	1a9b      	subs	r3, r3, r2
 800e320:	9a03      	ldr	r2, [sp, #12]
 800e322:	1a9b      	subs	r3, r3, r2
 800e324:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800e328:	e6bc      	b.n	800e0a4 <flex_update+0x440>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800e32a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800e32e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 800e332:	440a      	add	r2, r1
 800e334:	4413      	add	r3, r2
 800e336:	882a      	ldrh	r2, [r5, #0]
 800e338:	4413      	add	r3, r2
 800e33a:	e672      	b.n	800e022 <flex_update+0x3be>
    if(rtl && !f.row) {
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	f43f ad57 	beq.w	800ddf2 <flex_update+0x18e>
 800e344:	e586      	b.n	800de54 <flex_update+0x1f0>
 800e346:	bf00      	nop

0800e348 <lv_flex_init>:
{
 800e348:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800e34a:	2100      	movs	r1, #0
 800e34c:	480d      	ldr	r0, [pc, #52]	; (800e384 <lv_flex_init+0x3c>)
 800e34e:	f7f5 f893 	bl	8003478 <lv_layout_register>
 800e352:	4b0d      	ldr	r3, [pc, #52]	; (800e388 <lv_flex_init+0x40>)
 800e354:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
 800e356:	f002 fb73 	bl	8010a40 <lv_style_register_prop>
 800e35a:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <lv_flex_init+0x44>)
 800e35c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800e35e:	f002 fb6f 	bl	8010a40 <lv_style_register_prop>
 800e362:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <lv_flex_init+0x48>)
 800e364:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800e368:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800e36a:	f002 fb69 	bl	8010a40 <lv_style_register_prop>
 800e36e:	4b09      	ldr	r3, [pc, #36]	; (800e394 <lv_flex_init+0x4c>)
 800e370:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800e374:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800e376:	f002 fb63 	bl	8010a40 <lv_style_register_prop>
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <lv_flex_init+0x50>)
 800e37c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800e380:	8018      	strh	r0, [r3, #0]
}
 800e382:	bd08      	pop	{r3, pc}
 800e384:	0800dc65 	.word	0x0800dc65
 800e388:	200046d0 	.word	0x200046d0
 800e38c:	200046c8 	.word	0x200046c8
 800e390:	200046cc 	.word	0x200046cc
 800e394:	200046c4 	.word	0x200046c4
 800e398:	200046c6 	.word	0x200046c6

0800e39c <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800e39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3a0:	4694      	mov	ip, r2
 800e3a2:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e3aa:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800e3ae:	b111      	cbz	r1, 800e3b6 <grid_align+0x1a>
        pos_array[0] = 0;
 800e3b0:	2100      	movs	r1, #0
        switch(align) {
            case LV_GRID_ALIGN_START:
                pos_array[0] = 0;
                break;
            case LV_GRID_ALIGN_CENTER:
                pos_array[0] = (cont_size - grid_size) / 2;
 800e3b2:	8021      	strh	r1, [r4, #0]
                break;
 800e3b4:	e024      	b.n	800e400 <grid_align+0x64>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800e3b6:	f1ac 0004 	sub.w	r0, ip, #4
 800e3ba:	b2c0      	uxtb	r0, r0
 800e3bc:	2802      	cmp	r0, #2
 800e3be:	d804      	bhi.n	800e3ca <grid_align+0x2e>
            gap = 0;
 800e3c0:	2e01      	cmp	r6, #1
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	bf08      	it	eq
 800e3c6:	f04f 0c01 	moveq.w	ip, #1
        for(i = 0; i < track_num; i++) {
 800e3ca:	46be      	mov	lr, r7
    lv_coord_t grid_size = 0;
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	eb07 0846 	add.w	r8, r7, r6, lsl #1
 800e3d2:	b299      	uxth	r1, r3
        for(i = 0; i < track_num; i++) {
 800e3d4:	45f0      	cmp	r8, lr
 800e3d6:	b280      	uxth	r0, r0
 800e3d8:	d10a      	bne.n	800e3f0 <grid_align+0x54>
        switch(align) {
 800e3da:	f04f 0e00 	mov.w	lr, #0
 800e3de:	f1bc 0f06 	cmp.w	ip, #6
 800e3e2:	d80d      	bhi.n	800e400 <grid_align+0x64>
 800e3e4:	e8df f00c 	tbb	[pc, ip]
 800e3e8:	0c27200a 	.word	0x0c27200a
 800e3ec:	3742      	.short	0x3742
 800e3ee:	2c          	.byte	0x2c
 800e3ef:	00          	.byte	0x00
            grid_size += size_array[i] + gap;
 800e3f0:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800e3f4:	4408      	add	r0, r1
 800e3f6:	4448      	add	r0, r9
 800e3f8:	b200      	sxth	r0, r0
        for(i = 0; i < track_num; i++) {
 800e3fa:	e7eb      	b.n	800e3d4 <grid_align+0x38>
                pos_array[0] = 0;
 800e3fc:	f8a4 e000 	strh.w	lr, [r4]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800e400:	2100      	movs	r1, #0
 800e402:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800e406:	458c      	cmp	ip, r1
 800e408:	d83a      	bhi.n	800e480 <grid_align+0xe4>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800e40a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e40e:	3b01      	subs	r3, #1
 800e410:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 800e414:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 800e418:	4418      	add	r0, r3
 800e41a:	8823      	ldrh	r3, [r4, #0]
 800e41c:	1ac0      	subs	r0, r0, r3
 800e41e:	b200      	sxth	r0, r0

    if(reverse) {
 800e420:	2a00      	cmp	r2, #0
 800e422:	d143      	bne.n	800e4ac <grid_align+0x110>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800e424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        grid_size -= gap;
 800e428:	1a41      	subs	r1, r0, r1
                pos_array[0] = (cont_size - grid_size) / 2;
 800e42a:	b209      	sxth	r1, r1
 800e42c:	1a69      	subs	r1, r5, r1
 800e42e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800e432:	1049      	asrs	r1, r1, #1
 800e434:	e7bd      	b.n	800e3b2 <grid_align+0x16>
                pos_array[0] = cont_size - grid_size;
 800e436:	eb01 0c05 	add.w	ip, r1, r5
 800e43a:	ebac 0100 	sub.w	r1, ip, r0
 800e43e:	e7b8      	b.n	800e3b2 <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800e440:	194b      	adds	r3, r1, r5
 800e442:	1a1b      	subs	r3, r3, r0
 800e444:	1e71      	subs	r1, r6, #1
 800e446:	b21b      	sxth	r3, r3
 800e448:	b209      	sxth	r1, r1
 800e44a:	fb93 f3f1 	sdiv	r3, r3, r1
                pos_array[0] = 0;
 800e44e:	f8a4 e000 	strh.w	lr, [r4]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800e452:	b21b      	sxth	r3, r3
                break;
 800e454:	e7d4      	b.n	800e400 <grid_align+0x64>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800e456:	4429      	add	r1, r5
 800e458:	1a09      	subs	r1, r1, r0
 800e45a:	b233      	sxth	r3, r6
 800e45c:	b209      	sxth	r1, r1
 800e45e:	fb91 f1f3 	sdiv	r1, r1, r3
 800e462:	b20b      	sxth	r3, r1
                pos_array[0] = gap / 2;
 800e464:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 800e468:	4419      	add	r1, r3
 800e46a:	e7e2      	b.n	800e432 <grid_align+0x96>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 800e46c:	194b      	adds	r3, r1, r5
 800e46e:	1a1b      	subs	r3, r3, r0
 800e470:	1c71      	adds	r1, r6, #1
 800e472:	b21b      	sxth	r3, r3
 800e474:	b209      	sxth	r1, r1
 800e476:	fb93 f3f1 	sdiv	r3, r3, r1
 800e47a:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
 800e47c:	8023      	strh	r3, [r4, #0]
                break;
 800e47e:	e7bf      	b.n	800e400 <grid_align+0x64>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 800e480:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 800e484:	f837 e011 	ldrh.w	lr, [r7, r1, lsl #1]
 800e488:	3101      	adds	r1, #1
 800e48a:	4470      	add	r0, lr
 800e48c:	4418      	add	r0, r3
 800e48e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 800e492:	e7b8      	b.n	800e406 <grid_align+0x6a>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800e494:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800e498:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 800e49c:	440a      	add	r2, r1
 800e49e:	1aaa      	subs	r2, r5, r2
 800e4a0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
        for(i = 0; i < track_num; i++) {
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	42b3      	cmp	r3, r6
 800e4a8:	d1f4      	bne.n	800e494 <grid_align+0xf8>
 800e4aa:	e7bb      	b.n	800e424 <grid_align+0x88>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	e7fa      	b.n	800e4a6 <grid_align+0x10a>

0800e4b0 <grid_update>:
{
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800e4b4:	4fce      	ldr	r7, [pc, #824]	; (800e7f0 <grid_update+0x340>)
 800e4b6:	b097      	sub	sp, #92	; 0x5c
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	883a      	ldrh	r2, [r7, #0]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	f7f6 ff63 	bl	8005388 <lv_obj_get_style_prop>
 800e4c2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800e4c4:	4ecb      	ldr	r6, [pc, #812]	; (800e7f4 <grid_update+0x344>)
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	8832      	ldrh	r2, [r6, #0]
 800e4cc:	f7f6 ff5c 	bl	8005388 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 800e4d0:	9704      	str	r7, [sp, #16]
 800e4d2:	2d00      	cmp	r5, #0
 800e4d4:	d069      	beq.n	800e5aa <grid_update+0xfa>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d067      	beq.n	800e5aa <grid_update+0xfa>
    if(lv_obj_get_child(cont, 0) == NULL) {
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7f7 fd2a 	bl	8005f36 <lv_obj_get_child>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d164      	bne.n	800e5b0 <grid_update+0x100>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 800e4e6:	211c      	movs	r1, #28
 800e4e8:	a80f      	add	r0, sp, #60	; 0x3c
 800e4ea:	f001 fe61 	bl	80101b0 <lv_memset_00>
    lv_memset_00(&hint, sizeof(hint));
 800e4ee:	210c      	movs	r1, #12
 800e4f0:	a80c      	add	r0, sp, #48	; 0x30
 800e4f2:	f001 fe5d 	bl	80101b0 <lv_memset_00>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800e4f6:	f241 0232 	movw	r2, #4146	; 0x1032
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7f6 ff43 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800e502:	f641 0212 	movw	r2, #6162	; 0x1812
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800e506:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800e508:	2100      	movs	r1, #0
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7f6 ff3c 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800e510:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800e512:	f641 0210 	movw	r2, #6160	; 0x1810
 800e516:	2100      	movs	r1, #0
 800e518:	182e      	adds	r6, r5, r0
 800e51a:	4620      	mov	r0, r4
 800e51c:	f7f6 ff34 	bl	8005388 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800e520:	4405      	add	r5, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800e522:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800e524:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800e526:	4406      	add	r6, r0
 800e528:	4620      	mov	r0, r4
 800e52a:	f7f5 feb4 	bl	8004296 <lv_obj_get_scroll_x>
 800e52e:	b2b6      	uxth	r6, r6
 800e530:	1a36      	subs	r6, r6, r0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800e532:	8ae0      	ldrh	r0, [r4, #22]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800e534:	b2ad      	uxth	r5, r5
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800e536:	4405      	add	r5, r0
 800e538:	4620      	mov	r0, r4
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800e53a:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800e53e:	f7f5 febc 	bl	80042ba <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800e542:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800e544:	b2ad      	uxth	r5, r5
 800e546:	1a2d      	subs	r5, r5, r0
 800e548:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800e54c:	9304      	str	r3, [sp, #16]
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	9904      	ldr	r1, [sp, #16]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	4291      	cmp	r1, r2
 800e556:	f0c0 821d 	bcc.w	800e994 <grid_update+0x4e4>
    lv_mem_buf_release(calc->x);
 800e55a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e55c:	f001 fc32 	bl	800fdc4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800e560:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e562:	f001 fc2f 	bl	800fdc4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 800e566:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e568:	f001 fc2c 	bl	800fdc4 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 800e56c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e56e:	f001 fc29 	bl	800fdc4 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800e572:	f241 0201 	movw	r2, #4097	; 0x1001
 800e576:	2100      	movs	r1, #0
 800e578:	4620      	mov	r0, r4
 800e57a:	f7f6 ff05 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800e57e:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800e582:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800e584:	2100      	movs	r1, #0
 800e586:	4620      	mov	r0, r4
 800e588:	f7f6 fefe 	bl	8005388 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800e58c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e590:	429d      	cmp	r5, r3
    return (lv_coord_t)v.num;
 800e592:	b200      	sxth	r0, r0
 800e594:	d001      	beq.n	800e59a <grid_update+0xea>
 800e596:	4298      	cmp	r0, r3
 800e598:	d102      	bne.n	800e5a0 <grid_update+0xf0>
        lv_obj_refr_size(cont);
 800e59a:	4620      	mov	r0, r4
 800e59c:	f7f5 fb0c 	bl	8003bb8 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	212b      	movs	r1, #43	; 0x2b
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f7f3 fb5b 	bl	8001c60 <lv_event_send>
}
 800e5aa:	b017      	add	sp, #92	; 0x5c
 800e5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b0:	8832      	ldrh	r2, [r6, #0]
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f7f6 fee7 	bl	8005388 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	4605      	mov	r5, r0
 800e5be:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800e5c2:	f935 1013 	ldrsh.w	r1, [r5, r3, lsl #1]
 800e5c6:	0058      	lsls	r0, r3, #1
 800e5c8:	4291      	cmp	r1, r2
 800e5ca:	f040 8100 	bne.w	800e7ce <grid_update+0x31e>
    c->row_num = count_tracks(row_templ);
 800e5ce:	9314      	str	r3, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800e5d0:	f001 fda0 	bl	8010114 <lv_mem_buf_get>
 800e5d4:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800e5d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 800e5d8:	2600      	movs	r6, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800e5da:	0040      	lsls	r0, r0, #1
 800e5dc:	f001 fd9a 	bl	8010114 <lv_mem_buf_get>
 800e5e0:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 800e5e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5e4:	4296      	cmp	r6, r2
 800e5e6:	f0c0 80f4 	bcc.w	800e7d2 <grid_update+0x322>
    lv_coord_t grid_h = 0;
 800e5ea:	2300      	movs	r3, #0
        if(IS_FR(x)) {
 800e5ec:	f641 7c9a 	movw	ip, #8090	; 0x1f9a
    uint32_t row_fr_cnt = 0;
 800e5f0:	461e      	mov	r6, r3
    for(i = 0; i < c->row_num; i++) {
 800e5f2:	4619      	mov	r1, r3
            c->h[i] = x;
 800e5f4:	9812      	ldr	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 800e5f6:	428a      	cmp	r2, r1
 800e5f8:	fa1f f883 	uxth.w	r8, r3
 800e5fc:	f040 813b 	bne.w	800e876 <grid_update+0x3c6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800e600:	f641 0214 	movw	r2, #6164	; 0x1814
 800e604:	2100      	movs	r1, #0
 800e606:	4620      	mov	r0, r4
 800e608:	f7f6 febe 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e60c:	b207      	sxth	r7, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800e60e:	4620      	mov	r0, r4
 800e610:	f7f4 ff8d 	bl	800352e <lv_obj_get_content_height>
    for(i = 0; i < c->row_num; i++) {
 800e614:	2100      	movs	r1, #0
        if(IS_FR(x)) {
 800e616:	f641 7c9a 	movw	ip, #8090	; 0x1f9a
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800e61a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    lv_coord_t free_h = cont_h - grid_h;
 800e61c:	eba0 0308 	sub.w	r3, r0, r8
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800e620:	1e50      	subs	r0, r2, #1
    lv_coord_t free_h = cont_h - grid_h;
 800e622:	fb00 3717 	mls	r7, r0, r7, r3
            c->h[i] = (free_h * f) / row_fr_cnt;
 800e626:	9812      	ldr	r0, [sp, #72]	; 0x48
    lv_coord_t free_h = cont_h - grid_h;
 800e628:	b23f      	sxth	r7, r7
    if(free_h < 0) free_h = 0;
 800e62a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
    for(i = 0; i < c->row_num; i++) {
 800e62e:	428a      	cmp	r2, r1
 800e630:	f040 8135 	bne.w	800e89e <grid_update+0x3ee>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800e634:	9b04      	ldr	r3, [sp, #16]
 800e636:	2100      	movs	r1, #0
 800e638:	881a      	ldrh	r2, [r3, #0]
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7f6 fea4 	bl	8005388 <lv_obj_get_style_prop>
 800e640:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800e642:	4620      	mov	r0, r4
 800e644:	f7f4 ff5d 	bl	8003502 <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800e648:	2300      	movs	r3, #0
 800e64a:	f641 72ff 	movw	r2, #8191	; 0x1fff
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800e64e:	9004      	str	r0, [sp, #16]
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800e650:	f935 1013 	ldrsh.w	r1, [r5, r3, lsl #1]
 800e654:	0058      	lsls	r0, r3, #1
 800e656:	4291      	cmp	r1, r2
 800e658:	f040 8130 	bne.w	800e8bc <grid_update+0x40c>
    c->col_num = count_tracks(col_templ);
 800e65c:	9313      	str	r3, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800e65e:	f001 fd59 	bl	8010114 <lv_mem_buf_get>
 800e662:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800e664:	9813      	ldr	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 800e666:	2600      	movs	r6, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800e668:	0040      	lsls	r0, r0, #1
 800e66a:	f001 fd53 	bl	8010114 <lv_mem_buf_get>
 800e66e:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 800e670:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e672:	4286      	cmp	r6, r0
 800e674:	f0c0 8124 	bcc.w	800e8c0 <grid_update+0x410>
    lv_coord_t grid_w = 0;
 800e678:	2100      	movs	r1, #0
        if(IS_FR(x)) {
 800e67a:	f641 7e9a 	movw	lr, #8090	; 0x1f9a
    uint32_t col_fr_cnt = 0;
 800e67e:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 800e680:	468c      	mov	ip, r1
            c->w[i] = x;
 800e682:	9a11      	ldr	r2, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 800e684:	4560      	cmp	r0, ip
 800e686:	b28f      	uxth	r7, r1
 800e688:	f040 815f 	bne.w	800e94a <grid_update+0x49a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800e68c:	f641 0215 	movw	r2, #6165	; 0x1815
 800e690:	2100      	movs	r1, #0
 800e692:	4620      	mov	r0, r4
 800e694:	f7f6 fe78 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800e698:	b203      	sxth	r3, r0
    cont_w -= col_gap * (c->col_num - 1);
 800e69a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e69c:	9904      	ldr	r1, [sp, #16]
 800e69e:	1e42      	subs	r2, r0, #1
 800e6a0:	fb02 1313 	mls	r3, r2, r3, r1
    int32_t last_fr_x = 0;
 800e6a4:	2200      	movs	r2, #0
    int32_t last_fr_i = -1;
 800e6a6:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    for(i = 0; i < c->col_num; i++) {
 800e6aa:	4611      	mov	r1, r2
        if(IS_FR(x)) {
 800e6ac:	f641 789a 	movw	r8, #8090	; 0x1f9a
    lv_coord_t free_w = cont_w - grid_w;
 800e6b0:	1bdb      	subs	r3, r3, r7
 800e6b2:	b21b      	sxth	r3, r3
            c->w[i] = (free_w * f) / col_fr_cnt;
 800e6b4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800e6b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 800e6bc:	4288      	cmp	r0, r1
 800e6be:	f040 8158 	bne.w	800e972 <grid_update+0x4c2>
    if(last_fr_i >= 0) {
 800e6c2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e6c6:	d006      	beq.n	800e6d6 <grid_update+0x226>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 800e6c8:	1ab2      	subs	r2, r6, r2
 800e6ca:	435a      	muls	r2, r3
 800e6cc:	fbb2 f2f6 	udiv	r2, r2, r6
 800e6d0:	1a9b      	subs	r3, r3, r2
 800e6d2:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800e6d6:	f641 0215 	movw	r2, #6165	; 0x1815
 800e6da:	2100      	movs	r1, #0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f7f6 fe53 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800e6e2:	f641 0214 	movw	r2, #6164	; 0x1814
 800e6e6:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800e6e8:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7f6 fe4b 	bl	8005388 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800e6f2:	f241 426a 	movw	r2, #5226	; 0x146a
 800e6f6:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800e6f8:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7f6 fe44 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800e700:	fa5f f880 	uxtb.w	r8, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 800e704:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800e708:	f1d3 0800 	rsbs	r8, r3, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800e70c:	f241 0201 	movw	r2, #4097	; 0x1001
 800e710:	f04f 0100 	mov.w	r1, #0
 800e714:	4620      	mov	r0, r4
 800e716:	eb48 0803 	adc.w	r8, r8, r3
 800e71a:	f7f6 fe35 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800e71e:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800e722:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800e724:	2100      	movs	r1, #0
 800e726:	4620      	mov	r0, r4
 800e728:	f7f6 fe2e 	bl	8005388 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800e72c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e730:	429d      	cmp	r5, r3
 800e732:	bf08      	it	eq
 800e734:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
    return (lv_coord_t)v.num;
 800e738:	fa0f f980 	sxth.w	r9, r0
 800e73c:	bf08      	it	eq
 800e73e:	f085 0504 	eoreq.w	r5, r5, #4
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800e742:	4620      	mov	r0, r4
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800e744:	bf0c      	ite	eq
 800e746:	f3c5 0580 	ubfxeq	r5, r5, #2, #1
 800e74a:	2500      	movne	r5, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800e74c:	f7f4 fed9 	bl	8003502 <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 800e750:	4b29      	ldr	r3, [pc, #164]	; (800e7f8 <grid_update+0x348>)
 800e752:	4606      	mov	r6, r0
 800e754:	881a      	ldrh	r2, [r3, #0]
 800e756:	2100      	movs	r1, #0
 800e758:	4620      	mov	r0, r4
 800e75a:	f7f6 fe15 	bl	8005388 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800e75e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e760:	4629      	mov	r1, r5
 800e762:	9302      	str	r3, [sp, #8]
 800e764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e766:	b2c2      	uxtb	r2, r0
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e76c:	4630      	mov	r0, r6
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	f8cd 800c 	str.w	r8, [sp, #12]
 800e774:	4653      	mov	r3, sl
 800e776:	f7ff fe11 	bl	800e39c <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800e77a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e77e:	4599      	cmp	r9, r3
 800e780:	bf08      	it	eq
 800e782:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 800e786:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800e78a:	bf08      	it	eq
 800e78c:	f085 0502 	eoreq.w	r5, r5, #2
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800e790:	4620      	mov	r0, r4
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800e792:	bf14      	ite	ne
 800e794:	2500      	movne	r5, #0
 800e796:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800e79a:	f7f4 fec8 	bl	800352e <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 800e79e:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <grid_update+0x34c>)
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	881a      	ldrh	r2, [r3, #0]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7f6 fdee 	bl	8005388 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	9303      	str	r3, [sp, #12]
 800e7b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7b2:	b2c2      	uxtb	r2, r0
 800e7b4:	9302      	str	r3, [sp, #8]
 800e7b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7be:	4630      	mov	r0, r6
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	463b      	mov	r3, r7
 800e7c4:	f7ff fdea 	bl	800e39c <grid_align>
 800e7c8:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
 800e7cc:	e68f      	b.n	800e4ee <grid_update+0x3e>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	e6f7      	b.n	800e5c2 <grid_update+0x112>
        if(IS_CONTENT(row_templ[i])) {
 800e7d2:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800e7d6:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 800e7da:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d147      	bne.n	800e872 <grid_update+0x3c2>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800e7e2:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800e7e6:	4f06      	ldr	r7, [pc, #24]	; (800e800 <grid_update+0x350>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e7e8:	f8df a018 	ldr.w	sl, [pc, #24]	; 800e804 <grid_update+0x354>
 800e7ec:	e033      	b.n	800e856 <grid_update+0x3a6>
 800e7ee:	bf00      	nop
 800e7f0:	200046e4 	.word	0x200046e4
 800e7f4:	200046d8 	.word	0x200046d8
 800e7f8:	200046de 	.word	0x200046de
 800e7fc:	200046d6 	.word	0x200046d6
 800e800:	ffffe001 	.word	0xffffe001
 800e804:	00030001 	.word	0x00030001
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800e808:	4641      	mov	r1, r8
 800e80a:	4620      	mov	r0, r4
 800e80c:	f7f7 fb93 	bl	8005f36 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e810:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800e812:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e814:	f7f4 f80b 	bl	800282e <lv_obj_has_flag_any>
 800e818:	4601      	mov	r1, r0
 800e81a:	b9d0      	cbnz	r0, 800e852 <grid_update+0x3a2>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800e81c:	4bc0      	ldr	r3, [pc, #768]	; (800eb20 <grid_update+0x670>)
 800e81e:	9005      	str	r0, [sp, #20]
 800e820:	881a      	ldrh	r2, [r3, #0]
 800e822:	4658      	mov	r0, fp
 800e824:	f7f6 fdb0 	bl	8005388 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 800e828:	b2c0      	uxtb	r0, r0
 800e82a:	2801      	cmp	r0, #1
 800e82c:	9905      	ldr	r1, [sp, #20]
 800e82e:	d110      	bne.n	800e852 <grid_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800e830:	4bbc      	ldr	r3, [pc, #752]	; (800eb24 <grid_update+0x674>)
 800e832:	4658      	mov	r0, fp
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	f7f6 fda7 	bl	8005388 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 800e83a:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 800e83c:	4286      	cmp	r6, r0
 800e83e:	d108      	bne.n	800e852 <grid_update+0x3a2>
                size = LV_MAX(size, lv_obj_get_height(item));
 800e840:	4658      	mov	r0, fp
 800e842:	f7f4 fe58 	bl	80034f6 <lv_obj_get_height>
 800e846:	42b8      	cmp	r0, r7
 800e848:	db03      	blt.n	800e852 <grid_update+0x3a2>
 800e84a:	4658      	mov	r0, fp
 800e84c:	f7f4 fe53 	bl	80034f6 <lv_obj_get_height>
 800e850:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800e852:	f108 0801 	add.w	r8, r8, #1
 800e856:	4620      	mov	r0, r4
 800e858:	f7f7 fb7c 	bl	8005f54 <lv_obj_get_child_cnt>
 800e85c:	4580      	cmp	r8, r0
 800e85e:	d3d3      	bcc.n	800e808 <grid_update+0x358>
            if(size >= 0) c->h[i] = size;
 800e860:	2f00      	cmp	r7, #0
            else c->h[i] = 0;
 800e862:	bfb8      	it	lt
 800e864:	2200      	movlt	r2, #0
 800e866:	9b12      	ldr	r3, [sp, #72]	; 0x48
            if(size >= 0) c->h[i] = size;
 800e868:	bfac      	ite	ge
 800e86a:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 800e86e:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 800e872:	3601      	adds	r6, #1
 800e874:	e6b5      	b.n	800e5e2 <grid_update+0x132>
        lv_coord_t x = row_templ[i];
 800e876:	f935 7011 	ldrsh.w	r7, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800e87a:	4567      	cmp	r7, ip
 800e87c:	dd05      	ble.n	800e88a <grid_update+0x3da>
            row_fr_cnt += GET_FR(x);
 800e87e:	f5a6 56fc 	sub.w	r6, r6, #8064	; 0x1f80
 800e882:	3e1b      	subs	r6, #27
 800e884:	443e      	add	r6, r7
    for(i = 0; i < c->row_num; i++) {
 800e886:	3101      	adds	r1, #1
 800e888:	e6b5      	b.n	800e5f6 <grid_update+0x146>
            grid_h += c->h[i];
 800e88a:	bf0b      	itete	eq
 800e88c:	f830 3011 	ldrheq.w	r3, [r0, r1, lsl #1]
            grid_h += x;
 800e890:	eb08 0307 	addne.w	r3, r8, r7
            grid_h += c->h[i];
 800e894:	4443      	addeq	r3, r8
            c->h[i] = x;
 800e896:	f820 7011 	strhne.w	r7, [r0, r1, lsl #1]
            grid_h += x;
 800e89a:	b21b      	sxth	r3, r3
 800e89c:	e7f3      	b.n	800e886 <grid_update+0x3d6>
        lv_coord_t x = row_templ[i];
 800e89e:	f935 3011 	ldrsh.w	r3, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800e8a2:	4563      	cmp	r3, ip
 800e8a4:	dd08      	ble.n	800e8b8 <grid_update+0x408>
            lv_coord_t f = GET_FR(x);
 800e8a6:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 800e8aa:	3b1b      	subs	r3, #27
            c->h[i] = (free_h * f) / row_fr_cnt;
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	437b      	muls	r3, r7
 800e8b0:	fbb3 f3f6 	udiv	r3, r3, r6
 800e8b4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 800e8b8:	3101      	adds	r1, #1
 800e8ba:	e6b8      	b.n	800e62e <grid_update+0x17e>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 800e8bc:	3301      	adds	r3, #1
 800e8be:	e6c7      	b.n	800e650 <grid_update+0x1a0>
        if(IS_CONTENT(col_templ[i])) {
 800e8c0:	f641 739a 	movw	r3, #8090	; 0x1f9a
 800e8c4:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 800e8c8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d13a      	bne.n	800e946 <grid_update+0x496>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800e8d0:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800e8d4:	4f94      	ldr	r7, [pc, #592]	; (800eb28 <grid_update+0x678>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e8d6:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800eb34 <grid_update+0x684>
 800e8da:	e026      	b.n	800e92a <grid_update+0x47a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800e8dc:	4641      	mov	r1, r8
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7f7 fb29 	bl	8005f36 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e8e4:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800e8e6:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800e8e8:	f7f3 ffa1 	bl	800282e <lv_obj_has_flag_any>
 800e8ec:	4601      	mov	r1, r0
 800e8ee:	b9d0      	cbnz	r0, 800e926 <grid_update+0x476>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800e8f0:	4b8e      	ldr	r3, [pc, #568]	; (800eb2c <grid_update+0x67c>)
 800e8f2:	9005      	str	r0, [sp, #20]
 800e8f4:	881a      	ldrh	r2, [r3, #0]
 800e8f6:	4658      	mov	r0, fp
 800e8f8:	f7f6 fd46 	bl	8005388 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 800e8fc:	b2c0      	uxtb	r0, r0
 800e8fe:	2801      	cmp	r0, #1
 800e900:	9905      	ldr	r1, [sp, #20]
 800e902:	d110      	bne.n	800e926 <grid_update+0x476>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800e904:	4b8a      	ldr	r3, [pc, #552]	; (800eb30 <grid_update+0x680>)
 800e906:	4658      	mov	r0, fp
 800e908:	881a      	ldrh	r2, [r3, #0]
 800e90a:	f7f6 fd3d 	bl	8005388 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 800e90e:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 800e910:	4286      	cmp	r6, r0
 800e912:	d108      	bne.n	800e926 <grid_update+0x476>
                size = LV_MAX(size, lv_obj_get_width(item));
 800e914:	4658      	mov	r0, fp
 800e916:	f7f4 fde8 	bl	80034ea <lv_obj_get_width>
 800e91a:	42b8      	cmp	r0, r7
 800e91c:	db03      	blt.n	800e926 <grid_update+0x476>
 800e91e:	4658      	mov	r0, fp
 800e920:	f7f4 fde3 	bl	80034ea <lv_obj_get_width>
 800e924:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800e926:	f108 0801 	add.w	r8, r8, #1
 800e92a:	4620      	mov	r0, r4
 800e92c:	f7f7 fb12 	bl	8005f54 <lv_obj_get_child_cnt>
 800e930:	4580      	cmp	r8, r0
 800e932:	d3d3      	bcc.n	800e8dc <grid_update+0x42c>
            if(size >= 0) c->w[i] = size;
 800e934:	2f00      	cmp	r7, #0
            else c->w[i] = 0;
 800e936:	bfb8      	it	lt
 800e938:	2200      	movlt	r2, #0
 800e93a:	9b11      	ldr	r3, [sp, #68]	; 0x44
            if(size >= 0) c->w[i] = size;
 800e93c:	bfac      	ite	ge
 800e93e:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 800e942:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 800e946:	3601      	adds	r6, #1
 800e948:	e692      	b.n	800e670 <grid_update+0x1c0>
        lv_coord_t x = col_templ[i];
 800e94a:	f935 301c 	ldrsh.w	r3, [r5, ip, lsl #1]
        if(IS_FR(x)) {
 800e94e:	4573      	cmp	r3, lr
 800e950:	dd06      	ble.n	800e960 <grid_update+0x4b0>
            col_fr_cnt += GET_FR(x);
 800e952:	f5a6 56fc 	sub.w	r6, r6, #8064	; 0x1f80
 800e956:	3e1b      	subs	r6, #27
 800e958:	441e      	add	r6, r3
    for(i = 0; i < c->col_num; i++) {
 800e95a:	f10c 0c01 	add.w	ip, ip, #1
 800e95e:	e691      	b.n	800e684 <grid_update+0x1d4>
            grid_w += c->w[i];
 800e960:	bf0b      	itete	eq
 800e962:	f832 101c 	ldrheq.w	r1, [r2, ip, lsl #1]
            grid_w += x;
 800e966:	18f9      	addne	r1, r7, r3
            grid_w += c->w[i];
 800e968:	19c9      	addeq	r1, r1, r7
            c->w[i] = x;
 800e96a:	f822 301c 	strhne.w	r3, [r2, ip, lsl #1]
            grid_w += x;
 800e96e:	b209      	sxth	r1, r1
 800e970:	e7f3      	b.n	800e95a <grid_update+0x4aa>
        lv_coord_t x = col_templ[i];
 800e972:	f935 7011 	ldrsh.w	r7, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800e976:	4547      	cmp	r7, r8
 800e978:	dd0a      	ble.n	800e990 <grid_update+0x4e0>
            lv_coord_t f = GET_FR(x);
 800e97a:	f5a7 52fc 	sub.w	r2, r7, #8064	; 0x1f80
 800e97e:	3a1b      	subs	r2, #27
            c->w[i] = (free_w * f) / col_fr_cnt;
 800e980:	b292      	uxth	r2, r2
 800e982:	fb02 f703 	mul.w	r7, r2, r3
 800e986:	fbb7 f7f6 	udiv	r7, r7, r6
            last_fr_i = i;
 800e98a:	468e      	mov	lr, r1
            c->w[i] = (free_w * f) / col_fr_cnt;
 800e98c:	f82c 7011 	strh.w	r7, [ip, r1, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 800e990:	3101      	adds	r1, #1
 800e992:	e693      	b.n	800e6bc <grid_update+0x20c>
        lv_obj_t * item = cont->spec_attr->children[i];
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	9a04      	ldr	r2, [sp, #16]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800e998:	4966      	ldr	r1, [pc, #408]	; (800eb34 <grid_update+0x684>)
        lv_obj_t * item = cont->spec_attr->children[i];
 800e99a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f7f3 ff45 	bl	800282e <lv_obj_has_flag_any>
 800e9a4:	4680      	mov	r8, r0
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f040 8180 	bne.w	800ecac <grid_update+0x7fc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800e9ac:	4b5f      	ldr	r3, [pc, #380]	; (800eb2c <grid_update+0x67c>)
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	881a      	ldrh	r2, [r3, #0]
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f7f6 fce8 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800e9b8:	4b59      	ldr	r3, [pc, #356]	; (800eb20 <grid_update+0x670>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800e9ba:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800e9bc:	4641      	mov	r1, r8
 800e9be:	4628      	mov	r0, r5
 800e9c0:	881a      	ldrh	r2, [r3, #0]
 800e9c2:	f7f6 fce1 	bl	8005388 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 800e9c6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 800e9ca:	f000 816f 	beq.w	800ecac <grid_update+0x7fc>
 800e9ce:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800e9d2:	f000 816b 	beq.w	800ecac <grid_update+0x7fc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800e9d6:	4b56      	ldr	r3, [pc, #344]	; (800eb30 <grid_update+0x680>)
 800e9d8:	4641      	mov	r1, r8
 800e9da:	881a      	ldrh	r2, [r3, #0]
 800e9dc:	4628      	mov	r0, r5
 800e9de:	f7f6 fcd3 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800e9e2:	4a50      	ldr	r2, [pc, #320]	; (800eb24 <grid_update+0x674>)
    uint32_t col_pos = get_col_pos(item);
 800e9e4:	b2c3      	uxtb	r3, r0
 800e9e6:	4641      	mov	r1, r8
 800e9e8:	8812      	ldrh	r2, [r2, #0]
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	9306      	str	r3, [sp, #24]
 800e9ee:	f7f6 fccb 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 800e9f2:	4a51      	ldr	r2, [pc, #324]	; (800eb38 <grid_update+0x688>)
    uint32_t row_pos = get_row_pos(item);
 800e9f4:	fa5f fa80 	uxtb.w	sl, r0
 800e9f8:	4641      	mov	r1, r8
 800e9fa:	8812      	ldrh	r2, [r2, #0]
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f7f6 fcc3 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 800ea02:	4a4e      	ldr	r2, [pc, #312]	; (800eb3c <grid_update+0x68c>)
 800ea04:	4641      	mov	r1, r8
 800ea06:	8812      	ldrh	r2, [r2, #0]
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 800ea08:	fa5f f980 	uxtb.w	r9, r0
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	f7f6 fcbb 	bl	8005388 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800ea12:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800ea14:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 800ea18:	9305      	str	r3, [sp, #20]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800ea1a:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t col_x1 = c->x[col_pos];
 800ea1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800ea1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea20:	441f      	add	r7, r3
 800ea22:	4407      	add	r7, r0
 800ea24:	f832 b017 	ldrh.w	fp, [r2, r7, lsl #1]
 800ea28:	f831 2017 	ldrh.w	r2, [r1, r7, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800ea2c:	4456      	add	r6, sl
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 800ea2e:	4493      	add	fp, r2
    lv_coord_t col_w = col_x2 - col_x1;
 800ea30:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800ea34:	9912      	ldr	r1, [sp, #72]	; 0x48
    lv_coord_t col_w = col_x2 - col_x1;
 800ea36:	ebab 0b02 	sub.w	fp, fp, r2
    lv_coord_t row_y1 = c->y[row_pos];
 800ea3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800ea3c:	4430      	add	r0, r6
 800ea3e:	f831 6010 	ldrh.w	r6, [r1, r0, lsl #1]
 800ea42:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    lv_coord_t row_h = row_y2 - row_y1;
 800ea46:	f832 201a 	ldrh.w	r2, [r2, sl, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 800ea4a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 800ea4c:	440e      	add	r6, r1
    lv_coord_t col_w = col_x2 - col_x1;
 800ea4e:	fa1f f38b 	uxth.w	r3, fp
    lv_coord_t row_h = row_y2 - row_y1;
 800ea52:	1ab6      	subs	r6, r6, r2
    lv_coord_t col_w = col_x2 - col_x1;
 800ea54:	9307      	str	r3, [sp, #28]
 800ea56:	fa0f f38b 	sxth.w	r3, fp
 800ea5a:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800ea5c:	f241 426a 	movw	r2, #5226	; 0x146a
    lv_coord_t row_h = row_y2 - row_y1;
 800ea60:	b2b3      	uxth	r3, r6
 800ea62:	4641      	mov	r1, r8
 800ea64:	4628      	mov	r0, r5
 800ea66:	9308      	str	r3, [sp, #32]
 800ea68:	f7f6 fc8e 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800ea6c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800ea6e:	2801      	cmp	r0, #1
 800ea70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    lv_coord_t row_h = row_y2 - row_y1;
 800ea72:	b236      	sxth	r6, r6
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800ea74:	d107      	bne.n	800ea86 <grid_update+0x5d6>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800ea76:	f1b9 0f00 	cmp.w	r9, #0
 800ea7a:	d027      	beq.n	800eacc <grid_update+0x61c>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 800ea7c:	f1b9 0f02 	cmp.w	r9, #2
 800ea80:	bf08      	it	eq
 800ea82:	f04f 0900 	moveq.w	r9, #0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ea86:	f8b5 8018 	ldrh.w	r8, [r5, #24]
 800ea8a:	8aaa      	ldrh	r2, [r5, #20]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ea8c:	8b6f      	ldrh	r7, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ea8e:	f108 0801 	add.w	r8, r8, #1
 800ea92:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ea96:	8aea      	ldrh	r2, [r5, #22]
 800ea98:	3701      	adds	r7, #1
 800ea9a:	1abf      	subs	r7, r7, r2
 800ea9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    switch(col_align) {
 800ea9e:	f1b9 0f02 	cmp.w	r9, #2
 800eaa2:	f932 b013 	ldrsh.w	fp, [r2, r3, lsl #1]
 800eaa6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eaaa:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eaae:	b23f      	sxth	r7, r7
 800eab0:	d046      	beq.n	800eb40 <grid_update+0x690>
 800eab2:	f1b9 0f03 	cmp.w	r9, #3
 800eab6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800eaba:	d00a      	beq.n	800ead2 <grid_update+0x622>
 800eabc:	f1b9 0f01 	cmp.w	r9, #1
 800eac0:	d023      	beq.n	800eb0a <grid_update+0x65a>
            item->w_layout = 0;
 800eac2:	f36f 0382 	bfc	r3, #2, #1
 800eac6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 800eaca:	e008      	b.n	800eade <grid_update+0x62e>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 800eacc:	f04f 0902 	mov.w	r9, #2
 800ead0:	e7d9      	b.n	800ea86 <grid_update+0x5d6>
            item->w_layout = 1;
 800ead2:	f043 0304 	orr.w	r3, r3, #4
 800ead6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item_w = col_w;
 800eada:	f8dd 8018 	ldr.w	r8, [sp, #24]
    switch(row_align) {
 800eade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eae0:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 800eae4:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
 800eae8:	9b05      	ldr	r3, [sp, #20]
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	f000 80e9 	beq.w	800ecc2 <grid_update+0x812>
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800eaf6:	d031      	beq.n	800eb5c <grid_update+0x6ac>
 800eaf8:	9905      	ldr	r1, [sp, #20]
 800eafa:	2901      	cmp	r1, #1
 800eafc:	f000 80d9 	beq.w	800ecb2 <grid_update+0x802>
            item->h_layout = 0;
 800eb00:	f36f 0341 	bfc	r3, #1, #1
 800eb04:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 800eb08:	e02d      	b.n	800eb66 <grid_update+0x6b6>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 800eb0a:	9a06      	ldr	r2, [sp, #24]
 800eb0c:	eba2 0b08 	sub.w	fp, r2, r8
 800eb10:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 800eb14:	eb00 0b6b 	add.w	fp, r0, fp, asr #1
 800eb18:	fa0f fb8b 	sxth.w	fp, fp
            item->w_layout = 0;
 800eb1c:	e7d1      	b.n	800eac2 <grid_update+0x612>
 800eb1e:	bf00      	nop
 800eb20:	200046e0 	.word	0x200046e0
 800eb24:	200046e6 	.word	0x200046e6
 800eb28:	ffffe001 	.word	0xffffe001
 800eb2c:	200046d4 	.word	0x200046d4
 800eb30:	200046da 	.word	0x200046da
 800eb34:	00030001 	.word	0x00030001
 800eb38:	200046e2 	.word	0x200046e2
 800eb3c:	200046dc 	.word	0x200046dc
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800eb40:	9b07      	ldr	r3, [sp, #28]
 800eb42:	4403      	add	r3, r0
 800eb44:	4628      	mov	r0, r5
 800eb46:	fa1f fb83 	uxth.w	fp, r3
 800eb4a:	f7f4 fcce 	bl	80034ea <lv_obj_get_width>
 800eb4e:	ebab 0b00 	sub.w	fp, fp, r0
            item->w_layout = 0;
 800eb52:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 800eb56:	fa0f fb8b 	sxth.w	fp, fp
            item->w_layout = 0;
 800eb5a:	e7b2      	b.n	800eac2 <grid_update+0x612>
            item_h = row_h;
 800eb5c:	4637      	mov	r7, r6
            item->h_layout = 1;
 800eb5e:	f043 0302 	orr.w	r3, r3, #2
 800eb62:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800eb66:	4628      	mov	r0, r5
 800eb68:	f7f4 fcbf 	bl	80034ea <lv_obj_get_width>
 800eb6c:	4540      	cmp	r0, r8
 800eb6e:	f000 80b6 	beq.w	800ecde <grid_update+0x82e>
    dest->x1 = src->x1;
 800eb72:	8aab      	ldrh	r3, [r5, #20]
        lv_obj_invalidate(item);
 800eb74:	4628      	mov	r0, r5
 800eb76:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 800eb7a:	8aeb      	ldrh	r3, [r5, #22]
        lv_area_copy(&old_coords, &item->coords);
 800eb7c:	f105 0614 	add.w	r6, r5, #20
 800eb80:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 800eb84:	8b2b      	ldrh	r3, [r5, #24]
 800eb86:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 800eb8a:	8b6b      	ldrh	r3, [r5, #26]
 800eb8c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_obj_invalidate(item);
 800eb90:	f7f4 fdf5 	bl	800377e <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 800eb94:	4641      	mov	r1, r8
 800eb96:	4630      	mov	r0, r6
 800eb98:	f000 fd6f 	bl	800f67a <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f000 fd70 	bl	800f684 <lv_area_set_height>
        lv_obj_invalidate(item);
 800eba4:	4628      	mov	r0, r5
 800eba6:	f7f4 fdea 	bl	800377e <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800ebaa:	2129      	movs	r1, #41	; 0x29
 800ebac:	aa0a      	add	r2, sp, #40	; 0x28
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f7f3 f856 	bl	8001c60 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f7f7 f9bb 	bl	8005f30 <lv_obj_get_parent>
 800ebba:	462a      	mov	r2, r5
 800ebbc:	2122      	movs	r1, #34	; 0x22
 800ebbe:	f7f3 f84f 	bl	8001c60 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800ebc2:	f243 020c 	movw	r2, #12300	; 0x300c
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f7f6 fbdd 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800ebce:	f243 020d 	movw	r2, #12301	; 0x300d
 800ebd2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800ebd4:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 800ebd6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f7f6 fbd4 	bl	8005388 <lv_obj_get_style_prop>
 800ebe0:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 800ebe2:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7f4 fc7f 	bl	80034ea <lv_obj_get_width>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800ebec:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
    lv_coord_t w = lv_obj_get_width(item);
 800ebf0:	9005      	str	r0, [sp, #20]
    lv_coord_t h = lv_obj_get_height(item);
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f7f4 fc7f 	bl	80034f6 <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800ebf8:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 800ebfc:	9b05      	ldr	r3, [sp, #20]
 800ebfe:	d111      	bne.n	800ec24 <grid_update+0x774>
 800ec00:	f428 42c0 	bic.w	r2, r8, #24576	; 0x6000
 800ec04:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800ec08:	dc0c      	bgt.n	800ec24 <grid_update+0x774>
 800ec0a:	4690      	mov	r8, r2
 800ec0c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800ec10:	bfc8      	it	gt
 800ec12:	f5c2 787a 	rsbgt	r8, r2, #1000	; 0x3e8
 800ec16:	fb08 f803 	mul.w	r8, r8, r3
 800ec1a:	2364      	movs	r3, #100	; 0x64
 800ec1c:	fb98 f8f3 	sdiv	r8, r8, r3
 800ec20:	fa0f f888 	sxth.w	r8, r8
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800ec24:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 800ec28:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800ec2c:	d111      	bne.n	800ec52 <grid_update+0x7a2>
 800ec2e:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 800ec32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ec36:	dc0c      	bgt.n	800ec52 <grid_update+0x7a2>
 800ec38:	469a      	mov	sl, r3
 800ec3a:	2264      	movs	r2, #100	; 0x64
 800ec3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec40:	bfc8      	it	gt
 800ec42:	f5c3 7a7a 	rsbgt	sl, r3, #1000	; 0x3e8
 800ec46:	fb0a fa00 	mul.w	sl, sl, r0
 800ec4a:	fb9a faf2 	sdiv	sl, sl, r2
 800ec4e:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800ec52:	8aab      	ldrh	r3, [r5, #20]
 800ec54:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800ec58:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800ec5c:	1ac9      	subs	r1, r1, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800ec5e:	8aeb      	ldrh	r3, [r5, #22]
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800ec60:	448b      	add	fp, r1
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800ec62:	1ad2      	subs	r2, r2, r3
 800ec64:	4491      	add	r9, r2
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800ec66:	44d8      	add	r8, fp
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800ec68:	44ca      	add	sl, r9
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 800ec6a:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800ec6e:	fa1f fa8a 	uxth.w	sl, sl
    if(diff_x || diff_y) {
 800ec72:	ea58 030a 	orrs.w	r3, r8, sl
 800ec76:	d019      	beq.n	800ecac <grid_update+0x7fc>
        lv_obj_invalidate(item);
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f7f4 fd80 	bl	800377e <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 800ec7e:	8aab      	ldrh	r3, [r5, #20]
        lv_obj_invalidate(item);
 800ec80:	4628      	mov	r0, r5
        item->coords.x1 += diff_x;
 800ec82:	4443      	add	r3, r8
 800ec84:	82ab      	strh	r3, [r5, #20]
        item->coords.x2 += diff_x;
 800ec86:	8b2b      	ldrh	r3, [r5, #24]
 800ec88:	4443      	add	r3, r8
 800ec8a:	832b      	strh	r3, [r5, #24]
        item->coords.y1 += diff_y;
 800ec8c:	8aeb      	ldrh	r3, [r5, #22]
 800ec8e:	4453      	add	r3, sl
 800ec90:	82eb      	strh	r3, [r5, #22]
        item->coords.y2 += diff_y;
 800ec92:	8b6b      	ldrh	r3, [r5, #26]
 800ec94:	4453      	add	r3, sl
 800ec96:	836b      	strh	r3, [r5, #26]
        lv_obj_invalidate(item);
 800ec98:	f7f4 fd71 	bl	800377e <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, true);
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4628      	mov	r0, r5
 800eca0:	fa0f f28a 	sxth.w	r2, sl
 800eca4:	fa0f f188 	sxth.w	r1, r8
 800eca8:	f7f4 fcbf 	bl	800362a <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800ecac:	9b04      	ldr	r3, [sp, #16]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	e44c      	b.n	800e54c <grid_update+0x9c>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800ecb2:	1bf6      	subs	r6, r6, r7
 800ecb4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800ecb8:	eb02 0966 	add.w	r9, r2, r6, asr #1
 800ecbc:	fa0f f989 	sxth.w	r9, r9
            item->h_layout = 0;
 800ecc0:	e71e      	b.n	800eb00 <grid_update+0x650>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 800ecc2:	9b08      	ldr	r3, [sp, #32]
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	4413      	add	r3, r2
 800ecc8:	fa1f f983 	uxth.w	r9, r3
 800eccc:	f7f4 fc13 	bl	80034f6 <lv_obj_get_height>
 800ecd0:	eba9 0900 	sub.w	r9, r9, r0
            item->h_layout = 0;
 800ecd4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 800ecd8:	fa0f f989 	sxth.w	r9, r9
            item->h_layout = 0;
 800ecdc:	e710      	b.n	800eb00 <grid_update+0x650>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800ecde:	4628      	mov	r0, r5
 800ece0:	f7f4 fc09 	bl	80034f6 <lv_obj_get_height>
 800ece4:	42b8      	cmp	r0, r7
 800ece6:	f47f af44 	bne.w	800eb72 <grid_update+0x6c2>
 800ecea:	e76a      	b.n	800ebc2 <grid_update+0x712>

0800ecec <lv_grid_init>:
{
 800ecec:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 800ecee:	2100      	movs	r1, #0
 800ecf0:	4820      	ldr	r0, [pc, #128]	; (800ed74 <lv_grid_init+0x88>)
 800ecf2:	f7f4 fbc1 	bl	8003478 <lv_layout_register>
 800ecf6:	4b20      	ldr	r3, [pc, #128]	; (800ed78 <lv_grid_init+0x8c>)
 800ecf8:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ecfa:	f001 fea1 	bl	8010a40 <lv_style_register_prop>
 800ecfe:	4b1f      	ldr	r3, [pc, #124]	; (800ed7c <lv_grid_init+0x90>)
 800ed00:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed04:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed06:	f001 fe9b 	bl	8010a40 <lv_style_register_prop>
 800ed0a:	4b1d      	ldr	r3, [pc, #116]	; (800ed80 <lv_grid_init+0x94>)
 800ed0c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed10:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed12:	f001 fe95 	bl	8010a40 <lv_style_register_prop>
 800ed16:	4b1b      	ldr	r3, [pc, #108]	; (800ed84 <lv_grid_init+0x98>)
 800ed18:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed1c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed1e:	f001 fe8f 	bl	8010a40 <lv_style_register_prop>
 800ed22:	4b19      	ldr	r3, [pc, #100]	; (800ed88 <lv_grid_init+0x9c>)
 800ed24:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed28:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed2a:	f001 fe89 	bl	8010a40 <lv_style_register_prop>
 800ed2e:	4b17      	ldr	r3, [pc, #92]	; (800ed8c <lv_grid_init+0xa0>)
 800ed30:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed34:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed36:	f001 fe83 	bl	8010a40 <lv_style_register_prop>
 800ed3a:	4b15      	ldr	r3, [pc, #84]	; (800ed90 <lv_grid_init+0xa4>)
 800ed3c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed40:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed42:	f001 fe7d 	bl	8010a40 <lv_style_register_prop>
 800ed46:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <lv_grid_init+0xa8>)
 800ed48:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed4c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed4e:	f001 fe77 	bl	8010a40 <lv_style_register_prop>
 800ed52:	4b11      	ldr	r3, [pc, #68]	; (800ed98 <lv_grid_init+0xac>)
 800ed54:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed58:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed5a:	f001 fe71 	bl	8010a40 <lv_style_register_prop>
 800ed5e:	4b0f      	ldr	r3, [pc, #60]	; (800ed9c <lv_grid_init+0xb0>)
 800ed60:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed64:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800ed66:	f001 fe6b 	bl	8010a40 <lv_style_register_prop>
 800ed6a:	4b0d      	ldr	r3, [pc, #52]	; (800eda0 <lv_grid_init+0xb4>)
 800ed6c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800ed70:	8018      	strh	r0, [r3, #0]
}
 800ed72:	bd08      	pop	{r3, pc}
 800ed74:	0800e4b1 	.word	0x0800e4b1
 800ed78:	200046e8 	.word	0x200046e8
 800ed7c:	200046e4 	.word	0x200046e4
 800ed80:	200046d8 	.word	0x200046d8
 800ed84:	200046de 	.word	0x200046de
 800ed88:	200046d6 	.word	0x200046d6
 800ed8c:	200046e0 	.word	0x200046e0
 800ed90:	200046e6 	.word	0x200046e6
 800ed94:	200046d4 	.word	0x200046d4
 800ed98:	200046da 	.word	0x200046da
 800ed9c:	200046e2 	.word	0x200046e2
 800eda0:	200046dc 	.word	0x200046dc

0800eda4 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 800eda4:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 800eda6:	f7ff facf 	bl	800e348 <lv_flex_init>
#endif

#if LV_USE_FFMPEG
    lv_ffmpeg_init();
#endif
}
 800edaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 800edae:	f7ff bf9d 	b.w	800ecec <lv_grid_init>

0800edb2 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 800edb2:	b900      	cbnz	r0, 800edb6 <lv_font_get_glyph_bitmap+0x4>
 800edb4:	e7fe      	b.n	800edb4 <lv_font_get_glyph_bitmap+0x2>
    return font_p->get_glyph_bitmap(font_p, letter);
 800edb6:	6843      	ldr	r3, [r0, #4]
 800edb8:	4718      	bx	r3

0800edba <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 800edba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edbe:	460d      	mov	r5, r1
 800edc0:	4616      	mov	r6, r2
 800edc2:	4698      	mov	r8, r3
    LV_ASSERT_NULL(font_p);
 800edc4:	4604      	mov	r4, r0
 800edc6:	b900      	cbnz	r0, 800edca <lv_font_get_glyph_dsc+0x10>
 800edc8:	e7fe      	b.n	800edc8 <lv_font_get_glyph_dsc+0xe>
    LV_ASSERT_NULL(dsc_out);
 800edca:	b901      	cbnz	r1, 800edce <lv_font_get_glyph_dsc+0x14>
 800edcc:	e7fe      	b.n	800edcc <lv_font_get_glyph_dsc+0x12>
    dsc_out->resolved_font = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	600b      	str	r3, [r1, #0]
    const lv_font_t * f = font_p;
    bool found = false;
    while(f) {
        found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 800edd2:	4643      	mov	r3, r8
 800edd4:	4632      	mov	r2, r6
 800edd6:	4629      	mov	r1, r5
 800edd8:	4620      	mov	r0, r4
 800edda:	6827      	ldr	r7, [r4, #0]
 800eddc:	47b8      	blx	r7
        if(found && !dsc_out->is_placeholder) {
 800edde:	b128      	cbz	r0, 800edec <lv_font_get_glyph_dsc+0x32>
 800ede0:	7bab      	ldrb	r3, [r5, #14]
 800ede2:	06db      	lsls	r3, r3, #27
 800ede4:	d402      	bmi.n	800edec <lv_font_get_glyph_dsc+0x32>
            dsc_out->resolved_font = f;
 800ede6:	602c      	str	r4, [r5, #0]
            break;
        }
        f = f->fallback;
    }
    return found;
}
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        f = f->fallback;
 800edec:	6964      	ldr	r4, [r4, #20]
    while(f) {
 800edee:	2c00      	cmp	r4, #0
 800edf0:	d1ef      	bne.n	800edd2 <lv_font_get_glyph_dsc+0x18>
 800edf2:	e7f9      	b.n	800ede8 <lv_font_get_glyph_dsc+0x2e>

0800edf4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800edf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edf6:	4613      	mov	r3, r2
    LV_ASSERT_NULL(font);
 800edf8:	b900      	cbnz	r0, 800edfc <lv_font_get_glyph_width+0x8>
 800edfa:	e7fe      	b.n	800edfa <lv_font_get_glyph_width+0x6>
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800edfc:	460a      	mov	r2, r1
 800edfe:	4669      	mov	r1, sp
 800ee00:	f7ff ffdb 	bl	800edba <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 800ee04:	b108      	cbz	r0, 800ee0a <lv_font_get_glyph_width+0x16>
 800ee06:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 800ee0a:	b005      	add	sp, #20
 800ee0c:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee10 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800ee10:	7803      	ldrb	r3, [r0, #0]
 800ee12:	780a      	ldrb	r2, [r1, #0]
 800ee14:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800ee16:	bf09      	itett	eq
 800ee18:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800ee1a:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800ee1c:	7840      	ldrbeq	r0, [r0, #1]
 800ee1e:	1ac0      	subeq	r0, r0, r3

}
 800ee20:	4770      	bx	lr

0800ee22 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800ee22:	8803      	ldrh	r3, [r0, #0]
 800ee24:	880a      	ldrh	r2, [r1, #0]
 800ee26:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800ee28:	bf09      	itett	eq
 800ee2a:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800ee2c:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800ee2e:	8840      	ldrheq	r0, [r0, #2]
 800ee30:	1ac0      	subeq	r0, r0, r3
}
 800ee32:	4770      	bx	lr

0800ee34 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 800ee34:	8800      	ldrh	r0, [r0, #0]
 800ee36:	880b      	ldrh	r3, [r1, #0]
}
 800ee38:	1ac0      	subs	r0, r0, r3
 800ee3a:	4770      	bx	lr

0800ee3c <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800ee3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800ee3e:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800ee40:	460c      	mov	r4, r1
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 800ee42:	6968      	ldr	r0, [r5, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800ee44:	b085      	sub	sp, #20
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 800ee46:	b970      	cbnz	r0, 800ee66 <get_glyph_dsc_id.isra.0.part.0+0x2a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f04f 0c14 	mov.w	ip, #20
 800ee4e:	8a6f      	ldrh	r7, [r5, #18]
 800ee50:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800ee54:	b293      	uxth	r3, r2
 800ee56:	429f      	cmp	r7, r3
 800ee58:	d80b      	bhi.n	800ee72 <get_glyph_dsc_id.isra.0.part.0+0x36>
    if(fdsc->cache) {
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	b138      	cbz	r0, 800ee6e <get_glyph_dsc_id.isra.0.part.0+0x32>
        fdsc->cache->last_glyph_id = 0;
 800ee5e:	e9c0 4300 	strd	r4, r3, [r0]
    return 0;
 800ee62:	4618      	mov	r0, r3
 800ee64:	e003      	b.n	800ee6e <get_glyph_dsc_id.isra.0.part.0+0x32>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	428b      	cmp	r3, r1
 800ee6a:	d1ed      	bne.n	800ee48 <get_glyph_dsc_id.isra.0.part.0+0xc>
 800ee6c:	6840      	ldr	r0, [r0, #4]
}
 800ee6e:	b005      	add	sp, #20
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800ee72:	fb0c f602 	mul.w	r6, ip, r2
 800ee76:	68ab      	ldr	r3, [r5, #8]
 800ee78:	3201      	adds	r2, #1
 800ee7a:	1999      	adds	r1, r3, r6
 800ee7c:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800ee7e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800ee82:	1ae3      	subs	r3, r4, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800ee84:	4573      	cmp	r3, lr
 800ee86:	d8e5      	bhi.n	800ee54 <get_glyph_dsc_id.isra.0.part.0+0x18>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800ee88:	7c8a      	ldrb	r2, [r1, #18]
 800ee8a:	2a02      	cmp	r2, #2
 800ee8c:	d102      	bne.n	800ee94 <get_glyph_dsc_id.isra.0.part.0+0x58>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800ee8e:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800ee90:	4418      	add	r0, r3
 800ee92:	e019      	b.n	800eec8 <get_glyph_dsc_id.isra.0.part.0+0x8c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800ee94:	b91a      	cbnz	r2, 800ee9e <get_glyph_dsc_id.isra.0.part.0+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800ee96:	68ca      	ldr	r2, [r1, #12]
 800ee98:	5cd0      	ldrb	r0, [r2, r3]
 800ee9a:	88cb      	ldrh	r3, [r1, #6]
 800ee9c:	e7f8      	b.n	800ee90 <get_glyph_dsc_id.isra.0.part.0+0x54>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800ee9e:	2a03      	cmp	r2, #3
 800eea0:	d118      	bne.n	800eed4 <get_glyph_dsc_id.isra.0.part.0+0x98>
            uint16_t key = rcp;
 800eea2:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800eea6:	4b18      	ldr	r3, [pc, #96]	; (800ef08 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 800eea8:	8a0a      	ldrh	r2, [r1, #16]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	6889      	ldr	r1, [r1, #8]
 800eeae:	2302      	movs	r3, #2
 800eeb0:	f10d 000e 	add.w	r0, sp, #14
 800eeb4:	f002 fde6 	bl	8011a84 <_lv_utils_bsearch>
            if(p) {
 800eeb8:	b130      	cbz	r0, 800eec8 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800eeba:	68ab      	ldr	r3, [r5, #8]
 800eebc:	441e      	add	r6, r3
 800eebe:	68b3      	ldr	r3, [r6, #8]
 800eec0:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800eec2:	88f3      	ldrh	r3, [r6, #6]
 800eec4:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 800eec8:	696b      	ldr	r3, [r5, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0cf      	beq.n	800ee6e <get_glyph_dsc_id.isra.0.part.0+0x32>
            fdsc->cache->last_glyph_id = glyph_id;
 800eece:	e9c3 4000 	strd	r4, r0, [r3]
 800eed2:	e7cc      	b.n	800ee6e <get_glyph_dsc_id.isra.0.part.0+0x32>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800eed4:	2a01      	cmp	r2, #1
 800eed6:	d114      	bne.n	800ef02 <get_glyph_dsc_id.isra.0.part.0+0xc6>
            uint16_t key = rcp;
 800eed8:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800eedc:	4b0a      	ldr	r3, [pc, #40]	; (800ef08 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 800eede:	8a0a      	ldrh	r2, [r1, #16]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	6889      	ldr	r1, [r1, #8]
 800eee4:	2302      	movs	r3, #2
 800eee6:	f10d 000e 	add.w	r0, sp, #14
 800eeea:	f002 fdcb 	bl	8011a84 <_lv_utils_bsearch>
            if(p) {
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d0ea      	beq.n	800eec8 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 800eef2:	68ab      	ldr	r3, [r5, #8]
 800eef4:	441e      	add	r6, r3
 800eef6:	68b3      	ldr	r3, [r6, #8]
 800eef8:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800eefa:	68f3      	ldr	r3, [r6, #12]
 800eefc:	5a18      	ldrh	r0, [r3, r0]
 800eefe:	88f3      	ldrh	r3, [r6, #6]
 800ef00:	e7c6      	b.n	800ee90 <get_glyph_dsc_id.isra.0.part.0+0x54>
        uint32_t glyph_id = 0;
 800ef02:	2000      	movs	r0, #0
 800ef04:	e7e0      	b.n	800eec8 <get_glyph_dsc_id.isra.0.part.0+0x8c>
 800ef06:	bf00      	nop
 800ef08:	0800ee35 	.word	0x0800ee35

0800ef0c <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 800ef0c:	2909      	cmp	r1, #9
{
 800ef0e:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800ef10:	d002      	beq.n	800ef18 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
 800ef12:	b911      	cbnz	r1, 800ef1a <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
 800ef14:	2000      	movs	r0, #0
}
 800ef16:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800ef18:	2120      	movs	r1, #32
 800ef1a:	f850 4f10 	ldr.w	r4, [r0, #16]!
 800ef1e:	f7ff ff8d 	bl	800ee3c <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d0f6      	beq.n	800ef14 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800ef26:	7ce3      	ldrb	r3, [r4, #19]
 800ef28:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800ef2c:	d1f2      	bne.n	800ef14 <lv_font_get_bitmap_fmt_txt+0x8>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800ef2e:	6863      	ldr	r3, [r4, #4]
 800ef30:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800ef34:	6820      	ldr	r0, [r4, #0]
 800ef36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef3a:	4418      	add	r0, r3
 800ef3c:	e7eb      	b.n	800ef16 <lv_font_get_bitmap_fmt_txt+0xa>
	...

0800ef40 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 800ef40:	2a09      	cmp	r2, #9
{
 800ef42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef46:	460c      	mov	r4, r1
 800ef48:	4680      	mov	r8, r0
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 800ef4e:	d006      	beq.n	800ef5e <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	d138      	bne.n	800efc6 <lv_font_get_glyph_dsc_fmt_txt+0x86>
    if(!gid) return false;
 800ef54:	2600      	movs	r6, #0
}
 800ef56:	4630      	mov	r0, r6
 800ef58:	b004      	add	sp, #16
 800ef5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 800ef5e:	2601      	movs	r6, #1
        unicode_letter = ' ';
 800ef60:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800ef62:	46c1      	mov	r9, r8
 800ef64:	f859 7f10 	ldr.w	r7, [r9, #16]!
 800ef68:	4648      	mov	r0, r9
 800ef6a:	f7ff ff67 	bl	800ee3c <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
 800ef6e:	4605      	mov	r5, r0
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d0ef      	beq.n	800ef54 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	bb43      	cbnz	r3, 800efca <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    int8_t kvalue = 0;
 800ef78:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800ef80:	8a3b      	ldrh	r3, [r7, #16]
 800ef82:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 800ef84:	8868      	ldrh	r0, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800ef86:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 800ef88:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
 800ef8c:	b106      	cbz	r6, 800ef90 <lv_font_get_glyph_dsc_fmt_txt+0x50>
 800ef8e:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800ef90:	3308      	adds	r3, #8
 800ef92:	4403      	add	r3, r0
 800ef94:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800ef96:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 800ef98:	796b      	ldrb	r3, [r5, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800ef9a:	7cf9      	ldrb	r1, [r7, #19]
    dsc_out->box_h = gdsc->box_h;
 800ef9c:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 800ef9e:	792a      	ldrb	r2, [r5, #4]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800efa0:	f3c1 0143 	ubfx	r1, r1, #1, #4
    dsc_out->box_w = gdsc->box_w;
 800efa4:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 800efa6:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800efaa:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 800efac:	f995 3007 	ldrsb.w	r3, [r5, #7]
 800efb0:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800efb2:	7ba3      	ldrb	r3, [r4, #14]
 800efb4:	f023 031f 	bic.w	r3, r3, #31
 800efb8:	430b      	orrs	r3, r1
 800efba:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	d060      	beq.n	800f082 <lv_font_get_glyph_dsc_fmt_txt+0x142>
 800efc0:	0052      	lsls	r2, r2, #1
 800efc2:	80e2      	strh	r2, [r4, #6]
 800efc4:	e7c7      	b.n	800ef56 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
 800efc6:	2600      	movs	r6, #0
 800efc8:	e7cb      	b.n	800ef62 <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
 800efca:	f1ba 0f00 	cmp.w	sl, #0
 800efce:	d0d3      	beq.n	800ef78 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 800efd0:	4651      	mov	r1, sl
 800efd2:	4648      	mov	r0, r9
 800efd4:	f7ff ff32 	bl	800ee3c <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
 800efd8:	2800      	cmp	r0, #0
 800efda:	d0cd      	beq.n	800ef78 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 800efdc:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if(fdsc->kern_classes == 0) {
 800efe0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800efe4:	7cdb      	ldrb	r3, [r3, #19]
 800efe6:	069b      	lsls	r3, r3, #26
 800efe8:	d436      	bmi.n	800f058 <lv_font_get_glyph_dsc_fmt_txt+0x118>
        if(kdsc->glyph_ids_size == 0) {
 800efea:	f898 300b 	ldrb.w	r3, [r8, #11]
 800efee:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 800eff2:	d119      	bne.n	800f028 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
            const uint16_t * g_ids = kdsc->glyph_ids;
 800eff4:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800eff8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800effc:	4b22      	ldr	r3, [pc, #136]	; (800f088 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800effe:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800f002:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	4649      	mov	r1, r9
 800f00a:	2302      	movs	r3, #2
 800f00c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800f010:	a803      	add	r0, sp, #12
 800f012:	f002 fd37 	bl	8011a84 <_lv_utils_bsearch>
            if(kid_p) {
 800f016:	2800      	cmp	r0, #0
 800f018:	d0af      	beq.n	800ef7a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800f01a:	eba0 0009 	sub.w	r0, r0, r9
 800f01e:	1040      	asrs	r0, r0, #1
                value = kdsc->values[ofs];
 800f020:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f024:	5618      	ldrsb	r0, [r3, r0]
 800f026:	e7a8      	b.n	800ef7a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 800f028:	2b40      	cmp	r3, #64	; 0x40
 800f02a:	d1a5      	bne.n	800ef78 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
 800f02c:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800f030:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f034:	4b15      	ldr	r3, [pc, #84]	; (800f08c <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 800f036:	eb05 4000 	add.w	r0, r5, r0, lsl #16
 800f03a:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	4649      	mov	r1, r9
 800f040:	2304      	movs	r3, #4
 800f042:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800f046:	a803      	add	r0, sp, #12
 800f048:	f002 fd1c 	bl	8011a84 <_lv_utils_bsearch>
            if(kid_p) {
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d094      	beq.n	800ef7a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 800f050:	eba0 0009 	sub.w	r0, r0, r9
 800f054:	1080      	asrs	r0, r0, #2
 800f056:	e7e3      	b.n	800f020 <lv_font_get_glyph_dsc_fmt_txt+0xe0>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800f058:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f05c:	5d5b      	ldrb	r3, [r3, r5]
        if(left_class > 0 && right_class > 0) {
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d08a      	beq.n	800ef78 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 800f062:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f066:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800f068:	2900      	cmp	r1, #0
 800f06a:	d085      	beq.n	800ef78 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 800f06c:	f8d8 2000 	ldr.w	r2, [r8]
 800f070:	f898 000d 	ldrb.w	r0, [r8, #13]
 800f074:	3b01      	subs	r3, #1
 800f076:	440a      	add	r2, r1
 800f078:	fb00 2303 	mla	r3, r0, r3, r2
 800f07c:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800f080:	e77b      	b.n	800ef7a <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 800f082:	2601      	movs	r6, #1
 800f084:	e767      	b.n	800ef56 <lv_font_get_glyph_dsc_fmt_txt+0x16>
 800f086:	bf00      	nop
 800f088:	0800ee11 	.word	0x0800ee11
 800f08c:	0800ee23 	.word	0x0800ee23

0800f090 <_lv_font_clean_up_fmt_txt>:
}
 800f090:	4770      	bx	lr
	...

0800f094 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800f094:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800f096:	214c      	movs	r1, #76	; 0x4c
{
 800f098:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800f09a:	f001 f889 	bl	80101b0 <lv_memset_00>

    driver->hor_res          = 320;
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
 800f09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0a2:	4a0c      	ldr	r2, [pc, #48]	; (800f0d4 <lv_disp_drv_init+0x40>)
 800f0a4:	e9c4 2300 	strd	r2, r3, [r4]
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60a3      	str	r3, [r4, #8]
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800f0ac:	6923      	ldr	r3, [r4, #16]
 800f0ae:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800f0b2:	f423 73e4 	bic.w	r3, r3, #456	; 0x1c8
 800f0b6:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
 800f0ba:	f043 0308 	orr.w	r3, r3, #8
 800f0be:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = LV_COLOR_SCREEN_TRANSP;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 800f0c0:	f24e 0307 	movw	r3, #57351	; 0xe007
 800f0c4:	86a3      	strh	r3, [r4, #52]	; 0x34
#elif LV_USE_GPU_SDL
    driver->draw_ctx_init = lv_draw_sdl_init_ctx;
    driver->draw_ctx_deinit = lv_draw_sdl_deinit_ctx;
    driver->draw_ctx_size = sizeof(lv_draw_sdl_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 800f0c6:	4b04      	ldr	r3, [pc, #16]	; (800f0d8 <lv_disp_drv_init+0x44>)
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 800f0c8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 800f0cc:	2338      	movs	r3, #56	; 0x38
 800f0ce:	6463      	str	r3, [r4, #68]	; 0x44
#endif

}
 800f0d0:	bd10      	pop	{r4, pc}
 800f0d2:	bf00      	nop
 800f0d4:	00f00140 	.word	0x00f00140
 800f0d8:	0800953d 	.word	0x0800953d

0800f0dc <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800f0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0de:	4604      	mov	r4, r0
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	4617      	mov	r7, r2
 800f0e4:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 800f0e6:	211c      	movs	r1, #28
 800f0e8:	f001 f862 	bl	80101b0 <lv_memset_00>

    draw_buf->buf1    = buf1;
    draw_buf->buf2    = buf2;
 800f0ec:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->buf_act = draw_buf->buf1;
    draw_buf->size    = size_in_px_cnt;
 800f0f0:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 800f0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0f8 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fa:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800f0fc:	4835      	ldr	r0, [pc, #212]	; (800f1d4 <lv_disp_drv_register+0xdc>)
 800f0fe:	f000 fd5e 	bl	800fbbe <_lv_ll_ins_head>
    if(!disp) {
 800f102:	4604      	mov	r4, r0
 800f104:	b900      	cbnz	r0, 800f108 <lv_disp_drv_register+0x10>
        LV_ASSERT_MALLOC(disp);
 800f106:	e7fe      	b.n	800f106 <lv_disp_drv_register+0xe>
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 800f108:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f10a:	b953      	cbnz	r3, 800f122 <lv_disp_drv_register+0x2a>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 800f10c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800f10e:	f000 ffd1 	bl	80100b4 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 800f112:	4606      	mov	r6, r0
 800f114:	b900      	cbnz	r0, 800f118 <lv_disp_drv_register+0x20>
 800f116:	e7fe      	b.n	800f116 <lv_disp_drv_register+0x1e>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
 800f118:	4601      	mov	r1, r0
 800f11a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f11c:	4628      	mov	r0, r5
 800f11e:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 800f120:	63ae      	str	r6, [r5, #56]	; 0x38
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 800f122:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f126:	4620      	mov	r0, r4

    disp->driver = driver;

    lv_disp_t * disp_def_tmp = disp_def;
 800f128:	4e2b      	ldr	r6, [pc, #172]	; (800f1d8 <lv_disp_drv_register+0xe0>)
    lv_memset_00(disp, sizeof(lv_disp_t));
 800f12a:	f001 f841 	bl	80101b0 <lv_memset_00>
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 800f12e:	4622      	mov	r2, r4
 800f130:	211e      	movs	r1, #30
 800f132:	482a      	ldr	r0, [pc, #168]	; (800f1dc <lv_disp_drv_register+0xe4>)
    disp->driver = driver;
 800f134:	6025      	str	r5, [r4, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 800f136:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800f138:	6034      	str	r4, [r6, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 800f13a:	f001 fe2b 	bl	8010d94 <lv_timer_create>
 800f13e:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 800f140:	b900      	cbnz	r0, 800f144 <lv_disp_drv_register+0x4c>
 800f142:	e7fe      	b.n	800f142 <lv_disp_drv_register+0x4a>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 800f144:	7c2b      	ldrb	r3, [r5, #16]
 800f146:	079a      	lsls	r2, r3, #30
 800f148:	d50b      	bpl.n	800f162 <lv_disp_drv_register+0x6a>
 800f14a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800f14e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f152:	68e9      	ldr	r1, [r5, #12]
 800f154:	4342      	muls	r2, r0
 800f156:	68c9      	ldr	r1, [r1, #12]
 800f158:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 800f15a:	bf3c      	itt	cc
 800f15c:	f36f 0341 	bfccc	r3, #1, #1
 800f160:	742b      	strbcc	r3, [r5, #16]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 800f162:	23ff      	movs	r3, #255	; 0xff
 800f164:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 800f168:	f64f 73ff 	movw	r3, #65535	; 0xffff
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 800f16c:	2000      	movs	r0, #0
    disp->bg_color = lv_color_white();
 800f16e:	8563      	strh	r3, [r4, #42]	; 0x2a
    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 800f170:	f7f3 faca 	bl	8002708 <lv_obj_create>
 800f174:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 800f176:	2000      	movs	r0, #0
 800f178:	f7f3 fac6 	bl	8002708 <lv_obj_create>
 800f17c:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 800f17e:	2000      	movs	r0, #0
 800f180:	f7f3 fac2 	bl	8002708 <lv_obj_create>
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);

    lv_obj_invalidate(disp->act_scr);

    disp_def = disp_def_tmp; /*Revert the default display*/
 800f184:	2f00      	cmp	r7, #0
 800f186:	bf08      	it	eq
 800f188:	4627      	moveq	r7, r4
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 800f18a:	6220      	str	r0, [r4, #32]
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800f18c:	2100      	movs	r1, #0
 800f18e:	69e0      	ldr	r0, [r4, #28]
 800f190:	4a13      	ldr	r2, [pc, #76]	; (800f1e0 <lv_disp_drv_register+0xe8>)
 800f192:	f7f6 fb55 	bl	8005840 <lv_obj_remove_style>
 800f196:	4a12      	ldr	r2, [pc, #72]	; (800f1e0 <lv_disp_drv_register+0xe8>)
 800f198:	6a20      	ldr	r0, [r4, #32]
 800f19a:	2100      	movs	r1, #0
 800f19c:	f7f6 fb50 	bl	8005840 <lv_obj_remove_style>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 800f1a0:	69e0      	ldr	r0, [r4, #28]
 800f1a2:	2102      	movs	r1, #2
 800f1a4:	f7f3 faf1 	bl	800278a <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 800f1a8:	6a20      	ldr	r0, [r4, #32]
 800f1aa:	2102      	movs	r1, #2
 800f1ac:	f7f3 faed 	bl	800278a <lv_obj_clear_flag>
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 800f1b0:	69e0      	ldr	r0, [r4, #28]
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	f7f5 f83f 	bl	8004236 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	6a20      	ldr	r0, [r4, #32]
 800f1bc:	f7f5 f83b 	bl	8004236 <lv_obj_set_scrollbar_mode>
    lv_obj_invalidate(disp->act_scr);
 800f1c0:	6920      	ldr	r0, [r4, #16]
 800f1c2:	f7f4 fadc 	bl	800377e <lv_obj_invalidate>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 800f1c6:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 800f1c8:	6037      	str	r7, [r6, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 800f1ca:	f001 feed 	bl	8010fa8 <lv_timer_ready>

    return disp;
}
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20004708 	.word	0x20004708
 800f1d8:	20001b98 	.word	0x20001b98
 800f1dc:	08006799 	.word	0x08006799
 800f1e0:	000fffff 	.word	0x000fffff

0800f1e4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800f1e4:	4b01      	ldr	r3, [pc, #4]	; (800f1ec <lv_disp_get_default+0x8>)
 800f1e6:	6818      	ldr	r0, [r3, #0]
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	20001b98 	.word	0x20001b98

0800f1f0 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800f1f0:	b910      	cbnz	r0, 800f1f8 <lv_disp_get_hor_res+0x8>
    return disp_def;
 800f1f2:	4b06      	ldr	r3, [pc, #24]	; (800f20c <lv_disp_get_hor_res+0x1c>)
 800f1f4:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 800f1f6:	b140      	cbz	r0, 800f20a <lv_disp_get_hor_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 800f1f8:	6803      	ldr	r3, [r0, #0]
 800f1fa:	7c1a      	ldrb	r2, [r3, #16]
 800f1fc:	06d2      	lsls	r2, r2, #27
 800f1fe:	d502      	bpl.n	800f206 <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 800f200:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800f204:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 800f206:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 800f20a:	4770      	bx	lr
 800f20c:	20001b98 	.word	0x20001b98

0800f210 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800f210:	b910      	cbnz	r0, 800f218 <lv_disp_get_ver_res+0x8>
    return disp_def;
 800f212:	4b06      	ldr	r3, [pc, #24]	; (800f22c <lv_disp_get_ver_res+0x1c>)
 800f214:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 800f216:	b140      	cbz	r0, 800f22a <lv_disp_get_ver_res+0x1a>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 800f218:	6803      	ldr	r3, [r0, #0]
 800f21a:	7c1a      	ldrb	r2, [r3, #16]
 800f21c:	06d2      	lsls	r2, r2, #27
 800f21e:	d502      	bpl.n	800f226 <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 800f220:	f9b3 0000 	ldrsh.w	r0, [r3]
 800f224:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 800f226:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 800f22a:	4770      	bx	lr
 800f22c:	20001b98 	.word	0x20001b98

0800f230 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800f230:	b910      	cbnz	r0, 800f238 <lv_disp_get_dpi+0x8>
    return disp_def;
 800f232:	4b05      	ldr	r3, [pc, #20]	; (800f248 <lv_disp_get_dpi+0x18>)
 800f234:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 800f236:	b120      	cbz	r0, 800f242 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 800f238:	6803      	ldr	r3, [r0, #0]
 800f23a:	6918      	ldr	r0, [r3, #16]
 800f23c:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 800f240:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 800f242:	2082      	movs	r0, #130	; 0x82
}
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	20001b98 	.word	0x20001b98

0800f24c <lv_disp_flush_ready>:
            lv_memset_00(disp_drv->draw_buf->buf_act, disp_drv->draw_buf->size * sizeof(lv_color32_t));
        }
    }
#endif

    disp_drv->draw_buf->flushing = 0;
 800f24c:	2200      	movs	r2, #0
 800f24e:	68c3      	ldr	r3, [r0, #12]
 800f250:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 800f252:	615a      	str	r2, [r3, #20]
}
 800f254:	4770      	bx	lr

0800f256 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 800f256:	6803      	ldr	r3, [r0, #0]
}
 800f258:	68d8      	ldr	r0, [r3, #12]
 800f25a:	4770      	bx	lr

0800f25c <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800f25c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800f25e:	4803      	ldr	r0, [pc, #12]	; (800f26c <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800f260:	b909      	cbnz	r1, 800f266 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800f262:	f000 bd0c 	b.w	800fc7e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800f266:	f000 bd10 	b.w	800fc8a <_lv_ll_get_next>
 800f26a:	bf00      	nop
 800f26c:	200046f0 	.word	0x200046f0

0800f270 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800f270:	2200      	movs	r2, #0
 800f272:	4b03      	ldr	r3, [pc, #12]	; (800f280 <lv_tick_inc+0x10>)
 800f274:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800f276:	4a03      	ldr	r2, [pc, #12]	; (800f284 <lv_tick_inc+0x14>)
 800f278:	6813      	ldr	r3, [r2, #0]
 800f27a:	4403      	add	r3, r0
 800f27c:	6013      	str	r3, [r2, #0]
}
 800f27e:	4770      	bx	lr
 800f280:	20001ba0 	.word	0x20001ba0
 800f284:	20001b9c 	.word	0x20001b9c

0800f288 <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800f288:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <lv_tick_get+0x14>)
 800f28e:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 800f290:	4b03      	ldr	r3, [pc, #12]	; (800f2a0 <lv_tick_get+0x18>)
 800f292:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 800f294:	781a      	ldrb	r2, [r3, #0]
 800f296:	2a00      	cmp	r2, #0
 800f298:	d0fb      	beq.n	800f292 <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800f29a:	4770      	bx	lr
 800f29c:	20001b9c 	.word	0x20001b9c
 800f2a0:	20001ba0 	.word	0x20001ba0

0800f2a4 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800f2a4:	b510      	push	{r4, lr}
 800f2a6:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800f2a8:	f7ff ffee 	bl	800f288 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800f2ac:	1b00      	subs	r0, r0, r4
 800f2ae:	bd10      	pop	{r4, pc}

0800f2b0 <lv_anim_path_linear>:
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 800f2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 800f2b4:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	2300      	movs	r3, #0
{
 800f2ba:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f2c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f2c2:	f000 fd41 	bl	800fd48 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 800f2c6:	69e2      	ldr	r2, [r4, #28]
 800f2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ca:	1a9b      	subs	r3, r3, r2
 800f2cc:	4358      	muls	r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start_value;

    return new_value;
}
 800f2ce:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd10      	pop	{r4, pc}
	...

0800f2d8 <anim_mark_list_change>:
    }
}

static void anim_mark_list_change(void)
{
    anim_list_changed = true;
 800f2d8:	2201      	movs	r2, #1
{
 800f2da:	b508      	push	{r3, lr}
    anim_list_changed = true;
 800f2dc:	4b08      	ldr	r3, [pc, #32]	; (800f300 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 800f2de:	4809      	ldr	r0, [pc, #36]	; (800f304 <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 800f2e0:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 800f2e2:	f000 fccc 	bl	800fc7e <_lv_ll_get_head>
 800f2e6:	4b08      	ldr	r3, [pc, #32]	; (800f308 <anim_mark_list_change+0x30>)
 800f2e8:	b920      	cbnz	r0, 800f2f4 <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 800f2ea:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 800f2ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 800f2f0:	f001 be50 	b.w	8010f94 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 800f2f4:	6818      	ldr	r0, [r3, #0]
}
 800f2f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 800f2fa:	f001 be50 	b.w	8010f9e <lv_timer_resume>
 800f2fe:	bf00      	nop
 800f300:	20001ba8 	.word	0x20001ba8
 800f304:	20004760 	.word	0x20004760
 800f308:	20001ba4 	.word	0x20001ba4

0800f30c <anim_timer>:
{
 800f30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 800f310:	4e52      	ldr	r6, [pc, #328]	; (800f45c <anim_timer+0x150>)
    anim_run_round = anim_run_round ? false : true;
 800f312:	4d53      	ldr	r5, [pc, #332]	; (800f460 <anim_timer+0x154>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 800f314:	6830      	ldr	r0, [r6, #0]
 800f316:	f7ff ffc5 	bl	800f2a4 <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 800f31a:	782b      	ldrb	r3, [r5, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 800f31c:	4607      	mov	r7, r0
    anim_run_round = anim_run_round ? false : true;
 800f31e:	f083 0301 	eor.w	r3, r3, #1
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f322:	4850      	ldr	r0, [pc, #320]	; (800f464 <anim_timer+0x158>)
    anim_run_round = anim_run_round ? false : true;
 800f324:	702b      	strb	r3, [r5, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f326:	f000 fcaa 	bl	800fc7e <_lv_ll_get_head>
 800f32a:	4604      	mov	r4, r0
        anim_list_changed = false;
 800f32c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800f468 <anim_timer+0x15c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f330:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800f464 <anim_timer+0x158>
    while(a != NULL) {
 800f334:	b924      	cbnz	r4, 800f340 <anim_timer+0x34>
    last_timer_run = lv_tick_get();
 800f336:	f7ff ffa7 	bl	800f288 <lv_tick_get>
 800f33a:	6030      	str	r0, [r6, #0]
}
 800f33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 800f340:	2300      	movs	r3, #0
 800f342:	f889 3000 	strb.w	r3, [r9]
        if(a->run_round != anim_run_round) {
 800f346:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800f34a:	782a      	ldrb	r2, [r5, #0]
 800f34c:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800f350:	4291      	cmp	r1, r2
 800f352:	d07e      	beq.n	800f452 <anim_timer+0x146>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 800f354:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800f358:	0719      	lsls	r1, r3, #28
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 800f35a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	d41a      	bmi.n	800f398 <anim_timer+0x8c>
            int32_t new_act_time = a->act_time + elaps;
 800f362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800f364:	2b00      	cmp	r3, #0
 800f366:	dc17      	bgt.n	800f398 <anim_timer+0x8c>
 800f368:	42fb      	cmn	r3, r7
 800f36a:	d415      	bmi.n	800f398 <anim_timer+0x8c>
                if(a->early_apply == 0 && a->get_value_cb) {
 800f36c:	07d3      	lsls	r3, r2, #31
 800f36e:	d409      	bmi.n	800f384 <anim_timer+0x78>
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	b13b      	cbz	r3, 800f384 <anim_timer+0x78>
                    int32_t v_ofs = a->get_value_cb(a);
 800f374:	4620      	mov	r0, r4
 800f376:	4798      	blx	r3
                    a->start_value += v_ofs;
 800f378:	69e3      	ldr	r3, [r4, #28]
 800f37a:	4403      	add	r3, r0
 800f37c:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 800f37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f380:	4418      	add	r0, r3
 800f382:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 800f384:	68a3      	ldr	r3, [r4, #8]
 800f386:	b10b      	cbz	r3, 800f38c <anim_timer+0x80>
 800f388:	4620      	mov	r0, r4
 800f38a:	4798      	blx	r3
                a->start_cb_called = 1;
 800f38c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800f390:	f043 0308 	orr.w	r3, r3, #8
 800f394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            a->act_time += elaps;
 800f398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f39a:	443b      	add	r3, r7
            if(a->act_time >= 0) {
 800f39c:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800f39e:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 800f3a0:	db2a      	blt.n	800f3f8 <anim_timer+0xec>
                if(a->act_time > a->time) a->act_time = a->time;
 800f3a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                new_value = a->path_cb(a);
 800f3a4:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	bfc8      	it	gt
 800f3aa:	62e2      	strgt	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 800f3ac:	69a3      	ldr	r3, [r4, #24]
 800f3ae:	4798      	blx	r3
                if(new_value != a->current_value) {
 800f3b0:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 800f3b2:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 800f3b4:	4283      	cmp	r3, r0
 800f3b6:	d004      	beq.n	800f3c2 <anim_timer+0xb6>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 800f3b8:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 800f3ba:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 800f3bc:	b10b      	cbz	r3, 800f3c2 <anim_timer+0xb6>
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800f3c2:	e9d4 030a 	ldrd	r0, r3, [r4, #40]	; 0x28
 800f3c6:	4283      	cmp	r3, r0
 800f3c8:	db16      	blt.n	800f3f8 <anim_timer+0xec>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 800f3ca:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800f3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3d0:	f013 0302 	ands.w	r3, r3, #2
 800f3d4:	d11e      	bne.n	800f414 <anim_timer+0x108>
 800f3d6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800f3d8:	b9b2      	cbnz	r2, 800f408 <anim_timer+0xfc>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 800f3da:	2900      	cmp	r1, #0
 800f3dc:	d136      	bne.n	800f44c <anim_timer+0x140>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800f3de:	4621      	mov	r1, r4
 800f3e0:	4640      	mov	r0, r8
 800f3e2:	f000 fc23 	bl	800fc2c <_lv_ll_remove>
        anim_mark_list_change();
 800f3e6:	f7ff ff77 	bl	800f2d8 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 800f3ea:	68e3      	ldr	r3, [r4, #12]
 800f3ec:	b10b      	cbz	r3, 800f3f2 <anim_timer+0xe6>
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	4798      	blx	r3
        lv_mem_free(a);
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 fcd8 	bl	800fda8 <lv_mem_free>
        if(anim_list_changed)
 800f3f8:	f899 3000 	ldrb.w	r3, [r9]
 800f3fc:	b34b      	cbz	r3, 800f452 <anim_timer+0x146>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f3fe:	4640      	mov	r0, r8
 800f400:	f000 fc3d 	bl	800fc7e <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f404:	4604      	mov	r4, r0
 800f406:	e795      	b.n	800f334 <anim_timer+0x28>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 800f408:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800f40c:	4562      	cmp	r2, ip
 800f40e:	d004      	beq.n	800f41a <anim_timer+0x10e>
        a->repeat_cnt--;
 800f410:	3a01      	subs	r2, #1
 800f412:	87a2      	strh	r2, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 800f414:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800f416:	2a00      	cmp	r2, #0
 800f418:	d0df      	beq.n	800f3da <anim_timer+0xce>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 800f41a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f41c:	4252      	negs	r2, r2
 800f41e:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 800f420:	2900      	cmp	r1, #0
 800f422:	d0e9      	beq.n	800f3f8 <anim_timer+0xec>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 800f424:	b913      	cbnz	r3, 800f42c <anim_timer+0x120>
 800f426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f428:	4252      	negs	r2, r2
 800f42a:	62e2      	str	r2, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f42c:	fab3 f383 	clz	r3, r3
 800f430:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800f434:	095b      	lsrs	r3, r3, #5
 800f436:	f363 0241 	bfi	r2, r3, #1, #1
 800f43a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
            a->start_value = a->end_value;
 800f43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
            int32_t tmp    = a->start_value;
 800f440:	69e2      	ldr	r2, [r4, #28]
            a->playback_time = tmp;
 800f442:	6360      	str	r0, [r4, #52]	; 0x34
            a->time = a->playback_time;
 800f444:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
            a->start_value = a->end_value;
 800f448:	61e3      	str	r3, [r4, #28]
            a->playback_time = tmp;
 800f44a:	e7d5      	b.n	800f3f8 <anim_timer+0xec>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d0e4      	beq.n	800f41a <anim_timer+0x10e>
 800f450:	e7c5      	b.n	800f3de <anim_timer+0xd2>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f452:	4621      	mov	r1, r4
 800f454:	4640      	mov	r0, r8
 800f456:	f000 fc18 	bl	800fc8a <_lv_ll_get_next>
 800f45a:	e7d3      	b.n	800f404 <anim_timer+0xf8>
 800f45c:	20001bac 	.word	0x20001bac
 800f460:	20001ba9 	.word	0x20001ba9
 800f464:	20004760 	.word	0x20004760
 800f468:	20001ba8 	.word	0x20001ba8

0800f46c <_lv_anim_core_init>:
{
 800f46c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800f46e:	2140      	movs	r1, #64	; 0x40
 800f470:	4807      	ldr	r0, [pc, #28]	; (800f490 <_lv_anim_core_init+0x24>)
 800f472:	f000 fb9c 	bl	800fbae <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 800f476:	2200      	movs	r2, #0
 800f478:	211e      	movs	r1, #30
 800f47a:	4806      	ldr	r0, [pc, #24]	; (800f494 <_lv_anim_core_init+0x28>)
 800f47c:	f001 fc8a 	bl	8010d94 <lv_timer_create>
 800f480:	4b05      	ldr	r3, [pc, #20]	; (800f498 <_lv_anim_core_init+0x2c>)
 800f482:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 800f484:	f7ff ff28 	bl	800f2d8 <anim_mark_list_change>
    anim_list_changed = false;
 800f488:	2200      	movs	r2, #0
 800f48a:	4b04      	ldr	r3, [pc, #16]	; (800f49c <_lv_anim_core_init+0x30>)
 800f48c:	701a      	strb	r2, [r3, #0]
}
 800f48e:	bd08      	pop	{r3, pc}
 800f490:	20004760 	.word	0x20004760
 800f494:	0800f30d 	.word	0x0800f30d
 800f498:	20001ba4 	.word	0x20001ba4
 800f49c:	20001ba8 	.word	0x20001ba8

0800f4a0 <lv_anim_init>:
{
 800f4a0:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 800f4a2:	2140      	movs	r1, #64	; 0x40
{
 800f4a4:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 800f4a6:	f000 fe83 	bl	80101b0 <lv_memset_00>
    a->time = 500;
 800f4aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f4ae:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61e3      	str	r3, [r4, #28]
    a->end_value = 100;
 800f4b4:	2364      	movs	r3, #100	; 0x64
 800f4b6:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 800f4bc:	4b04      	ldr	r3, [pc, #16]	; (800f4d0 <lv_anim_init+0x30>)
 800f4be:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 800f4c0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800f4c4:	f043 0301 	orr.w	r3, r3, #1
 800f4c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800f4cc:	bd10      	pop	{r4, pc}
 800f4ce:	bf00      	nop
 800f4d0:	0800f2b1 	.word	0x0800f2b1

0800f4d4 <lv_anim_del>:
{
 800f4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4d8:	4605      	mov	r5, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f4da:	4813      	ldr	r0, [pc, #76]	; (800f528 <lv_anim_del+0x54>)
{
 800f4dc:	460e      	mov	r6, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f4de:	f000 fbce 	bl	800fc7e <_lv_ll_get_head>
    bool del = false;
 800f4e2:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f4e6:	4604      	mov	r4, r0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f4e8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800f528 <lv_anim_del+0x54>
    while(a != NULL) {
 800f4ec:	b914      	cbnz	r4, 800f4f4 <lv_anim_del+0x20>
}
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	4648      	mov	r0, r9
 800f4f8:	f000 fbc7 	bl	800fc8a <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800f4fc:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f4fe:	4607      	mov	r7, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800f500:	42ab      	cmp	r3, r5
 800f502:	d000      	beq.n	800f506 <lv_anim_del+0x32>
 800f504:	b975      	cbnz	r5, 800f524 <lv_anim_del+0x50>
 800f506:	6863      	ldr	r3, [r4, #4]
 800f508:	42b3      	cmp	r3, r6
 800f50a:	d000      	beq.n	800f50e <lv_anim_del+0x3a>
 800f50c:	b956      	cbnz	r6, 800f524 <lv_anim_del+0x50>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800f50e:	4621      	mov	r1, r4
 800f510:	4648      	mov	r0, r9
 800f512:	f000 fb8b 	bl	800fc2c <_lv_ll_remove>
            lv_mem_free(a);
 800f516:	4620      	mov	r0, r4
 800f518:	f000 fc46 	bl	800fda8 <lv_mem_free>
            del = true;
 800f51c:	f04f 0801 	mov.w	r8, #1
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 800f520:	f7ff feda 	bl	800f2d8 <anim_mark_list_change>
            del = true;
 800f524:	463c      	mov	r4, r7
 800f526:	e7e1      	b.n	800f4ec <lv_anim_del+0x18>
 800f528:	20004760 	.word	0x20004760

0800f52c <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 800f52c:	6841      	ldr	r1, [r0, #4]
{
 800f52e:	b538      	push	{r3, r4, r5, lr}
 800f530:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 800f532:	b111      	cbz	r1, 800f53a <lv_anim_start+0xe>
 800f534:	6800      	ldr	r0, [r0, #0]
 800f536:	f7ff ffcd 	bl	800f4d4 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 800f53a:	481a      	ldr	r0, [pc, #104]	; (800f5a4 <lv_anim_start+0x78>)
 800f53c:	f000 fbac 	bl	800fc98 <_lv_ll_is_empty>
 800f540:	b118      	cbz	r0, 800f54a <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 800f542:	f7ff fea1 	bl	800f288 <lv_tick_get>
 800f546:	4b18      	ldr	r3, [pc, #96]	; (800f5a8 <lv_anim_start+0x7c>)
 800f548:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800f54a:	4816      	ldr	r0, [pc, #88]	; (800f5a4 <lv_anim_start+0x78>)
 800f54c:	f000 fb37 	bl	800fbbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 800f550:	4604      	mov	r4, r0
 800f552:	b900      	cbnz	r0, 800f556 <lv_anim_start+0x2a>
 800f554:	e7fe      	b.n	800f554 <lv_anim_start+0x28>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 800f556:	2240      	movs	r2, #64	; 0x40
 800f558:	4629      	mov	r1, r5
 800f55a:	f000 fc61 	bl	800fe20 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 800f55e:	682b      	ldr	r3, [r5, #0]
    new_anim->run_round = anim_run_round;
 800f560:	4a12      	ldr	r2, [pc, #72]	; (800f5ac <lv_anim_start+0x80>)
    if(a->var == a) new_anim->var = new_anim;
 800f562:	42ab      	cmp	r3, r5
    new_anim->run_round = anim_run_round;
 800f564:	7812      	ldrb	r2, [r2, #0]
 800f566:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    if(a->var == a) new_anim->var = new_anim;
 800f56a:	bf08      	it	eq
 800f56c:	6024      	streq	r4, [r4, #0]
    new_anim->run_round = anim_run_round;
 800f56e:	f362 0382 	bfi	r3, r2, #2, #1
 800f572:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if(new_anim->early_apply) {
 800f576:	07db      	lsls	r3, r3, #31
 800f578:	d50f      	bpl.n	800f59a <lv_anim_start+0x6e>
        if(new_anim->get_value_cb) {
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	b13b      	cbz	r3, 800f58e <lv_anim_start+0x62>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 800f57e:	4620      	mov	r0, r4
 800f580:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 800f582:	69e3      	ldr	r3, [r4, #28]
 800f584:	4403      	add	r3, r0
 800f586:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 800f588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58a:	4418      	add	r0, r3
 800f58c:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 800f58e:	6863      	ldr	r3, [r4, #4]
 800f590:	b11b      	cbz	r3, 800f59a <lv_anim_start+0x6e>
 800f592:	6820      	ldr	r0, [r4, #0]
 800f594:	b108      	cbz	r0, 800f59a <lv_anim_start+0x6e>
 800f596:	69e1      	ldr	r1, [r4, #28]
 800f598:	4798      	blx	r3
    anim_mark_list_change();
 800f59a:	f7ff fe9d 	bl	800f2d8 <anim_mark_list_change>
}
 800f59e:	4620      	mov	r0, r4
 800f5a0:	bd38      	pop	{r3, r4, r5, pc}
 800f5a2:	bf00      	nop
 800f5a4:	20004760 	.word	0x20004760
 800f5a8:	20001bac 	.word	0x20001bac
 800f5ac:	20001ba9 	.word	0x20001ba9

0800f5b0 <lv_anim_get>:
{
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 800f5b4:	4809      	ldr	r0, [pc, #36]	; (800f5dc <lv_anim_get+0x2c>)
{
 800f5b6:	460c      	mov	r4, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 800f5b8:	f000 fb61 	bl	800fc7e <_lv_ll_get_head>
 800f5bc:	4e07      	ldr	r6, [pc, #28]	; (800f5dc <lv_anim_get+0x2c>)
 800f5be:	b900      	cbnz	r0, 800f5c2 <lv_anim_get+0x12>
}
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800f5c2:	6803      	ldr	r3, [r0, #0]
 800f5c4:	42ab      	cmp	r3, r5
 800f5c6:	d104      	bne.n	800f5d2 <lv_anim_get+0x22>
 800f5c8:	6843      	ldr	r3, [r0, #4]
 800f5ca:	42a3      	cmp	r3, r4
 800f5cc:	d0f8      	beq.n	800f5c0 <lv_anim_get+0x10>
 800f5ce:	2c00      	cmp	r4, #0
 800f5d0:	d0f6      	beq.n	800f5c0 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f000 fb58 	bl	800fc8a <_lv_ll_get_next>
 800f5da:	e7f0      	b.n	800f5be <lv_anim_get+0xe>
 800f5dc:	20004760 	.word	0x20004760

0800f5e0 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 800f5e0:	1a89      	subs	r1, r1, r2
    uint32_t time = (d * 1000) / speed;
 800f5e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    uint32_t d    = LV_ABS(start - end);
 800f5e6:	2900      	cmp	r1, #0
 800f5e8:	bfb8      	it	lt
 800f5ea:	4249      	neglt	r1, r1
    uint32_t time = (d * 1000) / speed;
 800f5ec:	4351      	muls	r1, r2
{
 800f5ee:	4603      	mov	r3, r0
    uint32_t time = (d * 1000) / speed;
 800f5f0:	fbb1 f0f0 	udiv	r0, r1, r0
    if(time == 0) {
 800f5f4:	4299      	cmp	r1, r3
        time++;
 800f5f6:	bf38      	it	cc
 800f5f8:	3001      	addcc	r0, #1
}
 800f5fa:	4770      	bx	lr

0800f5fc <lv_anim_path_ease_out>:
{
 800f5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 800f5fe:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800f602:	2300      	movs	r3, #0
{
 800f604:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 800f606:	9500      	str	r5, [sp, #0]
 800f608:	4619      	mov	r1, r3
 800f60a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f60c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800f60e:	f000 fb9b 	bl	800fd48 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 800f612:	f240 33b6 	movw	r3, #950	; 0x3b6
 800f616:	f44f 7261 	mov.w	r2, #900	; 0x384
 800f61a:	2100      	movs	r1, #0
 800f61c:	9500      	str	r5, [sp, #0]
 800f61e:	f000 fb73 	bl	800fd08 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 800f622:	69e2      	ldr	r2, [r4, #28]
 800f624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f626:	1a9b      	subs	r3, r3, r2
 800f628:	4358      	muls	r0, r3
}
 800f62a:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 800f62e:	b003      	add	sp, #12
 800f630:	bd30      	pop	{r4, r5, pc}

0800f632 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 800f632:	b570      	push	{r4, r5, r6, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800f634:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f638:	f9b0 6000 	ldrsh.w	r6, [r0]
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 800f63c:	880b      	ldrh	r3, [r1, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800f63e:	1b92      	subs	r2, r2, r6
 800f640:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    lv_coord_t cx = area->x1 + r;
 800f644:	f3c2 044f 	ubfx	r4, r2, #1, #16
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800f648:	1055      	asrs	r5, r2, #1
    lv_coord_t py = p->y - cy;
 800f64a:	884a      	ldrh	r2, [r1, #2]
 800f64c:	8841      	ldrh	r1, [r0, #2]
    lv_coord_t px = p->x - cx;
 800f64e:	1b9b      	subs	r3, r3, r6
    lv_coord_t py = p->y - cy;
 800f650:	1a52      	subs	r2, r2, r1
 800f652:	1b12      	subs	r2, r2, r4

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);
 800f654:	b212      	sxth	r2, r2
 800f656:	4352      	muls	r2, r2
    lv_coord_t px = p->x - cx;
 800f658:	1b1b      	subs	r3, r3, r4
    uint32_t dist = (px * px) + (py * py);
 800f65a:	b21b      	sxth	r3, r3
    uint32_t r_sqrd = r * r;
 800f65c:	436d      	muls	r5, r5
    uint32_t dist = (px * px) + (py * py);
 800f65e:	fb03 2303 	mla	r3, r3, r3, r2

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 800f662:	429d      	cmp	r5, r3
 800f664:	bf34      	ite	cc
 800f666:	2000      	movcc	r0, #0
 800f668:	2001      	movcs	r0, #1
 800f66a:	bd70      	pop	{r4, r5, r6, pc}

0800f66c <lv_area_set>:
    area_p->x2 = x2;
 800f66c:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800f66e:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800f672:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800f674:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800f676:	80c3      	strh	r3, [r0, #6]
}
 800f678:	4770      	bx	lr

0800f67a <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 800f67a:	8803      	ldrh	r3, [r0, #0]
 800f67c:	3901      	subs	r1, #1
 800f67e:	4419      	add	r1, r3
 800f680:	8081      	strh	r1, [r0, #4]
}
 800f682:	4770      	bx	lr

0800f684 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 800f684:	8843      	ldrh	r3, [r0, #2]
 800f686:	3901      	subs	r1, #1
 800f688:	4419      	add	r1, r3
 800f68a:	80c1      	strh	r1, [r0, #6]
}
 800f68c:	4770      	bx	lr

0800f68e <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800f68e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800f692:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f696:	1ad2      	subs	r2, r2, r3
 800f698:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f69c:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800f6a0:	1a18      	subs	r0, r3, r0
 800f6a2:	3001      	adds	r0, #1
}
 800f6a4:	fb02 0000 	mla	r0, r2, r0, r0
 800f6a8:	4770      	bx	lr

0800f6aa <lv_area_increase>:
    area->x1 -= w_extra;
 800f6aa:	8803      	ldrh	r3, [r0, #0]
 800f6ac:	b289      	uxth	r1, r1
 800f6ae:	1a5b      	subs	r3, r3, r1
 800f6b0:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 800f6b2:	8883      	ldrh	r3, [r0, #4]
    area->y1 -= h_extra;
 800f6b4:	b292      	uxth	r2, r2
    area->x2 += w_extra;
 800f6b6:	4419      	add	r1, r3
    area->y1 -= h_extra;
 800f6b8:	8843      	ldrh	r3, [r0, #2]
    area->x2 += w_extra;
 800f6ba:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 800f6bc:	1a9b      	subs	r3, r3, r2
 800f6be:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 800f6c0:	88c3      	ldrh	r3, [r0, #6]
 800f6c2:	441a      	add	r2, r3
 800f6c4:	80c2      	strh	r2, [r0, #6]
}
 800f6c6:	4770      	bx	lr

0800f6c8 <lv_area_move>:
    area->x1 += x_ofs;
 800f6c8:	8803      	ldrh	r3, [r0, #0]
 800f6ca:	b289      	uxth	r1, r1
 800f6cc:	440b      	add	r3, r1
 800f6ce:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 800f6d0:	8883      	ldrh	r3, [r0, #4]
    area->y1 += y_ofs;
 800f6d2:	b292      	uxth	r2, r2
    area->x2 += x_ofs;
 800f6d4:	4419      	add	r1, r3
    area->y1 += y_ofs;
 800f6d6:	8843      	ldrh	r3, [r0, #2]
    area->x2 += x_ofs;
 800f6d8:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 800f6da:	4413      	add	r3, r2
 800f6dc:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 800f6de:	88c3      	ldrh	r3, [r0, #6]
 800f6e0:	441a      	add	r2, r3
 800f6e2:	80c2      	strh	r2, [r0, #6]
}
 800f6e4:	4770      	bx	lr

0800f6e6 <_lv_area_intersect>:
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 800f6e6:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800f6ea:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 800f6ec:	f9b2 6000 	ldrsh.w	r6, [r2]
{
 800f6f0:	4604      	mov	r4, r0
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 800f6f2:	429e      	cmp	r6, r3
 800f6f4:	bfb8      	it	lt
 800f6f6:	461e      	movlt	r6, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 800f6f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 800f6fc:	8006      	strh	r6, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 800f6fe:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 800f702:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 800f706:	4283      	cmp	r3, r0
 800f708:	bfb8      	it	lt
 800f70a:	4603      	movlt	r3, r0
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 800f70c:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 800f710:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 800f712:	4285      	cmp	r5, r0
 800f714:	bfa8      	it	ge
 800f716:	4605      	movge	r5, r0
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 800f718:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800f71c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 800f720:	80a5      	strh	r5, [r4, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 800f722:	4290      	cmp	r0, r2
 800f724:	bfa8      	it	ge
 800f726:	4610      	movge	r0, r2
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800f728:	42ae      	cmp	r6, r5
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 800f72a:	80e0      	strh	r0, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800f72c:	dc04      	bgt.n	800f738 <_lv_area_intersect+0x52>
 800f72e:	4283      	cmp	r3, r0
 800f730:	bfcc      	ite	gt
 800f732:	2000      	movgt	r0, #0
 800f734:	2001      	movle	r0, #1
}
 800f736:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800f738:	2000      	movs	r0, #0
 800f73a:	e7fc      	b.n	800f736 <_lv_area_intersect+0x50>

0800f73c <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 800f73c:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800f740:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 800f742:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f746:	42a3      	cmp	r3, r4
 800f748:	bfa8      	it	ge
 800f74a:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 800f74c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 800f750:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 800f752:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800f756:	42a3      	cmp	r3, r4
 800f758:	bfa8      	it	ge
 800f75a:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 800f75c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 800f760:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 800f762:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800f766:	42a3      	cmp	r3, r4
 800f768:	bfb8      	it	lt
 800f76a:	4623      	movlt	r3, r4
 800f76c:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 800f76e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800f772:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800f776:	4293      	cmp	r3, r2
 800f778:	bfb8      	it	lt
 800f77a:	4613      	movlt	r3, r2
 800f77c:	80c3      	strh	r3, [r0, #6]
}
 800f77e:	bd10      	pop	{r4, pc}

0800f780 <_lv_area_is_point_on>:
{
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800f784:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f788:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 800f78c:	4688      	mov	r8, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800f78e:	42a3      	cmp	r3, r4
{
 800f790:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800f792:	f2c0 8089 	blt.w	800f8a8 <_lv_area_is_point_on+0x128>
 800f796:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 800f79a:	455b      	cmp	r3, fp
 800f79c:	f300 8084 	bgt.w	800f8a8 <_lv_area_is_point_on+0x128>
 800f7a0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f7a4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 800f7a8:	4555      	cmp	r5, sl
 800f7aa:	db7d      	blt.n	800f8a8 <_lv_area_is_point_on+0x128>
 800f7ac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f7b0:	429d      	cmp	r5, r3
 800f7b2:	dc79      	bgt.n	800f8a8 <_lv_area_is_point_on+0x128>
    if(radius <= 0) {
 800f7b4:	2a00      	cmp	r2, #0
 800f7b6:	dc03      	bgt.n	800f7c0 <_lv_area_is_point_on+0x40>
        return true;
 800f7b8:	2001      	movs	r0, #1
}
 800f7ba:	b005      	add	sp, #20
 800f7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f7c0:	b29e      	uxth	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f7c2:	fa1f f58b 	uxth.w	r5, fp
 800f7c6:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f7c8:	fa1f f98a 	uxth.w	r9, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f7cc:	1c68      	adds	r0, r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f7ce:	f106 0c01 	add.w	ip, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f7d2:	1bc0      	subs	r0, r0, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f7d4:	ebac 0c09 	sub.w	ip, ip, r9
    corner_area.x1 = a_p->x1;
 800f7d8:	f8ad 4008 	strh.w	r4, [sp, #8]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800f7dc:	fa0f fe8c 	sxth.w	lr, ip
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800f7e0:	b204      	sxth	r4, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800f7e2:	f3cc 3cc0 	ubfx	ip, ip, #15, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800f7e6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800f7ea:	4420      	add	r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800f7ec:	44e6      	add	lr, ip
    lv_coord_t max_radius = LV_MIN(w, h);
 800f7ee:	ea4f 0c6e 	mov.w	ip, lr, asr #1
 800f7f2:	1040      	asrs	r0, r0, #1
    corner_area.x2 = a_p->x1 + radius;
 800f7f4:	4584      	cmp	ip, r0
 800f7f6:	bfa8      	it	ge
 800f7f8:	4684      	movge	ip, r0
 800f7fa:	4562      	cmp	r2, ip
 800f7fc:	bfa8      	it	ge
 800f7fe:	4662      	movge	r2, ip
 800f800:	b294      	uxth	r4, r2
    corner_area.y2 = a_p->y1 + radius;
 800f802:	44a1      	add	r9, r4
    corner_area.x2 = a_p->x1 + radius;
 800f804:	4427      	add	r7, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f806:	2200      	movs	r2, #0
 800f808:	9301      	str	r3, [sp, #4]
    corner_area.x2 = a_p->x1 + radius;
 800f80a:	b2bf      	uxth	r7, r7
    corner_area.y2 = a_p->y1 + radius;
 800f80c:	fa1f f389 	uxth.w	r3, r9
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f810:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y1 + radius;
 800f812:	fa0f f989 	sxth.w	r9, r9
 800f816:	9300      	str	r3, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 800f818:	f8ad 700c 	strh.w	r7, [sp, #12]
    corner_area.y1 = a_p->y1;
 800f81c:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 800f820:	f8ad 900e 	strh.w	r9, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f824:	f7ff ffac 	bl	800f780 <_lv_area_is_point_on>
 800f828:	9b01      	ldr	r3, [sp, #4]
 800f82a:	4602      	mov	r2, r0
 800f82c:	b138      	cbz	r0, 800f83e <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 800f82e:	4427      	add	r7, r4
 800f830:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y2 += radius;
 800f834:	9b00      	ldr	r3, [sp, #0]
 800f836:	441c      	add	r4, r3
 800f838:	f8ad 400e 	strh.w	r4, [sp, #14]
 800f83c:	e011      	b.n	800f862 <_lv_area_is_point_on+0xe2>
    corner_area.y1 = a_p->y2 - radius;
 800f83e:	1b36      	subs	r6, r6, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f840:	4641      	mov	r1, r8
    corner_area.y1 = a_p->y2 - radius;
 800f842:	b2b6      	uxth	r6, r6
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f844:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y2 - radius;
 800f846:	f8ad 600a 	strh.w	r6, [sp, #10]
    corner_area.y2 = a_p->y2;
 800f84a:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f84e:	f7ff ff97 	bl	800f780 <_lv_area_is_point_on>
 800f852:	4602      	mov	r2, r0
 800f854:	b150      	cbz	r0, 800f86c <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
 800f856:	4427      	add	r7, r4
 800f858:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y1 -= radius;
 800f85c:	1b34      	subs	r4, r6, r4
 800f85e:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 800f862:	4641      	mov	r1, r8
 800f864:	a802      	add	r0, sp, #8
 800f866:	f7ff fee4 	bl	800f632 <lv_point_within_circle>
 800f86a:	e7a6      	b.n	800f7ba <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 800f86c:	1b2d      	subs	r5, r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f86e:	4641      	mov	r1, r8
    corner_area.x1 = a_p->x2 - radius;
 800f870:	b2ad      	uxth	r5, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f872:	a802      	add	r0, sp, #8
    corner_area.x1 = a_p->x2 - radius;
 800f874:	f8ad 5008 	strh.w	r5, [sp, #8]
    corner_area.x2 = a_p->x2;
 800f878:	f8ad b00c 	strh.w	fp, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f87c:	f7ff ff80 	bl	800f780 <_lv_area_is_point_on>
 800f880:	4602      	mov	r2, r0
 800f882:	b118      	cbz	r0, 800f88c <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 800f884:	1b2d      	subs	r5, r5, r4
 800f886:	f8ad 5008 	strh.w	r5, [sp, #8]
 800f88a:	e7e7      	b.n	800f85c <_lv_area_is_point_on+0xdc>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f88c:	4641      	mov	r1, r8
 800f88e:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 800f890:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 800f894:	f8ad 900e 	strh.w	r9, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800f898:	f7ff ff72 	bl	800f780 <_lv_area_is_point_on>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d08b      	beq.n	800f7b8 <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 800f8a0:	1b2d      	subs	r5, r5, r4
 800f8a2:	f8ad 5008 	strh.w	r5, [sp, #8]
 800f8a6:	e7c5      	b.n	800f834 <_lv_area_is_point_on+0xb4>
        return false;
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e786      	b.n	800f7ba <_lv_area_is_point_on+0x3a>

0800f8ac <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800f8ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f8b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	dc14      	bgt.n	800f8e2 <_lv_area_is_on+0x36>
 800f8b8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f8bc:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	db0e      	blt.n	800f8e2 <_lv_area_is_on+0x36>
 800f8c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f8c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	dc08      	bgt.n	800f8e2 <_lv_area_is_on+0x36>
 800f8d0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f8d4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f8d8:	4298      	cmp	r0, r3
 800f8da:	bfb4      	ite	lt
 800f8dc:	2000      	movlt	r0, #0
 800f8de:	2001      	movge	r0, #1
 800f8e0:	4770      	bx	lr
        return false;
 800f8e2:	2000      	movs	r0, #0
}
 800f8e4:	4770      	bx	lr

0800f8e6 <_lv_area_is_in>:
{
 800f8e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f8ea:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f8ee:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 800f8f2:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f8f4:	42bb      	cmp	r3, r7
{
 800f8f6:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f8f8:	dd03      	ble.n	800f902 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 800f8fa:	2000      	movs	r0, #0
}
 800f8fc:	b002      	add	sp, #8
 800f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f902:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f906:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f90a:	4299      	cmp	r1, r3
 800f90c:	dcf5      	bgt.n	800f8fa <_lv_area_is_in+0x14>
 800f90e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800f912:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f916:	42b1      	cmp	r1, r6
 800f918:	dbef      	blt.n	800f8fa <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 800f91a:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f91e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f922:	4541      	cmp	r1, r8
 800f924:	dbe9      	blt.n	800f8fa <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 800f926:	b32a      	cbz	r2, 800f974 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f928:	4620      	mov	r0, r4
 800f92a:	a901      	add	r1, sp, #4
    p.x = ain_p->x1;
 800f92c:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 800f930:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f934:	f7ff ff24 	bl	800f780 <_lv_area_is_point_on>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d0de      	beq.n	800f8fa <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f93c:	462a      	mov	r2, r5
 800f93e:	4620      	mov	r0, r4
 800f940:	a901      	add	r1, sp, #4
    p.x = ain_p->x2;
 800f942:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f946:	f7ff ff1b 	bl	800f780 <_lv_area_is_point_on>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d0d5      	beq.n	800f8fa <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f94e:	462a      	mov	r2, r5
 800f950:	4620      	mov	r0, r4
 800f952:	a901      	add	r1, sp, #4
    p.x = ain_p->x1;
 800f954:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 800f958:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f95c:	f7ff ff10 	bl	800f780 <_lv_area_is_point_on>
 800f960:	2800      	cmp	r0, #0
 800f962:	d0ca      	beq.n	800f8fa <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f964:	462a      	mov	r2, r5
 800f966:	4620      	mov	r0, r4
 800f968:	a901      	add	r1, sp, #4
    p.x = ain_p->x2;
 800f96a:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800f96e:	f7ff ff07 	bl	800f780 <_lv_area_is_point_on>
 800f972:	e7c3      	b.n	800f8fc <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 800f974:	2001      	movs	r0, #1
 800f976:	e7c1      	b.n	800f8fc <_lv_area_is_in+0x16>

0800f978 <_lv_area_is_out>:
{
 800f978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 800f97c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f980:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
{
 800f984:	460c      	mov	r4, r1
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 800f986:	42b3      	cmp	r3, r6
{
 800f988:	4615      	mov	r5, r2
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 800f98a:	dc3f      	bgt.n	800fa0c <_lv_area_is_out+0x94>
 800f98c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 800f990:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f994:	4543      	cmp	r3, r8
 800f996:	dc39      	bgt.n	800fa0c <_lv_area_is_out+0x94>
 800f998:	f9b0 7000 	ldrsh.w	r7, [r0]
 800f99c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f9a0:	42bb      	cmp	r3, r7
 800f9a2:	db33      	blt.n	800fa0c <_lv_area_is_out+0x94>
       aout_p->y1 > aholder_p->y2) {
 800f9a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 800f9a8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800f9ac:	4299      	cmp	r1, r3
 800f9ae:	db2d      	blt.n	800fa0c <_lv_area_is_out+0x94>
    if(radius == 0) return false;
 800f9b0:	b91a      	cbnz	r2, 800f9ba <_lv_area_is_out+0x42>
 800f9b2:	2000      	movs	r0, #0
}
 800f9b4:	b002      	add	sp, #8
 800f9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	a901      	add	r1, sp, #4
    p.x = aout_p->x1;
 800f9be:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y1;
 800f9c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9c6:	f7ff fedb 	bl	800f780 <_lv_area_is_point_on>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d1f1      	bne.n	800f9b2 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	a901      	add	r1, sp, #4
    p.x = aout_p->x2;
 800f9d4:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9d8:	f7ff fed2 	bl	800f780 <_lv_area_is_point_on>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1e8      	bne.n	800f9b2 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9e0:	462a      	mov	r2, r5
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	a901      	add	r1, sp, #4
    p.x = aout_p->x1;
 800f9e6:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y2;
 800f9ea:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9ee:	f7ff fec7 	bl	800f780 <_lv_area_is_point_on>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d1dd      	bne.n	800f9b2 <_lv_area_is_out+0x3a>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800f9f6:	462a      	mov	r2, r5
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	a901      	add	r1, sp, #4
    p.x = aout_p->x2;
 800f9fc:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 800fa00:	f7ff febe 	bl	800f780 <_lv_area_is_point_on>
 800fa04:	f080 0001 	eor.w	r0, r0, #1
 800fa08:	b2c0      	uxtb	r0, r0
 800fa0a:	e7d3      	b.n	800f9b4 <_lv_area_is_out+0x3c>
        return true;
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	e7d1      	b.n	800f9b4 <_lv_area_is_out+0x3c>

0800fa10 <lv_color_black>:
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
}
 800fa10:	f04f 0000 	mov.w	r0, #0
 800fa14:	4770      	bx	lr

0800fa16 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 800fa16:	0783      	lsls	r3, r0, #30
{
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	b28c      	uxth	r4, r1
        *buf = color;
 800fa1c:	bf1c      	itt	ne
 800fa1e:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
 800fa22:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 800fa26:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 800fa2a:	2a10      	cmp	r2, #16
 800fa2c:	4601      	mov	r1, r0
 800fa2e:	f100 0020 	add.w	r0, r0, #32
 800fa32:	d804      	bhi.n	800fa3e <lv_color_fill+0x28>
 800fa34:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 800fa38:	4291      	cmp	r1, r2
 800fa3a:	d10a      	bne.n	800fa52 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 800fa3c:	bd10      	pop	{r4, pc}
        *buf32 = c32;
 800fa3e:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 800fa42:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 800fa46:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 800fa4a:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 800fa4e:	3a10      	subs	r2, #16
 800fa50:	e7eb      	b.n	800fa2a <lv_color_fill+0x14>
        *buf = color;
 800fa52:	f821 4b02 	strh.w	r4, [r1], #2
        px_num--;
 800fa56:	e7ef      	b.n	800fa38 <lv_color_fill+0x22>

0800fa58 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 800fa58:	2812      	cmp	r0, #18
 800fa5a:	d901      	bls.n	800fa60 <lv_palette_main+0x8>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 800fa5c:	f7ff bfd8 	b.w	800fa10 <lv_color_black>
    }

    return colors[p];

}
 800fa60:	4b01      	ldr	r3, [pc, #4]	; (800fa68 <lv_palette_main+0x10>)
 800fa62:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800fa66:	4770      	bx	lr
 800fa68:	0801a4cc 	.word	0x0801a4cc

0800fa6c <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 800fa6c:	2104      	movs	r1, #4
 800fa6e:	4801      	ldr	r0, [pc, #4]	; (800fa74 <_lv_fs_init+0x8>)
 800fa70:	f000 b89d 	b.w	800fbae <_lv_ll_init>
 800fa74:	200047ec 	.word	0x200047ec

0800fa78 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800fa7c:	6840      	ldr	r0, [r0, #4]
 800fa7e:	b138      	cbz	r0, 800fa90 <lv_fs_close+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 800fa80:	68c3      	ldr	r3, [r0, #12]
 800fa82:	b13b      	cbz	r3, 800fa94 <lv_fs_close+0x1c>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800fa84:	6821      	ldr	r1, [r4, #0]
 800fa86:	4798      	blx	r3

    file_p->file_d = NULL;
 800fa88:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 800fa8a:	e9c4 3300 	strd	r3, r3, [r4]

    return res;
}
 800fa8e:	bd10      	pop	{r4, pc}
        return LV_FS_RES_INV_PARAM;
 800fa90:	200b      	movs	r0, #11
 800fa92:	e7fc      	b.n	800fa8e <lv_fs_close+0x16>
        return LV_FS_RES_NOT_IMP;
 800fa94:	2009      	movs	r0, #9
 800fa96:	e7fa      	b.n	800fa8e <lv_fs_close+0x16>

0800fa98 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 800fa98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fa9a:	4605      	mov	r5, r0
    if(br != NULL) *br = 0;
 800fa9c:	461c      	mov	r4, r3
 800fa9e:	b10b      	cbz	r3, 800faa4 <lv_fs_read+0xc>
 800faa0:	2300      	movs	r3, #0
 800faa2:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800faa4:	6868      	ldr	r0, [r5, #4]
 800faa6:	b170      	cbz	r0, 800fac6 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800faa8:	6906      	ldr	r6, [r0, #16]
 800faaa:	b176      	cbz	r6, 800faca <lv_fs_read+0x32>

    uint32_t br_tmp = 0;
 800faac:	2300      	movs	r3, #0
 800faae:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800fab0:	ab03      	add	r3, sp, #12
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	4613      	mov	r3, r2
 800fab6:	460a      	mov	r2, r1
 800fab8:	6829      	ldr	r1, [r5, #0]
 800faba:	47b0      	blx	r6
    if(br != NULL) *br = br_tmp;
 800fabc:	b10c      	cbz	r4, 800fac2 <lv_fs_read+0x2a>
 800fabe:	9b03      	ldr	r3, [sp, #12]
 800fac0:	6023      	str	r3, [r4, #0]

    return res;
}
 800fac2:	b004      	add	sp, #16
 800fac4:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800fac6:	200b      	movs	r0, #11
 800fac8:	e7fb      	b.n	800fac2 <lv_fs_read+0x2a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800faca:	2009      	movs	r0, #9
 800facc:	e7f9      	b.n	800fac2 <lv_fs_read+0x2a>

0800face <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 800face:	b430      	push	{r4, r5}
 800fad0:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800fad2:	6840      	ldr	r0, [r0, #4]
{
 800fad4:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 800fad6:	b130      	cbz	r0, 800fae6 <lv_fs_seek+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 800fad8:	6985      	ldr	r5, [r0, #24]
 800fada:	b13d      	cbz	r5, 800faec <lv_fs_seek+0x1e>
        return LV_FS_RES_NOT_IMP;
    }

    return file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 800fadc:	460a      	mov	r2, r1
 800fade:	46ac      	mov	ip, r5
 800fae0:	6821      	ldr	r1, [r4, #0]
}
 800fae2:	bc30      	pop	{r4, r5}
    return file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 800fae4:	4760      	bx	ip
        return LV_FS_RES_INV_PARAM;
 800fae6:	200b      	movs	r0, #11
}
 800fae8:	bc30      	pop	{r4, r5}
 800faea:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800faec:	2009      	movs	r0, #9
 800faee:	e7fb      	b.n	800fae8 <lv_fs_seek+0x1a>

0800faf0 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 800faf4:	4808      	ldr	r0, [pc, #32]	; (800fb18 <lv_fs_get_drv+0x28>)
 800faf6:	f000 f8c2 	bl	800fc7e <_lv_ll_get_head>
 800fafa:	4601      	mov	r1, r0
 800fafc:	4d06      	ldr	r5, [pc, #24]	; (800fb18 <lv_fs_get_drv+0x28>)
 800fafe:	b909      	cbnz	r1, 800fb04 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 800fb00:	4608      	mov	r0, r1
}
 800fb02:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 800fb04:	6808      	ldr	r0, [r1, #0]
 800fb06:	7803      	ldrb	r3, [r0, #0]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	d0fa      	beq.n	800fb02 <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f000 f8bc 	bl	800fc8a <_lv_ll_get_next>
 800fb12:	4601      	mov	r1, r0
 800fb14:	e7f3      	b.n	800fafe <lv_fs_get_drv+0xe>
 800fb16:	bf00      	nop
 800fb18:	200047ec 	.word	0x200047ec

0800fb1c <lv_fs_open>:
{
 800fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1e:	4606      	mov	r6, r0
 800fb20:	4617      	mov	r7, r2
    if(path == NULL) {
 800fb22:	460c      	mov	r4, r1
 800fb24:	b1f1      	cbz	r1, 800fb64 <lv_fs_open+0x48>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 800fb26:	7808      	ldrb	r0, [r1, #0]
 800fb28:	f7ff ffe2 	bl	800faf0 <lv_fs_get_drv>
    if(drv == NULL) {
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	b1d8      	cbz	r0, 800fb68 <lv_fs_open+0x4c>
    if(drv->ready_cb) {
 800fb30:	6843      	ldr	r3, [r0, #4]
 800fb32:	b91b      	cbnz	r3, 800fb3c <lv_fs_open+0x20>
    if(drv->open_cb == NULL) {
 800fb34:	68ab      	ldr	r3, [r5, #8]
 800fb36:	b933      	cbnz	r3, 800fb46 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_IMP;
 800fb38:	2009      	movs	r0, #9
 800fb3a:	e003      	b.n	800fb44 <lv_fs_open+0x28>
        if(drv->ready_cb(drv) == false) {
 800fb3c:	4798      	blx	r3
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d1f8      	bne.n	800fb34 <lv_fs_open+0x18>
            return LV_FS_RES_HW_ERR;
 800fb42:	2001      	movs	r0, #1
}
 800fb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 800fb46:	7862      	ldrb	r2, [r4, #1]
    void * file_d = drv->open_cb(drv, real_path, mode);
 800fb48:	4628      	mov	r0, r5
    if(*path == ':') path++;
 800fb4a:	2a3a      	cmp	r2, #58	; 0x3a
    path++; /*Ignore the driver letter*/
 800fb4c:	bf14      	ite	ne
 800fb4e:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 800fb50:	1ca1      	addeq	r1, r4, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 800fb52:	463a      	mov	r2, r7
 800fb54:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 800fb56:	1e43      	subs	r3, r0, #1
 800fb58:	3303      	adds	r3, #3
 800fb5a:	d807      	bhi.n	800fb6c <lv_fs_open+0x50>
    file_p->file_d = file_d;
 800fb5c:	e9c6 0500 	strd	r0, r5, [r6]
    return LV_FS_RES_OK;
 800fb60:	2000      	movs	r0, #0
 800fb62:	e7ef      	b.n	800fb44 <lv_fs_open+0x28>
        return LV_FS_RES_INV_PARAM;
 800fb64:	200b      	movs	r0, #11
 800fb66:	e7ed      	b.n	800fb44 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 800fb68:	2003      	movs	r0, #3
 800fb6a:	e7eb      	b.n	800fb44 <lv_fs_open+0x28>
        return LV_FS_RES_UNKNOWN;
 800fb6c:	200c      	movs	r0, #12
 800fb6e:	e7e9      	b.n	800fb44 <lv_fs_open+0x28>

0800fb70 <lv_fs_get_ext>:
{
 800fb70:	b510      	push	{r4, lr}
 800fb72:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800fb74:	f7f0 faf4 	bl	8000160 <strlen>
 800fb78:	b908      	cbnz	r0, 800fb7e <lv_fs_get_ext+0xe>
            return ""; /*No extension if a '\' or '/' found*/
 800fb7a:	4807      	ldr	r0, [pc, #28]	; (800fb98 <lv_fs_get_ext+0x28>)
 800fb7c:	e004      	b.n	800fb88 <lv_fs_get_ext+0x18>
        if(fn[i - 1] == '.') {
 800fb7e:	1e42      	subs	r2, r0, #1
 800fb80:	5ca3      	ldrb	r3, [r4, r2]
 800fb82:	2b2e      	cmp	r3, #46	; 0x2e
 800fb84:	d101      	bne.n	800fb8a <lv_fs_get_ext+0x1a>
            return &fn[i];
 800fb86:	4420      	add	r0, r4
}
 800fb88:	bd10      	pop	{r4, pc}
        else if(fn[i - 1] == '/' || fn[i - 1] == '\\') {
 800fb8a:	2b2f      	cmp	r3, #47	; 0x2f
 800fb8c:	d0f5      	beq.n	800fb7a <lv_fs_get_ext+0xa>
 800fb8e:	2b5c      	cmp	r3, #92	; 0x5c
 800fb90:	d0f3      	beq.n	800fb7a <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 800fb92:	4610      	mov	r0, r2
 800fb94:	e7f0      	b.n	800fb78 <lv_fs_get_ext+0x8>
 800fb96:	bf00      	nop
 800fb98:	0801a600 	.word	0x0801a600

0800fb9c <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800fb9c:	b109      	cbz	r1, 800fba2 <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 800fb9e:	6803      	ldr	r3, [r0, #0]
 800fba0:	50ca      	str	r2, [r1, r3]
}
 800fba2:	4770      	bx	lr

0800fba4 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800fba4:	b111      	cbz	r1, 800fbac <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 800fba6:	6803      	ldr	r3, [r0, #0]
 800fba8:	4419      	add	r1, r3
 800fbaa:	604a      	str	r2, [r1, #4]
}
 800fbac:	4770      	bx	lr

0800fbae <_lv_ll_init>:
    ll_p->head = NULL;
 800fbae:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 800fbb0:	3103      	adds	r1, #3
 800fbb2:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 800fbb6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 800fbba:	6001      	str	r1, [r0, #0]
}
 800fbbc:	4770      	bx	lr

0800fbbe <_lv_ll_ins_head>:
{
 800fbbe:	b538      	push	{r3, r4, r5, lr}
 800fbc0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fbc2:	6800      	ldr	r0, [r0, #0]
 800fbc4:	3008      	adds	r0, #8
 800fbc6:	f000 fa75 	bl	80100b4 <lv_mem_alloc>
    if(n_new != NULL) {
 800fbca:	4605      	mov	r5, r0
 800fbcc:	b180      	cbz	r0, 800fbf0 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800fbce:	4601      	mov	r1, r0
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff ffe2 	bl	800fb9c <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800fbd8:	6862      	ldr	r2, [r4, #4]
 800fbda:	f7ff ffe3 	bl	800fba4 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800fbde:	6861      	ldr	r1, [r4, #4]
 800fbe0:	b111      	cbz	r1, 800fbe8 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 800fbe2:	462a      	mov	r2, r5
 800fbe4:	f7ff ffda 	bl	800fb9c <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800fbe8:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800fbea:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800fbec:	b903      	cbnz	r3, 800fbf0 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 800fbee:	60a5      	str	r5, [r4, #8]
}
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	bd38      	pop	{r3, r4, r5, pc}

0800fbf4 <_lv_ll_ins_tail>:
{
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fbf8:	6800      	ldr	r0, [r0, #0]
 800fbfa:	3008      	adds	r0, #8
 800fbfc:	f000 fa5a 	bl	80100b4 <lv_mem_alloc>
    if(n_new != NULL) {
 800fc00:	4605      	mov	r5, r0
 800fc02:	b188      	cbz	r0, 800fc28 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800fc04:	4601      	mov	r1, r0
 800fc06:	2200      	movs	r2, #0
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f7ff ffcb 	bl	800fba4 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 800fc0e:	4629      	mov	r1, r5
 800fc10:	68a2      	ldr	r2, [r4, #8]
 800fc12:	f7ff ffc3 	bl	800fb9c <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800fc16:	68a1      	ldr	r1, [r4, #8]
 800fc18:	b111      	cbz	r1, 800fc20 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 800fc1a:	462a      	mov	r2, r5
 800fc1c:	f7ff ffc2 	bl	800fba4 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800fc20:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800fc22:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800fc24:	b903      	cbnz	r3, 800fc28 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 800fc26:	6065      	str	r5, [r4, #4]
}
 800fc28:	4628      	mov	r0, r5
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}

0800fc2c <_lv_ll_remove>:
{
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return;
 800fc30:	b140      	cbz	r0, 800fc44 <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800fc32:	e9d0 1200 	ldrd	r1, r2, [r0]
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d10a      	bne.n	800fc50 <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 800fc3a:	440b      	add	r3, r1
 800fc3c:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800fc3e:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 800fc40:	b909      	cbnz	r1, 800fc46 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 800fc42:	6081      	str	r1, [r0, #8]
}
 800fc44:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800fc46:	2200      	movs	r2, #0
}
 800fc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800fc4c:	f7ff bfa6 	b.w	800fb9c <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 800fc50:	6882      	ldr	r2, [r0, #8]
 800fc52:	585d      	ldr	r5, [r3, r1]
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d109      	bne.n	800fc6c <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 800fc58:	6085      	str	r5, [r0, #8]
        if(ll_p->tail == NULL) {
 800fc5a:	b90d      	cbnz	r5, 800fc60 <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 800fc5c:	6045      	str	r5, [r0, #4]
 800fc5e:	e7f1      	b.n	800fc44 <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 800fc60:	4629      	mov	r1, r5
}
 800fc62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800fc66:	2200      	movs	r2, #0
 800fc68:	f7ff bf9c 	b.w	800fba4 <node_set_next.isra.0>
    return *((lv_ll_node_t **)n_act_d);
 800fc6c:	440b      	add	r3, r1
 800fc6e:	685e      	ldr	r6, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 800fc70:	4629      	mov	r1, r5
 800fc72:	4632      	mov	r2, r6
 800fc74:	f7ff ff96 	bl	800fba4 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800fc78:	462a      	mov	r2, r5
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	e7e4      	b.n	800fc48 <_lv_ll_remove+0x1c>

0800fc7e <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 800fc7e:	b100      	cbz	r0, 800fc82 <_lv_ll_get_head+0x4>
    return ll_p->head;
 800fc80:	6840      	ldr	r0, [r0, #4]
}
 800fc82:	4770      	bx	lr

0800fc84 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 800fc84:	b100      	cbz	r0, 800fc88 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 800fc86:	6880      	ldr	r0, [r0, #8]
}
 800fc88:	4770      	bx	lr

0800fc8a <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 800fc8a:	6803      	ldr	r3, [r0, #0]
 800fc8c:	4419      	add	r1, r3
}
 800fc8e:	6848      	ldr	r0, [r1, #4]
 800fc90:	4770      	bx	lr

0800fc92 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 800fc92:	6803      	ldr	r3, [r0, #0]
}
 800fc94:	58c8      	ldr	r0, [r1, r3]
 800fc96:	4770      	bx	lr

0800fc98 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 800fc98:	b130      	cbz	r0, 800fca8 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800fc9a:	6843      	ldr	r3, [r0, #4]
 800fc9c:	b933      	cbnz	r3, 800fcac <_lv_ll_is_empty+0x14>
 800fc9e:	6880      	ldr	r0, [r0, #8]
 800fca0:	fab0 f080 	clz	r0, r0
 800fca4:	0940      	lsrs	r0, r0, #5
 800fca6:	4770      	bx	lr
    if(ll_p == NULL) return true;
 800fca8:	2001      	movs	r0, #1
 800fcaa:	4770      	bx	lr
    return false;
 800fcac:	2000      	movs	r0, #0
}
 800fcae:	4770      	bx	lr

0800fcb0 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 800fcb0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800fcb4:	fb90 f2f3 	sdiv	r2, r0, r3
 800fcb8:	fb02 0013 	mls	r0, r2, r3, r0
 800fcbc:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	bfbc      	itt	lt
 800fcc2:	18c0      	addlt	r0, r0, r3
 800fcc4:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 800fcc6:	2859      	cmp	r0, #89	; 0x59
 800fcc8:	4b0e      	ldr	r3, [pc, #56]	; (800fd04 <lv_trigo_sin+0x54>)
 800fcca:	dc02      	bgt.n	800fcd2 <lv_trigo_sin+0x22>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 800fccc:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800fcd0:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 800fcd2:	b280      	uxth	r0, r0
 800fcd4:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 800fcd8:	2a59      	cmp	r2, #89	; 0x59
 800fcda:	d803      	bhi.n	800fce4 <lv_trigo_sin+0x34>
        angle = 180 - angle;
 800fcdc:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 800fce0:	b280      	uxth	r0, r0
 800fce2:	e7f3      	b.n	800fccc <lv_trigo_sin+0x1c>
    }
    else if(angle >= 180 && angle < 270) {
 800fce4:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 800fce8:	b292      	uxth	r2, r2
 800fcea:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 800fcec:	bf85      	ittet	hi
 800fcee:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 800fcf2:	b280      	uxthhi	r0, r0
        ret   = -sin0_90_table[angle];
 800fcf4:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 800fcf8:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 800fcfc:	4240      	negs	r0, r0
 800fcfe:	b200      	sxth	r0, r0
    }

    return ret;
}
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	0801a4f2 	.word	0x0801a4f2

0800fd08 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 800fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 800fd0a:	fb00 f500 	mul.w	r5, r0, r0
    uint32_t t_rem  = 1024 - t;
 800fd0e:	f5c0 6780 	rsb	r7, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 800fd12:	fb07 f607 	mul.w	r6, r7, r7
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 800fd16:	4342      	muls	r2, r0
    uint32_t t2     = (t * t) >> 10;
 800fd18:	0aad      	lsrs	r5, r5, #10
    uint32_t t3     = (t2 * t) >> 10;
 800fd1a:	4368      	muls	r0, r5
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 800fd1c:	437b      	muls	r3, r7
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 800fd1e:	0ab6      	lsrs	r6, r6, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 800fd20:	4372      	muls	r2, r6
    uint32_t v4 = (t3 * u3) >> 10;
 800fd22:	9c05      	ldr	r4, [sp, #20]
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 800fd24:	437e      	muls	r6, r7
    uint32_t t3     = (t2 * t) >> 10;
 800fd26:	0a80      	lsrs	r0, r0, #10
    uint32_t v4 = (t3 * u3) >> 10;
 800fd28:	4360      	muls	r0, r4
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 800fd2a:	435d      	muls	r5, r3
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 800fd2c:	0ab6      	lsrs	r6, r6, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 800fd2e:	4371      	muls	r1, r6
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 800fd30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 800fd34:	0a80      	lsrs	r0, r0, #10

    return v1 + v2 + v3 + v4;
 800fd36:	eb00 5012 	add.w	r0, r0, r2, lsr #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 800fd3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    return v1 + v2 + v3 + v4;
 800fd3e:	eb00 5015 	add.w	r0, r0, r5, lsr #20
}
 800fd42:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd48 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	4604      	mov	r4, r0
    if(x >= max_in) return max_out;
 800fd4c:	4294      	cmp	r4, r2
{
 800fd4e:	9802      	ldr	r0, [sp, #8]
    if(x >= max_in) return max_out;
 800fd50:	da0a      	bge.n	800fd68 <lv_map+0x20>
    if(x <= min_in) return min_out;
 800fd52:	428c      	cmp	r4, r1
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;
 800fd54:	bfc1      	itttt	gt
 800fd56:	1ac0      	subgt	r0, r0, r3

    return ((x - min_in) * delta_out) / delta_in + min_out;
 800fd58:	1a64      	subgt	r4, r4, r1
 800fd5a:	4360      	mulgt	r0, r4
    int32_t delta_in = max_in - min_in;
 800fd5c:	1a52      	subgt	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 800fd5e:	bfca      	itet	gt
 800fd60:	fb90 f0f2 	sdivgt	r0, r0, r2
    if(x <= min_in) return min_out;
 800fd64:	4618      	movle	r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 800fd66:	18c0      	addgt	r0, r0, r3
}
 800fd68:	bd10      	pop	{r4, pc}

0800fd6a <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 800fd6a:	b11a      	cbz	r2, 800fd74 <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 800fd6c:	691a      	ldr	r2, [r3, #16]
 800fd6e:	3201      	adds	r2, #1
 800fd70:	611a      	str	r2, [r3, #16]
 800fd72:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	3201      	adds	r2, #1
 800fd78:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	440a      	add	r2, r1
 800fd7e:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 800fd80:	68da      	ldr	r2, [r3, #12]
 800fd82:	4291      	cmp	r1, r2
            mon_p->free_biggest_size = size;
 800fd84:	bf88      	it	hi
 800fd86:	60d9      	strhi	r1, [r3, #12]
    }
}
 800fd88:	4770      	bx	lr
	...

0800fd8c <lv_mem_init>:
{
 800fd8c:	b508      	push	{r3, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 800fd8e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800fd92:	4803      	ldr	r0, [pc, #12]	; (800fda0 <lv_mem_init+0x14>)
 800fd94:	f001 fac4 	bl	8011320 <lv_tlsf_create_with_pool>
 800fd98:	4b02      	ldr	r3, [pc, #8]	; (800fda4 <lv_mem_init+0x18>)
 800fd9a:	6018      	str	r0, [r3, #0]
}
 800fd9c:	bd08      	pop	{r3, pc}
 800fd9e:	bf00      	nop
 800fda0:	20001bb4 	.word	0x20001bb4
 800fda4:	20001bb0 	.word	0x20001bb0

0800fda8 <lv_mem_free>:
    if(data == &zero_mem) return;
 800fda8:	4b04      	ldr	r3, [pc, #16]	; (800fdbc <lv_mem_free+0x14>)
{
 800fdaa:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 800fdac:	4298      	cmp	r0, r3
 800fdae:	d004      	beq.n	800fdba <lv_mem_free+0x12>
    if(data == NULL) return;
 800fdb0:	b118      	cbz	r0, 800fdba <lv_mem_free+0x12>
    lv_tlsf_free(tlsf, data);
 800fdb2:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <lv_mem_free+0x18>)
 800fdb4:	6818      	ldr	r0, [r3, #0]
 800fdb6:	f001 bae6 	b.w	8011386 <lv_tlsf_free>
}
 800fdba:	4770      	bx	lr
 800fdbc:	20000010 	.word	0x20000010
 800fdc0:	20001bb0 	.word	0x20001bb0

0800fdc4 <lv_mem_buf_release>:
{
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 800fdc8:	4a07      	ldr	r2, [pc, #28]	; (800fde8 <lv_mem_buf_release+0x24>)
 800fdca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800fdce:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800fdd2:	4284      	cmp	r4, r0
 800fdd4:	d104      	bne.n	800fde0 <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 800fdd6:	798b      	ldrb	r3, [r1, #6]
 800fdd8:	f36f 0300 	bfc	r3, #0, #1
 800fddc:	718b      	strb	r3, [r1, #6]
}
 800fdde:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800fde0:	3301      	adds	r3, #1
 800fde2:	2b10      	cmp	r3, #16
 800fde4:	d1f1      	bne.n	800fdca <lv_mem_buf_release+0x6>
 800fde6:	e7fa      	b.n	800fdde <lv_mem_buf_release+0x1a>
 800fde8:	20004874 	.word	0x20004874

0800fdec <lv_mem_buf_free_all>:
{
 800fdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdee:	2500      	movs	r5, #0
 800fdf0:	4c0a      	ldr	r4, [pc, #40]	; (800fe1c <lv_mem_buf_free_all+0x30>)
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 800fdf2:	462e      	mov	r6, r5
 800fdf4:	4627      	mov	r7, r4
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	b148      	cbz	r0, 800fe0e <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 800fdfa:	f7ff ffd5 	bl	800fda8 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 800fdfe:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 800fe00:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800fe04:	799a      	ldrb	r2, [r3, #6]
 800fe06:	f366 0200 	bfi	r2, r6, #0, #1
 800fe0a:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 800fe0c:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800fe0e:	3501      	adds	r5, #1
 800fe10:	2d10      	cmp	r5, #16
 800fe12:	f104 0408 	add.w	r4, r4, #8
 800fe16:	d1ee      	bne.n	800fdf6 <lv_mem_buf_free_all+0xa>
}
 800fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20004874 	.word	0x20004874

0800fe20 <lv_memcpy>:
{
 800fe20:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800fe22:	f000 0503 	and.w	r5, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800fe26:	f001 0603 	and.w	r6, r1, #3
    if(s_align != d_align) {
 800fe2a:	42b5      	cmp	r5, r6
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800fe2c:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800fe2e:	460b      	mov	r3, r1
    if(s_align != d_align) {
 800fe30:	f040 8098 	bne.w	800ff64 <lv_memcpy+0x144>
    if(d_align) {
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	f040 80a8 	bne.w	800ff8a <lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	462b      	mov	r3, r5
    while(len > 32) {
 800fe3e:	2a20      	cmp	r2, #32
 800fe40:	461c      	mov	r4, r3
 800fe42:	f101 0520 	add.w	r5, r1, #32
 800fe46:	f103 0320 	add.w	r3, r3, #32
 800fe4a:	f200 80af 	bhi.w	800ffac <lv_memcpy+0x18c>
    while(len > 4) {
 800fe4e:	2a04      	cmp	r2, #4
 800fe50:	460e      	mov	r6, r1
 800fe52:	f240 809f 	bls.w	800ff94 <lv_memcpy+0x174>
        COPY32;
 800fe56:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 800fe5a:	3a04      	subs	r2, #4
        COPY32;
 800fe5c:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 800fe60:	e7f5      	b.n	800fe4e <lv_memcpy+0x2e>
            REPEAT8(COPY8);
 800fe62:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 800fe66:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 800fe68:	f804 1c20 	strb.w	r1, [r4, #-32]
 800fe6c:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 800fe70:	f804 1c1f 	strb.w	r1, [r4, #-31]
 800fe74:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 800fe78:	f804 1c1e 	strb.w	r1, [r4, #-30]
 800fe7c:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 800fe80:	f804 1c1d 	strb.w	r1, [r4, #-29]
 800fe84:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fe88:	f804 1c1c 	strb.w	r1, [r4, #-28]
 800fe8c:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 800fe90:	f804 1c1b 	strb.w	r1, [r4, #-27]
 800fe94:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 800fe98:	f804 1c1a 	strb.w	r1, [r4, #-26]
 800fe9c:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 800fea0:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 800fea4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800fea8:	f804 1c18 	strb.w	r1, [r4, #-24]
 800feac:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 800feb0:	f804 1c17 	strb.w	r1, [r4, #-23]
 800feb4:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 800feb8:	f804 1c16 	strb.w	r1, [r4, #-22]
 800febc:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 800fec0:	f804 1c15 	strb.w	r1, [r4, #-21]
 800fec4:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800fec8:	f804 1c14 	strb.w	r1, [r4, #-20]
 800fecc:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 800fed0:	f804 1c13 	strb.w	r1, [r4, #-19]
 800fed4:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 800fed8:	f804 1c12 	strb.w	r1, [r4, #-18]
 800fedc:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 800fee0:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 800fee4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800fee8:	f804 1c10 	strb.w	r1, [r4, #-16]
 800feec:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 800fef0:	f804 1c0f 	strb.w	r1, [r4, #-15]
 800fef4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800fef8:	f804 1c0e 	strb.w	r1, [r4, #-14]
 800fefc:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800ff00:	f804 1c0d 	strb.w	r1, [r4, #-13]
 800ff04:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800ff08:	f804 1c0c 	strb.w	r1, [r4, #-12]
 800ff0c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800ff10:	f804 1c0b 	strb.w	r1, [r4, #-11]
 800ff14:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800ff18:	f804 1c0a 	strb.w	r1, [r4, #-10]
 800ff1c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800ff20:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 800ff24:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800ff28:	f804 1c08 	strb.w	r1, [r4, #-8]
 800ff2c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800ff30:	f804 1c07 	strb.w	r1, [r4, #-7]
 800ff34:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 800ff38:	f804 1c06 	strb.w	r1, [r4, #-6]
 800ff3c:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 800ff40:	f804 1c05 	strb.w	r1, [r4, #-5]
 800ff44:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800ff48:	f804 1c04 	strb.w	r1, [r4, #-4]
 800ff4c:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 800ff50:	f804 1c03 	strb.w	r1, [r4, #-3]
 800ff54:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800ff58:	f804 1c02 	strb.w	r1, [r4, #-2]
 800ff5c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ff60:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 800ff64:	2a20      	cmp	r2, #32
 800ff66:	461d      	mov	r5, r3
 800ff68:	4621      	mov	r1, r4
 800ff6a:	f103 0320 	add.w	r3, r3, #32
 800ff6e:	f104 0420 	add.w	r4, r4, #32
 800ff72:	f63f af76 	bhi.w	800fe62 <lv_memcpy+0x42>
 800ff76:	1e6b      	subs	r3, r5, #1
 800ff78:	440a      	add	r2, r1
        while(len) {
 800ff7a:	4291      	cmp	r1, r2
 800ff7c:	d100      	bne.n	800ff80 <lv_memcpy+0x160>
}
 800ff7e:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 800ff80:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800ff84:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
 800ff88:	e7f7      	b.n	800ff7a <lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 800ff8a:	f1c5 0504 	rsb	r5, r5, #4
 800ff8e:	4405      	add	r5, r0
 800ff90:	461e      	mov	r6, r3
        while(d_align && len) {
 800ff92:	b912      	cbnz	r2, 800ff9a <lv_memcpy+0x17a>
 800ff94:	1e73      	subs	r3, r6, #1
 800ff96:	4422      	add	r2, r4
 800ff98:	e02f      	b.n	800fffa <lv_memcpy+0x1da>
            COPY8;
 800ff9a:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 800ff9e:	3a01      	subs	r2, #1
            COPY8;
 800ffa0:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 800ffa4:	42ac      	cmp	r4, r5
            COPY8;
 800ffa6:	4619      	mov	r1, r3
        while(d_align && len) {
 800ffa8:	d1f2      	bne.n	800ff90 <lv_memcpy+0x170>
 800ffaa:	e747      	b.n	800fe3c <lv_memcpy+0x1c>
        REPEAT8(COPY32)
 800ffac:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 800ffb0:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 800ffb2:	f843 1c20 	str.w	r1, [r3, #-32]
 800ffb6:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 800ffba:	f843 1c1c 	str.w	r1, [r3, #-28]
 800ffbe:	f855 1c18 	ldr.w	r1, [r5, #-24]
 800ffc2:	f843 1c18 	str.w	r1, [r3, #-24]
 800ffc6:	f855 1c14 	ldr.w	r1, [r5, #-20]
 800ffca:	f843 1c14 	str.w	r1, [r3, #-20]
 800ffce:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800ffd2:	f843 1c10 	str.w	r1, [r3, #-16]
 800ffd6:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800ffda:	f843 1c0c 	str.w	r1, [r3, #-12]
 800ffde:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800ffe2:	f843 1c08 	str.w	r1, [r3, #-8]
 800ffe6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ffea:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 800ffee:	4629      	mov	r1, r5
 800fff0:	e725      	b.n	800fe3e <lv_memcpy+0x1e>
        COPY8
 800fff2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fff6:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 800fffa:	4294      	cmp	r4, r2
 800fffc:	d1f9      	bne.n	800fff2 <lv_memcpy+0x1d2>
 800fffe:	e7be      	b.n	800ff7e <lv_memcpy+0x15e>

08010000 <lv_memset>:
    if(d_align) {
 8010000:	f010 0303 	ands.w	r3, r0, #3
{
 8010004:	b510      	push	{r4, lr}
    if(d_align) {
 8010006:	d009      	beq.n	801001c <lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 8010008:	f1c3 0304 	rsb	r3, r3, #4
 801000c:	4403      	add	r3, r0
        while(d_align && len) {
 801000e:	b12a      	cbz	r2, 801001c <lv_memset+0x1c>
            SET8(v);
 8010010:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 8010014:	4298      	cmp	r0, r3
            len--;
 8010016:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        while(d_align && len) {
 801001a:	d1f8      	bne.n	801000e <lv_memset+0xe>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 801001c:	040b      	lsls	r3, r1, #16
 801001e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010022:	440b      	add	r3, r1
 8010024:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8010028:	2a20      	cmp	r2, #32
 801002a:	4604      	mov	r4, r0
 801002c:	f100 0020 	add.w	r0, r0, #32
 8010030:	d805      	bhi.n	801003e <lv_memset+0x3e>
    while(len > 4) {
 8010032:	2a04      	cmp	r2, #4
 8010034:	d80d      	bhi.n	8010052 <lv_memset+0x52>
 8010036:	4422      	add	r2, r4
    while(len) {
 8010038:	42a2      	cmp	r2, r4
 801003a:	d10e      	bne.n	801005a <lv_memset+0x5a>
}
 801003c:	bd10      	pop	{r4, pc}
        REPEAT8(SET32(v32));
 801003e:	e940 3308 	strd	r3, r3, [r0, #-32]
 8010042:	e940 3306 	strd	r3, r3, [r0, #-24]
 8010046:	e940 3304 	strd	r3, r3, [r0, #-16]
 801004a:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 801004e:	3a20      	subs	r2, #32
 8010050:	e7ea      	b.n	8010028 <lv_memset+0x28>
        SET32(v32);
 8010052:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 8010056:	3a04      	subs	r2, #4
 8010058:	e7eb      	b.n	8010032 <lv_memset+0x32>
        SET8(v);
 801005a:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
 801005e:	e7eb      	b.n	8010038 <lv_memset+0x38>

08010060 <lv_mem_monitor>:
{
 8010060:	b510      	push	{r4, lr}
 8010062:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8010064:	221c      	movs	r2, #28
 8010066:	2100      	movs	r1, #0
 8010068:	f7ff ffca 	bl	8010000 <lv_memset>
    lv_tlsf_walk_pool(lv_tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 801006c:	4b0f      	ldr	r3, [pc, #60]	; (80100ac <lv_mem_monitor+0x4c>)
 801006e:	6818      	ldr	r0, [r3, #0]
 8010070:	f001 f964 	bl	801133c <lv_tlsf_get_pool>
 8010074:	4622      	mov	r2, r4
 8010076:	490e      	ldr	r1, [pc, #56]	; (80100b0 <lv_mem_monitor+0x50>)
 8010078:	f001 f8fa 	bl	8011270 <lv_tlsf_walk_pool>
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 801007c:	2364      	movs	r3, #100	; 0x64
    mon_p->total_size = LV_MEM_SIZE;
 801007e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010082:	68a2      	ldr	r2, [r4, #8]
    mon_p->total_size = LV_MEM_SIZE;
 8010084:	6020      	str	r0, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8010086:	fb03 f102 	mul.w	r1, r3, r2
 801008a:	fbb1 f1f0 	udiv	r1, r1, r0
 801008e:	1a59      	subs	r1, r3, r1
 8010090:	7621      	strb	r1, [r4, #24]
    if(mon_p->free_size > 0) {
 8010092:	b142      	cbz	r2, 80100a6 <lv_mem_monitor+0x46>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 8010094:	68e1      	ldr	r1, [r4, #12]
 8010096:	434b      	muls	r3, r1
 8010098:	fbb3 f3f2 	udiv	r3, r3, r2
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 801009c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	7663      	strb	r3, [r4, #25]
}
 80100a4:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 80100a6:	4613      	mov	r3, r2
 80100a8:	e7fb      	b.n	80100a2 <lv_mem_monitor+0x42>
 80100aa:	bf00      	nop
 80100ac:	20001bb0 	.word	0x20001bb0
 80100b0:	0800fd6b 	.word	0x0800fd6b

080100b4 <lv_mem_alloc>:
{
 80100b4:	b510      	push	{r4, lr}
    if(size == 0) {
 80100b6:	4601      	mov	r1, r0
{
 80100b8:	b088      	sub	sp, #32
    if(size == 0) {
 80100ba:	b158      	cbz	r0, 80100d4 <lv_mem_alloc+0x20>
    void * alloc = lv_tlsf_malloc(tlsf, size);
 80100bc:	4b06      	ldr	r3, [pc, #24]	; (80100d8 <lv_mem_alloc+0x24>)
 80100be:	6818      	ldr	r0, [r3, #0]
 80100c0:	f001 f93f 	bl	8011342 <lv_tlsf_malloc>
    if(alloc == NULL) {
 80100c4:	4604      	mov	r4, r0
 80100c6:	b910      	cbnz	r0, 80100ce <lv_mem_alloc+0x1a>
        lv_mem_monitor(&mon);
 80100c8:	a801      	add	r0, sp, #4
 80100ca:	f7ff ffc9 	bl	8010060 <lv_mem_monitor>
}
 80100ce:	4620      	mov	r0, r4
 80100d0:	b008      	add	sp, #32
 80100d2:	bd10      	pop	{r4, pc}
        return &zero_mem;
 80100d4:	4c01      	ldr	r4, [pc, #4]	; (80100dc <lv_mem_alloc+0x28>)
 80100d6:	e7fa      	b.n	80100ce <lv_mem_alloc+0x1a>
 80100d8:	20001bb0 	.word	0x20001bb0
 80100dc:	20000010 	.word	0x20000010

080100e0 <lv_mem_realloc>:
    if(new_size == 0) {
 80100e0:	460a      	mov	r2, r1
{
 80100e2:	b508      	push	{r3, lr}
    if(new_size == 0) {
 80100e4:	b171      	cbz	r1, 8010104 <lv_mem_realloc+0x24>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80100e6:	4909      	ldr	r1, [pc, #36]	; (801010c <lv_mem_realloc+0x2c>)
 80100e8:	4288      	cmp	r0, r1
 80100ea:	d104      	bne.n	80100f6 <lv_mem_realloc+0x16>
}
 80100ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80100f0:	4610      	mov	r0, r2
 80100f2:	f7ff bfdf 	b.w	80100b4 <lv_mem_alloc>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80100f6:	4b06      	ldr	r3, [pc, #24]	; (8010110 <lv_mem_realloc+0x30>)
 80100f8:	4601      	mov	r1, r0
 80100fa:	6818      	ldr	r0, [r3, #0]
}
 80100fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8010100:	f001 b982 	b.w	8011408 <lv_tlsf_realloc>
        lv_mem_free(data_p);
 8010104:	f7ff fe50 	bl	800fda8 <lv_mem_free>
}
 8010108:	4800      	ldr	r0, [pc, #0]	; (801010c <lv_mem_realloc+0x2c>)
 801010a:	bd08      	pop	{r3, pc}
 801010c:	20000010 	.word	0x20000010
 8010110:	20001bb0 	.word	0x20001bb0

08010114 <lv_mem_buf_get>:
{
 8010114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 8010116:	4604      	mov	r4, r0
 8010118:	b1b0      	cbz	r0, 8010148 <lv_mem_buf_get+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 801011a:	4924      	ldr	r1, [pc, #144]	; (80101ac <lv_mem_buf_get+0x98>)
 801011c:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 801011e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010122:	460e      	mov	r6, r1
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8010124:	f101 0c04 	add.w	ip, r1, #4
 8010128:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
 801012c:	79bd      	ldrb	r5, [r7, #6]
 801012e:	4628      	mov	r0, r5
 8010130:	07ed      	lsls	r5, r5, #31
 8010132:	d413      	bmi.n	801015c <lv_mem_buf_get+0x48>
 8010134:	f83c 5033 	ldrh.w	r5, [ip, r3, lsl #3]
 8010138:	42a5      	cmp	r5, r4
 801013a:	d30f      	bcc.n	801015c <lv_mem_buf_get+0x48>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 801013c:	d105      	bne.n	801014a <lv_mem_buf_get+0x36>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801013e:	f040 0001 	orr.w	r0, r0, #1
 8010142:	71b8      	strb	r0, [r7, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8010144:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
}
 8010148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 801014a:	1c50      	adds	r0, r2, #1
 801014c:	d101      	bne.n	8010152 <lv_mem_buf_get+0x3e>
                i_guess = i;
 801014e:	b25a      	sxtb	r2, r3
 8010150:	e004      	b.n	801015c <lv_mem_buf_get+0x48>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8010152:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8010156:	8880      	ldrh	r0, [r0, #4]
 8010158:	42a8      	cmp	r0, r5
 801015a:	d8f8      	bhi.n	801014e <lv_mem_buf_get+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801015c:	3301      	adds	r3, #1
 801015e:	2b10      	cmp	r3, #16
 8010160:	d1e2      	bne.n	8010128 <lv_mem_buf_get+0x14>
    if(i_guess >= 0) {
 8010162:	1c51      	adds	r1, r2, #1
 8010164:	d008      	beq.n	8010178 <lv_mem_buf_get+0x64>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8010166:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 801016a:	798b      	ldrb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 801016c:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8010170:	f043 0301 	orr.w	r3, r3, #1
 8010174:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8010176:	e7e7      	b.n	8010148 <lv_mem_buf_get+0x34>
 8010178:	2500      	movs	r5, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 801017a:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 801017e:	79bb      	ldrb	r3, [r7, #6]
 8010180:	07db      	lsls	r3, r3, #31
 8010182:	d40e      	bmi.n	80101a2 <lv_mem_buf_get+0x8e>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8010184:	4621      	mov	r1, r4
 8010186:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 801018a:	f7ff ffa9 	bl	80100e0 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 801018e:	b900      	cbnz	r0, 8010192 <lv_mem_buf_get+0x7e>
 8010190:	e7fe      	b.n	8010190 <lv_mem_buf_get+0x7c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8010192:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8010194:	80bc      	strh	r4, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	71bb      	strb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 801019c:	f846 0035 	str.w	r0, [r6, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 80101a0:	e7d2      	b.n	8010148 <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80101a2:	3501      	adds	r5, #1
 80101a4:	2d10      	cmp	r5, #16
 80101a6:	d1e8      	bne.n	801017a <lv_mem_buf_get+0x66>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 80101a8:	e7fe      	b.n	80101a8 <lv_mem_buf_get+0x94>
 80101aa:	bf00      	nop
 80101ac:	20004874 	.word	0x20004874

080101b0 <lv_memset_00>:
    if(d_align) {
 80101b0:	f010 0303 	ands.w	r3, r0, #3
 80101b4:	d10d      	bne.n	80101d2 <lv_memset_00+0x22>
 80101b6:	4603      	mov	r3, r0
        REPEAT8(SET32(0));
 80101b8:	2200      	movs	r2, #0
    while(len > 32) {
 80101ba:	2920      	cmp	r1, #32
 80101bc:	4618      	mov	r0, r3
 80101be:	f103 0320 	add.w	r3, r3, #32
 80101c2:	d815      	bhi.n	80101f0 <lv_memset_00+0x40>
        SET32(0);
 80101c4:	2300      	movs	r3, #0
    while(len > 4) {
 80101c6:	2904      	cmp	r1, #4
 80101c8:	d908      	bls.n	80101dc <lv_memset_00+0x2c>
        SET32(0);
 80101ca:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 80101ce:	3904      	subs	r1, #4
 80101d0:	e7f9      	b.n	80101c6 <lv_memset_00+0x16>
            SET8(0);
 80101d2:	2200      	movs	r2, #0
        d_align = ALIGN_MASK + 1 - d_align;
 80101d4:	f1c3 0304 	rsb	r3, r3, #4
 80101d8:	4403      	add	r3, r0
        while(d_align && len) {
 80101da:	b911      	cbnz	r1, 80101e2 <lv_memset_00+0x32>
        SET8(0);
 80101dc:	2300      	movs	r3, #0
 80101de:	4401      	add	r1, r0
 80101e0:	e012      	b.n	8010208 <lv_memset_00+0x58>
            SET8(0);
 80101e2:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 80101e6:	4298      	cmp	r0, r3
            len--;
 80101e8:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        while(d_align && len) {
 80101ec:	d1f5      	bne.n	80101da <lv_memset_00+0x2a>
 80101ee:	e7e2      	b.n	80101b6 <lv_memset_00+0x6>
        REPEAT8(SET32(0));
 80101f0:	e943 2208 	strd	r2, r2, [r3, #-32]
 80101f4:	e943 2206 	strd	r2, r2, [r3, #-24]
 80101f8:	e943 2204 	strd	r2, r2, [r3, #-16]
 80101fc:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8010200:	3920      	subs	r1, #32
 8010202:	e7da      	b.n	80101ba <lv_memset_00+0xa>
        SET8(0);
 8010204:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8010208:	4288      	cmp	r0, r1
 801020a:	d1fb      	bne.n	8010204 <lv_memset_00+0x54>
}
 801020c:	4770      	bx	lr

0801020e <lv_memset_ff>:
    if(d_align) {
 801020e:	f010 0303 	ands.w	r3, r0, #3
 8010212:	d10f      	bne.n	8010234 <lv_memset_ff+0x26>
 8010214:	4603      	mov	r3, r0
        REPEAT8(SET32(0xFFFFFFFF));
 8010216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    while(len > 32) {
 801021a:	2920      	cmp	r1, #32
 801021c:	4618      	mov	r0, r3
 801021e:	f103 0320 	add.w	r3, r3, #32
 8010222:	d816      	bhi.n	8010252 <lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 8010224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    while(len > 4) {
 8010228:	2904      	cmp	r1, #4
 801022a:	d908      	bls.n	801023e <lv_memset_ff+0x30>
        SET32(0xFFFFFFFF);
 801022c:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8010230:	3904      	subs	r1, #4
 8010232:	e7f9      	b.n	8010228 <lv_memset_ff+0x1a>
            SET8(0xFF);
 8010234:	22ff      	movs	r2, #255	; 0xff
        d_align = ALIGN_MASK + 1 - d_align;
 8010236:	f1c3 0304 	rsb	r3, r3, #4
 801023a:	4403      	add	r3, r0
        while(d_align && len) {
 801023c:	b911      	cbnz	r1, 8010244 <lv_memset_ff+0x36>
        SET8(0xFF);
 801023e:	23ff      	movs	r3, #255	; 0xff
 8010240:	4401      	add	r1, r0
 8010242:	e012      	b.n	801026a <lv_memset_ff+0x5c>
            SET8(0xFF);
 8010244:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8010248:	4298      	cmp	r0, r3
            len--;
 801024a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
        while(d_align && len) {
 801024e:	d1f5      	bne.n	801023c <lv_memset_ff+0x2e>
 8010250:	e7e0      	b.n	8010214 <lv_memset_ff+0x6>
        REPEAT8(SET32(0xFFFFFFFF));
 8010252:	e943 2208 	strd	r2, r2, [r3, #-32]
 8010256:	e943 2206 	strd	r2, r2, [r3, #-24]
 801025a:	e943 2204 	strd	r2, r2, [r3, #-16]
 801025e:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8010262:	3920      	subs	r1, #32
 8010264:	e7d9      	b.n	801021a <lv_memset_ff+0xc>
        SET8(0xFF);
 8010266:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 801026a:	4288      	cmp	r0, r1
 801026c:	d1fb      	bne.n	8010266 <lv_memset_ff+0x58>
}
 801026e:	4770      	bx	lr

08010270 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8010270:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8010272:	bf38      	it	cc
 8010274:	5488      	strbcc	r0, [r1, r2]
    }
}
 8010276:	4770      	bx	lr

08010278 <_out_null>:
{
    LV_UNUSED(character);
    LV_UNUSED(buffer);
    LV_UNUSED(idx);
    LV_UNUSED(maxlen);
}
 8010278:	4770      	bx	lr

0801027a <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801027a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027e:	b085      	sub	sp, #20
 8010280:	9201      	str	r2, [sp, #4]
 8010282:	e9dd 6213 	ldrd	r6, r2, [sp, #76]	; 0x4c
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8010286:	f012 0702 	ands.w	r7, r2, #2
{
 801028a:	468a      	mov	sl, r1
 801028c:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8010290:	4698      	mov	r8, r3
 8010292:	9002      	str	r0, [sp, #8]
 8010294:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    if(!(flags & FLAGS_LEFT)) {
 8010298:	9703      	str	r7, [sp, #12]
{
 801029a:	e9dd 0111 	ldrd	r0, r1, [sp, #68]	; 0x44
    if(!(flags & FLAGS_LEFT)) {
 801029e:	d11d      	bne.n	80102dc <_ntoa_format+0x62>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80102a0:	f002 0901 	and.w	r9, r2, #1
 80102a4:	b13e      	cbz	r6, 80102b6 <_ntoa_format+0x3c>
 80102a6:	f1b9 0f00 	cmp.w	r9, #0
 80102aa:	d004      	beq.n	80102b6 <_ntoa_format+0x3c>
 80102ac:	b913      	cbnz	r3, 80102b4 <_ntoa_format+0x3a>
 80102ae:	f012 0f0c 	tst.w	r2, #12
 80102b2:	d000      	beq.n	80102b6 <_ntoa_format+0x3c>
            width--;
 80102b4:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 80102b6:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80102ba:	e002      	b.n	80102c2 <_ntoa_format+0x48>
 80102bc:	f805 b004 	strb.w	fp, [r5, r4]
 80102c0:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80102c2:	42a1      	cmp	r1, r4
 80102c4:	d901      	bls.n	80102ca <_ntoa_format+0x50>
 80102c6:	2c20      	cmp	r4, #32
 80102c8:	d1f8      	bne.n	80102bc <_ntoa_format+0x42>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 80102ca:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80102ce:	f1b9 0f00 	cmp.w	r9, #0
 80102d2:	d003      	beq.n	80102dc <_ntoa_format+0x62>
 80102d4:	42a6      	cmp	r6, r4
 80102d6:	d901      	bls.n	80102dc <_ntoa_format+0x62>
 80102d8:	2c20      	cmp	r4, #32
 80102da:	d13b      	bne.n	8010354 <_ntoa_format+0xda>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 80102dc:	06d7      	lsls	r7, r2, #27
 80102de:	d519      	bpl.n	8010314 <_ntoa_format+0x9a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80102e0:	0557      	lsls	r7, r2, #21
 80102e2:	d43c      	bmi.n	801035e <_ntoa_format+0xe4>
 80102e4:	2c00      	cmp	r4, #0
 80102e6:	d03a      	beq.n	801035e <_ntoa_format+0xe4>
 80102e8:	428c      	cmp	r4, r1
 80102ea:	d001      	beq.n	80102f0 <_ntoa_format+0x76>
 80102ec:	42b4      	cmp	r4, r6
 80102ee:	d136      	bne.n	801035e <_ntoa_format+0xe4>
            len--;
            if(len && (base == 16U)) {
 80102f0:	f1b4 0c01 	subs.w	ip, r4, #1
 80102f4:	d032      	beq.n	801035c <_ntoa_format+0xe2>
 80102f6:	2810      	cmp	r0, #16
 80102f8:	d16d      	bne.n	80103d6 <_ntoa_format+0x15c>
                len--;
 80102fa:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80102fc:	0697      	lsls	r7, r2, #26
 80102fe:	d436      	bmi.n	801036e <_ntoa_format+0xf4>
 8010300:	2c1f      	cmp	r4, #31
 8010302:	d80d      	bhi.n	8010320 <_ntoa_format+0xa6>
            buf[len++] = 'x';
 8010304:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 8010306:	5528      	strb	r0, [r5, r4]
 8010308:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 801030a:	2c1f      	cmp	r4, #31
 801030c:	d808      	bhi.n	8010320 <_ntoa_format+0xa6>
            buf[len++] = '0';
 801030e:	2030      	movs	r0, #48	; 0x30
 8010310:	5528      	strb	r0, [r5, r4]
 8010312:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8010314:	2c20      	cmp	r4, #32
 8010316:	d003      	beq.n	8010320 <_ntoa_format+0xa6>
        if(negative) {
 8010318:	b36b      	cbz	r3, 8010376 <_ntoa_format+0xfc>
            buf[len++] = '-';
 801031a:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 801031c:	5528      	strb	r0, [r5, r4]
 801031e:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8010320:	0793      	lsls	r3, r2, #30
 8010322:	d042      	beq.n	80103aa <_ntoa_format+0x130>
 8010324:	9a01      	ldr	r2, [sp, #4]
 8010326:	4425      	add	r5, r4
 8010328:	4414      	add	r4, r2
    while(len) {
 801032a:	42a2      	cmp	r2, r4
 801032c:	d142      	bne.n	80103b4 <_ntoa_format+0x13a>
    if(flags & FLAGS_LEFT) {
 801032e:	9b03      	ldr	r3, [sp, #12]
 8010330:	b163      	cbz	r3, 801034c <_ntoa_format+0xd2>
 8010332:	9b01      	ldr	r3, [sp, #4]
 8010334:	eba4 0903 	sub.w	r9, r4, r3
 8010338:	464d      	mov	r5, r9
 801033a:	9b01      	ldr	r3, [sp, #4]
        while(idx - start_idx < width) {
 801033c:	42b5      	cmp	r5, r6
 801033e:	eb05 0203 	add.w	r2, r5, r3
 8010342:	d341      	bcc.n	80103c8 <_ntoa_format+0x14e>
 8010344:	4433      	add	r3, r6
 8010346:	454e      	cmp	r6, r9
 8010348:	bf28      	it	cs
 801034a:	461c      	movcs	r4, r3
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 801034c:	4620      	mov	r0, r4
 801034e:	b005      	add	sp, #20
 8010350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8010354:	f805 b004 	strb.w	fp, [r5, r4]
 8010358:	3401      	adds	r4, #1
 801035a:	e7b8      	b.n	80102ce <_ntoa_format+0x54>
 801035c:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801035e:	2810      	cmp	r0, #16
 8010360:	d0cc      	beq.n	80102fc <_ntoa_format+0x82>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8010362:	2802      	cmp	r0, #2
 8010364:	d1d1      	bne.n	801030a <_ntoa_format+0x90>
 8010366:	2c1f      	cmp	r4, #31
 8010368:	d8da      	bhi.n	8010320 <_ntoa_format+0xa6>
            buf[len++] = 'b';
 801036a:	2062      	movs	r0, #98	; 0x62
 801036c:	e7cb      	b.n	8010306 <_ntoa_format+0x8c>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801036e:	2c1f      	cmp	r4, #31
 8010370:	d8d6      	bhi.n	8010320 <_ntoa_format+0xa6>
            buf[len++] = 'X';
 8010372:	2058      	movs	r0, #88	; 0x58
 8010374:	e7c7      	b.n	8010306 <_ntoa_format+0x8c>
        else if(flags & FLAGS_PLUS) {
 8010376:	0750      	lsls	r0, r2, #29
 8010378:	d501      	bpl.n	801037e <_ntoa_format+0x104>
            buf[len++] = '+';  // ignore the space if the '+' exists
 801037a:	202b      	movs	r0, #43	; 0x2b
 801037c:	e7ce      	b.n	801031c <_ntoa_format+0xa2>
        else if(flags & FLAGS_SPACE) {
 801037e:	0711      	lsls	r1, r2, #28
 8010380:	d5ce      	bpl.n	8010320 <_ntoa_format+0xa6>
            buf[len++] = ' ';
 8010382:	2020      	movs	r0, #32
 8010384:	e7ca      	b.n	801031c <_ntoa_format+0xa2>
            out(' ', buffer, idx++, maxlen);
 8010386:	4643      	mov	r3, r8
 8010388:	4651      	mov	r1, sl
 801038a:	2020      	movs	r0, #32
 801038c:	9f02      	ldr	r7, [sp, #8]
 801038e:	47b8      	blx	r7
        for(i = len; i < width; i++) {
 8010390:	f109 0901 	add.w	r9, r9, #1
 8010394:	454e      	cmp	r6, r9
 8010396:	eb0b 0209 	add.w	r2, fp, r9
 801039a:	d8f4      	bhi.n	8010386 <_ntoa_format+0x10c>
 801039c:	1b32      	subs	r2, r6, r4
 801039e:	42b4      	cmp	r4, r6
 80103a0:	bf88      	it	hi
 80103a2:	2200      	movhi	r2, #0
 80103a4:	9b01      	ldr	r3, [sp, #4]
 80103a6:	441a      	add	r2, r3
 80103a8:	e7bd      	b.n	8010326 <_ntoa_format+0xac>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	46a1      	mov	r9, r4
 80103ae:	eba3 0b04 	sub.w	fp, r3, r4
 80103b2:	e7ef      	b.n	8010394 <_ntoa_format+0x11a>
        out(buf[--len], buffer, idx++, maxlen);
 80103b4:	f102 0901 	add.w	r9, r2, #1
 80103b8:	4643      	mov	r3, r8
 80103ba:	4651      	mov	r1, sl
 80103bc:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 80103c0:	9f02      	ldr	r7, [sp, #8]
 80103c2:	47b8      	blx	r7
 80103c4:	464a      	mov	r2, r9
 80103c6:	e7b0      	b.n	801032a <_ntoa_format+0xb0>
            out(' ', buffer, idx++, maxlen);
 80103c8:	4643      	mov	r3, r8
 80103ca:	4651      	mov	r1, sl
 80103cc:	2020      	movs	r0, #32
 80103ce:	9f02      	ldr	r7, [sp, #8]
 80103d0:	47b8      	blx	r7
 80103d2:	3501      	adds	r5, #1
 80103d4:	e7b1      	b.n	801033a <_ntoa_format+0xc0>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80103d6:	2802      	cmp	r0, #2
 80103d8:	4664      	mov	r4, ip
 80103da:	d196      	bne.n	801030a <_ntoa_format+0x90>
 80103dc:	e7c5      	b.n	801036a <_ntoa_format+0xf0>

080103de <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80103de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103e2:	b091      	sub	sp, #68	; 0x44
 80103e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80103e6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80103e8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 80103ea:	b90d      	cbnz	r5, 80103f0 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
 80103ec:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 80103f0:	057c      	lsls	r4, r7, #21
 80103f2:	d500      	bpl.n	80103f6 <_ntoa_long+0x18>
 80103f4:	b315      	cbz	r5, 801043c <_ntoa_long+0x5e>
 80103f6:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80103fa:	46ac      	mov	ip, r5
 80103fc:	bf18      	it	ne
 80103fe:	f04f 0837 	movne.w	r8, #55	; 0x37
 8010402:	f04f 0500 	mov.w	r5, #0
 8010406:	bf08      	it	eq
 8010408:	f04f 0857 	moveq.w	r8, #87	; 0x57
 801040c:	f10d 0e20 	add.w	lr, sp, #32
            const char digit = (char)(value % base);
 8010410:	fbbc f9f6 	udiv	r9, ip, r6
 8010414:	fb06 c919 	mls	r9, r6, r9, ip
 8010418:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801041c:	f1b9 0f09 	cmp.w	r9, #9
 8010420:	bf94      	ite	ls
 8010422:	3430      	addls	r4, #48	; 0x30
 8010424:	4444      	addhi	r4, r8
 8010426:	b2e4      	uxtb	r4, r4
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8010428:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801042a:	f80e 4b01 	strb.w	r4, [lr], #1
 801042e:	f105 0501 	add.w	r5, r5, #1
            value /= base;
 8010432:	fbbc f4f6 	udiv	r4, ip, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8010436:	d301      	bcc.n	801043c <_ntoa_long+0x5e>
 8010438:	2d20      	cmp	r5, #32
 801043a:	d110      	bne.n	801045e <_ntoa_long+0x80>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801043c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801043e:	9706      	str	r7, [sp, #24]
 8010440:	9405      	str	r4, [sp, #20]
 8010442:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010444:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8010448:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801044c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8010450:	ac08      	add	r4, sp, #32
 8010452:	9400      	str	r4, [sp, #0]
 8010454:	f7ff ff11 	bl	801027a <_ntoa_format>
}
 8010458:	b011      	add	sp, #68	; 0x44
 801045a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
 801045e:	46a4      	mov	ip, r4
 8010460:	e7d6      	b.n	8010410 <_ntoa_long+0x32>

08010462 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8010462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010466:	b093      	sub	sp, #76	; 0x4c
 8010468:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801046a:	4699      	mov	r9, r3
 801046c:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8010470:	ea5a 030b 	orrs.w	r3, sl, fp
        flags &= ~FLAGS_HASH;
 8010474:	bf08      	it	eq
 8010476:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 801047a:	056b      	lsls	r3, r5, #21
{
 801047c:	4606      	mov	r6, r0
 801047e:	460f      	mov	r7, r1
 8010480:	4690      	mov	r8, r2
    if(!(flags & FLAGS_PRECISION) || value) {
 8010482:	d502      	bpl.n	801048a <_ntoa_long_long+0x28>
 8010484:	ea5a 030b 	orrs.w	r3, sl, fp
 8010488:	d03c      	beq.n	8010504 <_ntoa_long_long+0xa2>
 801048a:	ab0a      	add	r3, sp, #40	; 0x28
 801048c:	f015 0f20 	tst.w	r5, #32
 8010490:	9308      	str	r3, [sp, #32]
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8010492:	bf14      	ite	ne
 8010494:	2337      	movne	r3, #55	; 0x37
 8010496:	2357      	moveq	r3, #87	; 0x57
 8010498:	2400      	movs	r4, #0
 801049a:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
 801049c:	4650      	mov	r0, sl
 801049e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80104a2:	4659      	mov	r1, fp
 80104a4:	f7ef fe64 	bl	8000170 <__aeabi_uldivmod>
 80104a8:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80104aa:	2a09      	cmp	r2, #9
 80104ac:	bf8a      	itet	hi
 80104ae:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 80104b0:	3230      	addls	r2, #48	; 0x30
 80104b2:	18d2      	addhi	r2, r2, r3
 80104b4:	9b08      	ldr	r3, [sp, #32]
 80104b6:	b2d2      	uxtb	r2, r2
 80104b8:	f803 2b01 	strb.w	r2, [r3], #1
 80104bc:	9308      	str	r3, [sp, #32]
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80104be:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80104c2:	459b      	cmp	fp, r3
 80104c4:	bf08      	it	eq
 80104c6:	4592      	cmpeq	sl, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80104c8:	f104 0401 	add.w	r4, r4, #1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80104cc:	d301      	bcc.n	80104d2 <_ntoa_long_long+0x70>
 80104ce:	2c20      	cmp	r4, #32
 80104d0:	d115      	bne.n	80104fe <_ntoa_long_long+0x9c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80104d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80104d4:	4642      	mov	r2, r8
 80104d6:	9305      	str	r3, [sp, #20]
 80104d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104da:	4639      	mov	r1, r7
 80104dc:	9304      	str	r3, [sp, #16]
 80104de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80104e0:	4630      	mov	r0, r6
 80104e2:	9303      	str	r3, [sp, #12]
 80104e4:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 80104e8:	9506      	str	r5, [sp, #24]
 80104ea:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80104ee:	ab0a      	add	r3, sp, #40	; 0x28
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	464b      	mov	r3, r9
 80104f4:	f7ff fec1 	bl	801027a <_ntoa_format>
}
 80104f8:	b013      	add	sp, #76	; 0x4c
 80104fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
 80104fe:	4682      	mov	sl, r0
 8010500:	468b      	mov	fp, r1
 8010502:	e7cb      	b.n	801049c <_ntoa_long_long+0x3a>
    size_t len = 0U;
 8010504:	2400      	movs	r4, #0
 8010506:	e7e4      	b.n	80104d2 <_ntoa_long_long+0x70>

08010508 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 801050c:	f1b1 0900 	subs.w	r9, r1, #0
{
 8010510:	461f      	mov	r7, r3
        out = _out_null;
 8010512:	4bb7      	ldr	r3, [pc, #732]	; (80107f0 <_vsnprintf+0x2e8>)
 8010514:	bf18      	it	ne
 8010516:	4603      	movne	r3, r0
{
 8010518:	4690      	mov	r8, r2
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 801051a:	2500      	movs	r5, #0
{
 801051c:	b095      	sub	sp, #84	; 0x54
 801051e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
        out = _out_null;
 8010520:	930c      	str	r3, [sp, #48]	; 0x30
    while(*format) {
 8010522:	7838      	ldrb	r0, [r7, #0]
 8010524:	b978      	cbnz	r0, 8010546 <_vsnprintf+0x3e>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8010526:	4545      	cmp	r5, r8
 8010528:	bf38      	it	cc
 801052a:	462a      	movcc	r2, r5
 801052c:	4643      	mov	r3, r8
 801052e:	4649      	mov	r1, r9
 8010530:	f04f 0000 	mov.w	r0, #0
 8010534:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010536:	bf28      	it	cs
 8010538:	f108 32ff 	addcs.w	r2, r8, #4294967295	; 0xffffffff
 801053c:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 801053e:	4628      	mov	r0, r5
 8010540:	b015      	add	sp, #84	; 0x54
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 8010546:	2825      	cmp	r0, #37	; 0x25
 8010548:	f107 0701 	add.w	r7, r7, #1
 801054c:	d007      	beq.n	801055e <_vsnprintf+0x56>
                out(*format, buffer, idx++, maxlen);
 801054e:	462a      	mov	r2, r5
 8010550:	1c6c      	adds	r4, r5, #1
 8010552:	4643      	mov	r3, r8
 8010554:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010556:	4649      	mov	r1, r9
 8010558:	47a8      	blx	r5
 801055a:	4625      	mov	r5, r4
                break;
 801055c:	e7e1      	b.n	8010522 <_vsnprintf+0x1a>
        flags = 0U;
 801055e:	2300      	movs	r3, #0
 8010560:	e006      	b.n	8010570 <_vsnprintf+0x68>
            switch(*format) {
 8010562:	2a2d      	cmp	r2, #45	; 0x2d
 8010564:	d015      	beq.n	8010592 <_vsnprintf+0x8a>
 8010566:	2a30      	cmp	r2, #48	; 0x30
 8010568:	d10c      	bne.n	8010584 <_vsnprintf+0x7c>
                    flags |= FLAGS_ZEROPAD;
 801056a:	f043 0301 	orr.w	r3, r3, #1
{
 801056e:	460f      	mov	r7, r1
            switch(*format) {
 8010570:	4639      	mov	r1, r7
 8010572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010576:	2a2b      	cmp	r2, #43	; 0x2b
 8010578:	d00e      	beq.n	8010598 <_vsnprintf+0x90>
 801057a:	d8f2      	bhi.n	8010562 <_vsnprintf+0x5a>
 801057c:	2a20      	cmp	r2, #32
 801057e:	d00e      	beq.n	801059e <_vsnprintf+0x96>
 8010580:	2a23      	cmp	r2, #35	; 0x23
 8010582:	d00f      	beq.n	80105a4 <_vsnprintf+0x9c>
        if(_is_digit(*format)) {
 8010584:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8010588:	2809      	cmp	r0, #9
 801058a:	d829      	bhi.n	80105e0 <_vsnprintf+0xd8>
    unsigned int i = 0U;
 801058c:	2200      	movs	r2, #0
 801058e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010590:	e012      	b.n	80105b8 <_vsnprintf+0xb0>
                    flags |= FLAGS_LEFT;
 8010592:	f043 0302 	orr.w	r3, r3, #2
        } while(n);
 8010596:	e7ea      	b.n	801056e <_vsnprintf+0x66>
                    flags |= FLAGS_PLUS;
 8010598:	f043 0304 	orr.w	r3, r3, #4
        } while(n);
 801059c:	e7e7      	b.n	801056e <_vsnprintf+0x66>
                    flags |= FLAGS_SPACE;
 801059e:	f043 0308 	orr.w	r3, r3, #8
        } while(n);
 80105a2:	e7e4      	b.n	801056e <_vsnprintf+0x66>
                    flags |= FLAGS_HASH;
 80105a4:	f043 0310 	orr.w	r3, r3, #16
        } while(n);
 80105a8:	e7e1      	b.n	801056e <_vsnprintf+0x66>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80105aa:	240a      	movs	r4, #10
 80105ac:	460f      	mov	r7, r1
 80105ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80105b0:	fb04 2200 	mla	r2, r4, r0, r2
 80105b4:	3a30      	subs	r2, #48	; 0x30
 80105b6:	920b      	str	r2, [sp, #44]	; 0x2c
    while(_is_digit(**str)) {
 80105b8:	4639      	mov	r1, r7
 80105ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105be:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 80105c2:	2809      	cmp	r0, #9
 80105c4:	d9f1      	bls.n	80105aa <_vsnprintf+0xa2>
        if(*format == '.') {
 80105c6:	783a      	ldrb	r2, [r7, #0]
 80105c8:	2a2e      	cmp	r2, #46	; 0x2e
 80105ca:	d157      	bne.n	801067c <_vsnprintf+0x174>
            if(_is_digit(*format)) {
 80105cc:	7879      	ldrb	r1, [r7, #1]
 80105ce:	1c7a      	adds	r2, r7, #1
 80105d0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80105d4:	2809      	cmp	r0, #9
            flags |= FLAGS_PRECISION;
 80105d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            if(_is_digit(*format)) {
 80105da:	d846      	bhi.n	801066a <_vsnprintf+0x162>
    unsigned int i = 0U;
 80105dc:	2400      	movs	r4, #0
 80105de:	e013      	b.n	8010608 <_vsnprintf+0x100>
        else if(*format == '*') {
 80105e0:	2a2a      	cmp	r2, #42	; 0x2a
 80105e2:	d109      	bne.n	80105f8 <_vsnprintf+0xf0>
            const int w = va_arg(va, int);
 80105e4:	f856 2b04 	ldr.w	r2, [r6], #4
 80105e8:	460f      	mov	r7, r1
            if(w < 0) {
 80105ea:	2a00      	cmp	r2, #0
                width = (unsigned int) - w;
 80105ec:	bfbc      	itt	lt
 80105ee:	4252      	neglt	r2, r2
                flags |= FLAGS_LEFT;    // reverse padding
 80105f0:	f043 0302 	orrlt.w	r3, r3, #2
                width = (unsigned int)w;
 80105f4:	920b      	str	r2, [sp, #44]	; 0x2c
            format++;
 80105f6:	e7e6      	b.n	80105c6 <_vsnprintf+0xbe>
        width = 0U;
 80105f8:	2200      	movs	r2, #0
 80105fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80105fc:	e7e3      	b.n	80105c6 <_vsnprintf+0xbe>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80105fe:	220a      	movs	r2, #10
 8010600:	fb02 1404 	mla	r4, r2, r4, r1
 8010604:	4602      	mov	r2, r0
 8010606:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 8010608:	4610      	mov	r0, r2
 801060a:	f810 1b01 	ldrb.w	r1, [r0], #1
 801060e:	f1a1 0730 	sub.w	r7, r1, #48	; 0x30
 8010612:	2f09      	cmp	r7, #9
 8010614:	d9f3      	bls.n	80105fe <_vsnprintf+0xf6>
 8010616:	4617      	mov	r7, r2
        switch(*format) {
 8010618:	46bb      	mov	fp, r7
 801061a:	f81b 2b01 	ldrb.w	r2, [fp], #1
 801061e:	2a6c      	cmp	r2, #108	; 0x6c
 8010620:	d035      	beq.n	801068e <_vsnprintf+0x186>
 8010622:	d82d      	bhi.n	8010680 <_vsnprintf+0x178>
 8010624:	2a68      	cmp	r2, #104	; 0x68
 8010626:	d03a      	beq.n	801069e <_vsnprintf+0x196>
 8010628:	2a6a      	cmp	r2, #106	; 0x6a
 801062a:	d041      	beq.n	80106b0 <_vsnprintf+0x1a8>
 801062c:	46bb      	mov	fp, r7
        switch(*format) {
 801062e:	465f      	mov	r7, fp
 8010630:	f817 0b01 	ldrb.w	r0, [r7], #1
 8010634:	2878      	cmp	r0, #120	; 0x78
 8010636:	d88a      	bhi.n	801054e <_vsnprintf+0x46>
 8010638:	2861      	cmp	r0, #97	; 0x61
 801063a:	d83c      	bhi.n	80106b6 <_vsnprintf+0x1ae>
 801063c:	2825      	cmp	r0, #37	; 0x25
 801063e:	d086      	beq.n	801054e <_vsnprintf+0x46>
 8010640:	2824      	cmp	r0, #36	; 0x24
 8010642:	d984      	bls.n	801054e <_vsnprintf+0x46>
 8010644:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
 8010648:	2a50      	cmp	r2, #80	; 0x50
 801064a:	d180      	bne.n	801054e <_vsnprintf+0x46>
                    if(*format == 'x' || *format == 'X') {
 801064c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 8010650:	2a58      	cmp	r2, #88	; 0x58
 8010652:	d008      	beq.n	8010666 <_vsnprintf+0x15e>
                    else if(*format == 'p' || *format == 'P') {
 8010654:	2a50      	cmp	r2, #80	; 0x50
 8010656:	d165      	bne.n	8010724 <_vsnprintf+0x21c>
                        if(*(format + 1) == 'V')
 8010658:	f89b 2001 	ldrb.w	r2, [fp, #1]
                            flags |= FLAGS_LONG;
 801065c:	f443 7388 	orr.w	r3, r3, #272	; 0x110
                            format++;
 8010660:	2a56      	cmp	r2, #86	; 0x56
 8010662:	bf08      	it	eq
 8010664:	46bb      	moveq	fp, r7
                        base = 16U;
 8010666:	2210      	movs	r2, #16
 8010668:	e063      	b.n	8010732 <_vsnprintf+0x22a>
            else if(*format == '*') {
 801066a:	292a      	cmp	r1, #42	; 0x2a
 801066c:	d105      	bne.n	801067a <_vsnprintf+0x172>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 801066e:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
 8010672:	3702      	adds	r7, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8010674:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
 8010678:	e7ce      	b.n	8010618 <_vsnprintf+0x110>
            format++;
 801067a:	4617      	mov	r7, r2
        precision = 0U;
 801067c:	2400      	movs	r4, #0
 801067e:	e7cb      	b.n	8010618 <_vsnprintf+0x110>
        switch(*format) {
 8010680:	2a74      	cmp	r2, #116	; 0x74
 8010682:	d001      	beq.n	8010688 <_vsnprintf+0x180>
 8010684:	2a7a      	cmp	r2, #122	; 0x7a
 8010686:	d1d1      	bne.n	801062c <_vsnprintf+0x124>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8010688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
                break;
 801068c:	e7cf      	b.n	801062e <_vsnprintf+0x126>
                if(*format == 'l') {
 801068e:	787a      	ldrb	r2, [r7, #1]
 8010690:	2a6c      	cmp	r2, #108	; 0x6c
 8010692:	d1f9      	bne.n	8010688 <_vsnprintf+0x180>
                    flags |= FLAGS_LONG_LONG;
 8010694:	f443 7340 	orr.w	r3, r3, #768	; 0x300
                    format++;
 8010698:	f107 0b02 	add.w	fp, r7, #2
 801069c:	e7c7      	b.n	801062e <_vsnprintf+0x126>
                if(*format == 'h') {
 801069e:	787a      	ldrb	r2, [r7, #1]
 80106a0:	2a68      	cmp	r2, #104	; 0x68
 80106a2:	d002      	beq.n	80106aa <_vsnprintf+0x1a2>
                flags |= FLAGS_SHORT;
 80106a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a8:	e7c1      	b.n	801062e <_vsnprintf+0x126>
                    flags |= FLAGS_CHAR;
 80106aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80106ae:	e7f3      	b.n	8010698 <_vsnprintf+0x190>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80106b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
                break;
 80106b4:	e7bb      	b.n	801062e <_vsnprintf+0x126>
 80106b6:	f1a0 0262 	sub.w	r2, r0, #98	; 0x62
 80106ba:	2a16      	cmp	r2, #22
 80106bc:	f63f af47 	bhi.w	801054e <_vsnprintf+0x46>
 80106c0:	a101      	add	r1, pc, #4	; (adr r1, 80106c8 <_vsnprintf+0x1c0>)
 80106c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80106c6:	bf00      	nop
 80106c8:	0801064d 	.word	0x0801064d
 80106cc:	0801088b 	.word	0x0801088b
 80106d0:	0801064d 	.word	0x0801064d
 80106d4:	0801054f 	.word	0x0801054f
 80106d8:	0801054f 	.word	0x0801054f
 80106dc:	0801054f 	.word	0x0801054f
 80106e0:	0801054f 	.word	0x0801054f
 80106e4:	0801064d 	.word	0x0801064d
 80106e8:	0801054f 	.word	0x0801054f
 80106ec:	0801054f 	.word	0x0801054f
 80106f0:	0801054f 	.word	0x0801054f
 80106f4:	0801054f 	.word	0x0801054f
 80106f8:	0801054f 	.word	0x0801054f
 80106fc:	0801064d 	.word	0x0801064d
 8010700:	0801064d 	.word	0x0801064d
 8010704:	0801054f 	.word	0x0801054f
 8010708:	0801054f 	.word	0x0801054f
 801070c:	08010915 	.word	0x08010915
 8010710:	0801054f 	.word	0x0801054f
 8010714:	0801064d 	.word	0x0801064d
 8010718:	0801054f 	.word	0x0801054f
 801071c:	0801054f 	.word	0x0801054f
 8010720:	0801064d 	.word	0x0801064d
                    else if(*format == 'o') {
 8010724:	286f      	cmp	r0, #111	; 0x6f
 8010726:	d00f      	beq.n	8010748 <_vsnprintf+0x240>
                    else if(*format == 'b') {
 8010728:	2862      	cmp	r0, #98	; 0x62
 801072a:	d00f      	beq.n	801074c <_vsnprintf+0x244>
                        base = 10U;
 801072c:	220a      	movs	r2, #10
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 801072e:	f023 0310 	bic.w	r3, r3, #16
                    if(*format == 'X' || *format == 'P') {
 8010732:	f89b 1000 	ldrb.w	r1, [fp]
 8010736:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 801073a:	2850      	cmp	r0, #80	; 0x50
 801073c:	d108      	bne.n	8010750 <_vsnprintf+0x248>
                        flags |= FLAGS_UPPERCASE;
 801073e:	f043 0320 	orr.w	r3, r3, #32
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8010742:	f023 030c 	bic.w	r3, r3, #12
 8010746:	e007      	b.n	8010758 <_vsnprintf+0x250>
                        base =  8U;
 8010748:	2208      	movs	r2, #8
 801074a:	e7f2      	b.n	8010732 <_vsnprintf+0x22a>
                        base =  2U;
 801074c:	2202      	movs	r2, #2
 801074e:	e7f0      	b.n	8010732 <_vsnprintf+0x22a>
                    if((*format != 'i') && (*format != 'd')) {
 8010750:	2969      	cmp	r1, #105	; 0x69
 8010752:	d001      	beq.n	8010758 <_vsnprintf+0x250>
 8010754:	2964      	cmp	r1, #100	; 0x64
 8010756:	d1f4      	bne.n	8010742 <_vsnprintf+0x23a>
                    if(flags & FLAGS_PRECISION) {
 8010758:	0558      	lsls	r0, r3, #21
                        flags &= ~FLAGS_ZEROPAD;
 801075a:	bf48      	it	mi
 801075c:	f023 0301 	bicmi.w	r3, r3, #1
                    if((*format == 'i') || (*format == 'd')) {
 8010760:	2969      	cmp	r1, #105	; 0x69
 8010762:	d001      	beq.n	8010768 <_vsnprintf+0x260>
 8010764:	2964      	cmp	r1, #100	; 0x64
 8010766:	d145      	bne.n	80107f4 <_vsnprintf+0x2ec>
                        if(flags & FLAGS_LONG_LONG) {
 8010768:	0599      	lsls	r1, r3, #22
 801076a:	d524      	bpl.n	80107b6 <_vsnprintf+0x2ae>
                            const long long value = va_arg(va, long long);
 801076c:	3607      	adds	r6, #7
 801076e:	f026 0607 	bic.w	r6, r6, #7
 8010772:	46b2      	mov	sl, r6
 8010774:	6870      	ldr	r0, [r6, #4]
 8010776:	f85a 1b08 	ldr.w	r1, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 801077a:	9308      	str	r3, [sp, #32]
 801077c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801077e:	2900      	cmp	r1, #0
 8010780:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8010784:	f04f 0300 	mov.w	r3, #0
 8010788:	9204      	str	r2, [sp, #16]
 801078a:	9305      	str	r3, [sp, #20]
 801078c:	460a      	mov	r2, r1
 801078e:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 8010792:	f170 0100 	sbcs.w	r1, r0, #0
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	4603      	mov	r3, r0
 801079a:	da02      	bge.n	80107a2 <_vsnprintf+0x29a>
 801079c:	4252      	negs	r2, r2
 801079e:	eb60 0340 	sbc.w	r3, r0, r0, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80107a2:	e9cd 2300 	strd	r2, r3, [sp]
 80107a6:	4649      	mov	r1, r9
 80107a8:	4643      	mov	r3, r8
 80107aa:	462a      	mov	r2, r5
 80107ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80107ae:	f7ff fe58 	bl	8010462 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80107b2:	4605      	mov	r5, r0
 80107b4:	e030      	b.n	8010818 <_vsnprintf+0x310>
                        else if(flags & FLAGS_LONG) {
 80107b6:	05df      	lsls	r7, r3, #23
 80107b8:	f106 0a04 	add.w	sl, r6, #4
 80107bc:	d50d      	bpl.n	80107da <_vsnprintf+0x2d2>
                            const long value = va_arg(va, long);
 80107be:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 80107c0:	9305      	str	r3, [sp, #20]
 80107c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107c4:	2900      	cmp	r1, #0
 80107c6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80107ca:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 80107ce:	9202      	str	r2, [sp, #8]
 80107d0:	9301      	str	r3, [sp, #4]
 80107d2:	bfb8      	it	lt
 80107d4:	4249      	neglt	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80107d6:	9100      	str	r1, [sp, #0]
 80107d8:	e03f      	b.n	801085a <_vsnprintf+0x352>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 80107da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80107de:	6831      	ldr	r1, [r6, #0]
 80107e0:	d001      	beq.n	80107e6 <_vsnprintf+0x2de>
 80107e2:	b2c9      	uxtb	r1, r1
 80107e4:	e7ec      	b.n	80107c0 <_vsnprintf+0x2b8>
                                                                                                                                       int) : va_arg(va, int);
 80107e6:	0618      	lsls	r0, r3, #24
 80107e8:	bf48      	it	mi
 80107ea:	b209      	sxthmi	r1, r1
 80107ec:	e7e8      	b.n	80107c0 <_vsnprintf+0x2b8>
 80107ee:	bf00      	nop
 80107f0:	08010279 	.word	0x08010279
                    else if(*format == 'V') {
 80107f4:	2956      	cmp	r1, #86	; 0x56
 80107f6:	d113      	bne.n	8010820 <_vsnprintf+0x318>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 80107f8:	46b2      	mov	sl, r6
 80107fa:	f85a 3b04 	ldr.w	r3, [sl], #4
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 80107fe:	eb09 0105 	add.w	r1, r9, r5
                        va_copy(copy, *vaf->va);
 8010802:	685a      	ldr	r2, [r3, #4]
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8010804:	980c      	ldr	r0, [sp, #48]	; 0x30
                        va_copy(copy, *vaf->va);
 8010806:	6812      	ldr	r2, [r2, #0]
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8010808:	9200      	str	r2, [sp, #0]
                        va_copy(copy, *vaf->va);
 801080a:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	eba8 0205 	sub.w	r2, r8, r5
 8010812:	f7ff fe79 	bl	8010508 <_vsnprintf>
 8010816:	4405      	add	r5, r0
                    break;
 8010818:	4656      	mov	r6, sl
                    format++;
 801081a:	f10b 0701 	add.w	r7, fp, #1
                    break;
 801081e:	e680      	b.n	8010522 <_vsnprintf+0x1a>
                        if(flags & FLAGS_LONG_LONG) {
 8010820:	f413 7100 	ands.w	r1, r3, #512	; 0x200
 8010824:	d00d      	beq.n	8010842 <_vsnprintf+0x33a>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8010826:	9308      	str	r3, [sp, #32]
 8010828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801082a:	3607      	adds	r6, #7
 801082c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8010830:	2300      	movs	r3, #0
 8010832:	f026 0a07 	bic.w	sl, r6, #7
 8010836:	9204      	str	r2, [sp, #16]
 8010838:	9305      	str	r3, [sp, #20]
 801083a:	9302      	str	r3, [sp, #8]
 801083c:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8010840:	e7af      	b.n	80107a2 <_vsnprintf+0x29a>
                        else if(flags & FLAGS_LONG) {
 8010842:	05df      	lsls	r7, r3, #23
 8010844:	f106 0a04 	add.w	sl, r6, #4
 8010848:	d50e      	bpl.n	8010868 <_vsnprintf+0x360>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 801084a:	9305      	str	r3, [sp, #20]
 801084c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801084e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010852:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8010856:	6833      	ldr	r3, [r6, #0]
 8010858:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801085a:	4643      	mov	r3, r8
 801085c:	462a      	mov	r2, r5
 801085e:	4649      	mov	r1, r9
 8010860:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010862:	f7ff fdbc 	bl	80103de <_ntoa_long>
 8010866:	e7a4      	b.n	80107b2 <_vsnprintf+0x2aa>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8010868:	f013 0f40 	tst.w	r3, #64	; 0x40
 801086c:	6831      	ldr	r1, [r6, #0]
 801086e:	d008      	beq.n	8010882 <_vsnprintf+0x37a>
 8010870:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8010872:	9305      	str	r3, [sp, #20]
 8010874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010876:	9202      	str	r2, [sp, #8]
 8010878:	e9cd 4303 	strd	r4, r3, [sp, #12]
 801087c:	2300      	movs	r3, #0
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	e7a9      	b.n	80107d6 <_vsnprintf+0x2ce>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8010882:	0618      	lsls	r0, r3, #24
 8010884:	bf48      	it	mi
 8010886:	b289      	uxthmi	r1, r1
 8010888:	e7f3      	b.n	8010872 <_vsnprintf+0x36a>
                    if(!(flags & FLAGS_LEFT)) {
 801088a:	f013 0302 	ands.w	r3, r3, #2
 801088e:	930d      	str	r3, [sp, #52]	; 0x34
 8010890:	d028      	beq.n	80108e4 <_vsnprintf+0x3dc>
                    unsigned int l = 1U;
 8010892:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010896:	f856 0b04 	ldr.w	r0, [r6], #4
 801089a:	4643      	mov	r3, r8
 801089c:	462a      	mov	r2, r5
 801089e:	4649      	mov	r1, r9
 80108a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80108a2:	b2c0      	uxtb	r0, r0
 80108a4:	47a0      	blx	r4
                    if(flags & FLAGS_LEFT) {
 80108a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80108a8:	f105 0b01 	add.w	fp, r5, #1
                    if(flags & FLAGS_LEFT) {
 80108ac:	b383      	cbz	r3, 8010910 <_vsnprintf+0x408>
 80108ae:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80108b0:	465a      	mov	r2, fp
 80108b2:	e023      	b.n	80108fc <_vsnprintf+0x3f4>
                            out(' ', buffer, idx++, maxlen);
 80108b4:	4643      	mov	r3, r8
 80108b6:	4649      	mov	r1, r9
 80108b8:	2020      	movs	r0, #32
 80108ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80108bc:	47a0      	blx	r4
                        while(l++ < width) {
 80108be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c0:	eb05 020a 	add.w	r2, r5, sl
 80108c4:	f10a 0a01 	add.w	sl, sl, #1
 80108c8:	459a      	cmp	sl, r3
 80108ca:	d3f3      	bcc.n	80108b4 <_vsnprintf+0x3ac>
 80108cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108ce:	3b01      	subs	r3, #1
 80108d0:	2a00      	cmp	r2, #0
 80108d2:	bf08      	it	eq
 80108d4:	2300      	moveq	r3, #0
 80108d6:	f102 0a01 	add.w	sl, r2, #1
 80108da:	441d      	add	r5, r3
 80108dc:	bf08      	it	eq
 80108de:	f04f 0a02 	moveq.w	sl, #2
 80108e2:	e7d8      	b.n	8010896 <_vsnprintf+0x38e>
 80108e4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80108e8:	e7e9      	b.n	80108be <_vsnprintf+0x3b6>
                            out(' ', buffer, idx++, maxlen);
 80108ea:	1c53      	adds	r3, r2, #1
 80108ec:	930d      	str	r3, [sp, #52]	; 0x34
 80108ee:	4649      	mov	r1, r9
 80108f0:	4643      	mov	r3, r8
 80108f2:	2020      	movs	r0, #32
 80108f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80108f6:	47a8      	blx	r5
 80108f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108fa:	3401      	adds	r4, #1
                        while(l++ < width) {
 80108fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108fe:	42a3      	cmp	r3, r4
 8010900:	d8f3      	bhi.n	80108ea <_vsnprintf+0x3e2>
 8010902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010904:	eba3 030a 	sub.w	r3, r3, sl
 8010908:	4552      	cmp	r2, sl
 801090a:	bf38      	it	cc
 801090c:	2300      	movcc	r3, #0
 801090e:	449b      	add	fp, r3
                    break;
 8010910:	465d      	mov	r5, fp
 8010912:	e606      	b.n	8010522 <_vsnprintf+0x1a>
                    const char * p = va_arg(va, char *);
 8010914:	4632      	mov	r2, r6
 8010916:	f852 ab04 	ldr.w	sl, [r2], #4
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801091a:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 801091c:	920d      	str	r2, [sp, #52]	; 0x34
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801091e:	bf14      	ite	ne
 8010920:	4622      	movne	r2, r4
 8010922:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8010926:	46d3      	mov	fp, sl
 8010928:	4452      	add	r2, sl
    for(s = str; *s && maxsize--; ++s);
 801092a:	f89b 1000 	ldrb.w	r1, [fp]
 801092e:	b109      	cbz	r1, 8010934 <_vsnprintf+0x42c>
 8010930:	4593      	cmp	fp, r2
 8010932:	d111      	bne.n	8010958 <_vsnprintf+0x450>
                    if(flags & FLAGS_PRECISION) {
 8010934:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
    return (unsigned int)(s - str);
 8010938:	ebab 0b0a 	sub.w	fp, fp, sl
                    if(flags & FLAGS_PRECISION) {
 801093c:	920f      	str	r2, [sp, #60]	; 0x3c
 801093e:	d002      	beq.n	8010946 <_vsnprintf+0x43e>
                        l = (l < precision ? l : precision);
 8010940:	45a3      	cmp	fp, r4
 8010942:	bf28      	it	cs
 8010944:	46a3      	movcs	fp, r4
                    if(!(flags & FLAGS_LEFT)) {
 8010946:	f013 0302 	ands.w	r3, r3, #2
 801094a:	9310      	str	r3, [sp, #64]	; 0x40
 801094c:	d11e      	bne.n	801098c <_vsnprintf+0x484>
 801094e:	ebab 0305 	sub.w	r3, fp, r5
 8010952:	462a      	mov	r2, r5
 8010954:	930e      	str	r3, [sp, #56]	; 0x38
 8010956:	e00a      	b.n	801096e <_vsnprintf+0x466>
    for(s = str; *s && maxsize--; ++s);
 8010958:	f10b 0b01 	add.w	fp, fp, #1
 801095c:	e7e5      	b.n	801092a <_vsnprintf+0x422>
                            out(' ', buffer, idx++, maxlen);
 801095e:	1c53      	adds	r3, r2, #1
 8010960:	9311      	str	r3, [sp, #68]	; 0x44
 8010962:	4649      	mov	r1, r9
 8010964:	4643      	mov	r3, r8
 8010966:	2020      	movs	r0, #32
 8010968:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801096a:	47b0      	blx	r6
 801096c:	9a11      	ldr	r2, [sp, #68]	; 0x44
                        while(l++ < width) {
 801096e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010972:	4413      	add	r3, r2
 8010974:	428b      	cmp	r3, r1
 8010976:	d3f2      	bcc.n	801095e <_vsnprintf+0x456>
 8010978:	eba1 030b 	sub.w	r3, r1, fp
 801097c:	4559      	cmp	r1, fp
 801097e:	bf38      	it	cc
 8010980:	2300      	movcc	r3, #0
 8010982:	460a      	mov	r2, r1
 8010984:	f10b 0b01 	add.w	fp, fp, #1
 8010988:	441d      	add	r5, r3
 801098a:	449b      	add	fp, r3
 801098c:	eba5 060a 	sub.w	r6, r5, sl
 8010990:	e005      	b.n	801099e <_vsnprintf+0x496>
 8010992:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 8010994:	462a      	mov	r2, r5
 8010996:	4643      	mov	r3, r8
 8010998:	4649      	mov	r1, r9
 801099a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801099c:	47a8      	blx	r5
 801099e:	eb06 050a 	add.w	r5, r6, sl
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80109a2:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80109a6:	b128      	cbz	r0, 80109b4 <_vsnprintf+0x4ac>
 80109a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d0f2      	beq.n	8010994 <_vsnprintf+0x48c>
 80109ae:	1e63      	subs	r3, r4, #1
 80109b0:	2c00      	cmp	r4, #0
 80109b2:	d1ee      	bne.n	8010992 <_vsnprintf+0x48a>
                    if(flags & FLAGS_LEFT) {
 80109b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109b6:	b1b3      	cbz	r3, 80109e6 <_vsnprintf+0x4de>
 80109b8:	462a      	mov	r2, r5
 80109ba:	ebab 0a05 	sub.w	sl, fp, r5
 80109be:	e006      	b.n	80109ce <_vsnprintf+0x4c6>
                            out(' ', buffer, idx++, maxlen);
 80109c0:	1c56      	adds	r6, r2, #1
 80109c2:	4643      	mov	r3, r8
 80109c4:	4649      	mov	r1, r9
 80109c6:	2020      	movs	r0, #32
 80109c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80109ca:	47a0      	blx	r4
 80109cc:	4632      	mov	r2, r6
                        while(l++ < width) {
 80109ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109d0:	eb02 030a 	add.w	r3, r2, sl
 80109d4:	4299      	cmp	r1, r3
 80109d6:	d8f3      	bhi.n	80109c0 <_vsnprintf+0x4b8>
 80109d8:	eba1 030b 	sub.w	r3, r1, fp
 80109dc:	4559      	cmp	r1, fp
 80109de:	bf38      	it	cc
 80109e0:	2300      	movcc	r3, #0
 80109e2:	460a      	mov	r2, r1
 80109e4:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
 80109e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
                    break;
 80109e8:	e59b      	b.n	8010522 <_vsnprintf+0x1a>
 80109ea:	bf00      	nop

080109ec <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 80109ec:	b40c      	push	{r2, r3}
 80109ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109f0:	ac06      	add	r4, sp, #24
 80109f2:	f854 3b04 	ldr.w	r3, [r4], #4
 80109f6:	460a      	mov	r2, r1
    va_list va;
    va_start(va, format);
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 80109f8:	9400      	str	r4, [sp, #0]
 80109fa:	4601      	mov	r1, r0
 80109fc:	4804      	ldr	r0, [pc, #16]	; (8010a10 <lv_snprintf+0x24>)
    va_start(va, format);
 80109fe:	9403      	str	r4, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8010a00:	f7ff fd82 	bl	8010508 <_vsnprintf>
    va_end(va);
    return ret;
}
 8010a04:	b004      	add	sp, #16
 8010a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a0a:	b002      	add	sp, #8
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	08010271 	.word	0x08010271

08010a14 <lv_style_init>:
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8010a14:	2108      	movs	r1, #8
 8010a16:	f7ff bbcb 	b.w	80101b0 <lv_memset_00>

08010a1a <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8010a1a:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8010a1e:	b510      	push	{r4, lr}
    if(style->is_const) {
 8010a20:	2b00      	cmp	r3, #0
{
 8010a22:	4604      	mov	r4, r0
    if(style->is_const) {
 8010a24:	db0b      	blt.n	8010a3e <lv_style_reset+0x24>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8010a26:	79c3      	ldrb	r3, [r0, #7]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d902      	bls.n	8010a32 <lv_style_reset+0x18>
 8010a2c:	6800      	ldr	r0, [r0, #0]
 8010a2e:	f7ff f9bb 	bl	800fda8 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8010a32:	4620      	mov	r0, r4
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}
 8010a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8010a38:	2108      	movs	r1, #8
 8010a3a:	f7ff bbb9 	b.w	80101b0 <lv_memset_00>
}
 8010a3e:	bd10      	pop	{r4, pc}

08010a40 <lv_style_register_prop>:

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
 8010a40:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <lv_style_register_prop+0xc>)
 8010a42:	8818      	ldrh	r0, [r3, #0]
 8010a44:	3001      	adds	r0, #1
 8010a46:	b280      	uxth	r0, r0
 8010a48:	8018      	strh	r0, [r3, #0]
    return act_id;
}
 8010a4a:	4770      	bx	lr
 8010a4c:	20000014 	.word	0x20000014

08010a50 <lv_style_remove_prop>:

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8010a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8010a52:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8010a56:	4604      	mov	r4, r0
    if(style->is_const) {
 8010a58:	2b00      	cmp	r3, #0
{
 8010a5a:	460e      	mov	r6, r1
    if(style->is_const) {
 8010a5c:	db55      	blt.n	8010b0a <lv_style_remove_prop+0xba>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 8010a5e:	79c0      	ldrb	r0, [r0, #7]
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d052      	beq.n	8010b0a <lv_style_remove_prop+0xba>

    if(style->prop_cnt == 1) {
 8010a64:	2801      	cmp	r0, #1
 8010a66:	d10a      	bne.n	8010a7e <lv_style_remove_prop+0x2e>
        if(style->prop1 == prop) {
 8010a68:	88a3      	ldrh	r3, [r4, #4]
 8010a6a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010a6e:	428a      	cmp	r2, r1
 8010a70:	d14b      	bne.n	8010b0a <lv_style_remove_prop+0xba>
            style->prop1 = LV_STYLE_PROP_INV;
 8010a72:	f36f 030e 	bfc	r3, #0, #15
 8010a76:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	71e3      	strb	r3, [r4, #7]
            return true;
        }
    }

    return false;
}
 8010a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(i = 0; i < style->prop_cnt; i++) {
 8010a7e:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010a80:	6825      	ldr	r5, [r4, #0]
 8010a82:	eb05 0780 	add.w	r7, r5, r0, lsl #2
        if(old_props[i] == prop) {
 8010a86:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 8010a8a:	42b2      	cmp	r2, r6
 8010a8c:	d13a      	bne.n	8010b04 <lv_style_remove_prop+0xb4>
            if(style->prop_cnt == 2) {
 8010a8e:	2802      	cmp	r0, #2
 8010a90:	d115      	bne.n	8010abe <lv_style_remove_prop+0x6e>
                style->prop_cnt = 1;
 8010a92:	2201      	movs	r2, #1
 8010a94:	71e2      	strb	r2, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8010a96:	b973      	cbnz	r3, 8010ab6 <lv_style_remove_prop+0x66>
 8010a98:	887a      	ldrh	r2, [r7, #2]
 8010a9a:	88a1      	ldrh	r1, [r4, #4]
 8010a9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010aa0:	f362 010e 	bfi	r1, r2, #0, #15
 8010aa4:	80a1      	strh	r1, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8010aa6:	b943      	cbnz	r3, 8010aba <lv_style_remove_prop+0x6a>
 8010aa8:	686b      	ldr	r3, [r5, #4]
 8010aaa:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 8010aac:	4628      	mov	r0, r5
 8010aae:	f7ff f97b 	bl	800fda8 <lv_mem_free>
            return true;
 8010ab2:	2001      	movs	r0, #1
 8010ab4:	e7e2      	b.n	8010a7c <lv_style_remove_prop+0x2c>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8010ab6:	892a      	ldrh	r2, [r5, #8]
 8010ab8:	e7ef      	b.n	8010a9a <lv_style_remove_prop+0x4a>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8010aba:	682b      	ldr	r3, [r5, #0]
 8010abc:	e7f5      	b.n	8010aaa <lv_style_remove_prop+0x5a>
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8010abe:	2306      	movs	r3, #6
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8010ac0:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8010ac2:	4358      	muls	r0, r3
 8010ac4:	f7ff faf6 	bl	80100b4 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8010ac8:	b1f8      	cbz	r0, 8010b0a <lv_style_remove_prop+0xba>
                for(i = j = 0; j <= style->prop_cnt;
 8010aca:	2200      	movs	r2, #0
 8010acc:	4694      	mov	ip, r2
                style->prop_cnt--;
 8010ace:	79e3      	ldrb	r3, [r4, #7]
                style->v_p.values_and_props = new_values_and_props;
 8010ad0:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010ad8:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 8010ada:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8010ade:	42b1      	cmp	r1, r6
 8010ae0:	d00b      	beq.n	8010afa <lv_style_remove_prop+0xaa>
                        new_values[i] = old_values[j];
 8010ae2:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 8010ae6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
                        new_props[i++] = old_props[j];
 8010aea:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8010aee:	eb00 014c 	add.w	r1, r0, ip, lsl #1
 8010af2:	f821 e003 	strh.w	lr, [r1, r3]
 8010af6:	f10c 0c01 	add.w	ip, ip, #1
                for(i = j = 0; j <= style->prop_cnt;
 8010afa:	79e1      	ldrb	r1, [r4, #7]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8010afc:	3201      	adds	r2, #1
                for(i = j = 0; j <= style->prop_cnt;
 8010afe:	4291      	cmp	r1, r2
 8010b00:	d2eb      	bcs.n	8010ada <lv_style_remove_prop+0x8a>
 8010b02:	e7d3      	b.n	8010aac <lv_style_remove_prop+0x5c>
    for(i = 0; i < style->prop_cnt; i++) {
 8010b04:	3301      	adds	r3, #1
 8010b06:	4298      	cmp	r0, r3
 8010b08:	d8bd      	bhi.n	8010a86 <lv_style_remove_prop+0x36>
        return false;
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	e7b6      	b.n	8010a7c <lv_style_remove_prop+0x2c>

08010b0e <lv_style_get_prop>:
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8010b0e:	4603      	mov	r3, r0
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                 lv_style_value_t * value)
{
    if(style->is_const) {
 8010b10:	f990 0005 	ldrsb.w	r0, [r0, #5]
 8010b14:	b570      	push	{r4, r5, r6, lr}
 8010b16:	2800      	cmp	r0, #0
 8010b18:	da0b      	bge.n	8010b32 <lv_style_get_prop+0x24>
        const lv_style_const_prop_t * const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	8818      	ldrh	r0, [r3, #0]
 8010b1e:	b900      	cbnz	r0, 8010b22 <lv_style_get_prop+0x14>
    return lv_style_get_prop_inlined(style, prop, value);
}
 8010b20:	bd70      	pop	{r4, r5, r6, pc}
            if(const_prop->prop == prop) {
 8010b22:	4281      	cmp	r1, r0
 8010b24:	d103      	bne.n	8010b2e <lv_style_get_prop+0x20>
                *value = const_prop->value;
 8010b26:	685b      	ldr	r3, [r3, #4]
            }
        }
    }
    else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
 8010b28:	2001      	movs	r0, #1
        *value = style->v_p.value1;
 8010b2a:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
 8010b2c:	e7f8      	b.n	8010b20 <lv_style_get_prop+0x12>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8010b2e:	3308      	adds	r3, #8
 8010b30:	e7f4      	b.n	8010b1c <lv_style_get_prop+0xe>
    if(style->prop_cnt == 0) return LV_RES_INV;
 8010b32:	79d8      	ldrb	r0, [r3, #7]
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d0f3      	beq.n	8010b20 <lv_style_get_prop+0x12>
    if(style->prop_cnt > 1) {
 8010b38:	2801      	cmp	r0, #1
 8010b3a:	d90f      	bls.n	8010b5c <lv_style_get_prop+0x4e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010b3c:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8010b3e:	2300      	movs	r3, #0
 8010b40:	eb04 0580 	add.w	r5, r4, r0, lsl #2
            if(props[i] == prop) {
 8010b44:	f835 6b02 	ldrh.w	r6, [r5], #2
 8010b48:	42b1      	cmp	r1, r6
 8010b4a:	d102      	bne.n	8010b52 <lv_style_get_prop+0x44>
                *value = values[i];
 8010b4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010b50:	e7ea      	b.n	8010b28 <lv_style_get_prop+0x1a>
        for(i = 0; i < style->prop_cnt; i++) {
 8010b52:	3301      	adds	r3, #1
 8010b54:	4298      	cmp	r0, r3
 8010b56:	d8f5      	bhi.n	8010b44 <lv_style_get_prop+0x36>
        return LV_RES_INV;
 8010b58:	2000      	movs	r0, #0
 8010b5a:	e7e1      	b.n	8010b20 <lv_style_get_prop+0x12>
    else if(style->prop1 == prop) {
 8010b5c:	8898      	ldrh	r0, [r3, #4]
 8010b5e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8010b62:	4288      	cmp	r0, r1
 8010b64:	d1f8      	bne.n	8010b58 <lv_style_get_prop+0x4a>
        *value = style->v_p.value1;
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	e7de      	b.n	8010b28 <lv_style_get_prop+0x1a>
	...

08010b6c <lv_style_prop_get_default>:
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 8010b6c:	2853      	cmp	r0, #83	; 0x53
 8010b6e:	d82b      	bhi.n	8010bc8 <lv_style_prop_get_default+0x5c>
 8010b70:	2843      	cmp	r0, #67	; 0x43
 8010b72:	d80c      	bhi.n	8010b8e <lv_style_prop_get_default+0x22>
 8010b74:	2827      	cmp	r0, #39	; 0x27
 8010b76:	d821      	bhi.n	8010bbc <lv_style_prop_get_default+0x50>
 8010b78:	281f      	cmp	r0, #31
 8010b7a:	d923      	bls.n	8010bc4 <lv_style_prop_get_default+0x58>
 8010b7c:	3820      	subs	r0, #32
 8010b7e:	2807      	cmp	r0, #7
 8010b80:	d820      	bhi.n	8010bc4 <lv_style_prop_get_default+0x58>
 8010b82:	e8df f000 	tbb	[pc, r0]
 8010b86:	1f4f      	.short	0x1f4f
 8010b88:	371f1f55 	.word	0x371f1f55
 8010b8c:	371f      	.short	0x371f
 8010b8e:	3844      	subs	r0, #68	; 0x44
 8010b90:	280f      	cmp	r0, #15
 8010b92:	d817      	bhi.n	8010bc4 <lv_style_prop_get_default+0x58>
 8010b94:	e8df f000 	tbb	[pc, r0]
 8010b98:	4c2e164c 	.word	0x4c2e164c
 8010b9c:	16161616 	.word	0x16161616
 8010ba0:	162e4c16 	.word	0x162e4c16
 8010ba4:	2e4c1616 	.word	0x2e4c1616
 8010ba8:	280b      	cmp	r0, #11
 8010baa:	d80b      	bhi.n	8010bc4 <lv_style_prop_get_default+0x58>
 8010bac:	e8df f000 	tbb	[pc, r0]
 8010bb0:	440a2240 	.word	0x440a2240
 8010bb4:	0a0a0a0a 	.word	0x0a0a0a0a
 8010bb8:	400a0a0a 	.word	0x400a0a0a
 8010bbc:	3830      	subs	r0, #48	; 0x30
 8010bbe:	b283      	uxth	r3, r0
 8010bc0:	2b0b      	cmp	r3, #11
 8010bc2:	d9f1      	bls.n	8010ba8 <lv_style_prop_get_default+0x3c>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 8010bc4:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 8010bc6:	4770      	bx	lr
    switch(prop) {
 8010bc8:	f241 4359 	movw	r3, #5209	; 0x1459
 8010bcc:	4298      	cmp	r0, r3
 8010bce:	d035      	beq.n	8010c3c <lv_style_prop_get_default+0xd0>
 8010bd0:	d821      	bhi.n	8010c16 <lv_style_prop_get_default+0xaa>
 8010bd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8010bd6:	4298      	cmp	r0, r3
 8010bd8:	d01a      	beq.n	8010c10 <lv_style_prop_get_default+0xa4>
 8010bda:	d815      	bhi.n	8010c08 <lv_style_prop_get_default+0x9c>
 8010bdc:	f240 4362 	movw	r3, #1122	; 0x462
 8010be0:	4298      	cmp	r0, r3
 8010be2:	d007      	beq.n	8010bf4 <lv_style_prop_get_default+0x88>
 8010be4:	d808      	bhi.n	8010bf8 <lv_style_prop_get_default+0x8c>
 8010be6:	f240 4357 	movw	r3, #1111	; 0x457
 8010bea:	4298      	cmp	r0, r3
 8010bec:	d020      	beq.n	8010c30 <lv_style_prop_get_default+0xc4>
 8010bee:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
 8010bf2:	d1e7      	bne.n	8010bc4 <lv_style_prop_get_default+0x58>
            value.num = LV_OPA_COVER;
 8010bf4:	20ff      	movs	r0, #255	; 0xff
            break;
 8010bf6:	4770      	bx	lr
    switch(prop) {
 8010bf8:	f640 033c 	movw	r3, #2108	; 0x83c
 8010bfc:	4298      	cmp	r0, r3
 8010bfe:	d0f9      	beq.n	8010bf4 <lv_style_prop_get_default+0x88>
 8010c00:	f640 0345 	movw	r3, #2117	; 0x845
 8010c04:	4298      	cmp	r0, r3
 8010c06:	e7f4      	b.n	8010bf2 <lv_style_prop_get_default+0x86>
 8010c08:	f241 0306 	movw	r3, #4102	; 0x1006
 8010c0c:	4298      	cmp	r0, r3
 8010c0e:	d1d9      	bne.n	8010bc4 <lv_style_prop_get_default+0x58>
            value.num = LV_COORD_MAX;
 8010c10:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 8010c14:	4770      	bx	lr
    switch(prop) {
 8010c16:	f643 030e 	movw	r3, #14350	; 0x380e
 8010c1a:	4298      	cmp	r0, r3
 8010c1c:	d1d2      	bne.n	8010bc4 <lv_style_prop_get_default+0x58>
            value.num = LV_IMG_ZOOM_NONE;
 8010c1e:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 8010c22:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8010c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c28:	2000      	movs	r0, #0
 8010c2a:	f363 000f 	bfi	r0, r3, #0, #16
    return lv_color_make(0xff, 0xff, 0xff);
 8010c2e:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8010c30:	2000      	movs	r0, #0
 8010c32:	f36f 000f 	bfc	r0, #0, #16
    return lv_color_make(0x00, 0x0, 0x00);
 8010c36:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 8010c38:	200f      	movs	r0, #15
            break;
 8010c3a:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 8010c3c:	4800      	ldr	r0, [pc, #0]	; (8010c40 <lv_style_prop_get_default+0xd4>)
            break;
 8010c3e:	4770      	bx	lr
 8010c40:	08016f44 	.word	0x08016f44

08010c44 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    return style->prop_cnt == 0 ? true : false;
 8010c44:	79c0      	ldrb	r0, [r0, #7]
}
 8010c46:	fab0 f080 	clz	r0, r0
 8010c4a:	0940      	lsrs	r0, r0, #5
 8010c4c:	4770      	bx	lr

08010c4e <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
 8010c4e:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8010c50:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8010c54:	bf0c      	ite	eq
 8010c56:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8010c5a:	2007      	movne	r0, #7
    return (uint8_t)group;
}
 8010c5c:	4770      	bx	lr

08010c5e <lv_style_set_prop>:
{
 8010c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->is_const) {
 8010c60:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8010c64:	4604      	mov	r4, r0
    if(style->is_const) {
 8010c66:	2b00      	cmp	r3, #0
{
 8010c68:	460d      	mov	r5, r1
 8010c6a:	4616      	mov	r6, r2
    if(style->is_const) {
 8010c6c:	db0c      	blt.n	8010c88 <lv_style_set_prop+0x2a>
    if(style->prop_cnt > 1) {
 8010c6e:	79c2      	ldrb	r2, [r0, #7]
 8010c70:	2a01      	cmp	r2, #1
 8010c72:	d939      	bls.n	8010ce8 <lv_style_set_prop+0x8a>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010c74:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8010c76:	1e53      	subs	r3, r2, #1
            if(props[i] == prop) {
 8010c78:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8010c7c:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
 8010c80:	42af      	cmp	r7, r5
 8010c82:	d102      	bne.n	8010c8a <lv_style_set_prop+0x2c>
                values[i] = value;
 8010c84:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
}
 8010c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	d2f6      	bcs.n	8010c7c <lv_style_set_prop+0x1e>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8010c8e:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8010c90:	fb02 1101 	mla	r1, r2, r1, r1
 8010c94:	f7ff fa24 	bl	80100e0 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d0f5      	beq.n	8010c88 <lv_style_set_prop+0x2a>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010c9c:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 8010c9e:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010ca0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8010ca4:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	d219      	bcs.n	8010cde <lv_style_set_prop+0x80>
        style->prop_cnt++;
 8010caa:	79e3      	ldrb	r3, [r4, #7]
 8010cac:	3301      	adds	r3, #1
 8010cae:	b2db      	uxtb	r3, r3
        props[style->prop_cnt - 1] = prop;
 8010cb0:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
        style->prop_cnt++;
 8010cb4:	71e3      	strb	r3, [r4, #7]
        props[style->prop_cnt - 1] = prop;
 8010cb6:	3a01      	subs	r2, #1
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010cbe:	52c5      	strh	r5, [r0, r3]
        values[style->prop_cnt - 1] = value;
 8010cc0:	79e3      	ldrb	r3, [r4, #7]
 8010cc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    uint8_t group = _lv_style_get_prop_group(prop);
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f7ff ffbe 	bl	8010c4e <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	4083      	lsls	r3, r0
 8010cd6:	79a0      	ldrb	r0, [r4, #6]
 8010cd8:	4318      	orrs	r0, r3
 8010cda:	71a0      	strb	r0, [r4, #6]
 8010cdc:	e7d4      	b.n	8010c88 <lv_style_set_prop+0x2a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8010cde:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8010ce2:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8010ce6:	e7de      	b.n	8010ca6 <lv_style_set_prop+0x48>
    else if(style->prop_cnt == 1) {
 8010ce8:	d11c      	bne.n	8010d24 <lv_style_set_prop+0xc6>
        if(style->prop1 == prop) {
 8010cea:	8883      	ldrh	r3, [r0, #4]
 8010cec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010cf0:	428b      	cmp	r3, r1
 8010cf2:	d101      	bne.n	8010cf8 <lv_style_set_prop+0x9a>
            style->v_p.value1 = value;
 8010cf4:	6006      	str	r6, [r0, #0]
            return;
 8010cf6:	e7c7      	b.n	8010c88 <lv_style_set_prop+0x2a>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8010cf8:	200c      	movs	r0, #12
 8010cfa:	f7ff f9db 	bl	80100b4 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0c2      	beq.n	8010c88 <lv_style_set_prop+0x2a>
        style->prop_cnt++;
 8010d02:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 8010d04:	88a2      	ldrh	r2, [r4, #4]
        style->prop_cnt++;
 8010d06:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 8010d08:	6821      	ldr	r1, [r4, #0]
        style->prop_cnt++;
 8010d0a:	b2db      	uxtb	r3, r3
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8010d0c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
        props[0] = style->prop1;
 8010d10:	f3c2 020e 	ubfx	r2, r2, #0, #15
        style->v_p.values_and_props = values_and_props;
 8010d14:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 8010d16:	71e3      	strb	r3, [r4, #7]
        props[0] = style->prop1;
 8010d18:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        props[1] = prop;
 8010d1c:	807d      	strh	r5, [r7, #2]
        values[1] = value;
 8010d1e:	e9c0 1600 	strd	r1, r6, [r0]
 8010d22:	e7d3      	b.n	8010ccc <lv_style_set_prop+0x6e>
        style->prop_cnt = 1;
 8010d24:	2301      	movs	r3, #1
 8010d26:	71c3      	strb	r3, [r0, #7]
        style->prop1 = prop;
 8010d28:	8883      	ldrh	r3, [r0, #4]
        style->v_p.value1 = value;
 8010d2a:	6006      	str	r6, [r0, #0]
        style->prop1 = prop;
 8010d2c:	f361 030e 	bfi	r3, r1, #0, #15
 8010d30:	8083      	strh	r3, [r0, #4]
        style->v_p.value1 = value;
 8010d32:	e7cb      	b.n	8010ccc <lv_style_set_prop+0x6e>

08010d34 <lv_style_set_bg_color>:
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
 8010d34:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8010d36:	b28a      	uxth	r2, r1
 8010d38:	2120      	movs	r1, #32
{
 8010d3a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8010d3c:	f8ad 3000 	strh.w	r3, [sp]
}
 8010d40:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8010d42:	f7ff bf8c 	b.w	8010c5e <lv_style_set_prop>

08010d46 <lv_style_set_bg_opa>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR_FILTERED, v);
}

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8010d46:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8010d48:	2121      	movs	r1, #33	; 0x21
 8010d4a:	f7ff bf88 	b.w	8010c5e <lv_style_set_prop>

08010d4e <lv_style_set_text_color>:
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
 8010d4e:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8010d50:	b28a      	uxth	r2, r1
 8010d52:	f240 4157 	movw	r1, #1111	; 0x457
{
 8010d56:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8010d58:	f8ad 3000 	strh.w	r3, [sp]
}
 8010d5c:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8010d5e:	f7ff bf7e 	b.w	8010c5e <lv_style_set_prop>

08010d62 <lv_style_set_text_opa>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR_FILTERED, v);
}

void lv_style_set_text_opa(lv_style_t * style, lv_opa_t value)
{
 8010d62:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
 8010d64:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8010d68:	f7ff bf79 	b.w	8010c5e <lv_style_set_prop>

08010d6c <lv_style_set_text_font>:
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 8010d6c:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8010d6e:	f241 4159 	movw	r1, #5209	; 0x1459
 8010d72:	f7ff bf74 	b.w	8010c5e <lv_style_set_prop>
	...

08010d78 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8010d78:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8010d7a:	2118      	movs	r1, #24
 8010d7c:	4803      	ldr	r0, [pc, #12]	; (8010d8c <_lv_timer_core_init+0x14>)
 8010d7e:	f7fe ff16 	bl	800fbae <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8010d82:	2201      	movs	r2, #1
 8010d84:	4b02      	ldr	r3, [pc, #8]	; (8010d90 <_lv_timer_core_init+0x18>)
 8010d86:	701a      	strb	r2, [r3, #0]
}
 8010d88:	bd08      	pop	{r3, pc}
 8010d8a:	bf00      	nop
 8010d8c:	200046fc 	.word	0x200046fc
 8010d90:	200043c4 	.word	0x200043c4

08010d94 <lv_timer_create>:
{
 8010d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d96:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8010d98:	480c      	ldr	r0, [pc, #48]	; (8010dcc <lv_timer_create+0x38>)
{
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8010d9e:	f7fe ff0e 	bl	800fbbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8010da2:	4604      	mov	r4, r0
 8010da4:	b900      	cbnz	r0, 8010da8 <lv_timer_create+0x14>
 8010da6:	e7fe      	b.n	8010da6 <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 8010da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dac:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8010dae:	7d03      	ldrb	r3, [r0, #20]
    new_timer->period = period;
 8010db0:	6007      	str	r7, [r0, #0]
    new_timer->paused = 0;
 8010db2:	f36f 0300 	bfc	r3, #0, #1
    new_timer->timer_cb = timer_xcb;
 8010db6:	6086      	str	r6, [r0, #8]
    new_timer->paused = 0;
 8010db8:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8010dba:	f7fe fa65 	bl	800f288 <lv_tick_get>
    timer_created = true;
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	4b03      	ldr	r3, [pc, #12]	; (8010dd0 <lv_timer_create+0x3c>)
    new_timer->last_run = lv_tick_get();
 8010dc2:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8010dc4:	60e5      	str	r5, [r4, #12]
}
 8010dc6:	4620      	mov	r0, r4
    timer_created = true;
 8010dc8:	701a      	strb	r2, [r3, #0]
}
 8010dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dcc:	200046fc 	.word	0x200046fc
 8010dd0:	200043cc 	.word	0x200043cc

08010dd4 <lv_timer_del>:
{
 8010dd4:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8010dd6:	4601      	mov	r1, r0
{
 8010dd8:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8010dda:	4805      	ldr	r0, [pc, #20]	; (8010df0 <lv_timer_del+0x1c>)
 8010ddc:	f7fe ff26 	bl	800fc2c <_lv_ll_remove>
    timer_deleted = true;
 8010de0:	2201      	movs	r2, #1
 8010de2:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <lv_timer_del+0x20>)
    lv_mem_free(timer);
 8010de4:	4620      	mov	r0, r4
}
 8010de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer_deleted = true;
 8010dea:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8010dec:	f7fe bfdc 	b.w	800fda8 <lv_mem_free>
 8010df0:	200046fc 	.word	0x200046fc
 8010df4:	200043cd 	.word	0x200043cd

08010df8 <lv_timer_handler>:
{
 8010df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) {
 8010dfc:	4b5b      	ldr	r3, [pc, #364]	; (8010f6c <lv_timer_handler+0x174>)
 8010dfe:	2601      	movs	r6, #1
 8010e00:	781a      	ldrb	r2, [r3, #0]
{
 8010e02:	b085      	sub	sp, #20
    if(already_running) {
 8010e04:	b922      	cbnz	r2, 8010e10 <lv_timer_handler+0x18>
    if(lv_timer_run == false) {
 8010e06:	4a5a      	ldr	r2, [pc, #360]	; (8010f70 <lv_timer_handler+0x178>)
    already_running = true;
 8010e08:	701e      	strb	r6, [r3, #0]
    if(lv_timer_run == false) {
 8010e0a:	7815      	ldrb	r5, [r2, #0]
 8010e0c:	b925      	cbnz	r5, 8010e18 <lv_timer_handler+0x20>
        already_running = false; /*Release mutex*/
 8010e0e:	701d      	strb	r5, [r3, #0]
}
 8010e10:	4630      	mov	r0, r6
 8010e12:	b005      	add	sp, #20
 8010e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t handler_start = lv_tick_get();
 8010e18:	f7fe fa36 	bl	800f288 <lv_tick_get>
    if(handler_start == 0) {
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	b930      	cbnz	r0, 8010e2e <lv_timer_handler+0x36>
        run_cnt++;
 8010e20:	4a54      	ldr	r2, [pc, #336]	; (8010f74 <lv_timer_handler+0x17c>)
 8010e22:	6813      	ldr	r3, [r2, #0]
 8010e24:	3301      	adds	r3, #1
 8010e26:	2b64      	cmp	r3, #100	; 0x64
 8010e28:	bf88      	it	hi
 8010e2a:	4603      	movhi	r3, r0
 8010e2c:	6013      	str	r3, [r2, #0]
        timer_deleted             = false;
 8010e2e:	f04f 0a00 	mov.w	sl, #0
 8010e32:	4f51      	ldr	r7, [pc, #324]	; (8010f78 <lv_timer_handler+0x180>)
        timer_created             = false;
 8010e34:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8010f90 <lv_timer_handler+0x198>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8010e38:	4e50      	ldr	r6, [pc, #320]	; (8010f7c <lv_timer_handler+0x184>)
 8010e3a:	4851      	ldr	r0, [pc, #324]	; (8010f80 <lv_timer_handler+0x188>)
        timer_created             = false;
 8010e3c:	f888 a000 	strb.w	sl, [r8]
        timer_deleted             = false;
 8010e40:	f887 a000 	strb.w	sl, [r7]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8010e44:	f7fe ff1b 	bl	800fc7e <_lv_ll_get_head>
 8010e48:	f8cd 8008 	str.w	r8, [sp, #8]
 8010e4c:	46b0      	mov	r8, r6
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8010e4e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8010f80 <lv_timer_handler+0x188>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8010e52:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8010e54:	f8d8 1000 	ldr.w	r1, [r8]
 8010e58:	bb71      	cbnz	r1, 8010eb8 <lv_timer_handler+0xc0>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8010e5a:	4849      	ldr	r0, [pc, #292]	; (8010f80 <lv_timer_handler+0x188>)
 8010e5c:	f7fe ff0f 	bl	800fc7e <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8010e60:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8010e64:	4605      	mov	r5, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8010e66:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8010f80 <lv_timer_handler+0x188>
    while(next) {
 8010e6a:	2d00      	cmp	r5, #0
 8010e6c:	d169      	bne.n	8010f42 <lv_timer_handler+0x14a>
    busy_time += lv_tick_elaps(handler_start);
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7fe fa18 	bl	800f2a4 <lv_tick_elaps>
 8010e74:	4c43      	ldr	r4, [pc, #268]	; (8010f84 <lv_timer_handler+0x18c>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010e76:	4f44      	ldr	r7, [pc, #272]	; (8010f88 <lv_timer_handler+0x190>)
    busy_time += lv_tick_elaps(handler_start);
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010e7c:	6838      	ldr	r0, [r7, #0]
    busy_time += lv_tick_elaps(handler_start);
 8010e7e:	6023      	str	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010e80:	f7fe fa10 	bl	800f2a4 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8010e84:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010e88:	d312      	bcc.n	8010eb0 <lv_timer_handler+0xb8>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8010e8a:	2364      	movs	r3, #100	; 0x64
 8010e8c:	6822      	ldr	r2, [r4, #0]
 8010e8e:	4353      	muls	r3, r2
 8010e90:	fbb3 f0f0 	udiv	r0, r3, r0
 8010e94:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8010e96:	2864      	cmp	r0, #100	; 0x64
 8010e98:	bf98      	it	ls
 8010e9a:	f1c0 0564 	rsbls	r5, r0, #100	; 0x64
 8010e9e:	4b3b      	ldr	r3, [pc, #236]	; (8010f8c <lv_timer_handler+0x194>)
 8010ea0:	bf98      	it	ls
 8010ea2:	b2ed      	uxtbls	r5, r5
 8010ea4:	701d      	strb	r5, [r3, #0]
        busy_time         = 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8010eaa:	f7fe f9ed 	bl	800f288 <lv_tick_get>
 8010eae:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	4a2e      	ldr	r2, [pc, #184]	; (8010f6c <lv_timer_handler+0x174>)
 8010eb4:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 8010eb6:	e7ab      	b.n	8010e10 <lv_timer_handler+0x18>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8010eb8:	4658      	mov	r0, fp
 8010eba:	f7fe fee6 	bl	800fc8a <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8010ebe:	f8d8 9000 	ldr.w	r9, [r8]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8010ec2:	9001      	str	r0, [sp, #4]
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8010ec4:	f899 2014 	ldrb.w	r2, [r9, #20]
 8010ec8:	f012 0201 	ands.w	r2, r2, #1
 8010ecc:	d003      	beq.n	8010ed6 <lv_timer_handler+0xde>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 8010ece:	9b01      	ldr	r3, [sp, #4]
 8010ed0:	f8c8 3000 	str.w	r3, [r8]
 8010ed4:	e7be      	b.n	8010e54 <lv_timer_handler+0x5c>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8010ed6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010eda:	9203      	str	r2, [sp, #12]
 8010edc:	f7fe f9e2 	bl	800f2a4 <lv_tick_elaps>
    if(elp >= timer->period)
 8010ee0:	f8d9 1000 	ldr.w	r1, [r9]
 8010ee4:	9a03      	ldr	r2, [sp, #12]
 8010ee6:	4288      	cmp	r0, r1
 8010ee8:	d314      	bcc.n	8010f14 <lv_timer_handler+0x11c>
        int32_t original_repeat_count = timer->repeat_count;
 8010eea:	f8d9 1010 	ldr.w	r1, [r9, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8010eee:	2900      	cmp	r1, #0
 8010ef0:	bfc4      	itt	gt
 8010ef2:	f101 32ff 	addgt.w	r2, r1, #4294967295	; 0xffffffff
 8010ef6:	f8c9 2010 	strgt.w	r2, [r9, #16]
 8010efa:	9103      	str	r1, [sp, #12]
        timer->last_run = lv_tick_get();
 8010efc:	f7fe f9c4 	bl	800f288 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8010f00:	f8d9 2008 	ldr.w	r2, [r9, #8]
        timer->last_run = lv_tick_get();
 8010f04:	f8c9 0004 	str.w	r0, [r9, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8010f08:	b11a      	cbz	r2, 8010f12 <lv_timer_handler+0x11a>
 8010f0a:	9903      	ldr	r1, [sp, #12]
 8010f0c:	b109      	cbz	r1, 8010f12 <lv_timer_handler+0x11a>
 8010f0e:	4648      	mov	r0, r9
 8010f10:	4790      	blx	r2
        exec = true;
 8010f12:	462a      	mov	r2, r5
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8010f14:	7839      	ldrb	r1, [r7, #0]
 8010f16:	b939      	cbnz	r1, 8010f28 <lv_timer_handler+0x130>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8010f18:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010f1c:	b921      	cbnz	r1, 8010f28 <lv_timer_handler+0x130>
            lv_timer_del(timer);
 8010f1e:	4648      	mov	r0, r9
 8010f20:	9203      	str	r2, [sp, #12]
 8010f22:	f7ff ff57 	bl	8010dd4 <lv_timer_del>
 8010f26:	9a03      	ldr	r2, [sp, #12]
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8010f28:	2a00      	cmp	r2, #0
 8010f2a:	d0d0      	beq.n	8010ece <lv_timer_handler+0xd6>
                if(timer_created || timer_deleted) {
 8010f2c:	9b02      	ldr	r3, [sp, #8]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	b913      	cbnz	r3, 8010f38 <lv_timer_handler+0x140>
 8010f32:	783b      	ldrb	r3, [r7, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d0ca      	beq.n	8010ece <lv_timer_handler+0xd6>
    } while(LV_GC_ROOT(_lv_timer_act));
 8010f38:	6833      	ldr	r3, [r6, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f47f af7a 	bne.w	8010e34 <lv_timer_handler+0x3c>
 8010f40:	e78b      	b.n	8010e5a <lv_timer_handler+0x62>
        if(!next->paused) {
 8010f42:	7d28      	ldrb	r0, [r5, #20]
 8010f44:	f010 0701 	ands.w	r7, r0, #1
 8010f48:	d10a      	bne.n	8010f60 <lv_timer_handler+0x168>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8010f4a:	6868      	ldr	r0, [r5, #4]
 8010f4c:	f7fe f9aa 	bl	800f2a4 <lv_tick_elaps>
    if(elp >= timer->period)
 8010f50:	682b      	ldr	r3, [r5, #0]
 8010f52:	4298      	cmp	r0, r3
        return 0;
 8010f54:	bf2c      	ite	cs
 8010f56:	4638      	movcs	r0, r7
    return timer->period - elp;
 8010f58:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 8010f5a:	4286      	cmp	r6, r0
 8010f5c:	bf28      	it	cs
 8010f5e:	4606      	movcs	r6, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8010f60:	4629      	mov	r1, r5
 8010f62:	4640      	mov	r0, r8
 8010f64:	f7fe fe91 	bl	800fc8a <_lv_ll_get_next>
 8010f68:	4605      	mov	r5, r0
 8010f6a:	e77e      	b.n	8010e6a <lv_timer_handler+0x72>
 8010f6c:	200043b4 	.word	0x200043b4
 8010f70:	200043c4 	.word	0x200043c4
 8010f74:	200043c8 	.word	0x200043c8
 8010f78:	200043cd 	.word	0x200043cd
 8010f7c:	200046ec 	.word	0x200046ec
 8010f80:	200046fc 	.word	0x200046fc
 8010f84:	200043b8 	.word	0x200043b8
 8010f88:	200043c0 	.word	0x200043c0
 8010f8c:	200043bc 	.word	0x200043bc
 8010f90:	200043cc 	.word	0x200043cc

08010f94 <lv_timer_pause>:
    timer->paused = true;
 8010f94:	7d03      	ldrb	r3, [r0, #20]
 8010f96:	f043 0301 	orr.w	r3, r3, #1
 8010f9a:	7503      	strb	r3, [r0, #20]
}
 8010f9c:	4770      	bx	lr

08010f9e <lv_timer_resume>:
    timer->paused = false;
 8010f9e:	7d03      	ldrb	r3, [r0, #20]
 8010fa0:	f36f 0300 	bfc	r3, #0, #1
 8010fa4:	7503      	strb	r3, [r0, #20]
}
 8010fa6:	4770      	bx	lr

08010fa8 <lv_timer_ready>:
{
 8010fa8:	b510      	push	{r4, lr}
 8010faa:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8010fac:	f7fe f96c 	bl	800f288 <lv_tick_get>
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	43db      	mvns	r3, r3
 8010fb4:	4403      	add	r3, r0
 8010fb6:	6063      	str	r3, [r4, #4]
}
 8010fb8:	bd10      	pop	{r4, pc}

08010fba <block_next>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8010fba:	6843      	ldr	r3, [r0, #4]
/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
    block_header_t * next = offset_to_block(block_to_ptr(block),
                                            block_size(block) - block_header_overhead);
    tlsf_assert(!block_is_last(block));
 8010fbc:	f033 0303 	bics.w	r3, r3, #3
 8010fc0:	d100      	bne.n	8010fc4 <block_next+0xa>
 8010fc2:	e7fe      	b.n	8010fc2 <block_next+0x8>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8010fc4:	4418      	add	r0, r3
    return next;
}
 8010fc6:	3004      	adds	r0, #4
 8010fc8:	4770      	bx	lr

08010fca <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 8010fca:	b508      	push	{r3, lr}
 8010fcc:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 8010fce:	f7ff fff4 	bl	8010fba <block_next>
    next->prev_phys_block = block;
 8010fd2:	6002      	str	r2, [r0, #0]
    return next;
}
 8010fd4:	bd08      	pop	{r3, pc}

08010fd6 <block_mark_as_used>:
    block_set_prev_free(next);
    block_set_free(block);
}

static void block_mark_as_used(block_header_t * block)
{
 8010fd6:	b508      	push	{r3, lr}
 8010fd8:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 8010fda:	f7ff ffee 	bl	8010fba <block_next>
    block->size &= ~block_header_prev_free_bit;
 8010fde:	6843      	ldr	r3, [r0, #4]
 8010fe0:	f023 0302 	bic.w	r3, r3, #2
 8010fe4:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 8010fe6:	6853      	ldr	r3, [r2, #4]
 8010fe8:	f023 0301 	bic.w	r3, r3, #1
 8010fec:	6053      	str	r3, [r2, #4]
    block_set_prev_used(next);
    block_set_used(block);
}
 8010fee:	bd08      	pop	{r3, pc}

08010ff0 <block_split>:
    return tlsf_cast(void *,
 8010ff0:	1843      	adds	r3, r0, r1
 8010ff2:	f103 020c 	add.w	r2, r3, #12
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8010ff6:	b570      	push	{r4, r5, r6, lr}
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8010ff8:	1d1c      	adds	r4, r3, #4
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8010ffa:	330f      	adds	r3, #15
 8010ffc:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8011000:	429a      	cmp	r2, r3
 8011002:	d000      	beq.n	8011006 <block_split+0x16>
 8011004:	e7fe      	b.n	8011004 <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8011006:	6842      	ldr	r2, [r0, #4]
 8011008:	f022 0203 	bic.w	r2, r2, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 801100c:	1a55      	subs	r5, r2, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 801100e:	1f2e      	subs	r6, r5, #4
 8011010:	440d      	add	r5, r1
 8011012:	4295      	cmp	r5, r2
 8011014:	d000      	beq.n	8011018 <block_split+0x28>
 8011016:	e7fe      	b.n	8011016 <block_split+0x26>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8011018:	6863      	ldr	r3, [r4, #4]
 801101a:	f003 0303 	and.w	r3, r3, #3
 801101e:	4333      	orrs	r3, r6
 8011020:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8011022:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8011026:	2b0b      	cmp	r3, #11
 8011028:	d800      	bhi.n	801102c <block_split+0x3c>
 801102a:	e7fe      	b.n	801102a <block_split+0x3a>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 801102c:	6843      	ldr	r3, [r0, #4]
 801102e:	f003 0303 	and.w	r3, r3, #3
 8011032:	4319      	orrs	r1, r3
 8011034:	6041      	str	r1, [r0, #4]
    block_header_t * next = block_link_next(block);
 8011036:	4620      	mov	r0, r4
 8011038:	f7ff ffc7 	bl	8010fca <block_link_next>
    block->size |= block_header_prev_free_bit;
 801103c:	6843      	ldr	r3, [r0, #4]
 801103e:	f043 0302 	orr.w	r3, r3, #2
 8011042:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 8011044:	6863      	ldr	r3, [r4, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 8011046:	4620      	mov	r0, r4
    block->size |= block_header_free_bit;
 8011048:	f043 0301 	orr.w	r3, r3, #1
 801104c:	6063      	str	r3, [r4, #4]
}
 801104e:	bd70      	pop	{r4, r5, r6, pc}

08011050 <default_walker>:

static void default_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(user);
    printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)block_from_ptr(ptr));
}
 8011050:	4770      	bx	lr

08011052 <remove_free_block>:
{
 8011052:	b570      	push	{r4, r5, r6, lr}
    block_header_t * prev = block->prev_free;
 8011054:	68cd      	ldr	r5, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 8011056:	b905      	cbnz	r5, 801105a <remove_free_block+0x8>
 8011058:	e7fe      	b.n	8011058 <remove_free_block+0x6>
    block_header_t * next = block->next_free;
 801105a:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 801105c:	b904      	cbnz	r4, 8011060 <remove_free_block+0xe>
 801105e:	e7fe      	b.n	801105e <remove_free_block+0xc>
    next->prev_free = prev;
 8011060:	60e5      	str	r5, [r4, #12]
    prev->next_free = next;
 8011062:	60ac      	str	r4, [r5, #8]
    if(control->blocks[fl][sl] == block) {
 8011064:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 8011068:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801106c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 801106e:	428e      	cmp	r6, r1
 8011070:	d112      	bne.n	8011098 <remove_free_block+0x46>
        if(next == &control->block_null) {
 8011072:	42a0      	cmp	r0, r4
        control->blocks[fl][sl] = next;
 8011074:	636c      	str	r4, [r5, #52]	; 0x34
        if(next == &control->block_null) {
 8011076:	d10f      	bne.n	8011098 <remove_free_block+0x46>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8011078:	2101      	movs	r1, #1
 801107a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 801107e:	696c      	ldr	r4, [r5, #20]
 8011080:	fa01 f303 	lsl.w	r3, r1, r3
 8011084:	ea24 0303 	bic.w	r3, r4, r3
 8011088:	616b      	str	r3, [r5, #20]
            if(!control->sl_bitmap[fl]) {
 801108a:	b92b      	cbnz	r3, 8011098 <remove_free_block+0x46>
                control->fl_bitmap &= ~(1U << fl);
 801108c:	fa01 f202 	lsl.w	r2, r1, r2
 8011090:	6901      	ldr	r1, [r0, #16]
 8011092:	ea21 0202 	bic.w	r2, r1, r2
 8011096:	6102      	str	r2, [r0, #16]
}
 8011098:	bd70      	pop	{r4, r5, r6, pc}

0801109a <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 801109a:	287f      	cmp	r0, #127	; 0x7f
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801109c:	bf8c      	ite	hi
 801109e:	fab0 f380 	clzhi	r3, r0
        fl = 0;
 80110a2:	2300      	movls	r3, #0
{
 80110a4:	b510      	push	{r4, lr}
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80110a6:	bf85      	ittet	hi
 80110a8:	f1c3 041a 	rsbhi	r4, r3, #26
 80110ac:	40e0      	lsrhi	r0, r4
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 80110ae:	1080      	asrls	r0, r0, #2
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80110b0:	f080 0020 	eorhi.w	r0, r0, #32
        fl -= (FL_INDEX_SHIFT - 1);
 80110b4:	bf88      	it	hi
 80110b6:	f1c3 0319 	rsbhi	r3, r3, #25
    *fli = fl;
 80110ba:	600b      	str	r3, [r1, #0]
    *sli = sl;
 80110bc:	6010      	str	r0, [r2, #0]
}
 80110be:	bd10      	pop	{r4, pc}

080110c0 <block_insert>:
{
 80110c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110c2:	4604      	mov	r4, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80110c4:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
 80110c6:	aa01      	add	r2, sp, #4
 80110c8:	f020 0003 	bic.w	r0, r0, #3
{
 80110cc:	460d      	mov	r5, r1
    mapping_insert(block_size(block), &fl, &sl);
 80110ce:	4669      	mov	r1, sp
 80110d0:	f7ff ffe3 	bl	801109a <mapping_insert>
    insert_free_block(control, block, fl, sl);
 80110d4:	e9dd 0700 	ldrd	r0, r7, [sp]
    block_header_t * current = control->blocks[fl][sl];
 80110d8:	eb07 1240 	add.w	r2, r7, r0, lsl #5
 80110dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80110e0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    tlsf_assert(current && "free list cannot have a null entry");
 80110e2:	b903      	cbnz	r3, 80110e6 <block_insert+0x26>
 80110e4:	e7fe      	b.n	80110e4 <block_insert+0x24>
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80110e6:	f105 010b 	add.w	r1, r5, #11
    return tlsf_cast(void *,
 80110ea:	f105 0608 	add.w	r6, r5, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80110ee:	f021 0103 	bic.w	r1, r1, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80110f2:	428e      	cmp	r6, r1
    block->prev_free = &control->block_null;
 80110f4:	e9c5 3402 	strd	r3, r4, [r5, #8]
    current->prev_free = block;
 80110f8:	60dd      	str	r5, [r3, #12]
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80110fa:	d000      	beq.n	80110fe <block_insert+0x3e>
 80110fc:	e7fe      	b.n	80110fc <block_insert+0x3c>
    control->fl_bitmap |= (1U << fl);
 80110fe:	2301      	movs	r3, #1
    control->blocks[fl][sl] = block;
 8011100:	6355      	str	r5, [r2, #52]	; 0x34
    control->fl_bitmap |= (1U << fl);
 8011102:	6922      	ldr	r2, [r4, #16]
 8011104:	fa03 f100 	lsl.w	r1, r3, r0
 8011108:	430a      	orrs	r2, r1
 801110a:	6122      	str	r2, [r4, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 801110c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011110:	6962      	ldr	r2, [r4, #20]
 8011112:	40bb      	lsls	r3, r7
 8011114:	4313      	orrs	r3, r2
 8011116:	6163      	str	r3, [r4, #20]
}
 8011118:	b003      	add	sp, #12
 801111a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801111c <block_trim_free>:
{
 801111c:	b538      	push	{r3, r4, r5, lr}
 801111e:	460c      	mov	r4, r1
    tlsf_assert(block_is_free(block) && "block must be free");
 8011120:	6863      	ldr	r3, [r4, #4]
{
 8011122:	4611      	mov	r1, r2
    tlsf_assert(block_is_free(block) && "block must be free");
 8011124:	07da      	lsls	r2, r3, #31
{
 8011126:	4605      	mov	r5, r0
    tlsf_assert(block_is_free(block) && "block must be free");
 8011128:	d400      	bmi.n	801112c <block_trim_free+0x10>
 801112a:	e7fe      	b.n	801112a <block_trim_free+0xe>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801112c:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8011130:	f101 0210 	add.w	r2, r1, #16
    if(block_can_split(block, size)) {
 8011134:	4293      	cmp	r3, r2
 8011136:	d30f      	bcc.n	8011158 <block_trim_free+0x3c>
        block_header_t * remaining_block = block_split(block, size);
 8011138:	4620      	mov	r0, r4
 801113a:	f7ff ff59 	bl	8010ff0 <block_split>
 801113e:	4601      	mov	r1, r0
        block_link_next(block);
 8011140:	4620      	mov	r0, r4
 8011142:	f7ff ff42 	bl	8010fca <block_link_next>
    block->size |= block_header_prev_free_bit;
 8011146:	684b      	ldr	r3, [r1, #4]
        block_insert(control, remaining_block);
 8011148:	4628      	mov	r0, r5
    block->size |= block_header_prev_free_bit;
 801114a:	f043 0302 	orr.w	r3, r3, #2
 801114e:	604b      	str	r3, [r1, #4]
}
 8011150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        block_insert(control, remaining_block);
 8011154:	f7ff bfb4 	b.w	80110c0 <block_insert>
}
 8011158:	bd38      	pop	{r3, r4, r5, pc}

0801115a <block_remove>:
{
 801115a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801115c:	4605      	mov	r5, r0
 801115e:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8011160:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
 8011162:	aa01      	add	r2, sp, #4
 8011164:	4669      	mov	r1, sp
 8011166:	f020 0003 	bic.w	r0, r0, #3
 801116a:	f7ff ff96 	bl	801109a <mapping_insert>
    remove_free_block(control, block, fl, sl);
 801116e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011172:	4621      	mov	r1, r4
 8011174:	4628      	mov	r0, r5
 8011176:	f7ff ff6c 	bl	8011052 <remove_free_block>
}
 801117a:	b003      	add	sp, #12
 801117c:	bd30      	pop	{r4, r5, pc}

0801117e <block_locate_free>:
    int fl = 0, sl = 0;
 801117e:	2300      	movs	r3, #0
{
 8011180:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011182:	4605      	mov	r5, r0
    if(size) {
 8011184:	460e      	mov	r6, r1
    int fl = 0, sl = 0;
 8011186:	e9cd 3300 	strd	r3, r3, [sp]
    if(size) {
 801118a:	b919      	cbnz	r1, 8011194 <block_locate_free+0x16>
    block_header_t * block = 0;
 801118c:	2400      	movs	r4, #0
}
 801118e:	4620      	mov	r0, r4
 8011190:	b002      	add	sp, #8
 8011192:	bd70      	pop	{r4, r5, r6, pc}
    if(size >= SMALL_BLOCK_SIZE) {
 8011194:	297f      	cmp	r1, #127	; 0x7f
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8011196:	bf81      	itttt	hi
 8011198:	fab1 f081 	clzhi	r0, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 801119c:	f1c0 031a 	rsbhi	r3, r0, #26
 80111a0:	2001      	movhi	r0, #1
 80111a2:	4098      	lslhi	r0, r3
 80111a4:	bf8a      	itet	hi
 80111a6:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
 80111aa:	4608      	movls	r0, r1
        size += round;
 80111ac:	1840      	addhi	r0, r0, r1
    mapping_insert(size, fli, sli);
 80111ae:	aa01      	add	r2, sp, #4
 80111b0:	4669      	mov	r1, sp
 80111b2:	f7ff ff72 	bl	801109a <mapping_insert>
        if(fl < FL_INDEX_COUNT) {
 80111b6:	9a00      	ldr	r2, [sp, #0]
 80111b8:	2a07      	cmp	r2, #7
 80111ba:	dce7      	bgt.n	801118c <block_locate_free+0xe>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 80111bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111c0:	9c01      	ldr	r4, [sp, #4]
 80111c2:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80111c6:	6949      	ldr	r1, [r1, #20]
 80111c8:	fa03 f404 	lsl.w	r4, r3, r4
    if(!sl_map) {
 80111cc:	400c      	ands	r4, r1
 80111ce:	d10e      	bne.n	80111ee <block_locate_free+0x70>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 80111d0:	3201      	adds	r2, #1
 80111d2:	4093      	lsls	r3, r2
 80111d4:	692a      	ldr	r2, [r5, #16]
        if(!fl_map) {
 80111d6:	401a      	ands	r2, r3
 80111d8:	d0d8      	beq.n	801118c <block_locate_free+0xe>
    return __builtin_ffs(word) - 1;
 80111da:	fa92 f2a2 	rbit	r2, r2
 80111de:	fab2 f282 	clz	r2, r2
        sl_map = control->sl_bitmap[fl];
 80111e2:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80111e6:	695c      	ldr	r4, [r3, #20]
        *fli = fl;
 80111e8:	9200      	str	r2, [sp, #0]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 80111ea:	b904      	cbnz	r4, 80111ee <block_locate_free+0x70>
 80111ec:	e7fe      	b.n	80111ec <block_locate_free+0x6e>
    return __builtin_ffs(word) - 1;
 80111ee:	fa94 f3a4 	rbit	r3, r4
 80111f2:	2c00      	cmp	r4, #0
 80111f4:	fab3 f383 	clz	r3, r3
 80111f8:	bf08      	it	eq
 80111fa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    return control->blocks[fl][sl];
 80111fe:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 8011202:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011206:	6b54      	ldr	r4, [r2, #52]	; 0x34
    *sli = sl;
 8011208:	9301      	str	r3, [sp, #4]
    if(block) {
 801120a:	2c00      	cmp	r4, #0
 801120c:	d0be      	beq.n	801118c <block_locate_free+0xe>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801120e:	6862      	ldr	r2, [r4, #4]
 8011210:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 8011214:	4296      	cmp	r6, r2
 8011216:	d900      	bls.n	801121a <block_locate_free+0x9c>
 8011218:	e7fe      	b.n	8011218 <block_locate_free+0x9a>
        remove_free_block(control, block, fl, sl);
 801121a:	4621      	mov	r1, r4
 801121c:	4628      	mov	r0, r5
 801121e:	9a00      	ldr	r2, [sp, #0]
 8011220:	f7ff ff17 	bl	8011052 <remove_free_block>
    return block;
 8011224:	e7b3      	b.n	801118e <block_locate_free+0x10>

08011226 <block_merge_next>:
{
 8011226:	b538      	push	{r3, r4, r5, lr}
 8011228:	4602      	mov	r2, r0
    block_header_t * next = block_next(block);
 801122a:	4608      	mov	r0, r1
{
 801122c:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 801122e:	f7ff fec4 	bl	8010fba <block_next>
    tlsf_assert(next && "next physical block can't be null");
 8011232:	4605      	mov	r5, r0
 8011234:	b900      	cbnz	r0, 8011238 <block_merge_next+0x12>
 8011236:	e7fe      	b.n	8011236 <block_merge_next+0x10>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8011238:	6843      	ldr	r3, [r0, #4]
    if(block_is_free(next)) {
 801123a:	07db      	lsls	r3, r3, #31
 801123c:	d516      	bpl.n	801126c <block_merge_next+0x46>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801123e:	684b      	ldr	r3, [r1, #4]
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8011240:	f033 0303 	bics.w	r3, r3, #3
 8011244:	d100      	bne.n	8011248 <block_merge_next+0x22>
 8011246:	e7fe      	b.n	8011246 <block_merge_next+0x20>
        block_remove(control, next);
 8011248:	4601      	mov	r1, r0
 801124a:	4610      	mov	r0, r2
 801124c:	f7ff ff85 	bl	801115a <block_remove>
    return block_size(block) == 0;
 8011250:	6862      	ldr	r2, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8011252:	f032 0303 	bics.w	r3, r2, #3
 8011256:	d100      	bne.n	801125a <block_merge_next+0x34>
 8011258:	e7fe      	b.n	8011258 <block_merge_next+0x32>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801125a:	686b      	ldr	r3, [r5, #4]
    prev->size += block_size(block) + block_header_overhead;
 801125c:	3204      	adds	r2, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801125e:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 8011262:	4413      	add	r3, r2
    block_link_next(prev);
 8011264:	4620      	mov	r0, r4
    prev->size += block_size(block) + block_header_overhead;
 8011266:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8011268:	f7ff feaf 	bl	8010fca <block_link_next>
}
 801126c:	4620      	mov	r0, r4
 801126e:	bd38      	pop	{r3, r4, r5, pc}

08011270 <lv_tlsf_walk_pool>:

void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
{
 8011270:	b570      	push	{r4, r5, r6, lr}
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 8011272:	4d0c      	ldr	r5, [pc, #48]	; (80112a4 <lv_tlsf_walk_pool+0x34>)
{
 8011274:	4616      	mov	r6, r2
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 8011276:	2900      	cmp	r1, #0
 8011278:	bf18      	it	ne
 801127a:	460d      	movne	r5, r1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 801127c:	1f04      	subs	r4, r0, #4
    block_header_t * block =
        offset_to_block(pool, -(int)block_header_overhead);

    while(block && !block_is_last(block)) {
 801127e:	b11c      	cbz	r4, 8011288 <lv_tlsf_walk_pool+0x18>
    return block_size(block) == 0;
 8011280:	6860      	ldr	r0, [r4, #4]
    while(block && !block_is_last(block)) {
 8011282:	f030 0103 	bics.w	r1, r0, #3
 8011286:	d100      	bne.n	801128a <lv_tlsf_walk_pool+0x1a>
            block_size(block),
            !block_is_free(block),
            user);
        block = block_next(block);
    }
}
 8011288:	bd70      	pop	{r4, r5, r6, pc}
        pool_walker(
 801128a:	43c0      	mvns	r0, r0
 801128c:	4633      	mov	r3, r6
 801128e:	f000 0201 	and.w	r2, r0, #1
 8011292:	f104 0008 	add.w	r0, r4, #8
 8011296:	47a8      	blx	r5
        block = block_next(block);
 8011298:	4620      	mov	r0, r4
 801129a:	f7ff fe8e 	bl	8010fba <block_next>
 801129e:	4604      	mov	r4, r0
 80112a0:	e7ed      	b.n	801127e <lv_tlsf_walk_pool+0xe>
 80112a2:	bf00      	nop
 80112a4:	08011051 	.word	0x08011051

080112a8 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 80112a8:	b538      	push	{r3, r4, r5, lr}
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 80112aa:	3a08      	subs	r2, #8

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80112ac:	f011 0303 	ands.w	r3, r1, #3
{
 80112b0:	460c      	mov	r4, r1
    return x - (x & (align - 1));
 80112b2:	f022 0203 	bic.w	r2, r2, #3
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80112b6:	d115      	bne.n	80112e4 <lv_tlsf_add_pool+0x3c>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80112b8:	f643 71f4 	movw	r1, #16372	; 0x3ff4
 80112bc:	f1a2 050c 	sub.w	r5, r2, #12
 80112c0:	428d      	cmp	r5, r1
 80112c2:	d811      	bhi.n	80112e8 <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80112c4:	4625      	mov	r5, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80112c6:	f855 3904 	ldr.w	r3, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 80112ca:	f042 0201 	orr.w	r2, r2, #1
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80112ce:	4629      	mov	r1, r5
    block->size &= ~block_header_prev_free_bit;
 80112d0:	606a      	str	r2, [r5, #4]
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80112d2:	f7ff fef5 	bl	80110c0 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 80112d6:	4628      	mov	r0, r5
 80112d8:	f7ff fe77 	bl	8010fca <block_link_next>
    block->size |= block_header_prev_free_bit;
 80112dc:	2302      	movs	r3, #2
 80112de:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
}
 80112e0:	4620      	mov	r0, r4
 80112e2:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 80112e4:	2400      	movs	r4, #0
 80112e6:	e7fb      	b.n	80112e0 <lv_tlsf_add_pool+0x38>
 80112e8:	461c      	mov	r4, r3
 80112ea:	e7f9      	b.n	80112e0 <lv_tlsf_add_pool+0x38>

080112ec <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 80112ec:	f010 0203 	ands.w	r2, r0, #3
{
 80112f0:	b530      	push	{r4, r5, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 80112f2:	d113      	bne.n	801131c <lv_tlsf_create+0x30>
    control->block_null.prev_free = &control->block_null;
 80112f4:	e9c0 0002 	strd	r0, r0, [r0, #8]
    control->fl_bitmap = 0;
 80112f8:	6102      	str	r2, [r0, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 80112fa:	f100 0114 	add.w	r1, r0, #20
 80112fe:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8011302:	f200 4434 	addw	r4, r0, #1076	; 0x434
        control->sl_bitmap[i] = 0;
 8011306:	f841 2b04 	str.w	r2, [r1], #4
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801130a:	f103 0580 	add.w	r5, r3, #128	; 0x80
            control->blocks[i][j] = &control->block_null;
 801130e:	f843 0b04 	str.w	r0, [r3], #4
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8011312:	42ab      	cmp	r3, r5
 8011314:	d1fb      	bne.n	801130e <lv_tlsf_create+0x22>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8011316:	429c      	cmp	r4, r3
 8011318:	d1f5      	bne.n	8011306 <lv_tlsf_create+0x1a>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 801131a:	bd30      	pop	{r4, r5, pc}
        return 0;
 801131c:	2000      	movs	r0, #0
 801131e:	e7fc      	b.n	801131a <lv_tlsf_create+0x2e>

08011320 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8011320:	b570      	push	{r4, r5, r6, lr}
 8011322:	460e      	mov	r6, r1
 8011324:	4605      	mov	r5, r0
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8011326:	f7ff ffe1 	bl	80112ec <lv_tlsf_create>
 801132a:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 801132c:	f2a6 4234 	subw	r2, r6, #1076	; 0x434
 8011330:	f205 4134 	addw	r1, r5, #1076	; 0x434
 8011334:	f7ff ffb8 	bl	80112a8 <lv_tlsf_add_pool>
    return tlsf;
}
 8011338:	4620      	mov	r0, r4
 801133a:	bd70      	pop	{r4, r5, r6, pc}

0801133c <lv_tlsf_get_pool>:
}

lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}
 801133c:	f200 4034 	addw	r0, r0, #1076	; 0x434
 8011340:	4770      	bx	lr

08011342 <lv_tlsf_malloc>:

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8011342:	b570      	push	{r4, r5, r6, lr}
 8011344:	4606      	mov	r6, r0
    if(size) {
 8011346:	460c      	mov	r4, r1
 8011348:	b141      	cbz	r1, 801135c <lv_tlsf_malloc+0x1a>
    return (x + (align - 1)) & ~(align - 1);
 801134a:	3403      	adds	r4, #3
 801134c:	f024 0403 	bic.w	r4, r4, #3
        if(aligned < block_size_max) {
 8011350:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8011354:	d20a      	bcs.n	801136c <lv_tlsf_malloc+0x2a>
            adjust = tlsf_max(aligned, block_size_min);
 8011356:	2c0c      	cmp	r4, #12
 8011358:	bf38      	it	cc
 801135a:	240c      	movcc	r4, #12
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
    block_header_t * block = block_locate_free(control, adjust);
 801135c:	4621      	mov	r1, r4
 801135e:	4630      	mov	r0, r6
 8011360:	f7ff ff0d 	bl	801117e <block_locate_free>
    if(block) {
 8011364:	4605      	mov	r5, r0
 8011366:	b160      	cbz	r0, 8011382 <lv_tlsf_malloc+0x40>
        tlsf_assert(size && "size must be non-zero");
 8011368:	b914      	cbnz	r4, 8011370 <lv_tlsf_malloc+0x2e>
 801136a:	e7fe      	b.n	801136a <lv_tlsf_malloc+0x28>
    size_t adjust = 0;
 801136c:	2400      	movs	r4, #0
 801136e:	e7f5      	b.n	801135c <lv_tlsf_malloc+0x1a>
        block_trim_free(control, block, size);
 8011370:	4601      	mov	r1, r0
 8011372:	4622      	mov	r2, r4
 8011374:	4630      	mov	r0, r6
 8011376:	f7ff fed1 	bl	801111c <block_trim_free>
        block_mark_as_used(block);
 801137a:	4628      	mov	r0, r5
 801137c:	f7ff fe2b 	bl	8010fd6 <block_mark_as_used>
    return tlsf_cast(void *,
 8011380:	3508      	adds	r5, #8
    return block_prepare_used(control, block, adjust);
}
 8011382:	4628      	mov	r0, r5
 8011384:	bd70      	pop	{r4, r5, r6, pc}

08011386 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

void lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8011386:	b570      	push	{r4, r5, r6, lr}
 8011388:	4606      	mov	r6, r0
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 801138a:	460d      	mov	r5, r1
 801138c:	2900      	cmp	r1, #0
 801138e:	d03a      	beq.n	8011406 <lv_tlsf_free+0x80>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8011390:	f851 3c04 	ldr.w	r3, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8011394:	07d9      	lsls	r1, r3, #31
 8011396:	d500      	bpl.n	801139a <lv_tlsf_free+0x14>
 8011398:	e7fe      	b.n	8011398 <lv_tlsf_free+0x12>
    return tlsf_cast(block_header_t *,
 801139a:	f1a5 0408 	sub.w	r4, r5, #8
    block_header_t * next = block_link_next(block);
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff fe13 	bl	8010fca <block_link_next>
    block->size |= block_header_prev_free_bit;
 80113a4:	6843      	ldr	r3, [r0, #4]
 80113a6:	f043 0302 	orr.w	r3, r3, #2
 80113aa:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 80113ac:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80113b0:	f043 0301 	orr.w	r3, r3, #1
    if(block_is_prev_free(block)) {
 80113b4:	079a      	lsls	r2, r3, #30
    block->size |= block_header_free_bit;
 80113b6:	f845 3c04 	str.w	r3, [r5, #-4]
    if(block_is_prev_free(block)) {
 80113ba:	d51a      	bpl.n	80113f2 <lv_tlsf_free+0x6c>
    return block->prev_phys_block;
 80113bc:	f855 4c08 	ldr.w	r4, [r5, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 80113c0:	b904      	cbnz	r4, 80113c4 <lv_tlsf_free+0x3e>
 80113c2:	e7fe      	b.n	80113c2 <lv_tlsf_free+0x3c>
    return tlsf_cast(int, block->size & block_header_free_bit);
 80113c4:	6863      	ldr	r3, [r4, #4]
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 80113c6:	07db      	lsls	r3, r3, #31
 80113c8:	d400      	bmi.n	80113cc <lv_tlsf_free+0x46>
 80113ca:	e7fe      	b.n	80113ca <lv_tlsf_free+0x44>
        block_remove(control, prev);
 80113cc:	4621      	mov	r1, r4
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7ff fec3 	bl	801115a <block_remove>
    return block_size(block) == 0;
 80113d4:	6862      	ldr	r2, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80113d6:	f032 0303 	bics.w	r3, r2, #3
 80113da:	d100      	bne.n	80113de <lv_tlsf_free+0x58>
 80113dc:	e7fe      	b.n	80113dc <lv_tlsf_free+0x56>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80113de:	f855 3c04 	ldr.w	r3, [r5, #-4]
    block_link_next(prev);
 80113e2:	4620      	mov	r0, r4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80113e4:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 80113e8:	4413      	add	r3, r2
 80113ea:	3304      	adds	r3, #4
 80113ec:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 80113ee:	f7ff fdec 	bl	8010fca <block_link_next>
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 80113f2:	4621      	mov	r1, r4
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7ff ff16 	bl	8011226 <block_merge_next>
 80113fa:	4601      	mov	r1, r0
        block_insert(control, block);
 80113fc:	4630      	mov	r0, r6
    }
}
 80113fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        block_insert(control, block);
 8011402:	f7ff be5d 	b.w	80110c0 <block_insert>
}
 8011406:	bd70      	pop	{r4, r5, r6, pc}

08011408 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8011408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801140c:	4607      	mov	r7, r0
 801140e:	4616      	mov	r6, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8011410:	460c      	mov	r4, r1
 8011412:	b131      	cbz	r1, 8011422 <lv_tlsf_realloc+0x1a>
 8011414:	b952      	cbnz	r2, 801142c <lv_tlsf_realloc+0x24>
        lv_tlsf_free(tlsf, ptr);
 8011416:	f7ff ffb6 	bl	8011386 <lv_tlsf_free>
    void * p = 0;
 801141a:	4635      	mov	r5, r6
            p = ptr;
        }
    }

    return p;
}
 801141c:	4628      	mov	r0, r5
 801141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        p = lv_tlsf_malloc(tlsf, size);
 8011422:	4611      	mov	r1, r2
}
 8011424:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        p = lv_tlsf_malloc(tlsf, size);
 8011428:	f7ff bf8b 	b.w	8011342 <lv_tlsf_malloc>
    return tlsf_cast(block_header_t *,
 801142c:	f1a1 0908 	sub.w	r9, r1, #8
        block_header_t * next = block_next(block);
 8011430:	4648      	mov	r0, r9
 8011432:	f7ff fdc2 	bl	8010fba <block_next>
    return (x + (align - 1)) & ~(align - 1);
 8011436:	1cf5      	adds	r5, r6, #3
 8011438:	f025 0503 	bic.w	r5, r5, #3
        if(aligned < block_size_max) {
 801143c:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
        const size_t cursize = block_size(block);
 8011440:	f851 2c04 	ldr.w	r2, [r1, #-4]
        if(aligned < block_size_max) {
 8011444:	d205      	bcs.n	8011452 <lv_tlsf_realloc+0x4a>
            adjust = tlsf_max(aligned, block_size_min);
 8011446:	2d0c      	cmp	r5, #12
 8011448:	bf38      	it	cc
 801144a:	250c      	movcc	r5, #12
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 801144c:	07d3      	lsls	r3, r2, #31
 801144e:	d502      	bpl.n	8011456 <lv_tlsf_realloc+0x4e>
 8011450:	e7fe      	b.n	8011450 <lv_tlsf_realloc+0x48>
    size_t adjust = 0;
 8011452:	2500      	movs	r5, #0
 8011454:	e7fa      	b.n	801144c <lv_tlsf_realloc+0x44>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8011456:	f022 0803 	bic.w	r8, r2, #3
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801145a:	45a8      	cmp	r8, r5
 801145c:	d223      	bcs.n	80114a6 <lv_tlsf_realloc+0x9e>
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 801145e:	6843      	ldr	r3, [r0, #4]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8011460:	07d9      	lsls	r1, r3, #31
 8011462:	d506      	bpl.n	8011472 <lv_tlsf_realloc+0x6a>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8011464:	f023 0303 	bic.w	r3, r3, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8011468:	f108 0204 	add.w	r2, r8, #4
 801146c:	4413      	add	r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801146e:	42ab      	cmp	r3, r5
 8011470:	d212      	bcs.n	8011498 <lv_tlsf_realloc+0x90>
            p = lv_tlsf_malloc(tlsf, size);
 8011472:	4631      	mov	r1, r6
 8011474:	4638      	mov	r0, r7
 8011476:	f7ff ff64 	bl	8011342 <lv_tlsf_malloc>
            if(p) {
 801147a:	4605      	mov	r5, r0
 801147c:	2800      	cmp	r0, #0
 801147e:	d0cd      	beq.n	801141c <lv_tlsf_realloc+0x14>
                lv_memcpy(p, ptr, minsize);
 8011480:	4546      	cmp	r6, r8
 8011482:	4632      	mov	r2, r6
 8011484:	4621      	mov	r1, r4
 8011486:	bf28      	it	cs
 8011488:	4642      	movcs	r2, r8
 801148a:	f7fe fcc9 	bl	800fe20 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 801148e:	4621      	mov	r1, r4
 8011490:	4638      	mov	r0, r7
 8011492:	f7ff ff78 	bl	8011386 <lv_tlsf_free>
 8011496:	e7c1      	b.n	801141c <lv_tlsf_realloc+0x14>
                block_merge_next(control, block);
 8011498:	4649      	mov	r1, r9
 801149a:	4638      	mov	r0, r7
 801149c:	f7ff fec3 	bl	8011226 <block_merge_next>
                block_mark_as_used(block);
 80114a0:	4648      	mov	r0, r9
 80114a2:	f7ff fd98 	bl	8010fd6 <block_mark_as_used>
    tlsf_assert(!block_is_free(block) && "block must be used");
 80114a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80114aa:	07da      	lsls	r2, r3, #31
 80114ac:	d500      	bpl.n	80114b0 <lv_tlsf_realloc+0xa8>
 80114ae:	e7fe      	b.n	80114ae <lv_tlsf_realloc+0xa6>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80114b0:	f023 0303 	bic.w	r3, r3, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 80114b4:	f105 0210 	add.w	r2, r5, #16
    if(block_can_split(block, size)) {
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d30f      	bcc.n	80114dc <lv_tlsf_realloc+0xd4>
        block_header_t * remaining_block = block_split(block, size);
 80114bc:	4629      	mov	r1, r5
 80114be:	4648      	mov	r0, r9
 80114c0:	f7ff fd96 	bl	8010ff0 <block_split>
    block->size &= ~block_header_prev_free_bit;
 80114c4:	6843      	ldr	r3, [r0, #4]
        block_header_t * remaining_block = block_split(block, size);
 80114c6:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 80114c8:	f023 0302 	bic.w	r3, r3, #2
 80114cc:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 80114ce:	4638      	mov	r0, r7
 80114d0:	f7ff fea9 	bl	8011226 <block_merge_next>
 80114d4:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 80114d6:	4638      	mov	r0, r7
 80114d8:	f7ff fdf2 	bl	80110c0 <block_insert>
 80114dc:	4625      	mov	r5, r4
    return p;
 80114de:	e79d      	b.n	801141c <lv_tlsf_realloc+0x14>

080114e0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 80114e0:	f990 2000 	ldrsb.w	r2, [r0]
 80114e4:	7803      	ldrb	r3, [r0, #0]
 80114e6:	2a00      	cmp	r2, #0
 80114e8:	da0e      	bge.n	8011508 <lv_txt_utf8_size+0x28>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 80114ea:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80114ee:	2ac0      	cmp	r2, #192	; 0xc0
 80114f0:	d00c      	beq.n	801150c <lv_txt_utf8_size+0x2c>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 80114f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80114f6:	2ae0      	cmp	r2, #224	; 0xe0
 80114f8:	d00a      	beq.n	8011510 <lv_txt_utf8_size+0x30>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 80114fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80114fe:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 8011500:	bf14      	ite	ne
 8011502:	2000      	movne	r0, #0
 8011504:	2004      	moveq	r0, #4
 8011506:	4770      	bx	lr
        return 1;
 8011508:	2001      	movs	r0, #1
 801150a:	4770      	bx	lr
        return 2;
 801150c:	2002      	movs	r0, #2
 801150e:	4770      	bx	lr
        return 3;
 8011510:	2003      	movs	r0, #3
    return 0;
}
 8011512:	4770      	bx	lr

08011514 <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8011514:	2300      	movs	r3, #0
{
 8011516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011518:	4602      	mov	r2, r0
    uint32_t i_tmp = 0;
 801151a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 801151c:	b901      	cbnz	r1, 8011520 <lv_txt_utf8_next+0xc>
 801151e:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 8011520:	680b      	ldr	r3, [r1, #0]
 8011522:	56d5      	ldrsb	r5, [r2, r3]
 8011524:	5cd0      	ldrb	r0, [r2, r3]
 8011526:	2d00      	cmp	r5, #0
 8011528:	f103 0401 	add.w	r4, r3, #1
 801152c:	db02      	blt.n	8011534 <lv_txt_utf8_next+0x20>
        result = txt[*i];
        (*i)++;
 801152e:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8011530:	b002      	add	sp, #8
 8011532:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8011534:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8011538:	2dc0      	cmp	r5, #192	; 0xc0
 801153a:	d110      	bne.n	801155e <lv_txt_utf8_next+0x4a>
            (*i)++;
 801153c:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801153e:	5d12      	ldrb	r2, [r2, r4]
 8011540:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8011544:	2c80      	cmp	r4, #128	; 0x80
 8011546:	d001      	beq.n	801154c <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
 8011548:	2000      	movs	r0, #0
 801154a:	e7f1      	b.n	8011530 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801154c:	0180      	lsls	r0, r0, #6
 801154e:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8011552:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8011556:	4410      	add	r0, r2
            (*i)++;
 8011558:	3302      	adds	r3, #2
            (*i)++;
 801155a:	600b      	str	r3, [r1, #0]
 801155c:	e7e8      	b.n	8011530 <lv_txt_utf8_next+0x1c>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 801155e:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8011562:	2de0      	cmp	r5, #224	; 0xe0
 8011564:	d117      	bne.n	8011596 <lv_txt_utf8_next+0x82>
            (*i)++;
 8011566:	600c      	str	r4, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8011568:	5d14      	ldrb	r4, [r2, r4]
 801156a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 801156e:	2d80      	cmp	r5, #128	; 0x80
 8011570:	d1ea      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            (*i)++;
 8011572:	1c9d      	adds	r5, r3, #2
 8011574:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8011576:	5d52      	ldrb	r2, [r2, r5]
 8011578:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
 801157c:	2d80      	cmp	r5, #128	; 0x80
 801157e:	d1e3      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8011580:	0300      	lsls	r0, r0, #12
 8011582:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 8011584:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8011588:	01a4      	lsls	r4, r4, #6
 801158a:	4410      	add	r0, r2
 801158c:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 8011590:	4420      	add	r0, r4
            (*i)++;
 8011592:	3303      	adds	r3, #3
 8011594:	e7e1      	b.n	801155a <lv_txt_utf8_next+0x46>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8011596:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
 801159a:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 801159c:	600c      	str	r4, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 801159e:	d1d3      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80115a0:	5d14      	ldrb	r4, [r2, r4]
 80115a2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80115a6:	2d80      	cmp	r5, #128	; 0x80
 80115a8:	d1ce      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            (*i)++;
 80115aa:	1c9d      	adds	r5, r3, #2
 80115ac:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80115ae:	5d55      	ldrb	r5, [r2, r5]
 80115b0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80115b4:	2e80      	cmp	r6, #128	; 0x80
 80115b6:	d1c7      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            (*i)++;
 80115b8:	1cde      	adds	r6, r3, #3
 80115ba:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80115bc:	5d92      	ldrb	r2, [r2, r6]
 80115be:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
 80115c2:	2e80      	cmp	r6, #128	; 0x80
 80115c4:	d1c0      	bne.n	8011548 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80115c6:	0480      	lsls	r0, r0, #18
 80115c8:	f400 16e0 	and.w	r6, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80115cc:	01ad      	lsls	r5, r5, #6
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80115ce:	0320      	lsls	r0, r4, #12
 80115d0:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80115d4:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 80115d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80115dc:	4330      	orrs	r0, r6
            result += txt[*i] & 0x3F;
 80115de:	4415      	add	r5, r2
 80115e0:	4428      	add	r0, r5
            (*i)++;
 80115e2:	3304      	adds	r3, #4
 80115e4:	e7b9      	b.n	801155a <lv_txt_utf8_next+0x46>
	...

080115e8 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 80115ec:	2400      	movs	r4, #0
{
 80115ee:	4605      	mov	r5, r0
 80115f0:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80115f2:	4626      	mov	r6, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80115f4:	f8df 8024 	ldr.w	r8, [pc, #36]	; 801161c <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80115f8:	42be      	cmp	r6, r7
 80115fa:	d002      	beq.n	8011602 <lv_txt_utf8_get_byte_id+0x1a>
 80115fc:	5d2b      	ldrb	r3, [r5, r4]
 80115fe:	1928      	adds	r0, r5, r4
 8011600:	b913      	cbnz	r3, 8011608 <lv_txt_utf8_get_byte_id+0x20>
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
    }

    return byte_cnt;
}
 8011602:	4620      	mov	r0, r4
 8011604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8011608:	f8d8 3000 	ldr.w	r3, [r8]
 801160c:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 801160e:	2801      	cmp	r0, #1
 8011610:	bf38      	it	cc
 8011612:	2001      	movcc	r0, #1
 8011614:	b2c3      	uxtb	r3, r0
 8011616:	441c      	add	r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8011618:	3601      	adds	r6, #1
 801161a:	e7ed      	b.n	80115f8 <lv_txt_utf8_get_byte_id+0x10>
 801161c:	20000028 	.word	0x20000028

08011620 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8011620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8011622:	2400      	movs	r4, #0
{
 8011624:	4606      	mov	r6, r0
 8011626:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8011628:	4f06      	ldr	r7, [pc, #24]	; (8011644 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 801162a:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 801162c:	9b01      	ldr	r3, [sp, #4]
 801162e:	42ab      	cmp	r3, r5
 8011630:	d302      	bcc.n	8011638 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 8011632:	4620      	mov	r0, r4
 8011634:	b003      	add	sp, #12
 8011636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8011638:	4630      	mov	r0, r6
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	a901      	add	r1, sp, #4
 801163e:	4798      	blx	r3
        char_cnt++;
 8011640:	3401      	adds	r4, #1
 8011642:	e7f3      	b.n	801162c <lv_txt_utf8_get_char_id+0xc>
 8011644:	20000020 	.word	0x20000020

08011648 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8011648:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 801164a:	2400      	movs	r4, #0
{
 801164c:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 801164e:	4e07      	ldr	r6, [pc, #28]	; (801166c <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8011650:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8011652:	9b01      	ldr	r3, [sp, #4]
 8011654:	5ceb      	ldrb	r3, [r5, r3]
 8011656:	b913      	cbnz	r3, 801165e <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8011658:	4620      	mov	r0, r4
 801165a:	b002      	add	sp, #8
 801165c:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 801165e:	4628      	mov	r0, r5
 8011660:	6833      	ldr	r3, [r6, #0]
 8011662:	a901      	add	r1, sp, #4
 8011664:	4798      	blx	r3
        len++;
 8011666:	3401      	adds	r4, #1
 8011668:	e7f3      	b.n	8011652 <lv_txt_utf8_get_length+0xa>
 801166a:	bf00      	nop
 801166c:	20000020 	.word	0x20000020

08011670 <lv_txt_utf8_prev>:
{
 8011670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011672:	4606      	mov	r6, r0
 8011674:	460c      	mov	r4, r1
    (*i)--;
 8011676:	2504      	movs	r5, #4
 8011678:	680b      	ldr	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 801167a:	4f0d      	ldr	r7, [pc, #52]	; (80116b0 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 801167c:	3b01      	subs	r3, #1
 801167e:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8011680:	6820      	ldr	r0, [r4, #0]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	4430      	add	r0, r6
 8011686:	4798      	blx	r3
        if(c_size == 0) {
 8011688:	6823      	ldr	r3, [r4, #0]
 801168a:	b948      	cbnz	r0, 80116a0 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 801168c:	b12b      	cbz	r3, 801169a <lv_txt_utf8_prev+0x2a>
                (*i)--;
 801168e:	3d01      	subs	r5, #1
 8011690:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8011692:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 8011696:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8011698:	d1f2      	bne.n	8011680 <lv_txt_utf8_prev+0x10>
 801169a:	2000      	movs	r0, #0
}
 801169c:	b003      	add	sp, #12
 801169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 80116a0:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80116a2:	4b04      	ldr	r3, [pc, #16]	; (80116b4 <lv_txt_utf8_prev+0x44>)
 80116a4:	4630      	mov	r0, r6
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	a901      	add	r1, sp, #4
 80116aa:	4798      	blx	r3
    return letter;
 80116ac:	e7f6      	b.n	801169c <lv_txt_utf8_prev+0x2c>
 80116ae:	bf00      	nop
 80116b0:	20000028 	.word	0x20000028
 80116b4:	20000020 	.word	0x20000020

080116b8 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80116b8:	2923      	cmp	r1, #35	; 0x23
{
 80116ba:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80116bc:	d116      	bne.n	80116ec <_lv_txt_is_cmd+0x34>
 80116be:	7802      	ldrb	r2, [r0, #0]
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80116c0:	b95a      	cbnz	r2, 80116da <_lv_txt_is_cmd+0x22>
            *state = LV_TEXT_CMD_STATE_PAR;
 80116c2:	2001      	movs	r0, #1
            *state = LV_TEXT_CMD_STATE_WAIT;
 80116c4:	7018      	strb	r0, [r3, #0]
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80116c6:	781a      	ldrb	r2, [r3, #0]
 80116c8:	2a01      	cmp	r2, #1
 80116ca:	d105      	bne.n	80116d8 <_lv_txt_is_cmd+0x20>
        if(c == ' ') {
 80116cc:	2920      	cmp	r1, #32
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80116ce:	bf08      	it	eq
 80116d0:	2102      	moveq	r1, #2
        ret = true;
 80116d2:	4610      	mov	r0, r2
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80116d4:	bf08      	it	eq
 80116d6:	7019      	strbeq	r1, [r3, #0]
}
 80116d8:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80116da:	2a01      	cmp	r2, #1
 80116dc:	f04f 0000 	mov.w	r0, #0
 80116e0:	d0f0      	beq.n	80116c4 <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80116e2:	2a02      	cmp	r2, #2
 80116e4:	d1ef      	bne.n	80116c6 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80116e6:	7018      	strb	r0, [r3, #0]
            ret    = true;
 80116e8:	2001      	movs	r0, #1
 80116ea:	e7ec      	b.n	80116c6 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 80116ec:	2000      	movs	r0, #0
 80116ee:	e7ea      	b.n	80116c6 <_lv_txt_is_cmd+0xe>

080116f0 <_lv_txt_get_next_line>:
{
 80116f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f4:	b091      	sub	sp, #68	; 0x44
 80116f6:	4699      	mov	r9, r3
 80116f8:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80116fc:	4680      	mov	r8, r0
 80116fe:	9305      	str	r3, [sp, #20]
    if(used_width) *used_width = 0;
 8011700:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 8011702:	460d      	mov	r5, r1
 8011704:	9206      	str	r2, [sp, #24]
    if(used_width) *used_width = 0;
 8011706:	b113      	cbz	r3, 801170e <_lv_txt_get_next_line+0x1e>
 8011708:	2300      	movs	r3, #0
 801170a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801170c:	8013      	strh	r3, [r2, #0]
    if(txt == NULL) return 0;
 801170e:	f1b8 0f00 	cmp.w	r8, #0
 8011712:	f000 80f3 	beq.w	80118fc <_lv_txt_get_next_line+0x20c>
    if(txt[0] == '\0') return 0;
 8011716:	f898 0000 	ldrb.w	r0, [r8]
 801171a:	b1c8      	cbz	r0, 8011750 <_lv_txt_get_next_line+0x60>
    if(font == NULL) return 0;
 801171c:	2d00      	cmp	r5, #0
 801171e:	f000 80ef 	beq.w	8011900 <_lv_txt_get_next_line+0x210>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8011722:	9b05      	ldr	r3, [sp, #20]
 8011724:	f013 0006 	ands.w	r0, r3, #6
 8011728:	d015      	beq.n	8011756 <_lv_txt_get_next_line+0x66>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801172a:	2000      	movs	r0, #0
 801172c:	e000      	b.n	8011730 <_lv_txt_get_next_line+0x40>
 801172e:	3001      	adds	r0, #1
 8011730:	f818 3000 	ldrb.w	r3, [r8, r0]
 8011734:	2b0a      	cmp	r3, #10
 8011736:	f000 80e5 	beq.w	8011904 <_lv_txt_get_next_line+0x214>
 801173a:	2b0d      	cmp	r3, #13
 801173c:	f000 80e2 	beq.w	8011904 <_lv_txt_get_next_line+0x214>
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1f4      	bne.n	801172e <_lv_txt_get_next_line+0x3e>
        if(used_width) *used_width = -1;
 8011744:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011746:	b11b      	cbz	r3, 8011750 <_lv_txt_get_next_line+0x60>
 8011748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801174c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801174e:	8013      	strh	r3, [r2, #0]
}
 8011750:	b011      	add	sp, #68	; 0x44
 8011752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8011756:	9b05      	ldr	r3, [sp, #20]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8011758:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801175c:	f013 0302 	ands.w	r3, r3, #2
 8011760:	9307      	str	r3, [sp, #28]
 8011762:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8011766:	bf18      	it	ne
 8011768:	4699      	movne	r9, r3
    uint32_t i = 0;                                        /*Iterating index into txt*/
 801176a:	900d      	str	r0, [sp, #52]	; 0x34
    lv_coord_t line_w = 0;
 801176c:	9001      	str	r0, [sp, #4]
    while(txt[i] != '\0' && max_width > 0) {
 801176e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011770:	9302      	str	r3, [sp, #8]
 8011772:	4443      	add	r3, r8
 8011774:	9303      	str	r3, [sp, #12]
 8011776:	9b02      	ldr	r3, [sp, #8]
 8011778:	f818 3003 	ldrb.w	r3, [r8, r3]
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 80a4 	beq.w	80118ca <_lv_txt_get_next_line+0x1da>
 8011782:	f1b9 0f00 	cmp.w	r9, #0
 8011786:	f340 80a0 	ble.w	80118ca <_lv_txt_get_next_line+0x1da>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801178a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801178e:	9a07      	ldr	r2, [sp, #28]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8011790:	2400      	movs	r4, #0
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8011792:	2a00      	cmp	r2, #0
 8011794:	bf08      	it	eq
 8011796:	464b      	moveq	r3, r9
 8011798:	9309      	str	r3, [sp, #36]	; 0x24
    letter = _lv_txt_encoded_next(txt, &i_next);
 801179a:	4b5b      	ldr	r3, [pc, #364]	; (8011908 <_lv_txt_get_next_line+0x218>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 801179c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	9803      	ldr	r0, [sp, #12]
 80117a4:	a90e      	add	r1, sp, #56	; 0x38
 80117a6:	4798      	blx	r3
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80117a8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    letter = _lv_txt_encoded_next(txt, &i_next);
 80117ac:	4682      	mov	sl, r0
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80117ae:	4626      	mov	r6, r4
    uint32_t letter_next = 0; /*Letter at i_next*/
 80117b0:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80117b2:	4627      	mov	r7, r4
    i_next_next = i_next;
 80117b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80117b6:	9404      	str	r4, [sp, #16]
    i_next_next = i_next;
 80117b8:	930f      	str	r3, [sp, #60]	; 0x3c
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80117ba:	9b05      	ldr	r3, [sp, #20]
 80117bc:	f003 0301 	and.w	r3, r3, #1
 80117c0:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[i] != '\0') {
 80117c2:	9b03      	ldr	r3, [sp, #12]
 80117c4:	5dd9      	ldrb	r1, [r3, r7]
 80117c6:	b949      	cbnz	r1, 80117dc <_lv_txt_get_next_line+0xec>
    if(break_index == NO_BREAK_FOUND) {
 80117c8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80117cc:	d059      	beq.n	8011882 <_lv_txt_get_next_line+0x192>
    if(force) return break_index;
 80117ce:	9b02      	ldr	r3, [sp, #8]
 80117d0:	465f      	mov	r7, fp
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d05d      	beq.n	8011892 <_lv_txt_get_next_line+0x1a2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 80117d6:	2400      	movs	r4, #0
    return 0;
 80117d8:	4627      	mov	r7, r4
 80117da:	e05a      	b.n	8011892 <_lv_txt_get_next_line+0x1a2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80117dc:	4b4a      	ldr	r3, [pc, #296]	; (8011908 <_lv_txt_get_next_line+0x218>)
 80117de:	9803      	ldr	r0, [sp, #12]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	a90f      	add	r1, sp, #60	; 0x3c
 80117e4:	4790      	blx	r2
        word_len++;
 80117e6:	9b04      	ldr	r3, [sp, #16]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80117e8:	4602      	mov	r2, r0
        word_len++;
 80117ea:	3301      	adds	r3, #1
 80117ec:	9308      	str	r3, [sp, #32]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80117ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117f0:	b173      	cbz	r3, 8011810 <_lv_txt_get_next_line+0x120>
 80117f2:	900b      	str	r0, [sp, #44]	; 0x2c
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80117f4:	4651      	mov	r1, sl
 80117f6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80117fa:	f7ff ff5d 	bl	80116b8 <_lv_txt_is_cmd>
 80117fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011800:	b130      	cbz	r0, 8011810 <_lv_txt_get_next_line+0x120>
        i_next = i_next_next;
 8011802:	e9dd 710e 	ldrd	r7, r1, [sp, #56]	; 0x38
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8011806:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8011808:	4692      	mov	sl, r2
        i_next = i_next_next;
 801180a:	910e      	str	r1, [sp, #56]	; 0x38
 801180c:	9304      	str	r3, [sp, #16]
 801180e:	e7d8      	b.n	80117c2 <_lv_txt_get_next_line+0xd2>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8011810:	4651      	mov	r1, sl
 8011812:	4628      	mov	r0, r5
 8011814:	920b      	str	r2, [sp, #44]	; 0x2c
 8011816:	f7fd faed 	bl	800edf4 <lv_font_get_glyph_width>
        cur_w += letter_w;
 801181a:	4406      	add	r6, r0
        if(letter_w > 0) {
 801181c:	b200      	sxth	r0, r0
 801181e:	2800      	cmp	r0, #0
            cur_w += letter_space;
 8011820:	bfc8      	it	gt
 8011822:	9b06      	ldrgt	r3, [sp, #24]
        cur_w += letter_w;
 8011824:	b2b6      	uxth	r6, r6
            cur_w += letter_space;
 8011826:	bfc4      	itt	gt
 8011828:	18f6      	addgt	r6, r6, r3
 801182a:	b2b6      	uxthgt	r6, r6
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801182c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
        if(letter_w > 0) {
 8011830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            cur_w += letter_space;
 8011832:	b236      	sxth	r6, r6
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8011834:	d105      	bne.n	8011842 <_lv_txt_get_next_line+0x152>
 8011836:	9b06      	ldr	r3, [sp, #24]
 8011838:	1af1      	subs	r1, r6, r3
 801183a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801183c:	4299      	cmp	r1, r3
 801183e:	bfc8      	it	gt
 8011840:	46bb      	movgt	fp, r7
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8011842:	f1ba 0f0a 	cmp.w	sl, #10
 8011846:	d016      	beq.n	8011876 <_lv_txt_get_next_line+0x186>
 8011848:	f1ba 0f0d 	cmp.w	sl, #13
 801184c:	d013      	beq.n	8011876 <_lv_txt_get_next_line+0x186>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 801184e:	f245 11a5 	movw	r1, #20901	; 0x51a5
 8011852:	f5aa 409c 	sub.w	r0, sl, #19968	; 0x4e00
 8011856:	4288      	cmp	r0, r1
 8011858:	d90d      	bls.n	8011876 <_lv_txt_get_next_line+0x186>
 801185a:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801185c:	4b2b      	ldr	r3, [pc, #172]	; (801190c <_lv_txt_get_next_line+0x21c>)
 801185e:	b2c8      	uxtb	r0, r1
 8011860:	5c18      	ldrb	r0, [r3, r0]
 8011862:	b920      	cbnz	r0, 801186e <_lv_txt_get_next_line+0x17e>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8011864:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8011868:	bf08      	it	eq
 801186a:	4634      	moveq	r4, r6
 801186c:	e7c9      	b.n	8011802 <_lv_txt_get_next_line+0x112>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801186e:	4582      	cmp	sl, r0
 8011870:	f101 0101 	add.w	r1, r1, #1
 8011874:	d1f2      	bne.n	801185c <_lv_txt_get_next_line+0x16c>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8011876:	2f00      	cmp	r7, #0
 8011878:	d1a6      	bne.n	80117c8 <_lv_txt_get_next_line+0xd8>
 801187a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 801187e:	d1a6      	bne.n	80117ce <_lv_txt_get_next_line+0xde>
 8011880:	4634      	mov	r4, r6
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8011882:	9b04      	ldr	r3, [sp, #16]
 8011884:	b123      	cbz	r3, 8011890 <_lv_txt_get_next_line+0x1a0>
 8011886:	f1ba 0f0d 	cmp.w	sl, #13
 801188a:	d102      	bne.n	8011892 <_lv_txt_get_next_line+0x1a2>
 801188c:	2a0a      	cmp	r2, #10
 801188e:	d100      	bne.n	8011892 <_lv_txt_get_next_line+0x1a2>
 8011890:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        line_w += word_w;
 8011892:	9b01      	ldr	r3, [sp, #4]
        max_width -= word_w;
 8011894:	b2a4      	uxth	r4, r4
 8011896:	eba9 0904 	sub.w	r9, r9, r4
        line_w += word_w;
 801189a:	441c      	add	r4, r3
 801189c:	b223      	sxth	r3, r4
 801189e:	9301      	str	r3, [sp, #4]
        max_width -= word_w;
 80118a0:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
 80118a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118a6:	b187      	cbz	r7, 80118ca <_lv_txt_get_next_line+0x1da>
        i += advance;
 80118a8:	441f      	add	r7, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80118aa:	f898 3000 	ldrb.w	r3, [r8]
        i += advance;
 80118ae:	970d      	str	r7, [sp, #52]	; 0x34
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80118b0:	2b0a      	cmp	r3, #10
 80118b2:	d00a      	beq.n	80118ca <_lv_txt_get_next_line+0x1da>
 80118b4:	2b0d      	cmp	r3, #13
 80118b6:	d008      	beq.n	80118ca <_lv_txt_get_next_line+0x1da>
        if(txt[i] == '\n' || txt[i] == '\r') {
 80118b8:	f818 3007 	ldrb.w	r3, [r8, r7]
 80118bc:	2b0a      	cmp	r3, #10
 80118be:	d002      	beq.n	80118c6 <_lv_txt_get_next_line+0x1d6>
 80118c0:	2b0d      	cmp	r3, #13
 80118c2:	f47f af54 	bne.w	801176e <_lv_txt_get_next_line+0x7e>
            i++;  /*Include the following newline in the current line*/
 80118c6:	3701      	adds	r7, #1
 80118c8:	970d      	str	r7, [sp, #52]	; 0x34
    if(i == 0) {
 80118ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80118cc:	b98c      	cbnz	r4, 80118f2 <_lv_txt_get_next_line+0x202>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80118ce:	4b0e      	ldr	r3, [pc, #56]	; (8011908 <_lv_txt_get_next_line+0x218>)
 80118d0:	a90d      	add	r1, sp, #52	; 0x34
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4640      	mov	r0, r8
 80118d6:	4798      	blx	r3
        if(used_width != NULL) {
 80118d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80118da:	4601      	mov	r1, r0
        if(used_width != NULL) {
 80118dc:	b163      	cbz	r3, 80118f8 <_lv_txt_get_next_line+0x208>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80118de:	4622      	mov	r2, r4
 80118e0:	4628      	mov	r0, r5
 80118e2:	f7fd fa87 	bl	800edf4 <lv_font_get_glyph_width>
 80118e6:	b203      	sxth	r3, r0
 80118e8:	9301      	str	r3, [sp, #4]
        *used_width = line_w;
 80118ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80118ec:	9a01      	ldr	r2, [sp, #4]
 80118ee:	801a      	strh	r2, [r3, #0]
 80118f0:	e002      	b.n	80118f8 <_lv_txt_get_next_line+0x208>
    if(used_width != NULL) {
 80118f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1f8      	bne.n	80118ea <_lv_txt_get_next_line+0x1fa>
    return i;
 80118f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80118fa:	e729      	b.n	8011750 <_lv_txt_get_next_line+0x60>
    if(txt == NULL) return 0;
 80118fc:	4640      	mov	r0, r8
 80118fe:	e727      	b.n	8011750 <_lv_txt_get_next_line+0x60>
 8011900:	4628      	mov	r0, r5
 8011902:	e725      	b.n	8011750 <_lv_txt_get_next_line+0x60>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8011904:	3001      	adds	r0, #1
 8011906:	e71d      	b.n	8011744 <_lv_txt_get_next_line+0x54>
 8011908:	20000020 	.word	0x20000020
 801190c:	0801a5a8 	.word	0x0801a5a8

08011910 <_lv_txt_encoded_letter_next_2>:
{
 8011910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011914:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8011916:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8011940 <_lv_txt_encoded_letter_next_2+0x30>
{
 801191a:	460f      	mov	r7, r1
    *letter = _lv_txt_encoded_next(txt, ofs);
 801191c:	f8d8 3000 	ldr.w	r3, [r8]
 8011920:	4621      	mov	r1, r4
{
 8011922:	4606      	mov	r6, r0
 8011924:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8011926:	4798      	blx	r3
 8011928:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 801192a:	b128      	cbz	r0, 8011938 <_lv_txt_encoded_letter_next_2+0x28>
 801192c:	6820      	ldr	r0, [r4, #0]
 801192e:	2100      	movs	r1, #0
 8011930:	f8d8 3000 	ldr.w	r3, [r8]
 8011934:	4430      	add	r0, r6
 8011936:	4798      	blx	r3
 8011938:	6028      	str	r0, [r5, #0]
}
 801193a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193e:	bf00      	nop
 8011940:	20000020 	.word	0x20000020

08011944 <lv_txt_get_width>:
{
 8011944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011948:	4688      	mov	r8, r1
 801194a:	4617      	mov	r7, r2
 801194c:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 801194e:	4605      	mov	r5, r0
{
 8011950:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
 8011952:	2800      	cmp	r0, #0
 8011954:	d035      	beq.n	80119c2 <lv_txt_get_width+0x7e>
    if(font == NULL) return 0;
 8011956:	2a00      	cmp	r2, #0
 8011958:	d035      	beq.n	80119c6 <lv_txt_get_width+0x82>
    if(txt[0] == '\0') return 0;
 801195a:	7804      	ldrb	r4, [r0, #0]
 801195c:	2300      	movs	r3, #0
 801195e:	b124      	cbz	r4, 801196a <lv_txt_get_width+0x26>
    uint32_t i                   = 0;
 8011960:	9301      	str	r3, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8011962:	f88d 3003 	strb.w	r3, [sp, #3]
    if(length != 0) {
 8011966:	bb31      	cbnz	r1, 80119b6 <lv_txt_get_width+0x72>
    lv_coord_t width             = 0;
 8011968:	460c      	mov	r4, r1
}
 801196a:	4620      	mov	r0, r4
 801196c:	b005      	add	sp, #20
 801196e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8011972:	4628      	mov	r0, r5
 8011974:	ab01      	add	r3, sp, #4
 8011976:	aa03      	add	r2, sp, #12
 8011978:	a902      	add	r1, sp, #8
 801197a:	f7ff ffc9 	bl	8011910 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801197e:	f1b9 0f00 	cmp.w	r9, #0
 8011982:	d005      	beq.n	8011990 <lv_txt_get_width+0x4c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8011984:	9902      	ldr	r1, [sp, #8]
 8011986:	f10d 0003 	add.w	r0, sp, #3
 801198a:	f7ff fe95 	bl	80116b8 <_lv_txt_is_cmd>
 801198e:	b950      	cbnz	r0, 80119a6 <lv_txt_get_width+0x62>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8011990:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011994:	4638      	mov	r0, r7
 8011996:	f7fd fa2d 	bl	800edf4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 801199a:	b203      	sxth	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	dd02      	ble.n	80119a6 <lv_txt_get_width+0x62>
                width += letter_space;
 80119a0:	4434      	add	r4, r6
 80119a2:	4404      	add	r4, r0
 80119a4:	b224      	sxth	r4, r4
        while(i < length) {
 80119a6:	9b01      	ldr	r3, [sp, #4]
 80119a8:	4598      	cmp	r8, r3
 80119aa:	d8e2      	bhi.n	8011972 <lv_txt_get_width+0x2e>
        if(width > 0) {
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	dddc      	ble.n	801196a <lv_txt_get_width+0x26>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80119b0:	1ba4      	subs	r4, r4, r6
 80119b2:	b224      	sxth	r4, r4
 80119b4:	e7d9      	b.n	801196a <lv_txt_get_width+0x26>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80119b6:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    lv_coord_t width             = 0;
 80119ba:	461c      	mov	r4, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80119bc:	f009 0901 	and.w	r9, r9, #1
 80119c0:	e7f1      	b.n	80119a6 <lv_txt_get_width+0x62>
    if(txt == NULL) return 0;
 80119c2:	4604      	mov	r4, r0
 80119c4:	e7d1      	b.n	801196a <lv_txt_get_width+0x26>
 80119c6:	4614      	mov	r4, r2
 80119c8:	e7cf      	b.n	801196a <lv_txt_get_width+0x26>

080119ca <lv_txt_get_size>:
{
 80119ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 80119ce:	2500      	movs	r5, #0
{
 80119d0:	b087      	sub	sp, #28
 80119d2:	4698      	mov	r8, r3
 80119d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80119d8:	4604      	mov	r4, r0
 80119da:	4616      	mov	r6, r2
    if(text == NULL) return;
 80119dc:	460f      	mov	r7, r1
{
 80119de:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 80119e2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80119e6:	9302      	str	r3, [sp, #8]
    size_res->x = 0;
 80119e8:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80119ea:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80119ec:	b311      	cbz	r1, 8011a34 <lv_txt_get_size+0x6a>
    if(font == NULL) return;
 80119ee:	b30a      	cbz	r2, 8011a34 <lv_txt_get_size+0x6a>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80119f0:	f013 0f02 	tst.w	r3, #2
 80119f4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80119f8:	bf18      	it	ne
 80119fa:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
 80119fc:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8011a00:	9304      	str	r3, [sp, #16]
 8011a02:	8913      	ldrh	r3, [r2, #8]
 8011a04:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8011a06:	445b      	add	r3, fp
 8011a08:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8011a0a:	5d7b      	ldrb	r3, [r7, r5]
 8011a0c:	eb07 0905 	add.w	r9, r7, r5
 8011a10:	b99b      	cbnz	r3, 8011a3a <lv_txt_get_size+0x70>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8011a12:	b155      	cbz	r5, 8011a2a <lv_txt_get_size+0x60>
 8011a14:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8011a18:	2b0a      	cmp	r3, #10
 8011a1a:	d001      	beq.n	8011a20 <lv_txt_get_size+0x56>
 8011a1c:	2b0d      	cmp	r3, #13
 8011a1e:	d104      	bne.n	8011a2a <lv_txt_get_size+0x60>
        size_res->y += letter_height + line_space;
 8011a20:	9b03      	ldr	r3, [sp, #12]
 8011a22:	8862      	ldrh	r2, [r4, #2]
 8011a24:	445b      	add	r3, fp
 8011a26:	4413      	add	r3, r2
 8011a28:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8011a2a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011a2e:	bb33      	cbnz	r3, 8011a7e <lv_txt_get_size+0xb4>
        size_res->y = letter_height;
 8011a30:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 8011a32:	8063      	strh	r3, [r4, #2]
}
 8011a34:	b007      	add	sp, #28
 8011a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8011a3a:	9b02      	ldr	r3, [sp, #8]
 8011a3c:	4642      	mov	r2, r8
 8011a3e:	9301      	str	r3, [sp, #4]
 8011a40:	2300      	movs	r3, #0
 8011a42:	4631      	mov	r1, r6
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	4648      	mov	r0, r9
 8011a48:	4653      	mov	r3, sl
 8011a4a:	f7ff fe51 	bl	80116f0 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8011a4e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011a52:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8011a54:	4601      	mov	r1, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8011a56:	4413      	add	r3, r2
 8011a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8011a5c:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8011a5e:	d2e9      	bcs.n	8011a34 <lv_txt_get_size+0x6a>
            size_res->y += line_space;
 8011a60:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8011a62:	9b02      	ldr	r3, [sp, #8]
 8011a64:	4632      	mov	r2, r6
 8011a66:	9300      	str	r3, [sp, #0]
 8011a68:	4648      	mov	r0, r9
 8011a6a:	4643      	mov	r3, r8
 8011a6c:	f7ff ff6a 	bl	8011944 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8011a70:	f9b4 3000 	ldrsh.w	r3, [r4]
 8011a74:	4283      	cmp	r3, r0
 8011a76:	bfb8      	it	lt
 8011a78:	4603      	movlt	r3, r0
 8011a7a:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
 8011a7c:	e7c5      	b.n	8011a0a <lv_txt_get_size+0x40>
        size_res->y -= line_space;
 8011a7e:	eba3 030b 	sub.w	r3, r3, fp
 8011a82:	e7d6      	b.n	8011a32 <lv_txt_get_size+0x68>

08011a84 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8011a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a88:	4680      	mov	r8, r0
 8011a8a:	460f      	mov	r7, r1
 8011a8c:	4614      	mov	r4, r2
 8011a8e:	4699      	mov	r9, r3
 8011a90:	9d08      	ldr	r5, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8011a92:	b90c      	cbnz	r4, 8011a98 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8011a94:	4626      	mov	r6, r4
 8011a96:	e012      	b.n	8011abe <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 8011a98:	ea4f 0a54 	mov.w	sl, r4, lsr #1
 8011a9c:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8011aa0:	4640      	mov	r0, r8
 8011aa2:	4631      	mov	r1, r6
 8011aa4:	47a8      	blx	r5
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	dd08      	ble.n	8011abc <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 8011aaa:	43e4      	mvns	r4, r4
 8011aac:	f004 0401 	and.w	r4, r4, #1
 8011ab0:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
 8011ab4:	eb06 0709 	add.w	r7, r6, r9
{
 8011ab8:	4654      	mov	r4, sl
 8011aba:	e7ea      	b.n	8011a92 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8011abc:	d1fc      	bne.n	8011ab8 <_lv_utils_bsearch+0x34>
}
 8011abe:	4630      	mov	r0, r6
 8011ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011ac4 <lv_img_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_img_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8011ac4:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_img_t * img = (lv_img_t *)obj;

    img->src       = NULL;
 8011ac6:	2500      	movs	r5, #0
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8011ac8:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->src       = NULL;
 8011acc:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8011ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011ad2:	f043 0303 	orr.w	r3, r3, #3
 8011ad6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->cf        = LV_IMG_CF_UNKNOWN;
    img->w         = lv_obj_get_width(obj);
 8011ada:	4608      	mov	r0, r1
{
 8011adc:	460c      	mov	r4, r1
    img->w         = lv_obj_get_width(obj);
 8011ade:	f7f1 fd04 	bl	80034ea <lv_obj_get_width>
 8011ae2:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f7f1 fd06 	bl	80034f6 <lv_obj_get_height>
    img->zoom = LV_IMG_ZOOM_NONE;
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
    img->offset.x  = 0;
    img->offset.y  = 0;
    img->pivot.x = 0;
    img->pivot.y = 0;
 8011aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011aee:	6363      	str	r3, [r4, #52]	; 0x34
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8011af0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    img->h         = lv_obj_get_height(obj);
 8011af2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8011af4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8011af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8011afc:	4620      	mov	r0, r4
 8011afe:	2102      	movs	r1, #2
    img->offset.x  = 0;
 8011b00:	62a5      	str	r5, [r4, #40]	; 0x28
    img->angle = 0;
 8011b02:	6325      	str	r5, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8011b04:	8723      	strh	r3, [r4, #56]	; 0x38
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8011b06:	f7f0 fe40 	bl	800278a <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8011b0a:	4620      	mov	r0, r4

    LV_TRACE_OBJ_CREATE("finished");
}
 8011b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8011b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011b14:	f7f0 be04 	b.w	8002720 <lv_obj_add_flag>

08011b18 <lv_img_destructor>:

static void lv_img_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_img_t * img = (lv_img_t *)obj;
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011b18:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
{
 8011b1c:	b510      	push	{r4, lr}
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011b1e:	f003 0303 	and.w	r3, r3, #3
 8011b22:	3b01      	subs	r3, #1
 8011b24:	2b01      	cmp	r3, #1
{
 8011b26:	460c      	mov	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011b28:	d80a      	bhi.n	8011b40 <lv_img_destructor+0x28>
        lv_mem_free((void *)img->src);
 8011b2a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8011b2c:	f7fe f93c 	bl	800fda8 <lv_mem_free>
        img->src      = NULL;
 8011b30:	2300      	movs	r3, #0
 8011b32:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8011b34:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011b38:	f043 0303 	orr.w	r3, r3, #3
 8011b3c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
}
 8011b40:	bd10      	pop	{r4, pc}

08011b42 <lv_obj_get_style_transform_angle.constprop.0>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8011b42:	f643 020f 	movw	r2, #14351	; 0x380f
 8011b46:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t part)
 8011b48:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8011b4a:	f7f3 fc1d 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8011b4e:	b200      	sxth	r0, r0
 8011b50:	bd08      	pop	{r3, pc}

08011b52 <lv_obj_get_style_transform_zoom.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8011b52:	f643 020e 	movw	r2, #14350	; 0x380e
 8011b56:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_transform_zoom(const struct _lv_obj_t * obj, uint32_t part)
 8011b58:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8011b5a:	f7f3 fc15 	bl	8005388 <lv_obj_get_style_prop>
}
 8011b5e:	b200      	sxth	r0, r0
 8011b60:	bd08      	pop	{r3, pc}

08011b62 <lv_img_get_transformed_size>:

static lv_point_t lv_img_get_transformed_size(lv_obj_t * obj)
{
 8011b62:	b530      	push	{r4, r5, lr}
 8011b64:	4604      	mov	r4, r0
 8011b66:	b087      	sub	sp, #28
    lv_img_t * img = (lv_img_t *)obj;

    int32_t zoom_final = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 8011b68:	f7ff fff3 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
    zoom_final = (zoom_final * img->zoom) >> 8;
 8011b6c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8011b6e:	4345      	muls	r5, r0
    int32_t angle_final = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 8011b70:	4620      	mov	r0, r4
 8011b72:	f7ff ffe6 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
    angle_final += img->angle;
 8011b76:	8e23      	ldrh	r3, [r4, #48]	; 0x30

    lv_area_t area_transform;
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
                                     angle_final, zoom_final, &img->pivot);
 8011b78:	f104 0232 	add.w	r2, r4, #50	; 0x32
    angle_final += img->angle;
 8011b7c:	4403      	add	r3, r0
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8011b7e:	f3c5 250f 	ubfx	r5, r5, #8, #16
 8011b82:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 8011b86:	9201      	str	r2, [sp, #4]
 8011b88:	a804      	add	r0, sp, #16
 8011b8a:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8011b8e:	9500      	str	r5, [sp, #0]
 8011b90:	b21b      	sxth	r3, r3
 8011b92:	f7f6 fe30 	bl	80087f6 <_lv_img_buf_get_transformed_area>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011b96:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011b9a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8011b9e:	3201      	adds	r2, #1

    return (lv_point_t) {
 8011ba0:	1a12      	subs	r2, r2, r0
 8011ba2:	2000      	movs	r0, #0
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011ba4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011ba8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8011bac:	3301      	adds	r3, #1
 8011bae:	1a5b      	subs	r3, r3, r1
 8011bb0:	b292      	uxth	r2, r2
 8011bb2:	f362 000f 	bfi	r0, r2, #0, #16
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	f363 401f 	bfi	r0, r3, #16, #16
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}
 8011bbc:	b007      	add	sp, #28
 8011bbe:	bd30      	pop	{r4, r5, pc}

08011bc0 <lv_img_create>:
{
 8011bc0:	4601      	mov	r1, r0
 8011bc2:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8011bc4:	4803      	ldr	r0, [pc, #12]	; (8011bd4 <lv_img_create+0x14>)
 8011bc6:	f7f1 f83b 	bl	8002c40 <lv_obj_class_create_obj>
 8011bca:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8011bcc:	f7f1 f8b6 	bl	8002d3c <lv_obj_class_init_obj>
}
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	bd10      	pop	{r4, pc}
 8011bd4:	0801a5b0 	.word	0x0801a5b0

08011bd8 <lv_img_set_src>:
{
 8011bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bdc:	460e      	mov	r6, r1
 8011bde:	b086      	sub	sp, #24
 8011be0:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8011be2:	f7f1 fdcc 	bl	800377e <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011be6:	4630      	mov	r0, r6
 8011be8:	f7f5 f832 	bl	8006c50 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8011bec:	2803      	cmp	r0, #3
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8011bee:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8011bf0:	d114      	bne.n	8011c1c <lv_img_set_src+0x44>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8011bf2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011bf6:	f003 0303 	and.w	r3, r3, #3
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d802      	bhi.n	8011c06 <lv_img_set_src+0x2e>
            lv_mem_free((void *)img->src);
 8011c00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c02:	f7fe f8d1 	bl	800fda8 <lv_mem_free>
        img->src      = NULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8011c0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011c0e:	f043 0303 	orr.w	r3, r3, #3
 8011c12:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8011c16:	b006      	add	sp, #24
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src, &header);
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	a904      	add	r1, sp, #16
 8011c20:	f7f7 fbb2 	bl	8009388 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8011c24:	2d00      	cmp	r5, #0
 8011c26:	d138      	bne.n	8011c9a <lv_img_set_src+0xc2>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011c28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011c2c:	f003 0303 	and.w	r3, r3, #3
 8011c30:	3b01      	subs	r3, #1
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d802      	bhi.n	8011c3c <lv_img_set_src+0x64>
            lv_mem_free((void *)img->src);
 8011c36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c38:	f7fe f8b6 	bl	800fda8 <lv_mem_free>
        img->src = src;
 8011c3c:	6266      	str	r6, [r4, #36]	; 0x24
    img->w        = header.w;
 8011c3e:	9a04      	ldr	r2, [sp, #16]
    img->cf       = header.cf;
 8011c40:	f89d 0010 	ldrb.w	r0, [sp, #16]
    img->w        = header.w;
 8011c44:	f3c2 238a 	ubfx	r3, r2, #10, #11
 8011c48:	85a3      	strh	r3, [r4, #44]	; 0x2c
    img->h        = header.h;
 8011c4a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    img->cf       = header.cf;
 8011c4e:	f3c0 0004 	ubfx	r0, r0, #0, #5
    img->h        = header.h;
 8011c52:	f3c3 114a 	ubfx	r1, r3, #5, #11
 8011c56:	85e1      	strh	r1, [r4, #46]	; 0x2e
    img->src_type = src_type;
 8011c58:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8011c5c:	f005 0503 	and.w	r5, r5, #3
 8011c60:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
 8011c64:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    img->pivot.y = header.h / 2;
 8011c68:	f3c3 1389 	ubfx	r3, r3, #6, #10
    img->src_type = src_type;
 8011c6c:	430d      	orrs	r5, r1
    img->pivot.x = header.w / 2;
 8011c6e:	f3c2 22c9 	ubfx	r2, r2, #11, #10
    img->pivot.y = header.h / 2;
 8011c72:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_obj_refresh_self_size(obj);
 8011c74:	4620      	mov	r0, r4
    img->src_type = src_type;
 8011c76:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    img->pivot.x = header.w / 2;
 8011c7a:	8662      	strh	r2, [r4, #50]	; 0x32
    lv_obj_refresh_self_size(obj);
 8011c7c:	f7f1 fcb9 	bl	80035f2 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8011c80:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011c82:	b91b      	cbnz	r3, 8011c8c <lv_img_set_src+0xb4>
 8011c84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c8a:	d002      	beq.n	8011c92 <lv_img_set_src+0xba>
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f7f1 faee 	bl	800326e <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8011c92:	4620      	mov	r0, r4
 8011c94:	f7f1 fd73 	bl	800377e <lv_obj_invalidate>
 8011c98:	e7bd      	b.n	8011c16 <lv_img_set_src+0x3e>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8011c9a:	1e6b      	subs	r3, r5, #1
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d81c      	bhi.n	8011cdc <lv_img_set_src+0x104>
        if(img->src != src) {
 8011ca2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011ca4:	42b7      	cmp	r7, r6
 8011ca6:	d019      	beq.n	8011cdc <lv_img_set_src+0x104>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011ca8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8011cac:	4630      	mov	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011cae:	f003 0303 	and.w	r3, r3, #3
 8011cb2:	3b01      	subs	r3, #1
            const void * old_src = NULL;
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	bf88      	it	hi
 8011cb8:	2700      	movhi	r7, #0
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8011cba:	f7ee fa51 	bl	8000160 <strlen>
 8011cbe:	3001      	adds	r0, #1
 8011cc0:	f7fe f9f8 	bl	80100b4 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	b900      	cbnz	r0, 8011cca <lv_img_set_src+0xf2>
 8011cc8:	e7fe      	b.n	8011cc8 <lv_img_set_src+0xf0>
            strcpy(new_str, src);
 8011cca:	4631      	mov	r1, r6
 8011ccc:	f003 fb82 	bl	80153d4 <strcpy>
            img->src = new_str;
 8011cd0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8011cd4:	b117      	cbz	r7, 8011cdc <lv_img_set_src+0x104>
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	f7fe f866 	bl	800fda8 <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8011cdc:	2d02      	cmp	r5, #2
 8011cde:	d1ae      	bne.n	8011c3e <lv_img_set_src+0x66>
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8011ce0:	f241 4259 	movw	r2, #5209	; 0x1459
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7f3 fb4e 	bl	8005388 <lv_obj_get_style_prop>
    return (const lv_font_t *)v.ptr;
}

static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8011cec:	f241 425a 	movw	r2, #5210	; 0x145a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8011cf0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f7f3 fb47 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8011cfa:	f241 425b 	movw	r2, #5211	; 0x145b
 8011cfe:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8011d00:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8011d04:	4620      	mov	r0, r4
 8011d06:	f7f3 fb3f 	bl	8005388 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8011d0a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8011d0e:	2200      	movs	r2, #0
    return (lv_coord_t)v.num;
 8011d10:	b200      	sxth	r0, r0
 8011d12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011d16:	9000      	str	r0, [sp, #0]
 8011d18:	4643      	mov	r3, r8
 8011d1a:	463a      	mov	r2, r7
 8011d1c:	4631      	mov	r1, r6
 8011d1e:	a805      	add	r0, sp, #20
 8011d20:	f7ff fe53 	bl	80119ca <lv_txt_get_size>
        header.w = size.x;
 8011d24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011d28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011d2c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011d30:	055b      	lsls	r3, r3, #21
 8011d32:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8011d36:	9a04      	ldr	r2, [sp, #16]
 8011d38:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	9304      	str	r3, [sp, #16]
 8011d40:	e77d      	b.n	8011c3e <lv_img_set_src+0x66>
	...

08011d44 <lv_img_event>:

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8011d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8011d48:	4608      	mov	r0, r1
{
 8011d4a:	b09d      	sub	sp, #116	; 0x74
 8011d4c:	460f      	mov	r7, r1
    lv_event_code_t code = lv_event_get_code(e);
 8011d4e:	f7ef ffab 	bl	8001ca8 <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8011d52:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 8011d54:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8011d56:	d10f      	bne.n	8011d78 <lv_img_event+0x34>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8011d58:	4638      	mov	r0, r7
 8011d5a:	f7ef ffa1 	bl	8001ca0 <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;

    if(code == LV_EVENT_STYLE_CHANGED) {
 8011d5e:	2d2a      	cmp	r5, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8011d60:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8011d62:	d117      	bne.n	8011d94 <lv_img_event+0x50>
        /*Refresh the file name to refresh the symbol text size*/
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8011d64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011d68:	f003 0303 	and.w	r3, r3, #3
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d10e      	bne.n	8011d8e <lv_img_event+0x4a>
            lv_img_set_src(obj, img->src);
 8011d70:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011d72:	f7ff ff31 	bl	8011bd8 <lv_img_set_src>
 8011d76:	e007      	b.n	8011d88 <lv_img_event+0x44>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8011d78:	2818      	cmp	r0, #24
 8011d7a:	d0ed      	beq.n	8011d58 <lv_img_event+0x14>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	48b3      	ldr	r0, [pc, #716]	; (801204c <lv_img_event+0x308>)
 8011d80:	f7ef fed9 	bl	8001b36 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8011d84:	2801      	cmp	r0, #1
 8011d86:	d0e7      	beq.n	8011d58 <lv_img_event+0x14>
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
        draw_img(e);
    }
}
 8011d88:	b01d      	add	sp, #116	; 0x74
 8011d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_refresh_ext_draw_size(obj);
 8011d8e:	f7f1 fa6e 	bl	800326e <lv_obj_refresh_ext_draw_size>
 8011d92:	e7f9      	b.n	8011d88 <lv_img_event+0x44>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8011d94:	2d13      	cmp	r5, #19
 8011d96:	d153      	bne.n	8011e40 <lv_img_event+0xfc>
        lv_coord_t * s = lv_event_get_param(e);
 8011d98:	4638      	mov	r0, r7
 8011d9a:	f7ef ff87 	bl	8001cac <lv_event_get_param>
 8011d9e:	4605      	mov	r5, r0
        lv_coord_t transf_zoom = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 8011da0:	4620      	mov	r0, r4
 8011da2:	f7ff fed6 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
        transf_zoom = ((int32_t)transf_zoom * img->zoom) >> 8;
 8011da6:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
 8011daa:	fb00 f808 	mul.w	r8, r0, r8
        lv_coord_t transf_angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 8011dae:	4620      	mov	r0, r4
 8011db0:	f7ff fec7 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
        transf_angle += img->angle;
 8011db4:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
        transf_zoom = ((int32_t)transf_zoom * img->zoom) >> 8;
 8011db8:	ea4f 2828 	mov.w	r8, r8, asr #8
        transf_angle += img->angle;
 8011dbc:	4481      	add	r9, r0
 8011dbe:	fa0f f989 	sxth.w	r9, r9
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
 8011dc2:	f1b9 0f00 	cmp.w	r9, #0
 8011dc6:	d104      	bne.n	8011dd2 <lv_img_event+0x8e>
 8011dc8:	fa0f f388 	sxth.w	r3, r8
 8011dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dd0:	d0da      	beq.n	8011d88 <lv_img_event+0x44>
            lv_coord_t w = lv_obj_get_width(obj);
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f7f1 fb89 	bl	80034ea <lv_obj_get_width>
 8011dd8:	4607      	mov	r7, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f7f1 fb8b 	bl	80034f6 <lv_obj_get_height>
 8011de0:	4606      	mov	r6, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &img->pivot);
 8011de2:	3432      	adds	r4, #50	; 0x32
 8011de4:	fa1f f088 	uxth.w	r0, r8
 8011de8:	464b      	mov	r3, r9
 8011dea:	4632      	mov	r2, r6
 8011dec:	4639      	mov	r1, r7
 8011dee:	9000      	str	r0, [sp, #0]
 8011df0:	9401      	str	r4, [sp, #4]
 8011df2:	a814      	add	r0, sp, #80	; 0x50
 8011df4:	f7f6 fcff 	bl	80087f6 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, pad_ori - a.x1);
 8011df8:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011dfc:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 8011e00:	1a41      	subs	r1, r0, r1
 8011e02:	4281      	cmp	r1, r0
 8011e04:	bfb8      	it	lt
 8011e06:	4601      	movlt	r1, r0
 8011e08:	b209      	sxth	r1, r1
 8011e0a:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori - a.y1);
 8011e0c:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 8011e10:	1a83      	subs	r3, r0, r2
 8011e12:	428b      	cmp	r3, r1
 8011e14:	bfb8      	it	lt
 8011e16:	460b      	movlt	r3, r1
 8011e18:	b219      	sxth	r1, r3
 8011e1a:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori + a.x2 - w);
 8011e1c:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8011e20:	4403      	add	r3, r0
 8011e22:	1bdb      	subs	r3, r3, r7
 8011e24:	428b      	cmp	r3, r1
 8011e26:	bfb8      	it	lt
 8011e28:	460b      	movlt	r3, r1
 8011e2a:	b219      	sxth	r1, r3
 8011e2c:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori + a.y2 - h);
 8011e2e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8011e32:	4410      	add	r0, r2
 8011e34:	1b80      	subs	r0, r0, r6
 8011e36:	4281      	cmp	r1, r0
 8011e38:	bfb8      	it	lt
 8011e3a:	4601      	movlt	r1, r0
 8011e3c:	8029      	strh	r1, [r5, #0]
 8011e3e:	e7a3      	b.n	8011d88 <lv_img_event+0x44>
    else if(code == LV_EVENT_HIT_TEST) {
 8011e40:	2d11      	cmp	r5, #17
 8011e42:	d16e      	bne.n	8011f22 <lv_img_event+0x1de>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8011e44:	4638      	mov	r0, r7
 8011e46:	f7ef ff31 	bl	8001cac <lv_event_get_param>
 8011e4a:	4605      	mov	r5, r0
        lv_coord_t zoom = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7ff fe80 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
 8011e52:	4680      	mov	r8, r0
        lv_coord_t angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 8011e54:	4620      	mov	r0, r4
        zoom = (zoom * img->zoom) >> 8;
 8011e56:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
        lv_coord_t angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 8011e58:	f7ff fe73 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
 8011e5c:	4681      	mov	r9, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
        angle += img->angle;
 8011e64:	8e26      	ldrh	r6, [r4, #48]	; 0x30
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8011e66:	f7f1 fb40 	bl	80034ea <lv_obj_get_width>
 8011e6a:	4582      	cmp	sl, r0
 8011e6c:	d154      	bne.n	8011f18 <lv_img_event+0x1d4>
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f9b4 a02e 	ldrsh.w	sl, [r4, #46]	; 0x2e
 8011e74:	f7f1 fb3f 	bl	80034f6 <lv_obj_get_height>
 8011e78:	4582      	cmp	sl, r0
 8011e7a:	d14d      	bne.n	8011f18 <lv_img_event+0x1d4>
        zoom = (zoom * img->zoom) >> 8;
 8011e7c:	fb07 f208 	mul.w	r2, r7, r8
 8011e80:	ea4f 2822 	mov.w	r8, r2, asr #8
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8011e84:	f342 220f 	sbfx	r2, r2, #8, #16
        angle += img->angle;
 8011e88:	444e      	add	r6, r9
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8011e8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        angle += img->angle;
 8011e8e:	b236      	sxth	r6, r6
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8011e90:	d112      	bne.n	8011eb8 <lv_img_event+0x174>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8011e92:	b98e      	cbnz	r6, 8011eb8 <lv_img_event+0x174>
 8011e94:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8011e98:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8011e9c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8011ea0:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8011ea4:	d108      	bne.n	8011eb8 <lv_img_event+0x174>
 8011ea6:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8011eaa:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 8011eae:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8011eb2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8011eb6:	d02f      	beq.n	8011f18 <lv_img_event+0x1d4>
            lv_coord_t w = lv_obj_get_width(obj);
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f7f1 fb16 	bl	80034ea <lv_obj_get_width>
 8011ebe:	4607      	mov	r7, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f7f1 fb18 	bl	80034f6 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &img->pivot);
 8011ec6:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	fa1f f388 	uxth.w	r3, r8
            lv_coord_t h = lv_obj_get_height(obj);
 8011ed0:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &img->pivot);
 8011ed2:	4639      	mov	r1, r7
 8011ed4:	9300      	str	r3, [sp, #0]
 8011ed6:	a814      	add	r0, sp, #80	; 0x50
 8011ed8:	4633      	mov	r3, r6
 8011eda:	f7f6 fc8c 	bl	80087f6 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 8011ede:	8aa2      	ldrh	r2, [r4, #20]
 8011ee0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            coords.y1 += obj->coords.y1;
 8011ee4:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
            coords.x1 += obj->coords.x1;
 8011ee8:	4413      	add	r3, r2
 8011eea:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            coords.y1 += obj->coords.y1;
 8011eee:	8ae3      	ldrh	r3, [r4, #22]
 8011ef0:	4419      	add	r1, r3
 8011ef2:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
            coords.x2 += obj->coords.x1;
 8011ef6:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 8011efa:	440a      	add	r2, r1
 8011efc:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            coords.y2 += obj->coords.y1;
 8011f00:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8011f04:	4413      	add	r3, r2
 8011f06:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	6829      	ldr	r1, [r5, #0]
 8011f0e:	a814      	add	r0, sp, #80	; 0x50
 8011f10:	f7fd fc36 	bl	800f780 <_lv_area_is_point_on>
 8011f14:	7128      	strb	r0, [r5, #4]
 8011f16:	e737      	b.n	8011d88 <lv_img_event+0x44>
            lv_obj_get_click_area(obj, &a);
 8011f18:	4620      	mov	r0, r4
 8011f1a:	a914      	add	r1, sp, #80	; 0x50
 8011f1c:	f7f1 fe00 	bl	8003b20 <lv_obj_get_click_area>
 8011f20:	e7f3      	b.n	8011f0a <lv_img_event+0x1c6>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8011f22:	2d2c      	cmp	r5, #44	; 0x2c
 8011f24:	d116      	bne.n	8011f54 <lv_img_event+0x210>
        lv_point_t * p = lv_event_get_param(e);
 8011f26:	4638      	mov	r0, r7
 8011f28:	f7ef fec0 	bl	8001cac <lv_event_get_param>
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8011f2c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
        lv_point_t * p = lv_event_get_param(e);
 8011f30:	4605      	mov	r5, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8011f32:	f003 0303 	and.w	r3, r3, #3
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d107      	bne.n	8011f4a <lv_img_event+0x206>
            *p = lv_img_get_transformed_size(obj);
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f7ff fe11 	bl	8011b62 <lv_img_get_transformed_size>
 8011f40:	8028      	strh	r0, [r5, #0]
 8011f42:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8011f46:	8068      	strh	r0, [r5, #2]
 8011f48:	e71e      	b.n	8011d88 <lv_img_event+0x44>
            p->x = img->w;
 8011f4a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8011f4c:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 8011f4e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8011f50:	8043      	strh	r3, [r0, #2]
 8011f52:	e719      	b.n	8011d88 <lv_img_event+0x44>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8011f54:	2d18      	cmp	r5, #24
 8011f56:	f63f af17 	bhi.w	8011d88 <lv_img_event+0x44>
 8011f5a:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8011f5e:	fa20 f505 	lsr.w	r5, r0, r5
 8011f62:	07e9      	lsls	r1, r5, #31
 8011f64:	f57f af10 	bpl.w	8011d88 <lv_img_event+0x44>

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 8011f68:	4638      	mov	r0, r7
 8011f6a:	f7ef fe9d 	bl	8001ca8 <lv_event_get_code>
 8011f6e:	4680      	mov	r8, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8011f70:	4638      	mov	r0, r7
 8011f72:	f7ef fe95 	bl	8001ca0 <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 8011f76:	f1b8 0f12 	cmp.w	r8, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8011f7a:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8011f7c:	d168      	bne.n	8012050 <lv_img_event+0x30c>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8011f7e:	4638      	mov	r0, r7
 8011f80:	f7ef fe94 	bl	8001cac <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8011f84:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8011f86:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8011f88:	2b02      	cmp	r3, #2
 8011f8a:	f43f aefd 	beq.w	8011d88 <lv_img_event+0x44>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8011f8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011f92:	079a      	lsls	r2, r3, #30
 8011f94:	d502      	bpl.n	8011f9c <lv_img_event+0x258>
            a.y1 += obj->coords.y1;
            a.x2 += obj->coords.x1;
            a.y2 += obj->coords.y1;

            if(_lv_area_is_in(clip_area, &a, 0) == false) {
                info->res = LV_COVER_RES_NOT_COVER;
 8011f96:	2301      	movs	r3, #1
 8011f98:	702b      	strb	r3, [r5, #0]
                return;
 8011f9a:	e6f5      	b.n	8011d88 <lv_img_event+0x44>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 8011f9c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8011fa0:	2b10      	cmp	r3, #16
 8011fa2:	d001      	beq.n	8011fa8 <lv_img_event+0x264>
 8011fa4:	2b04      	cmp	r3, #4
 8011fa6:	d1f6      	bne.n	8011f96 <lv_img_event+0x252>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8011fa8:	2246      	movs	r2, #70	; 0x46
 8011faa:	2100      	movs	r1, #0
 8011fac:	4620      	mov	r0, r4
 8011fae:	f7f3 f9eb 	bl	8005388 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8011fb2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 8011fb4:	28ff      	cmp	r0, #255	; 0xff
 8011fb6:	d1ee      	bne.n	8011f96 <lv_img_event+0x252>
        int32_t angle_final = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7ff fdc2 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
        angle_final += img->angle;
 8011fbe:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
        if(angle_final != 0) {
 8011fc2:	eb18 0800 	adds.w	r8, r8, r0
 8011fc6:	d1e6      	bne.n	8011f96 <lv_img_event+0x252>
        int32_t zoom_final = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f7ff fdc2 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
        zoom_final = (zoom_final * img->zoom) >> 8;
 8011fce:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 8011fd0:	4346      	muls	r6, r0
        const lv_area_t * clip_area = lv_event_get_param(e);
 8011fd2:	4638      	mov	r0, r7
 8011fd4:	f7ef fe6a 	bl	8001cac <lv_event_get_param>
        zoom_final = (zoom_final * img->zoom) >> 8;
 8011fd8:	1236      	asrs	r6, r6, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
 8011fda:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
        const lv_area_t * clip_area = lv_event_get_param(e);
 8011fde:	4607      	mov	r7, r0
        if(zoom_final == LV_IMG_ZOOM_NONE) {
 8011fe0:	d108      	bne.n	8011ff4 <lv_img_event+0x2b0>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 8011fe2:	4642      	mov	r2, r8
 8011fe4:	f104 0114 	add.w	r1, r4, #20
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8011fe8:	f7fd fc7d 	bl	800f8e6 <_lv_area_is_in>
 8011fec:	2800      	cmp	r0, #0
 8011fee:	f47f aecb 	bne.w	8011d88 <lv_img_event+0x44>
 8011ff2:	e7d0      	b.n	8011f96 <lv_img_event+0x252>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, zoom_final, &img->pivot);
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f7f1 fa78 	bl	80034ea <lv_obj_get_width>
 8011ffa:	4681      	mov	r9, r0
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f7f1 fa7a 	bl	80034f6 <lv_obj_get_height>
 8012002:	b2b6      	uxth	r6, r6
 8012004:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8012008:	4602      	mov	r2, r0
 801200a:	4649      	mov	r1, r9
 801200c:	9301      	str	r3, [sp, #4]
 801200e:	a814      	add	r0, sp, #80	; 0x50
 8012010:	4643      	mov	r3, r8
 8012012:	9600      	str	r6, [sp, #0]
 8012014:	f7f6 fbef 	bl	80087f6 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 8012018:	8aa2      	ldrh	r2, [r4, #20]
 801201a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            a.y1 += obj->coords.y1;
 801201e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
            a.x1 += obj->coords.x1;
 8012022:	4413      	add	r3, r2
 8012024:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            a.y1 += obj->coords.y1;
 8012028:	8ae3      	ldrh	r3, [r4, #22]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801202a:	4638      	mov	r0, r7
            a.y1 += obj->coords.y1;
 801202c:	4419      	add	r1, r3
 801202e:	f8ad 1052 	strh.w	r1, [sp, #82]	; 0x52
            a.x2 += obj->coords.x1;
 8012032:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 8012036:	440a      	add	r2, r1
 8012038:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            a.y2 += obj->coords.y1;
 801203c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8012040:	a914      	add	r1, sp, #80	; 0x50
            a.y2 += obj->coords.y1;
 8012042:	4413      	add	r3, r2
 8012044:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8012048:	4642      	mov	r2, r8
 801204a:	e7cd      	b.n	8011fe8 <lv_img_event+0x2a4>
 801204c:	0801a5b0 	.word	0x0801a5b0
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8012050:	f1b8 0f15 	cmp.w	r8, #21
 8012054:	d003      	beq.n	801205e <lv_img_event+0x31a>
 8012056:	f1b8 0f18 	cmp.w	r8, #24
 801205a:	f47f ae95 	bne.w	8011d88 <lv_img_event+0x44>

        int32_t zoom_final = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 801205e:	4620      	mov	r0, r4
 8012060:	f7ff fd77 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
        zoom_final = (zoom_final * img->zoom) >> 8;
 8012064:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8012068:	fb00 fa0a 	mul.w	sl, r0, sl

        int32_t angle_final = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801206c:	4620      	mov	r0, r4
 801206e:	f7ff fd68 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
        angle_final += img->angle;
 8012072:	8e23      	ldrh	r3, [r4, #48]	; 0x30
        zoom_final = (zoom_final * img->zoom) >> 8;
 8012074:	ea4f 2a2a 	mov.w	sl, sl, asr #8
        angle_final += img->angle;
 8012078:	4403      	add	r3, r0

        lv_coord_t obj_w = lv_obj_get_width(obj);
 801207a:	4620      	mov	r0, r4
        angle_final += img->angle;
 801207c:	9305      	str	r3, [sp, #20]
        lv_coord_t obj_w = lv_obj_get_width(obj);
 801207e:	f7f1 fa34 	bl	80034ea <lv_obj_get_width>
 8012082:	4605      	mov	r5, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8012084:	4620      	mov	r0, r4
 8012086:	f7f1 fa36 	bl	80034f6 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801208a:	f241 0232 	movw	r2, #4146	; 0x1032
 801208e:	2100      	movs	r1, #0
 8012090:	4681      	mov	r9, r0
 8012092:	4620      	mov	r0, r4
 8012094:	f7f3 f978 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012098:	f641 0212 	movw	r2, #6162	; 0x1812
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801209c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801209e:	2100      	movs	r1, #0
 80120a0:	4620      	mov	r0, r4
 80120a2:	f7f3 f971 	bl	8005388 <lv_obj_get_style_prop>

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80120a6:	b2b6      	uxth	r6, r6
 80120a8:	4430      	add	r0, r6
 80120aa:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80120ac:	f641 0213 	movw	r2, #6163	; 0x1813
 80120b0:	2100      	movs	r1, #0
 80120b2:	4620      	mov	r0, r4
 80120b4:	9303      	str	r3, [sp, #12]
 80120b6:	f7f3 f967 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80120ba:	f641 0210 	movw	r2, #6160	; 0x1810
 80120be:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80120c0:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80120c2:	4620      	mov	r0, r4
 80120c4:	f7f3 f960 	bl	8005388 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80120c8:	4430      	add	r0, r6
 80120ca:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80120cc:	f641 0211 	movw	r2, #6161	; 0x1811
 80120d0:	2100      	movs	r1, #0
 80120d2:	4620      	mov	r0, r4
 80120d4:	9304      	str	r3, [sp, #16]
 80120d6:	f7f3 f957 	bl	8005388 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 80120da:	9a03      	ldr	r2, [sp, #12]
 80120dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80120de:	9008      	str	r0, [sp, #32]
 80120e0:	4413      	add	r3, r2
 80120e2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        bg_pivot.y = img->pivot.y + ptop;
 80120e6:	9a04      	ldr	r2, [sp, #16]
 80120e8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80120ea:	4413      	add	r3, r2
 80120ec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 80120f0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80120f4:	f003 0303 	and.w	r3, r3, #3
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	f040 80ef 	bne.w	80122dc <lv_img_event+0x598>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
 80120fe:	4620      	mov	r0, r4
 8012100:	a90e      	add	r1, sp, #56	; 0x38
 8012102:	f7f1 f9e5 	bl	80034d0 <lv_obj_get_coords>
    dest->x1 = src->x1;
 8012106:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801210a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801210e:	82a2      	strh	r2, [r4, #20]
    dest->y1 = src->y1;
 8012110:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012114:	f9b4 b016 	ldrsh.w	fp, [r4, #22]
 8012118:	82e2      	strh	r2, [r4, #22]
    dest->x2 = src->x2;
 801211a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801211e:	f9b4 9018 	ldrsh.w	r9, [r4, #24]
 8012122:	8322      	strh	r2, [r4, #24]
    dest->y2 = src->y2;
 8012124:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8012128:	f9b4 501a 	ldrsh.w	r5, [r4, #26]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801212c:	4639      	mov	r1, r7
 801212e:	48ad      	ldr	r0, [pc, #692]	; (80123e4 <lv_img_event+0x6a0>)
 8012130:	8362      	strh	r2, [r4, #26]
    dest->x1 = src->x1;
 8012132:	9306      	str	r3, [sp, #24]
 8012134:	f7ef fcff 	bl	8001b36 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8012138:	2801      	cmp	r0, #1
 801213a:	9b06      	ldr	r3, [sp, #24]
 801213c:	f47f ae24 	bne.w	8011d88 <lv_img_event+0x44>

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8012140:	f1b8 0f15 	cmp.w	r8, #21
 8012144:	82a3      	strh	r3, [r4, #20]
    dest->y1 = src->y1;
 8012146:	f8a4 b016 	strh.w	fp, [r4, #22]
    dest->x2 = src->x2;
 801214a:	f8a4 9018 	strh.w	r9, [r4, #24]
    dest->y2 = src->y2;
 801214e:	8365      	strh	r5, [r4, #26]
 8012150:	f47f ae1a 	bne.w	8011d88 <lv_img_event+0x44>
            if(img->h == 0 || img->w == 0) return;
 8012154:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8012158:	2b00      	cmp	r3, #0
 801215a:	f43f ae15 	beq.w	8011d88 <lv_img_event+0x44>
 801215e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8012162:	2b00      	cmp	r3, #0
 8012164:	f43f ae10 	beq.w	8011d88 <lv_img_event+0x44>
            if(zoom_final == 0) return;
 8012168:	f1ba 0f00 	cmp.w	sl, #0
 801216c:	f43f ae0c 	beq.w	8011d88 <lv_img_event+0x44>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8012170:	4638      	mov	r0, r7
 8012172:	f7ef fdb6 	bl	8001ce2 <lv_event_get_draw_ctx>
 8012176:	4607      	mov	r7, r0

            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 8012178:	4620      	mov	r0, r4
    dest->x1 = src->x1;
 801217a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
    dest->y1 = src->y1;
 801217e:	f9b4 b016 	ldrsh.w	fp, [r4, #22]
    dest->x2 = src->x2;
 8012182:	f9b4 9018 	ldrsh.w	r9, [r4, #24]
    dest->y2 = src->y2;
 8012186:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
 801218a:	f7ff fcea 	bl	8011b62 <lv_img_get_transformed_size>
 801218e:	b203      	sxth	r3, r0
 8012190:	9306      	str	r3, [sp, #24]
 8012192:	1403      	asrs	r3, r0, #16
 8012194:	9307      	str	r3, [sp, #28]

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8012196:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 801219a:	900d      	str	r0, [sp, #52]	; 0x34
            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 801219c:	f003 0303 	and.w	r3, r3, #3
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	f040 80be 	bne.w	8012322 <lv_img_event+0x5de>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121a6:	9a06      	ldr	r2, [sp, #24]
 80121a8:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121ac:	9907      	ldr	r1, [sp, #28]
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121ae:	1a9b      	subs	r3, r3, r2
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121b0:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121b4:	3301      	adds	r3, #1
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121b6:	1a52      	subs	r2, r2, r1
 80121b8:	3201      	adds	r2, #1
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121ba:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121be:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121c2:	105b      	asrs	r3, r3, #1
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121c4:	1052      	asrs	r2, r2, #1
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121c6:	425b      	negs	r3, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121c8:	4252      	negs	r2, r2
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121ca:	b29b      	uxth	r3, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121cc:	b292      	uxth	r2, r2
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121ce:	4498      	add	r8, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121d0:	4493      	add	fp, r2
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 80121d2:	444b      	add	r3, r9
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 80121d4:	fa0f f888 	sxth.w	r8, r8
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 80121d8:	b21b      	sxth	r3, r3
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 80121da:	fa0f fb8b 	sxth.w	fp, fp
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 80121de:	4415      	add	r5, r2
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 80121e0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 80121e4:	b22d      	sxth	r5, r5
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 80121e6:	f012 0102 	ands.w	r1, r2, #2
 80121ea:	f040 80dd 	bne.w	80123a8 <lv_img_event+0x664>
 80121ee:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80121f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_draw_img_dsc_t img_dsc;
                lv_draw_img_dsc_init(&img_dsc);
 80121f4:	a814      	add	r0, sp, #80	; 0x50
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80121f6:	4433      	add	r3, r6
 80121f8:	fa1f f983 	uxth.w	r9, r3
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80121fc:	9b08      	ldr	r3, [sp, #32]
 80121fe:	441e      	add	r6, r3
                lv_draw_img_dsc_init(&img_dsc);
 8012200:	f7f4 fcf3 	bl	8006bea <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 8012204:	4620      	mov	r0, r4
 8012206:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012208:	aa14      	add	r2, sp, #80	; 0x50
 801220a:	f7f0 ff6a 	bl	80030e2 <lv_obj_init_draw_img_dsc>

                img_dsc.zoom = zoom_final;
                img_dsc.angle = angle_final;
                img_dsc.pivot.x = img->pivot.x;
 801220e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
                img_dsc.angle = angle_final;
 8012210:	9b05      	ldr	r3, [sp, #20]
                img_dsc.pivot.x = img->pivot.x;
 8012212:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
                img_dsc.pivot.y = img->pivot.y;
 8012216:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
                img_dsc.antialias = img->antialias;
 8012218:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
                img_dsc.pivot.y = img->pivot.y;
 801221c:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
                img_dsc.antialias = img->antialias;
 8012220:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                img_dsc.angle = angle_final;
 8012224:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
                img_dsc.antialias = img->antialias;
 8012228:	09d2      	lsrs	r2, r2, #7
 801222a:	f362 0100 	bfi	r1, r2, #0, #1

                lv_area_t img_clip_area;
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8012234:	b2b6      	uxth	r6, r6
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8012236:	441a      	add	r2, r3
 8012238:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801223c:	9b04      	ldr	r3, [sp, #16]
 801223e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
                img_dsc.zoom = zoom_final;
 8012242:	f8ad a052 	strh.w	sl, [sp, #82]	; 0x52
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8012246:	441a      	add	r2, r3
 8012248:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
                img_clip_area.x2 = bg_coords.x2 - pright;
 801224c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
                img_clip_area.y2 = bg_coords.y2 - pbottom;
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012250:	f8d7 a008 	ldr.w	sl, [r7, #8]
                img_clip_area.x2 = bg_coords.x2 - pright;
 8012254:	eba2 0209 	sub.w	r2, r2, r9
 8012258:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801225c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
                img_dsc.antialias = img->antialias;
 8012260:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8012264:	1b92      	subs	r2, r2, r6
 8012266:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46

                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801226a:	aa10      	add	r2, sp, #64	; 0x40
 801226c:	4651      	mov	r1, sl
 801226e:	4610      	mov	r0, r2
 8012270:	f7fd fa39 	bl	800f6e6 <_lv_area_intersect>
 8012274:	2800      	cmp	r0, #0
 8012276:	f43f ad87 	beq.w	8011d88 <lv_img_event+0x44>
            img_max_area.y1 += ptop;
 801227a:	9b04      	ldr	r3, [sp, #16]
                draw_ctx->clip_area = &img_clip_area;
 801227c:	aa10      	add	r2, sp, #64	; 0x40
            img_max_area.y1 += ptop;
 801227e:	445b      	add	r3, fp
                draw_ctx->clip_area = &img_clip_area;
 8012280:	60ba      	str	r2, [r7, #8]

                lv_area_t coords_tmp;
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 8012282:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
            img_max_area.y1 += ptop;
 8012284:	fa1f fb83 	uxth.w	fp, r3
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 8012288:	445a      	add	r2, fp
 801228a:	b290      	uxth	r0, r2
 801228c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801228e:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8012290:	fa0f fb8b 	sxth.w	fp, fp
 8012294:	4593      	cmp	fp, r2
 8012296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012298:	bfb8      	it	lt
 801229a:	1a40      	sublt	r0, r0, r1
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801229c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80122a0:	bfb8      	it	lt
 80122a2:	f8ad 004a 	strhlt.w	r0, [sp, #74]	; 0x4a
            img_max_area.x2 -= pright;
 80122a6:	eba3 0909 	sub.w	r9, r3, r9
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80122aa:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            img_max_area.x1 += pleft;
 80122ae:	9a03      	ldr	r2, [sp, #12]
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80122b0:	3b01      	subs	r3, #1
            img_max_area.x1 += pleft;
 80122b2:	4442      	add	r2, r8
            img_max_area.y2 -= pbottom;
 80122b4:	1bad      	subs	r5, r5, r6
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80122b6:	4419      	add	r1, r3
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;

                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 80122b8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
            img_max_area.x1 += pleft;
 80122bc:	fa1f fb82 	uxth.w	fp, r2
 80122c0:	fa0f f882 	sxth.w	r8, r2
            img_max_area.x2 -= pright;
 80122c4:	fa0f f989 	sxth.w	r9, r9
            img_max_area.y2 -= pbottom;
 80122c8:	b22d      	sxth	r5, r5
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80122ca:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80122ce:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80122d2:	42ab      	cmp	r3, r5
 80122d4:	db34      	blt.n	8012340 <lv_img_event+0x5fc>
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
 80122d6:	f8c7 a008 	str.w	sl, [r7, #8]
 80122da:	e555      	b.n	8011d88 <lv_img_event+0x44>
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 80122dc:	ab0c      	add	r3, sp, #48	; 0x30
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	fa1f f38a 	uxth.w	r3, sl
 80122e4:	464a      	mov	r2, r9
 80122e6:	4629      	mov	r1, r5
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	a80e      	add	r0, sp, #56	; 0x38
 80122ec:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80122f0:	f7f6 fa81 	bl	80087f6 <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += obj->coords.x1;
 80122f4:	8aa2      	ldrh	r2, [r4, #20]
 80122f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            bg_coords.y1 += obj->coords.y1;
 80122fa:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
            bg_coords.x1 += obj->coords.x1;
 80122fe:	4413      	add	r3, r2
 8012300:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
            bg_coords.y1 += obj->coords.y1;
 8012304:	8ae3      	ldrh	r3, [r4, #22]
 8012306:	4419      	add	r1, r3
 8012308:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
            bg_coords.x2 += obj->coords.x1;
 801230c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8012310:	440a      	add	r2, r1
 8012312:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
            bg_coords.y2 += obj->coords.y1;
 8012316:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801231a:	4413      	add	r3, r2
 801231c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012320:	e6f1      	b.n	8012106 <lv_img_event+0x3c2>
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8012322:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012326:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 801232a:	f8bd 503e 	ldrh.w	r5, [sp, #62]	; 0x3e
 801232e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8012332:	eba3 0309 	sub.w	r3, r3, r9
 8012336:	4443      	add	r3, r8
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8012338:	1aad      	subs	r5, r5, r2
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 801233a:	b21b      	sxth	r3, r3
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 801233c:	445d      	add	r5, fp
 801233e:	e74f      	b.n	80121e0 <lv_img_event+0x49c>
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 8012340:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8012342:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012344:	445b      	add	r3, fp
 8012346:	b299      	uxth	r1, r3
 8012348:	b21b      	sxth	r3, r3
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801234a:	4598      	cmp	r8, r3
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 801234c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8012350:	bfbc      	itt	lt
 8012352:	1a8b      	sublt	r3, r1, r2
 8012354:	f8ad 3048 	strhlt.w	r3, [sp, #72]	; 0x48
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 8012358:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801235c:	3b01      	subs	r3, #1
 801235e:	441a      	add	r2, r3
 8012360:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8012364:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8012368:	454b      	cmp	r3, r9
 801236a:	db0c      	blt.n	8012386 <lv_img_event+0x642>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 801236c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012370:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8012374:	441a      	add	r2, r3
 8012376:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801237a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801237e:	4413      	add	r3, r2
 8012380:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8012384:	e7a3      	b.n	80122ce <lv_img_event+0x58a>
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8012386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012388:	4638      	mov	r0, r7
 801238a:	aa12      	add	r2, sp, #72	; 0x48
 801238c:	a914      	add	r1, sp, #80	; 0x50
 801238e:	f7f4 fc7b 	bl	8006c88 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8012392:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012396:	4433      	add	r3, r6
 8012398:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 801239c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80123a0:	4433      	add	r3, r6
 80123a2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80123a6:	e7dd      	b.n	8012364 <lv_img_event+0x620>
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80123a8:	f002 0203 	and.w	r2, r2, #3
 80123ac:	2a02      	cmp	r2, #2
        lv_area_copy(&ori_coords, &obj->coords);
 80123ae:	f104 0514 	add.w	r5, r4, #20
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80123b2:	d110      	bne.n	80123d6 <lv_img_event+0x692>
                lv_draw_label_dsc_t label_dsc;
                lv_draw_label_dsc_init(&label_dsc);
 80123b4:	a814      	add	r0, sp, #80	; 0x50
 80123b6:	f7f4 fd7b 	bl	8006eb0 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80123ba:	4620      	mov	r0, r4
 80123bc:	aa14      	add	r2, sp, #80	; 0x50
 80123be:	2100      	movs	r1, #0
 80123c0:	f7f0 fe3f 	bl	8003042 <lv_obj_init_draw_label_dsc>

                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80123c4:	2300      	movs	r3, #0
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	462a      	mov	r2, r5
 80123ca:	4638      	mov	r0, r7
 80123cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123ce:	a914      	add	r1, sp, #80	; 0x50
 80123d0:	f7f4 fd8c 	bl	8006eec <lv_draw_label>
 80123d4:	e4d8      	b.n	8011d88 <lv_img_event+0x44>
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 80123d6:	2300      	movs	r3, #0
 80123d8:	462a      	mov	r2, r5
 80123da:	4619      	mov	r1, r3
 80123dc:	4638      	mov	r0, r7
 80123de:	f7f4 fc53 	bl	8006c88 <lv_draw_img>
 80123e2:	e4d1      	b.n	8011d88 <lv_img_event+0x44>
 80123e4:	0801a5b0 	.word	0x0801a5b0

080123e8 <lv_img_set_angle>:
{
 80123e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(angle < 0 || angle >= 3600) angle = angle % 3600;
 80123ec:	b28b      	uxth	r3, r1
 80123ee:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80123f2:	bf28      	it	cs
 80123f4:	f44f 6361 	movcs.w	r3, #3600	; 0xe10
{
 80123f8:	4688      	mov	r8, r1
    if(angle < 0 || angle >= 3600) angle = angle % 3600;
 80123fa:	bf24      	itt	cs
 80123fc:	fb91 f1f3 	sdivcs	r1, r1, r3
 8012400:	fb03 8811 	mlscs	r8, r3, r1, r8
    if(angle == img->angle) return;
 8012404:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    if(angle < 0 || angle >= 3600) angle = angle % 3600;
 8012406:	bf28      	it	cs
 8012408:	fa0f f888 	sxthcs.w	r8, r8
    if(angle == img->angle) return;
 801240c:	4598      	cmp	r8, r3
{
 801240e:	4604      	mov	r4, r0
    if(angle == img->angle) return;
 8012410:	d064      	beq.n	80124dc <lv_img_set_angle+0xf4>
    lv_coord_t transf_zoom = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 8012412:	f7ff fb9e 	bl	8011b52 <lv_obj_get_style_transform_zoom.constprop.0>
    transf_zoom = ((int32_t)transf_zoom * img->zoom) >> 8;
 8012416:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    _lv_img_buf_get_transformed_area(&a, w, h, transf_angle + img->angle, transf_zoom, &img->pivot);
 8012418:	f104 0a32 	add.w	sl, r4, #50	; 0x32
    transf_zoom = ((int32_t)transf_zoom * img->zoom) >> 8;
 801241c:	4346      	muls	r6, r0
    lv_coord_t transf_angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801241e:	4620      	mov	r0, r4
 8012420:	f7ff fb8f 	bl	8011b42 <lv_obj_get_style_transform_angle.constprop.0>
 8012424:	4605      	mov	r5, r0
    lv_obj_update_layout(obj);  /*Be sure the object's size is calculated*/
 8012426:	4620      	mov	r0, r4
 8012428:	f7f1 febc 	bl	80041a4 <lv_obj_update_layout>
    lv_coord_t w = lv_obj_get_width(obj);
 801242c:	4620      	mov	r0, r4
 801242e:	f7f1 f85c 	bl	80034ea <lv_obj_get_width>
 8012432:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8012434:	4620      	mov	r0, r4
 8012436:	f7f1 f85e 	bl	80034f6 <lv_obj_get_height>
 801243a:	4607      	mov	r7, r0
    _lv_img_buf_get_transformed_area(&a, w, h, transf_angle + img->angle, transf_zoom, &img->pivot);
 801243c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801243e:	b2ad      	uxth	r5, r5
    transf_zoom = ((int32_t)transf_zoom * img->zoom) >> 8;
 8012440:	1236      	asrs	r6, r6, #8
    _lv_img_buf_get_transformed_area(&a, w, h, transf_angle + img->angle, transf_zoom, &img->pivot);
 8012442:	b2b6      	uxth	r6, r6
 8012444:	442b      	add	r3, r5
 8012446:	4602      	mov	r2, r0
 8012448:	4649      	mov	r1, r9
 801244a:	b21b      	sxth	r3, r3
 801244c:	a802      	add	r0, sp, #8
 801244e:	e9cd 6a00 	strd	r6, sl, [sp]
 8012452:	f7f6 f9d0 	bl	80087f6 <_lv_img_buf_get_transformed_area>
    a.x1 += obj->coords.x1;
 8012456:	8aa2      	ldrh	r2, [r4, #20]
 8012458:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    a.y1 += obj->coords.y1;
 801245c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    a.x1 += obj->coords.x1;
 8012460:	4413      	add	r3, r2
 8012462:	f8ad 3008 	strh.w	r3, [sp, #8]
    a.y1 += obj->coords.y1;
 8012466:	8ae3      	ldrh	r3, [r4, #22]
    lv_obj_invalidate_area(obj, &a);
 8012468:	4620      	mov	r0, r4
    a.y1 += obj->coords.y1;
 801246a:	4419      	add	r1, r3
 801246c:	f8ad 100a 	strh.w	r1, [sp, #10]
    a.x2 += obj->coords.x1;
 8012470:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8012474:	440a      	add	r2, r1
 8012476:	f8ad 200c 	strh.w	r2, [sp, #12]
    a.y2 += obj->coords.y1;
 801247a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    lv_obj_invalidate_area(obj, &a);
 801247e:	a902      	add	r1, sp, #8
    a.y2 += obj->coords.y1;
 8012480:	4413      	add	r3, r2
 8012482:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_invalidate_area(obj, &a);
 8012486:	f7f1 f960 	bl	800374a <lv_obj_invalidate_area>
    lv_obj_refresh_ext_draw_size(obj);
 801248a:	4620      	mov	r0, r4
    img->angle = angle;
 801248c:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
    lv_obj_refresh_ext_draw_size(obj);
 8012490:	f7f0 feed 	bl	800326e <lv_obj_refresh_ext_draw_size>
    _lv_img_buf_get_transformed_area(&a, w, h, transf_angle + img->angle, transf_zoom, &img->pivot);
 8012494:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012496:	463a      	mov	r2, r7
 8012498:	442b      	add	r3, r5
 801249a:	4649      	mov	r1, r9
 801249c:	b21b      	sxth	r3, r3
 801249e:	a802      	add	r0, sp, #8
 80124a0:	e9cd 6a00 	strd	r6, sl, [sp]
 80124a4:	f7f6 f9a7 	bl	80087f6 <_lv_img_buf_get_transformed_area>
    a.x1 += obj->coords.x1;
 80124a8:	8aa2      	ldrh	r2, [r4, #20]
 80124aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    a.y1 += obj->coords.y1;
 80124ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    a.x1 += obj->coords.x1;
 80124b2:	4413      	add	r3, r2
 80124b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    a.y1 += obj->coords.y1;
 80124b8:	8ae3      	ldrh	r3, [r4, #22]
    lv_obj_invalidate_area(obj, &a);
 80124ba:	4620      	mov	r0, r4
    a.y1 += obj->coords.y1;
 80124bc:	4419      	add	r1, r3
 80124be:	f8ad 100a 	strh.w	r1, [sp, #10]
    a.x2 += obj->coords.x1;
 80124c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80124c6:	440a      	add	r2, r1
 80124c8:	f8ad 200c 	strh.w	r2, [sp, #12]
    a.y2 += obj->coords.y1;
 80124cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    lv_obj_invalidate_area(obj, &a);
 80124d0:	a902      	add	r1, sp, #8
    a.y2 += obj->coords.y1;
 80124d2:	4413      	add	r3, r2
 80124d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_invalidate_area(obj, &a);
 80124d8:	f7f1 f937 	bl	800374a <lv_obj_invalidate_area>
}
 80124dc:	b004      	add	sp, #16
 80124de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080124e2 <lv_label_dot_tmp_free>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80124e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80124e6:	b510      	push	{r4, lr}
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80124e8:	065b      	lsls	r3, r3, #25
{
 80124ea:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80124ec:	d503      	bpl.n	80124f6 <lv_label_dot_tmp_free+0x14>
 80124ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80124f0:	b108      	cbz	r0, 80124f6 <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 80124f2:	f7fd fc59 	bl	800fda8 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 80124f6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80124fa:	f36f 1386 	bfc	r3, #6, #1
 80124fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8012502:	2300      	movs	r3, #0
 8012504:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8012506:	bd10      	pop	{r4, pc}

08012508 <lv_label_destructor>:
{
 8012508:	b510      	push	{r4, lr}
 801250a:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 801250c:	4608      	mov	r0, r1
 801250e:	f7ff ffe8 	bl	80124e2 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8012512:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012516:	071b      	lsls	r3, r3, #28
 8012518:	d402      	bmi.n	8012520 <lv_label_destructor+0x18>
 801251a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801251c:	f7fd fc44 	bl	800fda8 <lv_mem_free>
    label->text = NULL;
 8012520:	2300      	movs	r3, #0
 8012522:	6263      	str	r3, [r4, #36]	; 0x24
}
 8012524:	bd10      	pop	{r4, pc}

08012526 <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8012526:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 801252a:	f7f1 b928 	b.w	800377e <lv_obj_invalidate>

0801252e <set_ofs_x_anim>:
    label->offset.x    = v;
 801252e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 8012532:	f7f1 b924 	b.w	800377e <lv_obj_invalidate>
	...

08012538 <lv_label_revert_dots>:
{
 8012538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801253a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801253e:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8012540:	f003 0307 	and.w	r3, r3, #7
 8012544:	2b01      	cmp	r3, #1
 8012546:	d121      	bne.n	801258c <lv_label_revert_dots+0x54>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8012548:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801254a:	1c4a      	adds	r2, r1, #1
 801254c:	d01e      	beq.n	801258c <lv_label_revert_dots+0x54>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801254e:	4b11      	ldr	r3, [pc, #68]	; (8012594 <lv_label_revert_dots+0x5c>)
 8012550:	3903      	subs	r1, #3
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012556:	4798      	blx	r3
    while(label->text[byte_i + i] != '\0') {
 8012558:	2100      	movs	r1, #0
    if(label->dot_tmp_alloc) {
 801255a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801255e:	065b      	lsls	r3, r3, #25
        return label->dot.tmp_ptr;
 8012560:	bf4c      	ite	mi
 8012562:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
        return label->dot.tmp;
 8012564:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 8012568:	b2cd      	uxtb	r5, r1
 801256a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801256c:	1943      	adds	r3, r0, r5
 801256e:	f812 c003 	ldrb.w	ip, [r2, r3]
 8012572:	5d75      	ldrb	r5, [r6, r5]
 8012574:	18d7      	adds	r7, r2, r3
 8012576:	3101      	adds	r1, #1
 8012578:	f1bc 0f00 	cmp.w	ip, #0
 801257c:	d107      	bne.n	801258e <lv_label_revert_dots+0x56>
    lv_label_dot_tmp_free(obj);
 801257e:	4620      	mov	r0, r4
    label->text[byte_i + i] = dot_tmp[i];
 8012580:	703d      	strb	r5, [r7, #0]
    lv_label_dot_tmp_free(obj);
 8012582:	f7ff ffae 	bl	80124e2 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 8012586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801258a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 801258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        label->text[byte_i + i] = dot_tmp[i];
 801258e:	54d5      	strb	r5, [r2, r3]
        i++;
 8012590:	e7ea      	b.n	8012568 <lv_label_revert_dots+0x30>
 8012592:	bf00      	nop
 8012594:	20000018 	.word	0x20000018

08012598 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8012598:	f241 425b 	movw	r2, #5211	; 0x145b
 801259c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801259e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80125a0:	f7f2 fef2 	bl	8005388 <lv_obj_get_style_prop>
}
 80125a4:	b200      	sxth	r0, r0
 80125a6:	bd08      	pop	{r3, pc}

080125a8 <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80125a8:	f241 425a 	movw	r2, #5210	; 0x145a
 80125ac:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 80125ae:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80125b0:	f7f2 feea 	bl	8005388 <lv_obj_get_style_prop>
}
 80125b4:	b200      	sxth	r0, r0
 80125b6:	bd08      	pop	{r3, pc}

080125b8 <lv_obj_get_style_text_font.constprop.0>:
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 80125b8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80125ba:	f241 4259 	movw	r2, #5209	; 0x1459
 80125be:	2100      	movs	r1, #0
 80125c0:	f7f2 fee2 	bl	8005388 <lv_obj_get_style_prop>
}
 80125c4:	bd08      	pop	{r3, pc}

080125c6 <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80125c6:	f241 0201 	movw	r2, #4097	; 0x1001
 80125ca:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 80125cc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80125ce:	f7f2 fedb 	bl	8005388 <lv_obj_get_style_prop>
}
 80125d2:	b200      	sxth	r0, r0
 80125d4:	bd08      	pop	{r3, pc}
	...

080125d8 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80125dc:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80125e0:	b091      	sub	sp, #68	; 0x44
 80125e2:	460d      	mov	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80125e4:	f641 0212 	movw	r2, #6162	; 0x1812
 80125e8:	2100      	movs	r1, #0
 80125ea:	4604      	mov	r4, r0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80125ec:	9305      	str	r3, [sp, #20]
 80125ee:	f7f2 fecb 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80125f2:	f641 0210 	movw	r2, #6160	; 0x1810
 80125f6:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80125f8:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80125fa:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80125fc:	886d      	ldrh	r5, [r5, #2]
 80125fe:	f7f2 fec3 	bl	8005388 <lv_obj_get_style_prop>
 8012602:	1a2d      	subs	r5, r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8012604:	a90e      	add	r1, sp, #56	; 0x38
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8012606:	b22b      	sxth	r3, r5
    lv_obj_get_content_coords(obj, &txt_coords);
 8012608:	4620      	mov	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801260a:	9306      	str	r3, [sp, #24]
    lv_obj_get_content_coords(obj, &txt_coords);
 801260c:	f7f0 ffa5 	bl	800355a <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012610:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012614:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8012618:	3301      	adds	r3, #1
 801261a:	1a9b      	subs	r3, r3, r2
 801261c:	b21b      	sxth	r3, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801261e:	4620      	mov	r0, r4
 8012620:	9307      	str	r3, [sp, #28]
    return label->text;
 8012622:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8012626:	f7ff ffc7 	bl	80125b8 <lv_obj_get_style_text_font.constprop.0>
 801262a:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801262c:	4620      	mov	r0, r4
 801262e:	f7ff ffb3 	bl	8012598 <lv_obj_get_style_text_line_space.constprop.0>
 8012632:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8012634:	4620      	mov	r0, r4
 8012636:	f7ff ffb7 	bl	80125a8 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801263a:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801263e:	4683      	mov	fp, r0
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 8012640:	9303      	str	r3, [sp, #12]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012642:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8012646:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012648:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801264a:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801264e:	bf48      	it	mi
 8012650:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8012654:	f7ff ffb7 	bl	80125c6 <lv_obj_get_style_width.constprop.0>
 8012658:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801265c:	4298      	cmp	r0, r3
 801265e:	d105      	bne.n	801266c <lv_label_get_letter_on.part.0+0x94>
 8012660:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8012664:	075b      	lsls	r3, r3, #29
 8012666:	bf58      	it	pl
 8012668:	f047 0704 	orrpl.w	r7, r7, #4
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801266c:	4620      	mov	r0, r4
 801266e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    lv_coord_t y             = 0;
 8012670:	2400      	movs	r4, #0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8012672:	2100      	movs	r1, #0
 8012674:	f7f3 fc05 	bl	8005e82 <lv_obj_calculate_style_text_align>
    uint32_t line_start      = 0;
 8012678:	4626      	mov	r6, r4
        y += letter_height + line_space;
 801267a:	9b03      	ldr	r3, [sp, #12]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801267c:	9004      	str	r0, [sp, #16]
        y += letter_height + line_space;
 801267e:	442b      	add	r3, r5
 8012680:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 8012682:	f819 3006 	ldrb.w	r3, [r9, r6]
 8012686:	eb09 0a06 	add.w	sl, r9, r6
 801268a:	b90b      	cbnz	r3, 8012690 <lv_label_get_letter_on.part.0+0xb8>
 801268c:	4635      	mov	r5, r6
 801268e:	e01b      	b.n	80126c8 <lv_label_get_letter_on.part.0+0xf0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8012690:	2300      	movs	r3, #0
 8012692:	465a      	mov	r2, fp
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	4641      	mov	r1, r8
 8012698:	9b07      	ldr	r3, [sp, #28]
 801269a:	4650      	mov	r0, sl
 801269c:	9701      	str	r7, [sp, #4]
 801269e:	f7ff f827 	bl	80116f0 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 80126a2:	9b03      	ldr	r3, [sp, #12]
 80126a4:	9a06      	ldr	r2, [sp, #24]
 80126a6:	18e3      	adds	r3, r4, r3
 80126a8:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80126aa:	eb00 0506 	add.w	r5, r0, r6
        if(pos.y <= y + letter_height) {
 80126ae:	dc6a      	bgt.n	8012786 <lv_label_get_letter_on.part.0+0x1ae>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80126b0:	4b44      	ldr	r3, [pc, #272]	; (80127c4 <lv_label_get_letter_on.part.0+0x1ec>)
 80126b2:	4648      	mov	r0, r9
 80126b4:	681b      	ldr	r3, [r3, #0]
            uint32_t tmp = new_line_start;
 80126b6:	950d      	str	r5, [sp, #52]	; 0x34
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80126b8:	a90d      	add	r1, sp, #52	; 0x34
 80126ba:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80126bc:	280a      	cmp	r0, #10
 80126be:	d003      	beq.n	80126c8 <lv_label_get_letter_on.part.0+0xf0>
 80126c0:	f819 3005 	ldrb.w	r3, [r9, r5]
 80126c4:	b903      	cbnz	r3, 80126c8 <lv_label_get_letter_on.part.0+0xf0>
 80126c6:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 80126c8:	9b04      	ldr	r3, [sp, #16]
 80126ca:	2b02      	cmp	r3, #2
 80126cc:	d160      	bne.n	8012790 <lv_label_get_letter_on.part.0+0x1b8>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80126ce:	465b      	mov	r3, fp
 80126d0:	4642      	mov	r2, r8
 80126d2:	4650      	mov	r0, sl
 80126d4:	9700      	str	r7, [sp, #0]
 80126d6:	1ba9      	subs	r1, r5, r6
 80126d8:	f7ff f934 	bl	8011944 <lv_txt_get_width>
 80126dc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80126e0:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80126e4:	3301      	adds	r3, #1
 80126e6:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80126e8:	b21c      	sxth	r4, r3
 80126ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80126ee:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80126f2:	4423      	add	r3, r4
 80126f4:	1044      	asrs	r4, r0, #1
 80126f6:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80126fa:	b21c      	sxth	r4, r3
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80126fc:	2300      	movs	r3, #0
 80126fe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    uint32_t i = 0;
 8012702:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 8012704:	2d00      	cmp	r5, #0
 8012706:	d030      	beq.n	801276a <lv_label_get_letter_on.part.0+0x192>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012708:	9a05      	ldr	r2, [sp, #20]
 801270a:	9908      	ldr	r1, [sp, #32]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801270c:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012710:	1a52      	subs	r2, r2, r1
 8012712:	b212      	sxth	r2, r2
    uint32_t i_act = i;
 8012714:	e9cd 3203 	strd	r3, r2, [sp, #12]
        while(i + line_start < new_line_start) {
 8012718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801271a:	4433      	add	r3, r6
 801271c:	429d      	cmp	r5, r3
 801271e:	d924      	bls.n	801276a <lv_label_get_letter_on.part.0+0x192>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8012720:	4650      	mov	r0, sl
 8012722:	ab0b      	add	r3, sp, #44	; 0x2c
 8012724:	aa0d      	add	r2, sp, #52	; 0x34
 8012726:	a90c      	add	r1, sp, #48	; 0x30
 8012728:	f7ff f8f2 	bl	8011910 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801272c:	b147      	cbz	r7, 8012740 <lv_label_get_letter_on.part.0+0x168>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801272e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012730:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8012734:	f81a 1003 	ldrb.w	r1, [sl, r3]
 8012738:	f7fe ffbe 	bl	80116b8 <_lv_txt_is_cmd>
 801273c:	2800      	cmp	r0, #0
 801273e:	d1eb      	bne.n	8012718 <lv_label_get_letter_on.part.0+0x140>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8012740:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012744:	4640      	mov	r0, r8
 8012746:	f7fc fb55 	bl	800edf4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801274a:	9a04      	ldr	r2, [sp, #16]
 801274c:	b203      	sxth	r3, r0
 801274e:	4423      	add	r3, r4
 8012750:	429a      	cmp	r2, r3
 8012752:	db08      	blt.n	8012766 <lv_label_get_letter_on.part.0+0x18e>
 8012754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012756:	18f2      	adds	r2, r6, r3
 8012758:	4295      	cmp	r5, r2
 801275a:	d004      	beq.n	8012766 <lv_label_get_letter_on.part.0+0x18e>
 801275c:	9903      	ldr	r1, [sp, #12]
 801275e:	eb09 0206 	add.w	r2, r9, r6
 8012762:	5c52      	ldrb	r2, [r2, r1]
 8012764:	bb4a      	cbnz	r2, 80127ba <lv_label_get_letter_on.part.0+0x1e2>
                i = i_act;
 8012766:	9b03      	ldr	r3, [sp, #12]
 8012768:	930b      	str	r3, [sp, #44]	; 0x2c
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801276a:	4d17      	ldr	r5, [pc, #92]	; (80127c8 <lv_label_get_letter_on.part.0+0x1f0>)
 801276c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801276e:	682b      	ldr	r3, [r5, #0]
 8012770:	4650      	mov	r0, sl
 8012772:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8012774:	4631      	mov	r1, r6
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 8012776:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	4648      	mov	r0, r9
 801277c:	4798      	blx	r3
}
 801277e:	4420      	add	r0, r4
 8012780:	b011      	add	sp, #68	; 0x44
 8012782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 8012786:	9b09      	ldr	r3, [sp, #36]	; 0x24
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8012788:	462e      	mov	r6, r5
 801278a:	441c      	add	r4, r3
 801278c:	b224      	sxth	r4, r4
        line_start = new_line_start;
 801278e:	e778      	b.n	8012682 <lv_label_get_letter_on.part.0+0xaa>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8012790:	9b04      	ldr	r3, [sp, #16]
 8012792:	2b03      	cmp	r3, #3
 8012794:	d10f      	bne.n	80127b6 <lv_label_get_letter_on.part.0+0x1de>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8012796:	465b      	mov	r3, fp
 8012798:	4642      	mov	r2, r8
 801279a:	4650      	mov	r0, sl
 801279c:	9700      	str	r7, [sp, #0]
 801279e:	1ba9      	subs	r1, r5, r6
 80127a0:	f7ff f8d0 	bl	8011944 <lv_txt_get_width>
 80127a4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 80127a8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80127ac:	3401      	adds	r4, #1
 80127ae:	1ae4      	subs	r4, r4, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 80127b0:	1a24      	subs	r4, r4, r0
 80127b2:	b224      	sxth	r4, r4
 80127b4:	e7a2      	b.n	80126fc <lv_label_get_letter_on.part.0+0x124>
    lv_coord_t x = 0;
 80127b6:	2400      	movs	r4, #0
 80127b8:	e7a0      	b.n	80126fc <lv_label_get_letter_on.part.0+0x124>
            x += letter_space;
 80127ba:	445c      	add	r4, fp
 80127bc:	4404      	add	r4, r0
 80127be:	b224      	sxth	r4, r4
            i_act = i;
 80127c0:	9303      	str	r3, [sp, #12]
 80127c2:	e7a9      	b.n	8012718 <lv_label_get_letter_on.part.0+0x140>
 80127c4:	20000024 	.word	0x20000024
 80127c8:	2000001c 	.word	0x2000001c

080127cc <lv_label_refr_text>:
{
 80127cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(label->text == NULL) return;
 80127d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80127d2:	4604      	mov	r4, r0
 80127d4:	b099      	sub	sp, #100	; 0x64
    if(label->text == NULL) return;
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f000 80dd 	beq.w	8012996 <lv_label_refr_text+0x1ca>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 80127dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    lv_obj_get_content_coords(obj, &txt_coords);
 80127e0:	a906      	add	r1, sp, #24
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 80127e2:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 80127e4:	f7f0 feb9 	bl	800355a <lv_obj_get_content_coords>
 80127e8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80127ec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80127f0:	4620      	mov	r0, r4
 80127f2:	3701      	adds	r7, #1
 80127f4:	1aff      	subs	r7, r7, r3
 80127f6:	f7ff fedf 	bl	80125b8 <lv_obj_get_style_text_font.constprop.0>
 80127fa:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7ff fecb 	bl	8012598 <lv_obj_get_style_text_line_space.constprop.0>
 8012802:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8012804:	4620      	mov	r0, r4
 8012806:	f7ff fecf 	bl	80125a8 <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801280a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801280e:	4680      	mov	r8, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012810:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012812:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8012816:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012818:	bf48      	it	mi
 801281a:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801281e:	f7ff fed2 	bl	80125c6 <lv_obj_get_style_width.constprop.0>
 8012822:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8012826:	4298      	cmp	r0, r3
 8012828:	b23f      	sxth	r7, r7
 801282a:	d105      	bne.n	8012838 <lv_label_refr_text+0x6c>
 801282c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8012830:	075b      	lsls	r3, r3, #29
 8012832:	bf58      	it	pl
 8012834:	f049 0904 	orrpl.w	r9, r9, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8012838:	4643      	mov	r3, r8
 801283a:	4632      	mov	r2, r6
 801283c:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8012840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012842:	a804      	add	r0, sp, #16
 8012844:	9500      	str	r5, [sp, #0]
 8012846:	f7ff f8c0 	bl	80119ca <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801284a:	4620      	mov	r0, r4
 801284c:	f7f0 fed1 	bl	80035f2 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8012850:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 8012854:	f009 0907 	and.w	r9, r9, #7
 8012858:	f1b9 0f02 	cmp.w	r9, #2
 801285c:	f040 80a9 	bne.w	80129b2 <lv_label_refr_text+0x1e6>
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8012860:	2266      	movs	r2, #102	; 0x66
 8012862:	2100      	movs	r1, #0
 8012864:	4620      	mov	r0, r4
 8012866:	f7f2 fd8f 	bl	8005388 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801286a:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801286c:	b947      	cbnz	r7, 8012880 <lv_label_refr_text+0xb4>
 801286e:	4620      	mov	r0, r4
 8012870:	f7f3 fb3e 	bl	8005ef0 <lv_obj_get_disp>
 8012874:	f7fc fcdc 	bl	800f230 <lv_disp_get_dpi>
 8012878:	2703      	movs	r7, #3
 801287a:	fb90 f7f7 	sdiv	r7, r0, r7
 801287e:	b2bf      	uxth	r7, r7
        lv_anim_init(&a);
 8012880:	a808      	add	r0, sp, #32
 8012882:	f7fc fe0d 	bl	800f4a0 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8012886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801288a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    a->playback_delay = delay;
 801288e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8012892:	9314      	str	r3, [sp, #80]	; 0x50
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 8012894:	9316      	str	r3, [sp, #88]	; 0x58
 8012896:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801289a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801289e:	3301      	adds	r3, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 80128a0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80128a4:	1a5b      	subs	r3, r3, r1
 80128a6:	b21b      	sxth	r3, r3
 80128a8:	429a      	cmp	r2, r3
 80128aa:	f04f 0500 	mov.w	r5, #0
    a->var = var;
 80128ae:	9408      	str	r4, [sp, #32]
 80128b0:	dd76      	ble.n	80129a0 <lv_label_refr_text+0x1d4>
    a->exec_cb = exec_cb;
 80128b2:	498e      	ldr	r1, [pc, #568]	; (8012aec <lv_label_refr_text+0x320>)
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 80128b4:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 80128b6:	4620      	mov	r0, r4
    a->current_value = start;
 80128b8:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
    a->end_value = end;
 80128bc:	9311      	str	r3, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
 80128be:	9109      	str	r1, [sp, #36]	; 0x24
 80128c0:	f7fc fe76 	bl	800f5b0 <lv_anim_get>
            if(anim_cur) {
 80128c4:	2800      	cmp	r0, #0
 80128c6:	d069      	beq.n	801299c <lv_label_refr_text+0x1d0>
                act_time = anim_cur->act_time;
 80128c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 80128ca:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80128ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
            if(act_time < a.time) {
 80128d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128d4:	429a      	cmp	r2, r3
 80128d6:	dd10      	ble.n	80128fa <lv_label_refr_text+0x12e>
                a.act_time = act_time;      /*To keep the old position*/
 80128d8:	9313      	str	r3, [sp, #76]	; 0x4c
                a.early_apply = 0;
 80128da:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 80128de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128e0:	f36f 0300 	bfc	r3, #0, #1
 80128e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80128e6:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                if(playback_now) {
 80128ea:	b130      	cbz	r0, 80128fa <lv_label_refr_text+0x12e>
                    a.playback_now = 1;
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	f043 0302 	orr.w	r3, r3, #2
 80128f2:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                    a.start_value = a.end_value;
 80128f6:	910f      	str	r1, [sp, #60]	; 0x3c
                    a.end_value   = tmp;
 80128f8:	9211      	str	r2, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80128fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80128fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80128fe:	4638      	mov	r0, r7
 8012900:	f7fc fe6e 	bl	800f5e0 <lv_anim_speed_to_time>
    a->time = duration;
 8012904:	9012      	str	r0, [sp, #72]	; 0x48
    a->playback_time = time;
 8012906:	9015      	str	r0, [sp, #84]	; 0x54
            lv_anim_start(&a);
 8012908:	a808      	add	r0, sp, #32
 801290a:	f7fc fe0f 	bl	800f52c <lv_anim_start>
            hor_anim = true;
 801290e:	2501      	movs	r5, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012910:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012914:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8012918:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801291a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801291e:	1a5b      	subs	r3, r3, r1
 8012920:	b21b      	sxth	r3, r3
 8012922:	429a      	cmp	r2, r3
 8012924:	f340 80c7 	ble.w	8012ab6 <lv_label_refr_text+0x2ea>
 8012928:	2d00      	cmp	r5, #0
 801292a:	f040 80c4 	bne.w	8012ab6 <lv_label_refr_text+0x2ea>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801292e:	1a9b      	subs	r3, r3, r2
 8012930:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 8012934:	496e      	ldr	r1, [pc, #440]	; (8012af0 <lv_label_refr_text+0x324>)
 8012936:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8012938:	4620      	mov	r0, r4
    a->current_value = start;
 801293a:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
    a->end_value = end;
 801293e:	9311      	str	r3, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
 8012940:	9109      	str	r1, [sp, #36]	; 0x24
 8012942:	f7fc fe35 	bl	800f5b0 <lv_anim_get>
            if(anim_cur) {
 8012946:	2800      	cmp	r0, #0
 8012948:	d031      	beq.n	80129ae <lv_label_refr_text+0x1e2>
                playback_now = anim_cur->playback_now;
 801294a:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
                act_time = anim_cur->act_time;
 801294e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 8012950:	f3c5 0540 	ubfx	r5, r5, #1, #1
            if(act_time < a.time) {
 8012954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012956:	429a      	cmp	r2, r3
 8012958:	dd10      	ble.n	801297c <lv_label_refr_text+0x1b0>
                a.act_time = act_time;      /*To keep the old position*/
 801295a:	9313      	str	r3, [sp, #76]	; 0x4c
                a.early_apply = 0;
 801295c:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 8012960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012962:	f36f 0300 	bfc	r3, #0, #1
 8012966:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012968:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                if(playback_now) {
 801296c:	b135      	cbz	r5, 801297c <lv_label_refr_text+0x1b0>
                    a.playback_now = 1;
 801296e:	b2db      	uxtb	r3, r3
 8012970:	f043 0302 	orr.w	r3, r3, #2
 8012974:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                    a.start_value = a.end_value;
 8012978:	910f      	str	r1, [sp, #60]	; 0x3c
                    a.end_value   = tmp;
 801297a:	9211      	str	r2, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801297c:	4638      	mov	r0, r7
 801297e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012982:	f7fc fe2d 	bl	800f5e0 <lv_anim_speed_to_time>
    a->time = duration;
 8012986:	9012      	str	r0, [sp, #72]	; 0x48
    a->playback_time = time;
 8012988:	9015      	str	r0, [sp, #84]	; 0x54
            lv_anim_start(&a);
 801298a:	a808      	add	r0, sp, #32
 801298c:	f7fc fdce 	bl	800f52c <lv_anim_start>
    lv_obj_invalidate(obj);
 8012990:	4620      	mov	r0, r4
 8012992:	f7f0 fef4 	bl	800377e <lv_obj_invalidate>
}
 8012996:	b019      	add	sp, #100	; 0x64
 8012998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int32_t act_time = 0;
 801299c:	4603      	mov	r3, r0
 801299e:	e798      	b.n	80128d2 <lv_label_refr_text+0x106>
            lv_anim_del(obj, set_ofs_x_anim);
 80129a0:	4620      	mov	r0, r4
 80129a2:	4952      	ldr	r1, [pc, #328]	; (8012aec <lv_label_refr_text+0x320>)
 80129a4:	f7fc fd96 	bl	800f4d4 <lv_anim_del>
            label->offset.x = 0;
 80129a8:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 80129ac:	e7b0      	b.n	8012910 <lv_label_refr_text+0x144>
            int32_t act_time = 0;
 80129ae:	462b      	mov	r3, r5
 80129b0:	e7d0      	b.n	8012954 <lv_label_refr_text+0x188>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 80129b2:	f1b9 0f03 	cmp.w	r9, #3
 80129b6:	f040 8086 	bne.w	8012ac6 <lv_label_refr_text+0x2fa>
 80129ba:	2266      	movs	r2, #102	; 0x66
 80129bc:	2100      	movs	r1, #0
 80129be:	4620      	mov	r0, r4
 80129c0:	f7f2 fce2 	bl	8005388 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80129c4:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80129c6:	b93f      	cbnz	r7, 80129d8 <lv_label_refr_text+0x20c>
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7f3 fa91 	bl	8005ef0 <lv_obj_get_disp>
 80129ce:	f7fc fc2f 	bl	800f230 <lv_disp_get_dpi>
 80129d2:	fb90 f7f9 	sdiv	r7, r0, r9
 80129d6:	b2bf      	uxth	r7, r7
        lv_anim_init(&a);
 80129d8:	a808      	add	r0, sp, #32
 80129da:	f7fc fd61 	bl	800f4a0 <lv_anim_init>
    a->repeat_cnt = cnt;
 80129de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129e2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80129e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80129ea:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80129ee:	3301      	adds	r3, #1
 80129f0:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 80129f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80129f6:	b21b      	sxth	r3, r3
 80129f8:	429a      	cmp	r2, r3
    a->var = var;
 80129fa:	9408      	str	r4, [sp, #32]
 80129fc:	dd53      	ble.n	8012aa6 <lv_label_refr_text+0x2da>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 80129fe:	2220      	movs	r2, #32
 8012a00:	4630      	mov	r0, r6
 8012a02:	4611      	mov	r1, r2
 8012a04:	f7fc f9f6 	bl	800edf4 <lv_font_get_glyph_width>
    a->start_value = start;
 8012a08:	2100      	movs	r1, #0
 8012a0a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    a->exec_cb = exec_cb;
 8012a0e:	4d37      	ldr	r5, [pc, #220]	; (8012aec <lv_label_refr_text+0x320>)
 8012a10:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8012a14:	1a82      	subs	r2, r0, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8012a16:	4638      	mov	r0, r7
    a->current_value = start;
 8012a18:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    a->end_value = end;
 8012a1c:	9211      	str	r2, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
 8012a1e:	9509      	str	r5, [sp, #36]	; 0x24
 8012a20:	f7fc fdde 	bl	800f5e0 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8012a24:	4629      	mov	r1, r5
    a->time = duration;
 8012a26:	9012      	str	r0, [sp, #72]	; 0x48
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f7fc fdc1 	bl	800f5b0 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8012a2e:	b100      	cbz	r0, 8012a32 <lv_label_refr_text+0x266>
 8012a30:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 8012a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
            hor_anim = true;
 8012a34:	2501      	movs	r5, #1
            if(act_time < a.time) {
 8012a36:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8012a38:	bfc2      	ittt	gt
 8012a3a:	f89d 305e 	ldrbgt.w	r3, [sp, #94]	; 0x5e
                a.act_time = act_time;      /*To keep the old position*/
 8012a3e:	9013      	strgt	r0, [sp, #76]	; 0x4c
                a.early_apply = 0;
 8012a40:	f36f 0300 	bfcgt	r3, #0, #1
            lv_anim_start(&a);
 8012a44:	a808      	add	r0, sp, #32
                a.early_apply = 0;
 8012a46:	bfc8      	it	gt
 8012a48:	f88d 305e 	strbgt.w	r3, [sp, #94]	; 0x5e
            lv_anim_start(&a);
 8012a4c:	f7fc fd6e 	bl	800f52c <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012a50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012a54:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8012a58:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8012a5a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8012a5e:	1a5b      	subs	r3, r3, r1
 8012a60:	b21b      	sxth	r3, r3
 8012a62:	429a      	cmp	r2, r3
 8012a64:	dd27      	ble.n	8012ab6 <lv_label_refr_text+0x2ea>
 8012a66:	bb35      	cbnz	r5, 8012ab6 <lv_label_refr_text+0x2ea>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8012a68:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8012a6c:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 8012a6e:	4e20      	ldr	r6, [pc, #128]	; (8012af0 <lv_label_refr_text+0x324>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8012a70:	4629      	mov	r1, r5
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8012a72:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8012a74:	4638      	mov	r0, r7
    a->current_value = start;
 8012a76:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
    a->end_value = end;
 8012a7a:	9211      	str	r2, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
 8012a7c:	9609      	str	r6, [sp, #36]	; 0x24
 8012a7e:	f7fc fdaf 	bl	800f5e0 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8012a82:	4631      	mov	r1, r6
    a->time = duration;
 8012a84:	9012      	str	r0, [sp, #72]	; 0x48
 8012a86:	4620      	mov	r0, r4
 8012a88:	f7fc fd92 	bl	800f5b0 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8012a8c:	b100      	cbz	r0, 8012a90 <lv_label_refr_text+0x2c4>
 8012a8e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 8012a90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a92:	42ab      	cmp	r3, r5
                a.early_apply = 0;
 8012a94:	bfc1      	itttt	gt
 8012a96:	f89d 305e 	ldrbgt.w	r3, [sp, #94]	; 0x5e
                a.act_time = act_time;      /*To keep the old position*/
 8012a9a:	9513      	strgt	r5, [sp, #76]	; 0x4c
                a.early_apply = 0;
 8012a9c:	f36f 0300 	bfcgt	r3, #0, #1
 8012aa0:	f88d 305e 	strbgt.w	r3, [sp, #94]	; 0x5e
 8012aa4:	e771      	b.n	801298a <lv_label_refr_text+0x1be>
            label->offset.x = 0;
 8012aa6:	2500      	movs	r5, #0
            lv_anim_del(obj, set_ofs_x_anim);
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	4910      	ldr	r1, [pc, #64]	; (8012aec <lv_label_refr_text+0x320>)
 8012aac:	f7fc fd12 	bl	800f4d4 <lv_anim_del>
            label->offset.x = 0;
 8012ab0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8012ab4:	e7cc      	b.n	8012a50 <lv_label_refr_text+0x284>
            lv_anim_del(obj, set_ofs_y_anim);
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	490d      	ldr	r1, [pc, #52]	; (8012af0 <lv_label_refr_text+0x324>)
 8012aba:	f7fc fd0b 	bl	800f4d4 <lv_anim_del>
            label->offset.y = 0;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8012ac4:	e764      	b.n	8012990 <lv_label_refr_text+0x1c4>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8012ac6:	f1b9 0f01 	cmp.w	r9, #1
 8012aca:	f47f af61 	bne.w	8012990 <lv_label_refr_text+0x1c4>
 8012ace:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012ad2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8012ad6:	3301      	adds	r3, #1
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8012ad8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8012adc:	1a5b      	subs	r3, r3, r1
 8012ade:	b21b      	sxth	r3, r3
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	dc07      	bgt.n	8012af4 <lv_label_refr_text+0x328>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8012ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012aea:	e751      	b.n	8012990 <lv_label_refr_text+0x1c4>
 8012aec:	0801252f 	.word	0x0801252f
 8012af0:	08012527 	.word	0x08012527
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8012af4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8012af8:	4293      	cmp	r3, r2
 8012afa:	daf3      	bge.n	8012ae4 <lv_label_refr_text+0x318>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8012afc:	4b50      	ldr	r3, [pc, #320]	; (8012c40 <lv_label_refr_text+0x474>)
 8012afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4798      	blx	r3
 8012b04:	2803      	cmp	r0, #3
 8012b06:	d9ed      	bls.n	8012ae4 <lv_label_refr_text+0x318>
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8012b08:	222e      	movs	r2, #46	; 0x2e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012b0a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8012b0e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012b12:	4611      	mov	r1, r2
 8012b14:	4630      	mov	r0, r6
 8012b16:	3701      	adds	r7, #1
 8012b18:	1aff      	subs	r7, r7, r3
 8012b1a:	f7fc f96b 	bl	800edf4 <lv_font_get_glyph_width>
 8012b1e:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012b20:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            p.x = lv_area_get_width(&txt_coords) -
 8012b24:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
 8012b28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012b2c:	b2bf      	uxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012b2e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8012b32:	4407      	add	r7, r0
 8012b34:	3101      	adds	r1, #1
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8012b36:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8012b3a:	1ac9      	subs	r1, r1, r3
 8012b3c:	b28a      	uxth	r2, r1
 8012b3e:	1946      	adds	r6, r0, r5
            y_overed = p.y %
 8012b40:	b209      	sxth	r1, r1
 8012b42:	fb91 f3f6 	sdiv	r3, r1, r6
 8012b46:	fb06 1113 	mls	r1, r6, r3, r1
            if(y_overed >= lv_font_get_line_height(font)) {
 8012b4a:	b20b      	sxth	r3, r1
 8012b4c:	4298      	cmp	r0, r3
                p.y += lv_font_get_line_height(font);
 8012b4e:	bfd4      	ite	le
 8012b50:	1813      	addle	r3, r2, r0
                p.y -= line_space;
 8012b52:	1b53      	subgt	r3, r2, r5
 8012b54:	1a5b      	subs	r3, r3, r1
 8012b56:	b21b      	sxth	r3, r3
 8012b58:	a905      	add	r1, sp, #20
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
            p.x = lv_area_get_width(&txt_coords) -
 8012b60:	f8ad 7014 	strh.w	r7, [sp, #20]
    LV_ASSERT_NULL(pos_in);
 8012b64:	f7ff fd38 	bl	80125d8 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 8012b68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f7ed faf7 	bl	8000160 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8012b72:	4b34      	ldr	r3, [pc, #208]	; (8012c44 <lv_label_refr_text+0x478>)
            size_t txt_len = strlen(label->text);
 8012b74:	4682      	mov	sl, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8012b76:	4629      	mov	r1, r5
 8012b78:	4630      	mov	r0, r6
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4798      	blx	r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8012b7e:	4e32      	ldr	r6, [pc, #200]	; (8012c48 <lv_label_refr_text+0x47c>)
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8012b80:	9008      	str	r0, [sp, #32]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8012b82:	9f08      	ldr	r7, [sp, #32]
 8012b84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b86:	f107 0903 	add.w	r9, r7, #3
 8012b8a:	45ca      	cmp	sl, r9
 8012b8c:	d346      	bcc.n	8012c1c <lv_label_refr_text+0x450>
 8012b8e:	f04f 0b04 	mov.w	fp, #4
            uint8_t len = 0;
 8012b92:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8012b94:	4b2d      	ldr	r3, [pc, #180]	; (8012c4c <lv_label_refr_text+0x480>)
                _lv_txt_encoded_next(label->text, &byte_id);
 8012b96:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012c50 <lv_label_refr_text+0x484>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8012b9a:	9a08      	ldr	r2, [sp, #32]
 8012b9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b9e:	6819      	ldr	r1, [r3, #0]
 8012ba0:	4410      	add	r0, r2
 8012ba2:	4788      	blx	r1
 8012ba4:	4406      	add	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8012ba6:	f8d8 2000 	ldr.w	r2, [r8]
 8012baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8012bac:	b2f6      	uxtb	r6, r6
                _lv_txt_encoded_next(label->text, &byte_id);
 8012bae:	a908      	add	r1, sp, #32
 8012bb0:	4790      	blx	r2
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8012bb2:	2e03      	cmp	r6, #3
 8012bb4:	d806      	bhi.n	8012bc4 <lv_label_refr_text+0x3f8>
 8012bb6:	9a08      	ldr	r2, [sp, #32]
 8012bb8:	4592      	cmp	sl, r2
 8012bba:	d303      	bcc.n	8012bc4 <lv_label_refr_text+0x3f8>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8012bbc:	f1bb 0b01 	subs.w	fp, fp, #1
 8012bc0:	4b22      	ldr	r3, [pc, #136]	; (8012c4c <lv_label_refr_text+0x480>)
 8012bc2:	d1ea      	bne.n	8012b9a <lv_label_refr_text+0x3ce>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8012bc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8012bc6:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8012bc8:	eb01 0807 	add.w	r8, r1, r7
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8012bcc:	f7ff fc89 	bl	80124e2 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8012bd0:	2e04      	cmp	r6, #4
 8012bd2:	d928      	bls.n	8012c26 <lv_label_refr_text+0x45a>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8012bd4:	1c70      	adds	r0, r6, #1
 8012bd6:	f7fd fa6d 	bl	80100b4 <lv_mem_alloc>
 8012bda:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	f43f aed7 	beq.w	8012990 <lv_label_refr_text+0x1c4>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8012be2:	4632      	mov	r2, r6
 8012be4:	4641      	mov	r1, r8
 8012be6:	f7fd f91b 	bl	800fe20 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8012bea:	2200      	movs	r2, #0
 8012bec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012bee:	559a      	strb	r2, [r3, r6]
        label->dot_tmp_alloc    = true;
 8012bf0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bf8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 8012bfc:	222e      	movs	r2, #46	; 0x2e
 8012bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8012c00:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 8012c02:	55da      	strb	r2, [r3, r7]
 8012c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c06:	443b      	add	r3, r7
 8012c08:	705a      	strb	r2, [r3, #1]
 8012c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c0c:	441f      	add	r7, r3
 8012c0e:	70ba      	strb	r2, [r7, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8012c10:	2200      	movs	r2, #0
 8012c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c14:	f803 2009 	strb.w	r2, [r3, r9]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8012c18:	62e5      	str	r5, [r4, #44]	; 0x2c
 8012c1a:	e6b9      	b.n	8012990 <lv_label_refr_text+0x1c4>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8012c1c:	6833      	ldr	r3, [r6, #0]
 8012c1e:	a908      	add	r1, sp, #32
 8012c20:	4798      	blx	r3
                letter_id--;
 8012c22:	3d01      	subs	r5, #1
 8012c24:	e7ad      	b.n	8012b82 <lv_label_refr_text+0x3b6>
        label->dot_tmp_alloc = false;
 8012c26:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8012c2a:	4632      	mov	r2, r6
        label->dot_tmp_alloc = false;
 8012c2c:	f36f 1386 	bfc	r3, #6, #1
        lv_memcpy(label->dot.tmp, data, len);
 8012c30:	4641      	mov	r1, r8
        label->dot_tmp_alloc = false;
 8012c32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8012c36:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012c3a:	f7fd f8f1 	bl	800fe20 <lv_memcpy>
 8012c3e:	e7dd      	b.n	8012bfc <lv_label_refr_text+0x430>
 8012c40:	2000002c 	.word	0x2000002c
 8012c44:	20000018 	.word	0x20000018
 8012c48:	20000024 	.word	0x20000024
 8012c4c:	20000028 	.word	0x20000028
 8012c50:	20000020 	.word	0x20000020

08012c54 <lv_label_event>:
{
 8012c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8012c58:	48c9      	ldr	r0, [pc, #804]	; (8012f80 <lv_label_event+0x32c>)
{
 8012c5a:	b093      	sub	sp, #76	; 0x4c
 8012c5c:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8012c5e:	f7ee ff6a 	bl	8001b36 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8012c62:	2801      	cmp	r0, #1
 8012c64:	d11c      	bne.n	8012ca0 <lv_label_event+0x4c>
    lv_event_code_t code = lv_event_get_code(e);
 8012c66:	4628      	mov	r0, r5
 8012c68:	f7ef f81e 	bl	8001ca8 <lv_event_get_code>
 8012c6c:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8012c6e:	4628      	mov	r0, r5
 8012c70:	f7ef f816 	bl	8001ca0 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8012c74:	2e2a      	cmp	r6, #42	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 8012c76:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8012c78:	d105      	bne.n	8012c86 <lv_label_event+0x32>
        lv_label_revert_dots(obj);
 8012c7a:	f7ff fc5d 	bl	8012538 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f7ff fda4 	bl	80127cc <lv_label_refr_text>
 8012c84:	e00c      	b.n	8012ca0 <lv_label_event+0x4c>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8012c86:	2e13      	cmp	r6, #19
 8012c88:	d10d      	bne.n	8012ca6 <lv_label_event+0x52>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8012c8a:	f7ff fc95 	bl	80125b8 <lv_obj_get_style_text_font.constprop.0>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8012c8e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012c92:	4628      	mov	r0, r5
 8012c94:	2900      	cmp	r1, #0
 8012c96:	bfb8      	it	lt
 8012c98:	3103      	addlt	r1, #3
 8012c9a:	1089      	asrs	r1, r1, #2
 8012c9c:	f7ef f828 	bl	8001cf0 <lv_event_set_ext_draw_size>
}
 8012ca0:	b013      	add	sp, #76	; 0x4c
 8012ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8012ca6:	2e29      	cmp	r6, #41	; 0x29
 8012ca8:	d0e7      	beq.n	8012c7a <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8012caa:	2e2c      	cmp	r6, #44	; 0x2c
 8012cac:	d144      	bne.n	8012d38 <lv_label_event+0xe4>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8012cae:	f7ff fc83 	bl	80125b8 <lv_obj_get_style_text_font.constprop.0>
 8012cb2:	4606      	mov	r6, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f7ff fc77 	bl	80125a8 <lv_obj_get_style_text_letter_space.constprop.0>
 8012cba:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f7ff fc6b 	bl	8012598 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012cc2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8012cc6:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012cc8:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012ccc:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 8012cce:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012cd0:	bf48      	it	mi
 8012cd2:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 8012cd6:	f7f0 fc14 	bl	8003502 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f7ff fc73 	bl	80125c6 <lv_obj_get_style_width.constprop.0>
 8012ce0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8012ce4:	4298      	cmp	r0, r3
 8012ce6:	d103      	bne.n	8012cf0 <lv_label_event+0x9c>
 8012ce8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8012cec:	0759      	lsls	r1, r3, #29
 8012cee:	d520      	bpl.n	8012d32 <lv_label_event+0xde>
        else w = lv_obj_get_content_width(obj);
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f7f0 fc06 	bl	8003502 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8012cf6:	e9cd 0901 	strd	r0, r9, [sp, #4]
 8012cfa:	f8cd 8000 	str.w	r8, [sp]
 8012cfe:	463b      	mov	r3, r7
 8012d00:	4632      	mov	r2, r6
 8012d02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012d04:	a80a      	add	r0, sp, #40	; 0x28
 8012d06:	f7fe fe60 	bl	80119ca <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7ee ffce 	bl	8001cac <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8012d10:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8012d14:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	bfb8      	it	lt
 8012d1c:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 8012d1e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 8012d22:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8012d24:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	bfb8      	it	lt
 8012d2c:	4613      	movlt	r3, r2
 8012d2e:	8043      	strh	r3, [r0, #2]
 8012d30:	e7b6      	b.n	8012ca0 <lv_label_event+0x4c>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8012d32:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8012d36:	e7de      	b.n	8012cf6 <lv_label_event+0xa2>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8012d38:	2e15      	cmp	r6, #21
 8012d3a:	d1b1      	bne.n	8012ca0 <lv_label_event+0x4c>
    lv_obj_t * obj = lv_event_get_target(e);
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	f7ee ffaf 	bl	8001ca0 <lv_event_get_target>
 8012d42:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8012d44:	4628      	mov	r0, r5
 8012d46:	f7ee ffcc 	bl	8001ce2 <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8012d4a:	a906      	add	r1, sp, #24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8012d4c:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f7f0 fc03 	bl	800355a <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012d54:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8012d58:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012d5a:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8012d5c:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8012d60:	bf48      	it	mi
 8012d62:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8012d66:	f7ff fc2e 	bl	80125c6 <lv_obj_get_style_width.constprop.0>
 8012d6a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8012d6e:	4298      	cmp	r0, r3
 8012d70:	d105      	bne.n	8012d7e <lv_label_event+0x12a>
 8012d72:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8012d76:	075b      	lsls	r3, r3, #29
 8012d78:	bf58      	it	pl
 8012d7a:	f046 0604 	orrpl.w	r6, r6, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 8012d7e:	a80a      	add	r0, sp, #40	; 0x28
 8012d80:	f7f4 f896 	bl	8006eb0 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8012d84:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8012d88:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 8012d8a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    label_draw_dsc.ofs_y = label->offset.y;
 8012d8e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8012d92:	4620      	mov	r0, r4
 8012d94:	aa0a      	add	r2, sp, #40	; 0x28
    label_draw_dsc.ofs_y = label->offset.y;
 8012d96:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    label_draw_dsc.flag = flag;
 8012d9a:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8012d9e:	f7f0 f950 	bl	8003042 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8012da2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8012da6:	b913      	cbnz	r3, 8012dae <lv_label_event+0x15a>
 8012da8:	2301      	movs	r3, #1
 8012daa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8012dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return label->sel_start;
 8012db2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    return label->sel_end;
 8012db4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8012db6:	4299      	cmp	r1, r3
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8012db8:	910b      	str	r1, [sp, #44]	; 0x2c
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8012dba:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8012dbc:	d012      	beq.n	8012de4 <lv_label_event+0x190>
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d010      	beq.n	8012de4 <lv_label_event+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 8012dc2:	f244 4257 	movw	r2, #17495	; 0x4457
 8012dc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f7f2 fadc 	bl	8005388 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8012dd0:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8012dd2:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 8012dd6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f7f2 fad4 	bl	8005388 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8012de0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8012de4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012de8:	f003 0306 	and.w	r3, r3, #6
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d120      	bne.n	8012e32 <lv_label_event+0x1de>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8012df0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8012df4:	3b02      	subs	r3, #2
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d81b      	bhi.n	8012e32 <lv_label_event+0x1de>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8012dfa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012e04:	9602      	str	r6, [sp, #8]
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e0a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012e10:	a808      	add	r0, sp, #32
 8012e12:	f7fe fdda 	bl	80119ca <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012e16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012e1a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8012e22:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012e26:	b21b      	sxth	r3, r3
 8012e28:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8012e2a:	bfc4      	itt	gt
 8012e2c:	2301      	movgt	r3, #1
 8012e2e:	f88d 3044 	strbgt.w	r3, [sp, #68]	; 0x44
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8012e32:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012e36:	f003 0307 	and.w	r3, r3, #7
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	f000 8096 	beq.w	8012f6c <lv_label_event+0x318>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012e40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012e44:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	b21b      	sxth	r3, r3
 8012e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e52:	f2c0 808b 	blt.w	8012f6c <lv_label_event+0x318>
    lv_draw_label_hint_t * hint = &label->hint;
 8012e56:	f104 0730 	add.w	r7, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8012e5a:	68aa      	ldr	r2, [r5, #8]
 8012e5c:	a906      	add	r1, sp, #24
 8012e5e:	a808      	add	r0, sp, #32
 8012e60:	f7fc fc41 	bl	800f6e6 <_lv_area_intersect>
    if(!is_common) return;
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f43f af1b 	beq.w	8012ca0 <lv_label_event+0x4c>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8012e6a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8012e6e:	f011 0807 	ands.w	r8, r1, #7
 8012e72:	d10b      	bne.n	8012e8c <lv_label_event+0x238>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8012e74:	4620      	mov	r0, r4
 8012e76:	f7f1 fa32 	bl	80042de <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8012e7a:	4242      	negs	r2, r0
 8012e7c:	4641      	mov	r1, r8
 8012e7e:	b212      	sxth	r2, r2
 8012e80:	a806      	add	r0, sp, #24
 8012e82:	f7fc fc21 	bl	800f6c8 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8012e86:	8b63      	ldrh	r3, [r4, #26]
 8012e88:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8012e8c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8012e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e92:	f002 0206 	and.w	r2, r2, #6
 8012e96:	2a02      	cmp	r2, #2
 8012e98:	d16a      	bne.n	8012f70 <lv_label_event+0x31c>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012e9a:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 8012e9e:	aa08      	add	r2, sp, #32
 8012ea0:	60aa      	str	r2, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	9700      	str	r7, [sp, #0]
 8012ea6:	aa06      	add	r2, sp, #24
 8012ea8:	a90a      	add	r1, sp, #40	; 0x28
 8012eaa:	f7f4 f81f 	bl	8006eec <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8012eae:	f8c5 8008 	str.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8012eb2:	ab08      	add	r3, sp, #32
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012eb4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8012eb8:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8012eba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012ebe:	f003 0307 	and.w	r3, r3, #7
 8012ec2:	2b03      	cmp	r3, #3
 8012ec4:	d14f      	bne.n	8012f66 <lv_label_event+0x312>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8012ec6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8012eca:	9301      	str	r3, [sp, #4]
 8012ecc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012ed0:	9602      	str	r6, [sp, #8]
 8012ed2:	9300      	str	r3, [sp, #0]
 8012ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ed6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012eda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012edc:	a805      	add	r0, sp, #20
 8012ede:	f7fe fd74 	bl	80119ca <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012ee2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012ee6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8012eea:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 8012eec:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012ef0:	1a52      	subs	r2, r2, r1
 8012ef2:	b212      	sxth	r2, r2
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	dd18      	ble.n	8012f2a <lv_label_event+0x2d6>
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012ef8:	2220      	movs	r2, #32
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012efa:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012efe:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012f00:	4433      	add	r3, r6
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012f02:	980a      	ldr	r0, [sp, #40]	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012f04:	b29e      	uxth	r6, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012f06:	f7fb ff75 	bl	800edf4 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_y = label->offset.y;
 8012f0a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012f0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f12:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012f14:	4406      	add	r6, r0
            label_draw_dsc.ofs_y = label->offset.y;
 8012f16:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f1e:	aa06      	add	r2, sp, #24
 8012f20:	a90a      	add	r1, sp, #40	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8012f22:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f26:	f7f3 ffe1 	bl	8006eec <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012f2a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012f2e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8012f32:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 8012f34:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8012f38:	1a5b      	subs	r3, r3, r1
 8012f3a:	b21b      	sxth	r3, r3
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	dd12      	ble.n	8012f66 <lv_label_event+0x312>
            label_draw_dsc.ofs_x = label->offset.x;
 8012f40:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f44:	4628      	mov	r0, r5
            label_draw_dsc.ofs_x = label->offset.x;
 8012f46:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f4c:	a90a      	add	r1, sp, #40	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012f4e:	891b      	ldrh	r3, [r3, #8]
 8012f50:	441a      	add	r2, r3
 8012f52:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f56:	9700      	str	r7, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012f58:	441a      	add	r2, r3
 8012f5a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f60:	aa06      	add	r2, sp, #24
 8012f62:	f7f3 ffc3 	bl	8006eec <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8012f66:	f8c5 8008 	str.w	r8, [r5, #8]
 8012f6a:	e699      	b.n	8012ca0 <lv_label_event+0x4c>
        hint = NULL;
 8012f6c:	2700      	movs	r7, #0
 8012f6e:	e774      	b.n	8012e5a <lv_label_event+0x206>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8012f70:	4628      	mov	r0, r5
 8012f72:	9700      	str	r7, [sp, #0]
 8012f74:	aa06      	add	r2, sp, #24
 8012f76:	a90a      	add	r1, sp, #40	; 0x28
 8012f78:	f7f3 ffb8 	bl	8006eec <lv_draw_label>
 8012f7c:	e799      	b.n	8012eb2 <lv_label_event+0x25e>
 8012f7e:	bf00      	nop
 8012f80:	0801a5d4 	.word	0x0801a5d4

08012f84 <lv_label_create>:
{
 8012f84:	4601      	mov	r1, r0
 8012f86:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8012f88:	4803      	ldr	r0, [pc, #12]	; (8012f98 <lv_label_create+0x14>)
 8012f8a:	f7ef fe59 	bl	8002c40 <lv_obj_class_create_obj>
 8012f8e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8012f90:	f7ef fed4 	bl	8002d3c <lv_obj_class_init_obj>
}
 8012f94:	4620      	mov	r0, r4
 8012f96:	bd10      	pop	{r4, pc}
 8012f98:	0801a5d4 	.word	0x0801a5d4

08012f9c <lv_label_set_text>:
{
 8012f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8012fa2:	f7f0 fbec 	bl	800377e <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 8012fa6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012fa8:	2d00      	cmp	r5, #0
 8012faa:	bf08      	it	eq
 8012fac:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 8012fae:	42ae      	cmp	r6, r5
 8012fb0:	d112      	bne.n	8012fd8 <lv_label_set_text+0x3c>
 8012fb2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012fb6:	071b      	lsls	r3, r3, #28
 8012fb8:	d418      	bmi.n	8012fec <lv_label_set_text+0x50>
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f7ed f8d0 	bl	8000160 <strlen>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8012fc0:	1c41      	adds	r1, r0, #1
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f7fd f88c 	bl	80100e0 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 8012fc8:	b128      	cbz	r0, 8012fd6 <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8012fca:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 8012fcc:	4620      	mov	r0, r4
}
 8012fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 8012fd2:	f7ff bbfb 	b.w	80127cc <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 8012fd6:	e7fe      	b.n	8012fd6 <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 8012fd8:	b146      	cbz	r6, 8012fec <lv_label_set_text+0x50>
 8012fda:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012fde:	f013 0708 	ands.w	r7, r3, #8
 8012fe2:	d103      	bne.n	8012fec <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	f7fc fedf 	bl	800fda8 <lv_mem_free>
            label->text = NULL;
 8012fea:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 8012fec:	4628      	mov	r0, r5
 8012fee:	f7ed f8b7 	bl	8000160 <strlen>
        label->text = lv_mem_alloc(len);
 8012ff2:	3001      	adds	r0, #1
 8012ff4:	f7fd f85e 	bl	80100b4 <lv_mem_alloc>
 8012ff8:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 8012ffa:	b900      	cbnz	r0, 8012ffe <lv_label_set_text+0x62>
 8012ffc:	e7fe      	b.n	8012ffc <lv_label_set_text+0x60>
        strcpy(label->text, text);
 8012ffe:	4629      	mov	r1, r5
 8013000:	f002 f9e8 	bl	80153d4 <strcpy>
        label->static_txt = 0;
 8013004:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013008:	f36f 03c3 	bfc	r3, #3, #1
 801300c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013010:	e7dc      	b.n	8012fcc <lv_label_set_text+0x30>
	...

08013014 <lv_label_set_long_mode>:
{
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	4604      	mov	r4, r0
 8013018:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 801301a:	4914      	ldr	r1, [pc, #80]	; (801306c <lv_label_set_long_mode+0x58>)
 801301c:	f7fc fa5a 	bl	800f4d4 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8013020:	4620      	mov	r0, r4
 8013022:	4913      	ldr	r1, [pc, #76]	; (8013070 <lv_label_set_long_mode+0x5c>)
 8013024:	f7fc fa56 	bl	800f4d4 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8013028:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 801302a:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801302c:	2a02      	cmp	r2, #2
 801302e:	bf8c      	ite	hi
 8013030:	2200      	movhi	r2, #0
 8013032:	2201      	movls	r2, #1
    label->offset.x = 0;
 8013034:	6463      	str	r3, [r4, #68]	; 0x44
 8013036:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801303a:	f362 1345 	bfi	r3, r2, #5, #1
 801303e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8013042:	f003 0307 	and.w	r3, r3, #7
 8013046:	2b01      	cmp	r3, #1
 8013048:	d105      	bne.n	8013056 <lv_label_set_long_mode+0x42>
 801304a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801304c:	3301      	adds	r3, #1
 801304e:	d002      	beq.n	8013056 <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 8013050:	4620      	mov	r0, r4
 8013052:	f7ff fa71 	bl	8012538 <lv_label_revert_dots>
    label->long_mode = long_mode;
 8013056:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801305a:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 801305c:	f365 0302 	bfi	r3, r5, #0, #3
 8013060:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8013064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 8013068:	f7ff bbb0 	b.w	80127cc <lv_label_refr_text>
 801306c:	0801252f 	.word	0x0801252f
 8013070:	08012527 	.word	0x08012527

08013074 <lv_label_constructor>:
{
 8013074:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8013076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    label->hint.line_start = -1;
 801307a:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801307e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8013082:	460c      	mov	r4, r1
    label->text       = NULL;
 8013084:	2500      	movs	r5, #0
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8013086:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801308a:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801308e:	4620      	mov	r0, r4
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8013090:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8013094:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8013098:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->hint.coord_y    = 0;
 801309c:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    label->offset.x = 0;
 80130a0:	644d      	str	r5, [r1, #68]	; 0x44
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80130a2:	2102      	movs	r1, #2
 80130a4:	f7ef fb71 	bl	800278a <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 80130a8:	4629      	mov	r1, r5
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7ff ffb2 	bl	8013014 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80130b0:	4620      	mov	r0, r4
}
 80130b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 80130b6:	4901      	ldr	r1, [pc, #4]	; (80130bc <lv_label_constructor+0x48>)
 80130b8:	f7ff bf70 	b.w	8012f9c <lv_label_set_text>
 80130bc:	0801a5cc 	.word	0x0801a5cc

080130c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80130c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <HAL_InitTick+0x3c>)
{
 80130c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80130c6:	7818      	ldrb	r0, [r3, #0]
 80130c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80130cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80130d0:	4a0b      	ldr	r2, [pc, #44]	; (8013100 <HAL_InitTick+0x40>)
 80130d2:	6810      	ldr	r0, [r2, #0]
 80130d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80130d8:	f000 fe36 	bl	8013d48 <HAL_SYSTICK_Config>
 80130dc:	4604      	mov	r4, r0
 80130de:	b958      	cbnz	r0, 80130f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80130e0:	2d0f      	cmp	r5, #15
 80130e2:	d809      	bhi.n	80130f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80130e4:	4602      	mov	r2, r0
 80130e6:	4629      	mov	r1, r5
 80130e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130ec:	f000 fdec 	bl	8013cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80130f0:	4620      	mov	r0, r4
 80130f2:	4b04      	ldr	r3, [pc, #16]	; (8013104 <HAL_InitTick+0x44>)
 80130f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80130f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80130f8:	2001      	movs	r0, #1
 80130fa:	e7fc      	b.n	80130f6 <HAL_InitTick+0x36>
 80130fc:	20000030 	.word	0x20000030
 8013100:	20000008 	.word	0x20000008
 8013104:	20000034 	.word	0x20000034

08013108 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013108:	4a07      	ldr	r2, [pc, #28]	; (8013128 <HAL_Init+0x20>)
{
 801310a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801310c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801310e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013110:	f043 0310 	orr.w	r3, r3, #16
 8013114:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013116:	f000 fdc5 	bl	8013ca4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 801311a:	200f      	movs	r0, #15
 801311c:	f7ff ffd0 	bl	80130c0 <HAL_InitTick>
  HAL_MspInit();
 8013120:	f7ee fa06 	bl	8001530 <HAL_MspInit>
}
 8013124:	2000      	movs	r0, #0
 8013126:	bd08      	pop	{r3, pc}
 8013128:	40022000 	.word	0x40022000

0801312c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 801312c:	4a03      	ldr	r2, [pc, #12]	; (801313c <HAL_IncTick+0x10>)
 801312e:	4b04      	ldr	r3, [pc, #16]	; (8013140 <HAL_IncTick+0x14>)
 8013130:	6811      	ldr	r1, [r2, #0]
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	440b      	add	r3, r1
 8013136:	6013      	str	r3, [r2, #0]
}
 8013138:	4770      	bx	lr
 801313a:	bf00      	nop
 801313c:	200048f4 	.word	0x200048f4
 8013140:	20000030 	.word	0x20000030

08013144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8013144:	4b01      	ldr	r3, [pc, #4]	; (801314c <HAL_GetTick+0x8>)
 8013146:	6818      	ldr	r0, [r3, #0]
}
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	200048f4 	.word	0x200048f4

08013150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8013154:	f7ff fff6 	bl	8013144 <HAL_GetTick>
 8013158:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801315a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 801315c:	bf1e      	ittt	ne
 801315e:	4b04      	ldrne	r3, [pc, #16]	; (8013170 <HAL_Delay+0x20>)
 8013160:	781b      	ldrbne	r3, [r3, #0]
 8013162:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013164:	f7ff ffee 	bl	8013144 <HAL_GetTick>
 8013168:	1b43      	subs	r3, r0, r5
 801316a:	42a3      	cmp	r3, r4
 801316c:	d3fa      	bcc.n	8013164 <HAL_Delay+0x14>
  {
  }
}
 801316e:	bd38      	pop	{r3, r4, r5, pc}
 8013170:	20000030 	.word	0x20000030

08013174 <HAL_ADC_ConvCpltCallback>:
 8013174:	4770      	bx	lr

08013176 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013176:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8013178:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801317a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801317c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8013180:	d11b      	bne.n	80131ba <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013188:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	6892      	ldr	r2, [r2, #8]
 801318e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8013192:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8013196:	d10c      	bne.n	80131b2 <ADC_DMAConvCplt+0x3c>
 8013198:	7b1a      	ldrb	r2, [r3, #12]
 801319a:	b952      	cbnz	r2, 80131b2 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801319e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80131a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80131a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131a6:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80131a8:	bf5e      	ittt	pl
 80131aa:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80131ac:	f042 0201 	orrpl.w	r2, r2, #1
 80131b0:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff ffde 	bl	8013174 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80131b8:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80131ba:	6a1b      	ldr	r3, [r3, #32]
}
 80131bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80131c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131c2:	4718      	bx	r3

080131c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80131c4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80131c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80131c8:	f7ee f8ba 	bl	8001340 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80131cc:	bd08      	pop	{r3, pc}

080131ce <HAL_ADC_LevelOutOfWindowCallback>:
 80131ce:	4770      	bx	lr

080131d0 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80131d0:	6803      	ldr	r3, [r0, #0]
{
 80131d2:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80131d4:	685a      	ldr	r2, [r3, #4]
{
 80131d6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80131d8:	0690      	lsls	r0, r2, #26
 80131da:	d527      	bpl.n	801322c <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	0791      	lsls	r1, r2, #30
 80131e0:	d524      	bpl.n	801322c <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80131e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80131e4:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80131e6:	bf5e      	ittt	pl
 80131e8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80131ea:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80131ee:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80131f0:	689a      	ldr	r2, [r3, #8]
 80131f2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80131f6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80131fa:	d110      	bne.n	801321e <HAL_ADC_IRQHandler+0x4e>
 80131fc:	7b22      	ldrb	r2, [r4, #12]
 80131fe:	b972      	cbnz	r2, 801321e <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8013200:	685a      	ldr	r2, [r3, #4]
 8013202:	f022 0220 	bic.w	r2, r2, #32
 8013206:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8013208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801320a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801320e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013212:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013214:	bf5e      	ittt	pl
 8013216:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8013218:	f043 0301 	orrpl.w	r3, r3, #1
 801321c:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 801321e:	4620      	mov	r0, r4
 8013220:	f7ff ffa8 	bl	8013174 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8013224:	f06f 0212 	mvn.w	r2, #18
 8013228:	6823      	ldr	r3, [r4, #0]
 801322a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 801322c:	6823      	ldr	r3, [r4, #0]
 801322e:	685a      	ldr	r2, [r3, #4]
 8013230:	0610      	lsls	r0, r2, #24
 8013232:	d530      	bpl.n	8013296 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	0751      	lsls	r1, r2, #29
 8013238:	d52d      	bpl.n	8013296 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801323a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801323c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801323e:	bf5e      	ittt	pl
 8013240:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8013242:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8013246:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8013248:	689a      	ldr	r2, [r3, #8]
 801324a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 801324e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8013252:	d00a      	beq.n	801326a <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8013254:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8013256:	0550      	lsls	r0, r2, #21
 8013258:	d416      	bmi.n	8013288 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801325a:	689a      	ldr	r2, [r3, #8]
 801325c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8013260:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8013264:	d110      	bne.n	8013288 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8013266:	7b22      	ldrb	r2, [r4, #12]
 8013268:	b972      	cbnz	r2, 8013288 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801326a:	685a      	ldr	r2, [r3, #4]
 801326c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013270:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8013272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013278:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801327a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801327c:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801327e:	bf5e      	ittt	pl
 8013280:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8013282:	f043 0301 	orrpl.w	r3, r3, #1
 8013286:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8013288:	4620      	mov	r0, r4
 801328a:	f000 fa11 	bl	80136b0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 801328e:	f06f 020c 	mvn.w	r2, #12
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8013296:	6823      	ldr	r3, [r4, #0]
 8013298:	685a      	ldr	r2, [r3, #4]
 801329a:	0652      	lsls	r2, r2, #25
 801329c:	d50d      	bpl.n	80132ba <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	07db      	lsls	r3, r3, #31
 80132a2:	d50a      	bpl.n	80132ba <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80132a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80132a6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80132a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132ac:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80132ae:	f7ff ff8e 	bl	80131ce <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80132b2:	f06f 0201 	mvn.w	r2, #1
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	601a      	str	r2, [r3, #0]
}
 80132ba:	bd10      	pop	{r4, pc}

080132bc <HAL_ADC_ErrorCallback>:
 80132bc:	4770      	bx	lr

080132be <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80132be:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80132c0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80132c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80132c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132c8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80132ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80132cc:	f043 0304 	orr.w	r3, r3, #4
 80132d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80132d2:	f7ff fff3 	bl	80132bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80132d6:	bd08      	pop	{r3, pc}

080132d8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80132d8:	2300      	movs	r3, #0
{ 
 80132da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80132dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80132de:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80132e2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d06c      	beq.n	80133c2 <HAL_ADC_ConfigChannel+0xea>
 80132e8:	2301      	movs	r3, #1
 80132ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80132ee:	684d      	ldr	r5, [r1, #4]
 80132f0:	6802      	ldr	r2, [r0, #0]
 80132f2:	2d06      	cmp	r5, #6
 80132f4:	6808      	ldr	r0, [r1, #0]
 80132f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80132fa:	d822      	bhi.n	8013342 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80132fc:	261f      	movs	r6, #31
 80132fe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8013300:	3b05      	subs	r3, #5
 8013302:	409e      	lsls	r6, r3
 8013304:	ea25 0506 	bic.w	r5, r5, r6
 8013308:	fa00 f303 	lsl.w	r3, r0, r3
 801330c:	432b      	orrs	r3, r5
 801330e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8013310:	2809      	cmp	r0, #9
 8013312:	688b      	ldr	r3, [r1, #8]
 8013314:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8013318:	f04f 0107 	mov.w	r1, #7
 801331c:	d929      	bls.n	8013372 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 801331e:	68d6      	ldr	r6, [r2, #12]
 8013320:	3d1e      	subs	r5, #30
 8013322:	40a9      	lsls	r1, r5
 8013324:	ea26 0101 	bic.w	r1, r6, r1
 8013328:	40ab      	lsls	r3, r5
 801332a:	430b      	orrs	r3, r1
 801332c:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 801332e:	f1a0 0310 	sub.w	r3, r0, #16
 8013332:	2b01      	cmp	r3, #1
 8013334:	d925      	bls.n	8013382 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013336:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8013338:	2300      	movs	r3, #0
 801333a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 801333e:	b002      	add	sp, #8
 8013340:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8013342:	2d0c      	cmp	r5, #12
 8013344:	f04f 051f 	mov.w	r5, #31
 8013348:	d809      	bhi.n	801335e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 801334a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 801334c:	3b23      	subs	r3, #35	; 0x23
 801334e:	409d      	lsls	r5, r3
 8013350:	ea26 0505 	bic.w	r5, r6, r5
 8013354:	fa00 f303 	lsl.w	r3, r0, r3
 8013358:	432b      	orrs	r3, r5
 801335a:	6313      	str	r3, [r2, #48]	; 0x30
 801335c:	e7d8      	b.n	8013310 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 801335e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8013360:	3b41      	subs	r3, #65	; 0x41
 8013362:	409d      	lsls	r5, r3
 8013364:	ea26 0505 	bic.w	r5, r6, r5
 8013368:	fa00 f303 	lsl.w	r3, r0, r3
 801336c:	432b      	orrs	r3, r5
 801336e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013370:	e7ce      	b.n	8013310 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8013372:	6910      	ldr	r0, [r2, #16]
 8013374:	40a9      	lsls	r1, r5
 8013376:	ea20 0101 	bic.w	r1, r0, r1
 801337a:	40ab      	lsls	r3, r5
 801337c:	430b      	orrs	r3, r1
 801337e:	6113      	str	r3, [r2, #16]
 8013380:	e7d9      	b.n	8013336 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8013382:	4b11      	ldr	r3, [pc, #68]	; (80133c8 <HAL_ADC_ConfigChannel+0xf0>)
 8013384:	429a      	cmp	r2, r3
 8013386:	d116      	bne.n	80133b6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8013388:	6893      	ldr	r3, [r2, #8]
 801338a:	021b      	lsls	r3, r3, #8
 801338c:	d4d3      	bmi.n	8013336 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 801338e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013390:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8013392:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013396:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013398:	d1cd      	bne.n	8013336 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801339a:	4b0c      	ldr	r3, [pc, #48]	; (80133cc <HAL_ADC_ConfigChannel+0xf4>)
 801339c:	4a0c      	ldr	r2, [pc, #48]	; (80133d0 <HAL_ADC_ConfigChannel+0xf8>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80133a4:	230a      	movs	r3, #10
 80133a6:	4353      	muls	r3, r2
            wait_loop_index--;
 80133a8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80133aa:	9b01      	ldr	r3, [sp, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d0c2      	beq.n	8013336 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80133b0:	9b01      	ldr	r3, [sp, #4]
 80133b2:	3b01      	subs	r3, #1
 80133b4:	e7f8      	b.n	80133a8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80133b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80133b8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80133ba:	f043 0320 	orr.w	r3, r3, #32
 80133be:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80133c0:	e7ba      	b.n	8013338 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80133c2:	2002      	movs	r0, #2
 80133c4:	e7bb      	b.n	801333e <HAL_ADC_ConfigChannel+0x66>
 80133c6:	bf00      	nop
 80133c8:	40012400 	.word	0x40012400
 80133cc:	20000008 	.word	0x20000008
 80133d0:	000f4240 	.word	0x000f4240

080133d4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80133d4:	2300      	movs	r3, #0
{
 80133d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80133d8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80133da:	6803      	ldr	r3, [r0, #0]
{
 80133dc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80133de:	689a      	ldr	r2, [r3, #8]
 80133e0:	07d2      	lsls	r2, r2, #31
 80133e2:	d502      	bpl.n	80133ea <ADC_Enable+0x16>
  return HAL_OK;
 80133e4:	2000      	movs	r0, #0
}
 80133e6:	b003      	add	sp, #12
 80133e8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80133ea:	689a      	ldr	r2, [r3, #8]
 80133ec:	f042 0201 	orr.w	r2, r2, #1
 80133f0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80133f2:	4b14      	ldr	r3, [pc, #80]	; (8013444 <ADC_Enable+0x70>)
 80133f4:	4a14      	ldr	r2, [pc, #80]	; (8013448 <ADC_Enable+0x74>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80133fc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80133fe:	9b01      	ldr	r3, [sp, #4]
 8013400:	b9e3      	cbnz	r3, 801343c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8013402:	f7ff fe9f 	bl	8013144 <HAL_GetTick>
 8013406:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8013408:	6823      	ldr	r3, [r4, #0]
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	07db      	lsls	r3, r3, #31
 801340e:	d4e9      	bmi.n	80133e4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013410:	f7ff fe98 	bl	8013144 <HAL_GetTick>
 8013414:	1b40      	subs	r0, r0, r5
 8013416:	2802      	cmp	r0, #2
 8013418:	d9f6      	bls.n	8013408 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	f013 0301 	ands.w	r3, r3, #1
 8013422:	d1f1      	bne.n	8013408 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013424:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8013426:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013428:	f042 0210 	orr.w	r2, r2, #16
 801342c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801342e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8013430:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013434:	f042 0201 	orr.w	r2, r2, #1
 8013438:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 801343a:	e7d4      	b.n	80133e6 <ADC_Enable+0x12>
      wait_loop_index--;
 801343c:	9b01      	ldr	r3, [sp, #4]
 801343e:	3b01      	subs	r3, #1
 8013440:	e7dc      	b.n	80133fc <ADC_Enable+0x28>
 8013442:	bf00      	nop
 8013444:	20000008 	.word	0x20000008
 8013448:	000f4240 	.word	0x000f4240

0801344c <HAL_ADC_Start_DMA>:
{
 801344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8013450:	4b40      	ldr	r3, [pc, #256]	; (8013554 <HAL_ADC_Start_DMA+0x108>)
{
 8013452:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8013454:	6802      	ldr	r2, [r0, #0]
{
 8013456:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8013458:	429a      	cmp	r2, r3
{
 801345a:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 801345c:	d002      	beq.n	8013464 <HAL_ADC_Start_DMA+0x18>
 801345e:	493e      	ldr	r1, [pc, #248]	; (8013558 <HAL_ADC_Start_DMA+0x10c>)
 8013460:	428a      	cmp	r2, r1
 8013462:	d103      	bne.n	801346c <HAL_ADC_Start_DMA+0x20>
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 801346a:	d16e      	bne.n	801354a <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 801346c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013470:	2b01      	cmp	r3, #1
 8013472:	d06c      	beq.n	801354e <HAL_ADC_Start_DMA+0x102>
 8013474:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8013476:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8013478:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 801347c:	f7ff ffaa 	bl	80133d4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8013480:	4606      	mov	r6, r0
 8013482:	2800      	cmp	r0, #0
 8013484:	d15d      	bne.n	8013542 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8013486:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8013488:	6821      	ldr	r1, [r4, #0]
 801348a:	4b33      	ldr	r3, [pc, #204]	; (8013558 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 801348c:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8013490:	f025 0501 	bic.w	r5, r5, #1
 8013494:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8013498:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 801349a:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 801349c:	d104      	bne.n	80134a8 <HAL_ADC_Start_DMA+0x5c>
 801349e:	4a2d      	ldr	r2, [pc, #180]	; (8013554 <HAL_ADC_Start_DMA+0x108>)
 80134a0:	6853      	ldr	r3, [r2, #4]
 80134a2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80134a6:	d13e      	bne.n	8013526 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80134a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80134aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80134ae:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80134b0:	684b      	ldr	r3, [r1, #4]
 80134b2:	055a      	lsls	r2, r3, #21
 80134b4:	d505      	bpl.n	80134c2 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80134b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80134b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80134bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80134c0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80134c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80134c4:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80134c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80134ca:	bf18      	it	ne
 80134cc:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80134ce:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80134d0:	bf18      	it	ne
 80134d2:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80134d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80134d8:	2300      	movs	r3, #0
 80134da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80134de:	4b1f      	ldr	r3, [pc, #124]	; (801355c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80134e0:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80134e2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80134e4:	4b1e      	ldr	r3, [pc, #120]	; (8013560 <HAL_ADC_Start_DMA+0x114>)
 80134e6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80134e8:	4b1e      	ldr	r3, [pc, #120]	; (8013564 <HAL_ADC_Start_DMA+0x118>)
 80134ea:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80134ec:	f06f 0302 	mvn.w	r3, #2
 80134f0:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80134f4:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80134f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134fc:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8013500:	4643      	mov	r3, r8
 8013502:	f000 fc65 	bl	8013dd0 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8013506:	6823      	ldr	r3, [r4, #0]
 8013508:	689a      	ldr	r2, [r3, #8]
 801350a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 801350e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8013512:	689a      	ldr	r2, [r3, #8]
 8013514:	bf0c      	ite	eq
 8013516:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 801351a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 801351e:	609a      	str	r2, [r3, #8]
}
 8013520:	4630      	mov	r0, r6
 8013522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801352c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 801352e:	6853      	ldr	r3, [r2, #4]
 8013530:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8013532:	bf41      	itttt	mi
 8013534:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8013536:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 801353a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 801353e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8013540:	e7bf      	b.n	80134c2 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8013542:	2300      	movs	r3, #0
 8013544:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8013548:	e7ea      	b.n	8013520 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 801354a:	2601      	movs	r6, #1
 801354c:	e7e8      	b.n	8013520 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 801354e:	2602      	movs	r6, #2
 8013550:	e7e6      	b.n	8013520 <HAL_ADC_Start_DMA+0xd4>
 8013552:	bf00      	nop
 8013554:	40012400 	.word	0x40012400
 8013558:	40012800 	.word	0x40012800
 801355c:	08013177 	.word	0x08013177
 8013560:	080131c5 	.word	0x080131c5
 8013564:	080132bf 	.word	0x080132bf

08013568 <ADC_ConversionStop_Disable>:
{
 8013568:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 801356a:	6803      	ldr	r3, [r0, #0]
{
 801356c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 801356e:	689a      	ldr	r2, [r3, #8]
 8013570:	07d1      	lsls	r1, r2, #31
 8013572:	d401      	bmi.n	8013578 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8013574:	2000      	movs	r0, #0
}
 8013576:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8013578:	689a      	ldr	r2, [r3, #8]
 801357a:	f022 0201 	bic.w	r2, r2, #1
 801357e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8013580:	f7ff fde0 	bl	8013144 <HAL_GetTick>
 8013584:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8013586:	6823      	ldr	r3, [r4, #0]
 8013588:	689b      	ldr	r3, [r3, #8]
 801358a:	07db      	lsls	r3, r3, #31
 801358c:	d5f2      	bpl.n	8013574 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801358e:	f7ff fdd9 	bl	8013144 <HAL_GetTick>
 8013592:	1b40      	subs	r0, r0, r5
 8013594:	2802      	cmp	r0, #2
 8013596:	d9f6      	bls.n	8013586 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8013598:	6823      	ldr	r3, [r4, #0]
 801359a:	689b      	ldr	r3, [r3, #8]
 801359c:	07da      	lsls	r2, r3, #31
 801359e:	d5f2      	bpl.n	8013586 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80135a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80135a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80135a4:	f043 0310 	orr.w	r3, r3, #16
 80135a8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80135aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80135ac:	f043 0301 	orr.w	r3, r3, #1
 80135b0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80135b2:	e7e0      	b.n	8013576 <ADC_ConversionStop_Disable+0xe>

080135b4 <HAL_ADC_Init>:
{
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80135b6:	4604      	mov	r4, r0
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d06e      	beq.n	801369a <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80135bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80135be:	b923      	cbnz	r3, 80135ca <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80135c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80135c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80135c6:	f7ed f901 	bl	80007cc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80135ca:	4620      	mov	r0, r4
 80135cc:	f7ff ffcc 	bl	8013568 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80135d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80135d2:	f013 0310 	ands.w	r3, r3, #16
 80135d6:	d162      	bne.n	801369e <HAL_ADC_Init+0xea>
 80135d8:	2800      	cmp	r0, #0
 80135da:	d160      	bne.n	801369e <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80135dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80135de:	69e5      	ldr	r5, [r4, #28]
 80135e0:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80135e2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80135e6:	f022 0202 	bic.w	r2, r2, #2
 80135ea:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80135ee:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80135f0:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80135f2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80135f4:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80135f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80135fa:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80135fe:	d037      	beq.n	8013670 <HAL_ADC_Init+0xbc>
 8013600:	2d01      	cmp	r5, #1
 8013602:	bf14      	ite	ne
 8013604:	2700      	movne	r7, #0
 8013606:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801360a:	7d26      	ldrb	r6, [r4, #20]
 801360c:	2e01      	cmp	r6, #1
 801360e:	d106      	bne.n	801361e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8013610:	bb82      	cbnz	r2, 8013674 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8013612:	69a2      	ldr	r2, [r4, #24]
 8013614:	3a01      	subs	r2, #1
 8013616:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 801361a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 801361e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8013620:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8013624:	6856      	ldr	r6, [r2, #4]
 8013626:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 801362a:	ea46 0607 	orr.w	r6, r6, r7
 801362e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8013630:	6897      	ldr	r7, [r2, #8]
 8013632:	4e1d      	ldr	r6, [pc, #116]	; (80136a8 <HAL_ADC_Init+0xf4>)
 8013634:	ea06 0607 	and.w	r6, r6, r7
 8013638:	ea46 0601 	orr.w	r6, r6, r1
 801363c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 801363e:	d001      	beq.n	8013644 <HAL_ADC_Init+0x90>
 8013640:	2d01      	cmp	r5, #1
 8013642:	d102      	bne.n	801364a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8013644:	6923      	ldr	r3, [r4, #16]
 8013646:	3b01      	subs	r3, #1
 8013648:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 801364a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 801364c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8013650:	432b      	orrs	r3, r5
 8013652:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8013654:	6892      	ldr	r2, [r2, #8]
 8013656:	4b15      	ldr	r3, [pc, #84]	; (80136ac <HAL_ADC_Init+0xf8>)
 8013658:	4013      	ands	r3, r2
 801365a:	4299      	cmp	r1, r3
 801365c:	d113      	bne.n	8013686 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 801365e:	2300      	movs	r3, #0
 8013660:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8013662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013664:	f023 0303 	bic.w	r3, r3, #3
 8013668:	f043 0301 	orr.w	r3, r3, #1
 801366c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8013670:	462f      	mov	r7, r5
 8013672:	e7ca      	b.n	801360a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013674:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013676:	f042 0220 	orr.w	r2, r2, #32
 801367a:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801367c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801367e:	f042 0201 	orr.w	r2, r2, #1
 8013682:	62e2      	str	r2, [r4, #44]	; 0x2c
 8013684:	e7cb      	b.n	801361e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8013686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013688:	f023 0312 	bic.w	r3, r3, #18
 801368c:	f043 0310 	orr.w	r3, r3, #16
 8013690:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013694:	f043 0301 	orr.w	r3, r3, #1
 8013698:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 801369a:	2001      	movs	r0, #1
 801369c:	e7e7      	b.n	801366e <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801369e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80136a0:	f043 0310 	orr.w	r3, r3, #16
 80136a4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80136a6:	e7f8      	b.n	801369a <HAL_ADC_Init+0xe6>
 80136a8:	ffe1f7fd 	.word	0xffe1f7fd
 80136ac:	ff1f0efe 	.word	0xff1f0efe

080136b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80136b0:	4770      	bx	lr

080136b2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80136b2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80136b4:	4604      	mov	r4, r0
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d06e      	beq.n	8013798 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80136ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80136be:	b90b      	cbnz	r3, 80136c4 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80136c0:	f7ed f8f4 	bl	80008ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80136c4:	6822      	ldr	r2, [r4, #0]
 80136c6:	6813      	ldr	r3, [r2, #0]
 80136c8:	f043 0301 	orr.w	r3, r3, #1
 80136cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80136ce:	f7ff fd39 	bl	8013144 <HAL_GetTick>
 80136d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80136d4:	6823      	ldr	r3, [r4, #0]
 80136d6:	685a      	ldr	r2, [r3, #4]
 80136d8:	07d1      	lsls	r1, r2, #31
 80136da:	d551      	bpl.n	8013780 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	f022 0202 	bic.w	r2, r2, #2
 80136e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80136e4:	f7ff fd2e 	bl	8013144 <HAL_GetTick>
 80136e8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80136ea:	6823      	ldr	r3, [r4, #0]
 80136ec:	685a      	ldr	r2, [r3, #4]
 80136ee:	0792      	lsls	r2, r2, #30
 80136f0:	d454      	bmi.n	801379c <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80136f2:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80136f4:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80136f6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	bf0c      	ite	eq
 80136fc:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8013700:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8013704:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8013706:	7e62      	ldrb	r2, [r4, #25]
 8013708:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801370a:	681a      	ldr	r2, [r3, #0]
 801370c:	bf0c      	ite	eq
 801370e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8013712:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8013716:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8013718:	7ea2      	ldrb	r2, [r4, #26]
 801371a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	bf0c      	ite	eq
 8013720:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8013724:	f022 0220 	bicne.w	r2, r2, #32
 8013728:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 801372a:	7ee2      	ldrb	r2, [r4, #27]
 801372c:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	bf0c      	ite	eq
 8013732:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8013736:	f042 0210 	orrne.w	r2, r2, #16
 801373a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801373c:	7f22      	ldrb	r2, [r4, #28]
 801373e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	bf0c      	ite	eq
 8013744:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8013748:	f022 0208 	bicne.w	r2, r2, #8
 801374c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801374e:	7f62      	ldrb	r2, [r4, #29]
 8013750:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8013752:	681a      	ldr	r2, [r3, #0]
 8013754:	bf0c      	ite	eq
 8013756:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801375a:	f022 0204 	bicne.w	r2, r2, #4
 801375e:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8013760:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013764:	430a      	orrs	r2, r1
 8013766:	6921      	ldr	r1, [r4, #16]
 8013768:	430a      	orrs	r2, r1
 801376a:	6961      	ldr	r1, [r4, #20]
 801376c:	430a      	orrs	r2, r1
 801376e:	6861      	ldr	r1, [r4, #4]
 8013770:	3901      	subs	r1, #1
 8013772:	430a      	orrs	r2, r1
 8013774:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8013776:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8013778:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 801377a:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 801377e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8013780:	f7ff fce0 	bl	8013144 <HAL_GetTick>
 8013784:	1b40      	subs	r0, r0, r5
 8013786:	280a      	cmp	r0, #10
 8013788:	d9a4      	bls.n	80136d4 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801378a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013790:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8013792:	2305      	movs	r3, #5
 8013794:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8013798:	2001      	movs	r0, #1
 801379a:	e7f0      	b.n	801377e <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801379c:	f7ff fcd2 	bl	8013144 <HAL_GetTick>
 80137a0:	1b40      	subs	r0, r0, r5
 80137a2:	280a      	cmp	r0, #10
 80137a4:	d9a1      	bls.n	80136ea <HAL_CAN_Init+0x38>
 80137a6:	e7f0      	b.n	801378a <HAL_CAN_Init+0xd8>

080137a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80137a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80137aa:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80137ae:	3b01      	subs	r3, #1
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	d862      	bhi.n	801387a <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80137b4:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 80137b6:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80137b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80137bc:	f042 0201 	orr.w	r2, r2, #1
 80137c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80137c4:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80137c6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80137ca:	f002 001f 	and.w	r0, r2, #31
 80137ce:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80137d2:	ea25 0500 	bic.w	r5, r5, r0
 80137d6:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80137da:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80137dc:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80137de:	bb85      	cbnz	r5, 8013842 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80137e0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80137e4:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80137e6:	4025      	ands	r5, r4
 80137e8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80137ec:	888d      	ldrh	r5, [r1, #4]
 80137ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80137f2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80137f6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80137fa:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80137fc:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80137fe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8013802:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8013806:	698a      	ldr	r2, [r1, #24]
 8013808:	bb6a      	cbnz	r2, 8013866 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801380a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801380e:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8013810:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8013814:	690a      	ldr	r2, [r1, #16]
 8013816:	bb52      	cbnz	r2, 801386e <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8013818:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801381c:	4014      	ands	r4, r2
 801381e:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8013822:	6a0a      	ldr	r2, [r1, #32]
 8013824:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8013826:	bf02      	ittt	eq
 8013828:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 801382c:	4310      	orreq	r0, r2
 801382e:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8013832:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8013834:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013838:	f022 0201 	bic.w	r2, r2, #1
 801383c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8013840:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8013842:	2d01      	cmp	r5, #1
 8013844:	d1df      	bne.n	8013806 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8013846:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801384a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801384c:	4305      	orrs	r5, r0
 801384e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8013852:	888d      	ldrh	r5, [r1, #4]
 8013854:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8013858:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801385c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8013860:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8013862:	898d      	ldrh	r5, [r1, #12]
 8013864:	e7cb      	b.n	80137fe <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8013866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801386a:	4302      	orrs	r2, r0
 801386c:	e7d0      	b.n	8013810 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801386e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013872:	4302      	orrs	r2, r0
 8013874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8013878:	e7d3      	b.n	8013822 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801387a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013880:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8013882:	2001      	movs	r0, #1
 8013884:	e7dc      	b.n	8013840 <HAL_CAN_ConfigFilter+0x98>

08013886 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8013886:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8013888:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 801388c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 801388e:	2b01      	cmp	r3, #1
 8013890:	b2dd      	uxtb	r5, r3
 8013892:	d120      	bne.n	80138d6 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8013894:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8013896:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8013898:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801389c:	6813      	ldr	r3, [r2, #0]
 801389e:	f023 0301 	bic.w	r3, r3, #1
 80138a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80138a4:	f7ff fc4e 	bl	8013144 <HAL_GetTick>
 80138a8:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80138aa:	6823      	ldr	r3, [r4, #0]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	f013 0301 	ands.w	r3, r3, #1
 80138b2:	d102      	bne.n	80138ba <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80138b4:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80138b6:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80138b8:	e00b      	b.n	80138d2 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80138ba:	f7ff fc43 	bl	8013144 <HAL_GetTick>
 80138be:	1b80      	subs	r0, r0, r6
 80138c0:	280a      	cmp	r0, #10
 80138c2:	d9f2      	bls.n	80138aa <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80138c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80138ca:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80138cc:	2305      	movs	r3, #5
 80138ce:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80138d2:	4628      	mov	r0, r5
 80138d4:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80138d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80138d8:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80138da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138de:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80138e0:	e7f7      	b.n	80138d2 <HAL_CAN_Start+0x4c>

080138e2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80138e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80138e4:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80138e8:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80138ea:	3d01      	subs	r5, #1
 80138ec:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80138ee:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80138f0:	d841      	bhi.n	8013976 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80138f2:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80138f6:	d03a      	beq.n	801396e <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80138f8:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80138fc:	2c03      	cmp	r4, #3
 80138fe:	f04f 0501 	mov.w	r5, #1
 8013902:	d105      	bne.n	8013910 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8013904:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801390a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 801390c:	2001      	movs	r0, #1
 801390e:	e028      	b.n	8013962 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8013910:	40a5      	lsls	r5, r4
 8013912:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8013914:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8013918:	f104 0318 	add.w	r3, r4, #24
 801391c:	bb10      	cbnz	r0, 8013964 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801391e:	6808      	ldr	r0, [r1, #0]
 8013920:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8013924:	011b      	lsls	r3, r3, #4
 8013926:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8013928:	0120      	lsls	r0, r4, #4
 801392a:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801392e:	4406      	add	r6, r0
      return HAL_OK;
 8013930:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8013932:	690d      	ldr	r5, [r1, #16]
 8013934:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8013938:	7d09      	ldrb	r1, [r1, #20]
 801393a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801393c:	bf02      	ittt	eq
 801393e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8013942:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8013946:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801394a:	6851      	ldr	r1, [r2, #4]
 801394c:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8013950:	6812      	ldr	r2, [r2, #0]
 8013952:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8013956:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 801395a:	f042 0201 	orr.w	r2, r2, #1
 801395e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8013962:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8013964:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8013966:	4338      	orrs	r0, r7
 8013968:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 801396c:	e7da      	b.n	8013924 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801396e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013974:	e7c9      	b.n	801390a <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013976:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801397c:	e7c5      	b.n	801390a <HAL_CAN_AddTxMessage+0x28>

0801397e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801397e:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8013980:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8013984:	3c01      	subs	r4, #1
 8013986:	2c01      	cmp	r4, #1
 8013988:	d86c      	bhi.n	8013a64 <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801398a:	6806      	ldr	r6, [r0, #0]
 801398c:	b941      	cbnz	r1, 80139a0 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801398e:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8013990:	07a4      	lsls	r4, r4, #30
 8013992:	d107      	bne.n	80139a4 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8013994:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801399a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 801399c:	2001      	movs	r0, #1
 801399e:	e056      	b.n	8013a4e <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80139a0:	6934      	ldr	r4, [r6, #16]
 80139a2:	e7f5      	b.n	8013990 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80139a4:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80139a8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80139ac:	010c      	lsls	r4, r1, #4
 80139ae:	f007 0704 	and.w	r7, r7, #4
 80139b2:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80139b4:	2f00      	cmp	r7, #0
 80139b6:	d14b      	bne.n	8013a50 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80139b8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80139bc:	0d7f      	lsrs	r7, r7, #21
 80139be:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80139c0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80139c4:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80139c6:	f007 0702 	and.w	r7, r7, #2
 80139ca:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80139cc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80139d0:	f007 070f 	and.w	r7, r7, #15
 80139d4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80139d6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80139da:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80139de:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80139e2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80139e4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80139e6:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80139e8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80139ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80139ee:	6802      	ldr	r2, [r0, #0]
 80139f0:	4422      	add	r2, r4
 80139f2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80139f6:	0a12      	lsrs	r2, r2, #8
 80139f8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80139fa:	6802      	ldr	r2, [r0, #0]
 80139fc:	4422      	add	r2, r4
 80139fe:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8013a02:	0c12      	lsrs	r2, r2, #16
 8013a04:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8013a06:	6802      	ldr	r2, [r0, #0]
 8013a08:	4422      	add	r2, r4
 8013a0a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8013a0e:	0e12      	lsrs	r2, r2, #24
 8013a10:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8013a12:	6802      	ldr	r2, [r0, #0]
 8013a14:	4422      	add	r2, r4
 8013a16:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8013a1a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8013a1c:	6802      	ldr	r2, [r0, #0]
 8013a1e:	4422      	add	r2, r4
 8013a20:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8013a24:	0a12      	lsrs	r2, r2, #8
 8013a26:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8013a28:	6802      	ldr	r2, [r0, #0]
 8013a2a:	4422      	add	r2, r4
 8013a2c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8013a30:	0c12      	lsrs	r2, r2, #16
 8013a32:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8013a34:	6802      	ldr	r2, [r0, #0]
 8013a36:	4414      	add	r4, r2
 8013a38:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8013a3c:	0e12      	lsrs	r2, r2, #24
 8013a3e:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	b951      	cbnz	r1, 8013a5a <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8013a44:	68da      	ldr	r2, [r3, #12]
 8013a46:	f042 0220 	orr.w	r2, r2, #32
 8013a4a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8013a4c:	2000      	movs	r0, #0
  }
}
 8013a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8013a50:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8013a54:	08ff      	lsrs	r7, r7, #3
 8013a56:	6057      	str	r7, [r2, #4]
 8013a58:	e7b2      	b.n	80139c0 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8013a5a:	691a      	ldr	r2, [r3, #16]
 8013a5c:	f042 0220 	orr.w	r2, r2, #32
 8013a60:	611a      	str	r2, [r3, #16]
 8013a62:	e7f3      	b.n	8013a4c <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013a64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013a6a:	e796      	b.n	801399a <HAL_CAN_GetRxMessage+0x1c>

08013a6c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8013a6c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8013a70:	3b01      	subs	r3, #1
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d805      	bhi.n	8013a82 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8013a76:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8013a78:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8013a7a:	6953      	ldr	r3, [r2, #20]
 8013a7c:	4319      	orrs	r1, r3
 8013a7e:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8013a80:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013a82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013a88:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8013a8a:	2001      	movs	r0, #1
  }
}
 8013a8c:	4770      	bx	lr

08013a8e <HAL_CAN_TxMailbox0CompleteCallback>:
 8013a8e:	4770      	bx	lr

08013a90 <HAL_CAN_TxMailbox1CompleteCallback>:
 8013a90:	4770      	bx	lr

08013a92 <HAL_CAN_TxMailbox2CompleteCallback>:
 8013a92:	4770      	bx	lr

08013a94 <HAL_CAN_TxMailbox0AbortCallback>:
 8013a94:	4770      	bx	lr

08013a96 <HAL_CAN_TxMailbox1AbortCallback>:
 8013a96:	4770      	bx	lr

08013a98 <HAL_CAN_TxMailbox2AbortCallback>:
 8013a98:	4770      	bx	lr

08013a9a <HAL_CAN_RxFifo0FullCallback>:
 8013a9a:	4770      	bx	lr

08013a9c <HAL_CAN_RxFifo1MsgPendingCallback>:
 8013a9c:	4770      	bx	lr

08013a9e <HAL_CAN_RxFifo1FullCallback>:
 8013a9e:	4770      	bx	lr

08013aa0 <HAL_CAN_SleepCallback>:
 8013aa0:	4770      	bx	lr

08013aa2 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8013aa2:	4770      	bx	lr

08013aa4 <HAL_CAN_ErrorCallback>:
 8013aa4:	4770      	bx	lr

08013aa6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8013aa6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8013aaa:	6803      	ldr	r3, [r0, #0]
{
 8013aac:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8013aae:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8013ab0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8013ab4:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8013ab8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8013aba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8013abe:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8013ac2:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8013ac6:	d022      	beq.n	8013b0e <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8013ac8:	f017 0401 	ands.w	r4, r7, #1
 8013acc:	d007      	beq.n	8013ade <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8013ace:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8013ad0:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8013ad2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8013ad4:	f140 80a5 	bpl.w	8013c22 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8013ad8:	f7ff ffd9 	bl	8013a8e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8013adc:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8013ade:	05fb      	lsls	r3, r7, #23
 8013ae0:	d509      	bpl.n	8013af6 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8013ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ae6:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8013ae8:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8013aea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8013aec:	f140 80a7 	bpl.w	8013c3e <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8013af0:	4628      	mov	r0, r5
 8013af2:	f7ff ffcd 	bl	8013a90 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8013af6:	03fb      	lsls	r3, r7, #15
 8013af8:	d509      	bpl.n	8013b0e <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8013afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013afe:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8013b00:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8013b02:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8013b04:	f140 80a9 	bpl.w	8013c5a <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f7ff ffc2 	bl	8013a92 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8013b0e:	0733      	lsls	r3, r6, #28
 8013b10:	d507      	bpl.n	8013b22 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8013b12:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8013b16:	bf1f      	itttt	ne
 8013b18:	2210      	movne	r2, #16
 8013b1a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8013b1c:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8013b20:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8013b22:	0777      	lsls	r7, r6, #29
 8013b24:	d508      	bpl.n	8013b38 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8013b26:	f01b 0f08 	tst.w	fp, #8
 8013b2a:	d005      	beq.n	8013b38 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8013b2c:	2208      	movs	r2, #8
 8013b2e:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8013b30:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8013b32:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8013b34:	f7ff ffb1 	bl	8013a9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8013b38:	07b0      	lsls	r0, r6, #30
 8013b3a:	d506      	bpl.n	8013b4a <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8013b3c:	682b      	ldr	r3, [r5, #0]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	0799      	lsls	r1, r3, #30
 8013b42:	d002      	beq.n	8013b4a <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8013b44:	4628      	mov	r0, r5
 8013b46:	f7ed fbdf 	bl	8001308 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8013b4a:	0672      	lsls	r2, r6, #25
 8013b4c:	d507      	bpl.n	8013b5e <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8013b4e:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8013b52:	bf1f      	itttt	ne
 8013b54:	2210      	movne	r2, #16
 8013b56:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8013b58:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8013b5c:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8013b5e:	06b3      	lsls	r3, r6, #26
 8013b60:	d508      	bpl.n	8013b74 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8013b62:	f01a 0f08 	tst.w	sl, #8
 8013b66:	d005      	beq.n	8013b74 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8013b68:	2208      	movs	r2, #8
 8013b6a:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8013b6c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8013b6e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8013b70:	f7ff ff95 	bl	8013a9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8013b74:	06f7      	lsls	r7, r6, #27
 8013b76:	d506      	bpl.n	8013b86 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8013b78:	682b      	ldr	r3, [r5, #0]
 8013b7a:	691b      	ldr	r3, [r3, #16]
 8013b7c:	0798      	lsls	r0, r3, #30
 8013b7e:	d002      	beq.n	8013b86 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8013b80:	4628      	mov	r0, r5
 8013b82:	f7ff ff8b 	bl	8013a9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8013b86:	03b1      	lsls	r1, r6, #14
 8013b88:	d508      	bpl.n	8013b9c <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8013b8a:	f019 0f10 	tst.w	r9, #16
 8013b8e:	d005      	beq.n	8013b9c <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8013b90:	2210      	movs	r2, #16
 8013b92:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8013b94:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8013b96:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8013b98:	f7ff ff82 	bl	8013aa0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8013b9c:	03f2      	lsls	r2, r6, #15
 8013b9e:	d508      	bpl.n	8013bb2 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8013ba0:	f019 0f08 	tst.w	r9, #8
 8013ba4:	d005      	beq.n	8013bb2 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8013ba6:	2208      	movs	r2, #8
 8013ba8:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8013baa:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8013bac:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8013bae:	f7ff ff78 	bl	8013aa2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8013bb2:	0433      	lsls	r3, r6, #16
 8013bb4:	d52c      	bpl.n	8013c10 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8013bb6:	f019 0f04 	tst.w	r9, #4
 8013bba:	682a      	ldr	r2, [r5, #0]
 8013bbc:	d026      	beq.n	8013c0c <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8013bbe:	05f7      	lsls	r7, r6, #23
 8013bc0:	d504      	bpl.n	8013bcc <HAL_CAN_IRQHandler+0x126>
 8013bc2:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8013bc6:	bf18      	it	ne
 8013bc8:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8013bcc:	05b0      	lsls	r0, r6, #22
 8013bce:	d504      	bpl.n	8013bda <HAL_CAN_IRQHandler+0x134>
 8013bd0:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8013bd4:	bf18      	it	ne
 8013bd6:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8013bda:	0571      	lsls	r1, r6, #21
 8013bdc:	d504      	bpl.n	8013be8 <HAL_CAN_IRQHandler+0x142>
 8013bde:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8013be2:	bf18      	it	ne
 8013be4:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8013be8:	0533      	lsls	r3, r6, #20
 8013bea:	d50f      	bpl.n	8013c0c <HAL_CAN_IRQHandler+0x166>
 8013bec:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8013bf0:	d00c      	beq.n	8013c0c <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8013bf2:	2b40      	cmp	r3, #64	; 0x40
 8013bf4:	d04f      	beq.n	8013c96 <HAL_CAN_IRQHandler+0x1f0>
 8013bf6:	d83e      	bhi.n	8013c76 <HAL_CAN_IRQHandler+0x1d0>
 8013bf8:	2b20      	cmp	r3, #32
 8013bfa:	d046      	beq.n	8013c8a <HAL_CAN_IRQHandler+0x1e4>
 8013bfc:	2b30      	cmp	r3, #48	; 0x30
 8013bfe:	d047      	beq.n	8013c90 <HAL_CAN_IRQHandler+0x1ea>
 8013c00:	2b10      	cmp	r3, #16
 8013c02:	d03f      	beq.n	8013c84 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8013c04:	6993      	ldr	r3, [r2, #24]
 8013c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c0a:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8013c0c:	2304      	movs	r3, #4
 8013c0e:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8013c10:	b12c      	cbz	r4, 8013c1e <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8013c12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8013c14:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8013c16:	431c      	orrs	r4, r3
 8013c18:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8013c1a:	f7ff ff43 	bl	8013aa4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8013c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8013c22:	077a      	lsls	r2, r7, #29
 8013c24:	d405      	bmi.n	8013c32 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8013c26:	f017 0408 	ands.w	r4, r7, #8
 8013c2a:	d105      	bne.n	8013c38 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8013c2c:	f7ff ff32 	bl	8013a94 <HAL_CAN_TxMailbox0AbortCallback>
 8013c30:	e755      	b.n	8013ade <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8013c32:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8013c36:	e752      	b.n	8013ade <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8013c38:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8013c3c:	e74f      	b.n	8013ade <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8013c3e:	0579      	lsls	r1, r7, #21
 8013c40:	d502      	bpl.n	8013c48 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8013c42:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8013c46:	e756      	b.n	8013af6 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8013c48:	053a      	lsls	r2, r7, #20
 8013c4a:	d502      	bpl.n	8013c52 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8013c4c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8013c50:	e751      	b.n	8013af6 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8013c52:	4628      	mov	r0, r5
 8013c54:	f7ff ff1f 	bl	8013a96 <HAL_CAN_TxMailbox1AbortCallback>
 8013c58:	e74d      	b.n	8013af6 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8013c5a:	0379      	lsls	r1, r7, #13
 8013c5c:	d502      	bpl.n	8013c64 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8013c5e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8013c62:	e754      	b.n	8013b0e <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8013c64:	033a      	lsls	r2, r7, #12
 8013c66:	d502      	bpl.n	8013c6e <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8013c68:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8013c6c:	e74f      	b.n	8013b0e <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8013c6e:	4628      	mov	r0, r5
 8013c70:	f7ff ff12 	bl	8013a98 <HAL_CAN_TxMailbox2AbortCallback>
 8013c74:	e74b      	b.n	8013b0e <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8013c76:	2b50      	cmp	r3, #80	; 0x50
 8013c78:	d010      	beq.n	8013c9c <HAL_CAN_IRQHandler+0x1f6>
 8013c7a:	2b60      	cmp	r3, #96	; 0x60
 8013c7c:	d1c2      	bne.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8013c7e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8013c82:	e7bf      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8013c84:	f044 0408 	orr.w	r4, r4, #8
            break;
 8013c88:	e7bc      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8013c8a:	f044 0410 	orr.w	r4, r4, #16
            break;
 8013c8e:	e7b9      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8013c90:	f044 0420 	orr.w	r4, r4, #32
            break;
 8013c94:	e7b6      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8013c96:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8013c9a:	e7b3      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8013c9c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8013ca0:	e7b0      	b.n	8013c04 <HAL_CAN_IRQHandler+0x15e>
	...

08013ca4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013ca4:	4907      	ldr	r1, [pc, #28]	; (8013cc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8013ca6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013ca8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8013caa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013cb2:	0412      	lsls	r2, r2, #16
 8013cb4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8013cc0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8013cc2:	4770      	bx	lr
 8013cc4:	e000ed00 	.word	0xe000ed00

08013cc8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013cc8:	4b16      	ldr	r3, [pc, #88]	; (8013d24 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8013cca:	b530      	push	{r4, r5, lr}
 8013ccc:	68dc      	ldr	r4, [r3, #12]
 8013cce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013cd2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013cd6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013cd8:	2b04      	cmp	r3, #4
 8013cda:	bf28      	it	cs
 8013cdc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013cde:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013ce0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013ce4:	bf98      	it	ls
 8013ce6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013ce8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013cec:	bf88      	it	hi
 8013cee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013cf0:	ea21 0303 	bic.w	r3, r1, r3
 8013cf4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013cf6:	fa05 f404 	lsl.w	r4, r5, r4
 8013cfa:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8013cfe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013d00:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d04:	bfac      	ite	ge
 8013d06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d0a:	4a07      	ldrlt	r2, [pc, #28]	; (8013d28 <HAL_NVIC_SetPriority+0x60>)
 8013d0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013d10:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d12:	bfab      	itete	ge
 8013d14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d1c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d20:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8013d22:	bd30      	pop	{r4, r5, pc}
 8013d24:	e000ed00 	.word	0xe000ed00
 8013d28:	e000ed14 	.word	0xe000ed14

08013d2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	db08      	blt.n	8013d42 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013d30:	2301      	movs	r3, #1
 8013d32:	0942      	lsrs	r2, r0, #5
 8013d34:	f000 001f 	and.w	r0, r0, #31
 8013d38:	fa03 f000 	lsl.w	r0, r3, r0
 8013d3c:	4b01      	ldr	r3, [pc, #4]	; (8013d44 <HAL_NVIC_EnableIRQ+0x18>)
 8013d3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8013d42:	4770      	bx	lr
 8013d44:	e000e100 	.word	0xe000e100

08013d48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013d48:	3801      	subs	r0, #1
 8013d4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8013d4e:	d20a      	bcs.n	8013d66 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d50:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013d52:	4b06      	ldr	r3, [pc, #24]	; (8013d6c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d54:	4a06      	ldr	r2, [pc, #24]	; (8013d70 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013d56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d58:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013d5c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013d5e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013d60:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013d64:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8013d66:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop
 8013d6c:	e000e010 	.word	0xe000e010
 8013d70:	e000ed00 	.word	0xe000ed00

08013d74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013d74:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8013d76:	b320      	cbz	r0, 8013dc2 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8013d78:	2214      	movs	r2, #20
 8013d7a:	6801      	ldr	r1, [r0, #0]
 8013d7c:	4b12      	ldr	r3, [pc, #72]	; (8013dc8 <HAL_DMA_Init+0x54>)
 8013d7e:	440b      	add	r3, r1
 8013d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8013d88:	4b10      	ldr	r3, [pc, #64]	; (8013dcc <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8013d8a:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8013d8c:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8013d8e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8013d92:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013d94:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8013d96:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013d9a:	4323      	orrs	r3, r4
 8013d9c:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8013d9e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013da2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013da4:	6944      	ldr	r4, [r0, #20]
 8013da6:	4323      	orrs	r3, r4
 8013da8:	6984      	ldr	r4, [r0, #24]
 8013daa:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8013dac:	69c4      	ldr	r4, [r0, #28]
 8013dae:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8013db0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8013db2:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8013db4:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013db8:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8013dba:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013dbc:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8013dbe:	4618      	mov	r0, r3
}
 8013dc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8013dc2:	2001      	movs	r0, #1
 8013dc4:	e7fc      	b.n	8013dc0 <HAL_DMA_Init+0x4c>
 8013dc6:	bf00      	nop
 8013dc8:	bffdfff8 	.word	0xbffdfff8
 8013dcc:	40020000 	.word	0x40020000

08013dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013dd0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8013dd2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8013dd6:	2c01      	cmp	r4, #1
 8013dd8:	d034      	beq.n	8013e44 <HAL_DMA_Start_IT+0x74>
 8013dda:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8013ddc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8013de0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8013de4:	42a5      	cmp	r5, r4
 8013de6:	f04f 0600 	mov.w	r6, #0
 8013dea:	f04f 0402 	mov.w	r4, #2
 8013dee:	d127      	bne.n	8013e40 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013df0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013df4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013df6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8013df8:	6826      	ldr	r6, [r4, #0]
 8013dfa:	f026 0601 	bic.w	r6, r6, #1
 8013dfe:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8013e00:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8013e04:	40bd      	lsls	r5, r7
 8013e06:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013e08:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013e0a:	6843      	ldr	r3, [r0, #4]
 8013e0c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8013e0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013e10:	bf0b      	itete	eq
 8013e12:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8013e14:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8013e16:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8013e18:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8013e1a:	b14b      	cbz	r3, 8013e30 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8013e22:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013e24:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	f043 0301 	orr.w	r3, r3, #1
 8013e2c:	6023      	str	r3, [r4, #0]
}
 8013e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	f023 0304 	bic.w	r3, r3, #4
 8013e36:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013e38:	6823      	ldr	r3, [r4, #0]
 8013e3a:	f043 030a 	orr.w	r3, r3, #10
 8013e3e:	e7f0      	b.n	8013e22 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8013e40:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8013e44:	2002      	movs	r0, #2
 8013e46:	e7f2      	b.n	8013e2e <HAL_DMA_Start_IT+0x5e>

08013e48 <HAL_DMA_IRQHandler>:
{
 8013e48:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8013e4a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013e4c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8013e4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013e50:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8013e52:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8013e54:	4095      	lsls	r5, r2
 8013e56:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8013e58:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8013e5a:	d032      	beq.n	8013ec2 <HAL_DMA_IRQHandler+0x7a>
 8013e5c:	074d      	lsls	r5, r1, #29
 8013e5e:	d530      	bpl.n	8013ec2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013e64:	bf5e      	ittt	pl
 8013e66:	681a      	ldrpl	r2, [r3, #0]
 8013e68:	f022 0204 	bicpl.w	r2, r2, #4
 8013e6c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8013e6e:	4a3d      	ldr	r2, [pc, #244]	; (8013f64 <HAL_DMA_IRQHandler+0x11c>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d019      	beq.n	8013ea8 <HAL_DMA_IRQHandler+0x60>
 8013e74:	3214      	adds	r2, #20
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d018      	beq.n	8013eac <HAL_DMA_IRQHandler+0x64>
 8013e7a:	3214      	adds	r2, #20
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d017      	beq.n	8013eb0 <HAL_DMA_IRQHandler+0x68>
 8013e80:	3214      	adds	r2, #20
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d017      	beq.n	8013eb6 <HAL_DMA_IRQHandler+0x6e>
 8013e86:	3214      	adds	r2, #20
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d017      	beq.n	8013ebc <HAL_DMA_IRQHandler+0x74>
 8013e8c:	3214      	adds	r2, #20
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	bf0c      	ite	eq
 8013e92:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8013e96:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8013e9a:	4a33      	ldr	r2, [pc, #204]	; (8013f68 <HAL_DMA_IRQHandler+0x120>)
 8013e9c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8013e9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d05c      	beq.n	8013f5e <HAL_DMA_IRQHandler+0x116>
}
 8013ea4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8013ea6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8013ea8:	2304      	movs	r3, #4
 8013eaa:	e7f6      	b.n	8013e9a <HAL_DMA_IRQHandler+0x52>
 8013eac:	2340      	movs	r3, #64	; 0x40
 8013eae:	e7f4      	b.n	8013e9a <HAL_DMA_IRQHandler+0x52>
 8013eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eb4:	e7f1      	b.n	8013e9a <HAL_DMA_IRQHandler+0x52>
 8013eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013eba:	e7ee      	b.n	8013e9a <HAL_DMA_IRQHandler+0x52>
 8013ebc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013ec0:	e7eb      	b.n	8013e9a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8013ec2:	2502      	movs	r5, #2
 8013ec4:	4095      	lsls	r5, r2
 8013ec6:	4225      	tst	r5, r4
 8013ec8:	d035      	beq.n	8013f36 <HAL_DMA_IRQHandler+0xee>
 8013eca:	078d      	lsls	r5, r1, #30
 8013ecc:	d533      	bpl.n	8013f36 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	0694      	lsls	r4, r2, #26
 8013ed2:	d406      	bmi.n	8013ee2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	f022 020a 	bic.w	r2, r2, #10
 8013eda:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8013edc:	2201      	movs	r2, #1
 8013ede:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8013ee2:	4a20      	ldr	r2, [pc, #128]	; (8013f64 <HAL_DMA_IRQHandler+0x11c>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d019      	beq.n	8013f1c <HAL_DMA_IRQHandler+0xd4>
 8013ee8:	3214      	adds	r2, #20
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d018      	beq.n	8013f20 <HAL_DMA_IRQHandler+0xd8>
 8013eee:	3214      	adds	r2, #20
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d017      	beq.n	8013f24 <HAL_DMA_IRQHandler+0xdc>
 8013ef4:	3214      	adds	r2, #20
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d017      	beq.n	8013f2a <HAL_DMA_IRQHandler+0xe2>
 8013efa:	3214      	adds	r2, #20
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d017      	beq.n	8013f30 <HAL_DMA_IRQHandler+0xe8>
 8013f00:	3214      	adds	r2, #20
 8013f02:	4293      	cmp	r3, r2
 8013f04:	bf0c      	ite	eq
 8013f06:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8013f0a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8013f0e:	4a16      	ldr	r2, [pc, #88]	; (8013f68 <HAL_DMA_IRQHandler+0x120>)
 8013f10:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8013f12:	2300      	movs	r3, #0
 8013f14:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8013f18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013f1a:	e7c1      	b.n	8013ea0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	e7f6      	b.n	8013f0e <HAL_DMA_IRQHandler+0xc6>
 8013f20:	2320      	movs	r3, #32
 8013f22:	e7f4      	b.n	8013f0e <HAL_DMA_IRQHandler+0xc6>
 8013f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f28:	e7f1      	b.n	8013f0e <HAL_DMA_IRQHandler+0xc6>
 8013f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013f2e:	e7ee      	b.n	8013f0e <HAL_DMA_IRQHandler+0xc6>
 8013f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013f34:	e7eb      	b.n	8013f0e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8013f36:	2508      	movs	r5, #8
 8013f38:	4095      	lsls	r5, r2
 8013f3a:	4225      	tst	r5, r4
 8013f3c:	d00f      	beq.n	8013f5e <HAL_DMA_IRQHandler+0x116>
 8013f3e:	0709      	lsls	r1, r1, #28
 8013f40:	d50d      	bpl.n	8013f5e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013f42:	6819      	ldr	r1, [r3, #0]
 8013f44:	f021 010e 	bic.w	r1, r1, #14
 8013f48:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	fa03 f202 	lsl.w	r2, r3, r2
 8013f50:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8013f52:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8013f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f58:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8013f5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013f5c:	e7a0      	b.n	8013ea0 <HAL_DMA_IRQHandler+0x58>
}
 8013f5e:	bc70      	pop	{r4, r5, r6}
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop
 8013f64:	40020008 	.word	0x40020008
 8013f68:	40020000 	.word	0x40020000

08013f6c <HAL_DMA_GetState>:
}
 8013f6c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8013f70:	4770      	bx	lr
	...

08013f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8013f78:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8013f7a:	4616      	mov	r6, r2
 8013f7c:	4b64      	ldr	r3, [pc, #400]	; (8014110 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8013f7e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8014120 <HAL_GPIO_Init+0x1ac>
 8013f82:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8014124 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013f86:	680d      	ldr	r5, [r1, #0]
 8013f88:	fa35 f406 	lsrs.w	r4, r5, r6
 8013f8c:	d102      	bne.n	8013f94 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8013f8e:	b003      	add	sp, #12
 8013f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8013f94:	f04f 0801 	mov.w	r8, #1
 8013f98:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013f9c:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8013fa0:	ea38 0505 	bics.w	r5, r8, r5
 8013fa4:	d17c      	bne.n	80140a0 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8013fa6:	684d      	ldr	r5, [r1, #4]
 8013fa8:	2d03      	cmp	r5, #3
 8013faa:	d807      	bhi.n	8013fbc <HAL_GPIO_Init+0x48>
 8013fac:	3d01      	subs	r5, #1
 8013fae:	2d02      	cmp	r5, #2
 8013fb0:	f200 8088 	bhi.w	80140c4 <HAL_GPIO_Init+0x150>
 8013fb4:	e8df f005 	tbb	[pc, r5]
 8013fb8:	9b96      	.short	0x9b96
 8013fba:	a1          	.byte	0xa1
 8013fbb:	00          	.byte	0x00
 8013fbc:	2d12      	cmp	r5, #18
 8013fbe:	f000 8099 	beq.w	80140f4 <HAL_GPIO_Init+0x180>
 8013fc2:	d86f      	bhi.n	80140a4 <HAL_GPIO_Init+0x130>
 8013fc4:	2d11      	cmp	r5, #17
 8013fc6:	f000 808f 	beq.w	80140e8 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8013fca:	2cff      	cmp	r4, #255	; 0xff
 8013fcc:	bf98      	it	ls
 8013fce:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8013fd0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8013fd4:	bf88      	it	hi
 8013fd6:	f100 0a04 	addhi.w	sl, r0, #4
 8013fda:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8013fde:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8013fe2:	bf88      	it	hi
 8013fe4:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8013fe6:	fa09 fb05 	lsl.w	fp, r9, r5
 8013fea:	ea28 080b 	bic.w	r8, r8, fp
 8013fee:	fa02 f505 	lsl.w	r5, r2, r5
 8013ff2:	ea48 0505 	orr.w	r5, r8, r5
 8013ff6:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013ffa:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8013ffe:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8014002:	d04d      	beq.n	80140a0 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8014004:	4f43      	ldr	r7, [pc, #268]	; (8014114 <HAL_GPIO_Init+0x1a0>)
 8014006:	f026 0803 	bic.w	r8, r6, #3
 801400a:	69bd      	ldr	r5, [r7, #24]
 801400c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8014010:	f045 0501 	orr.w	r5, r5, #1
 8014014:	61bd      	str	r5, [r7, #24]
 8014016:	69bd      	ldr	r5, [r7, #24]
 8014018:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 801401c:	f005 0501 	and.w	r5, r5, #1
 8014020:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8014022:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8014026:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8014028:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 801402c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8014030:	fa09 f90b 	lsl.w	r9, r9, fp
 8014034:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8014038:	4d37      	ldr	r5, [pc, #220]	; (8014118 <HAL_GPIO_Init+0x1a4>)
 801403a:	42a8      	cmp	r0, r5
 801403c:	d061      	beq.n	8014102 <HAL_GPIO_Init+0x18e>
 801403e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8014042:	42a8      	cmp	r0, r5
 8014044:	d05f      	beq.n	8014106 <HAL_GPIO_Init+0x192>
 8014046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801404a:	42a8      	cmp	r0, r5
 801404c:	d05d      	beq.n	801410a <HAL_GPIO_Init+0x196>
 801404e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8014052:	42a8      	cmp	r0, r5
 8014054:	bf0c      	ite	eq
 8014056:	2503      	moveq	r5, #3
 8014058:	2504      	movne	r5, #4
 801405a:	fa05 f50b 	lsl.w	r5, r5, fp
 801405e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8014062:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8014066:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8014068:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 801406c:	bf14      	ite	ne
 801406e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8014070:	43a5      	biceq	r5, r4
 8014072:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8014074:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8014076:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 801407a:	bf14      	ite	ne
 801407c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 801407e:	43a5      	biceq	r5, r4
 8014080:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8014082:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8014084:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8014088:	bf14      	ite	ne
 801408a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 801408c:	43a5      	biceq	r5, r4
 801408e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8014090:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8014092:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8014096:	bf14      	ite	ne
 8014098:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 801409a:	ea25 0404 	biceq.w	r4, r5, r4
 801409e:	60dc      	str	r4, [r3, #12]
	position++;
 80140a0:	3601      	adds	r6, #1
 80140a2:	e770      	b.n	8013f86 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80140a4:	4f1d      	ldr	r7, [pc, #116]	; (801411c <HAL_GPIO_Init+0x1a8>)
 80140a6:	42bd      	cmp	r5, r7
 80140a8:	d00c      	beq.n	80140c4 <HAL_GPIO_Init+0x150>
 80140aa:	d817      	bhi.n	80140dc <HAL_GPIO_Init+0x168>
 80140ac:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8014128 <HAL_GPIO_Init+0x1b4>
 80140b0:	454d      	cmp	r5, r9
 80140b2:	d007      	beq.n	80140c4 <HAL_GPIO_Init+0x150>
 80140b4:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80140b8:	454d      	cmp	r5, r9
 80140ba:	d003      	beq.n	80140c4 <HAL_GPIO_Init+0x150>
 80140bc:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80140c0:	454d      	cmp	r5, r9
 80140c2:	d182      	bne.n	8013fca <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80140c4:	688a      	ldr	r2, [r1, #8]
 80140c6:	b1d2      	cbz	r2, 80140fe <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80140c8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80140ca:	bf08      	it	eq
 80140cc:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80140d0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80140d4:	bf18      	it	ne
 80140d6:	f8c0 8014 	strne.w	r8, [r0, #20]
 80140da:	e776      	b.n	8013fca <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80140dc:	4565      	cmp	r5, ip
 80140de:	d0f1      	beq.n	80140c4 <HAL_GPIO_Init+0x150>
 80140e0:	4575      	cmp	r5, lr
 80140e2:	e7ee      	b.n	80140c2 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80140e4:	68ca      	ldr	r2, [r1, #12]
          break;
 80140e6:	e770      	b.n	8013fca <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80140e8:	68ca      	ldr	r2, [r1, #12]
 80140ea:	3204      	adds	r2, #4
          break;
 80140ec:	e76d      	b.n	8013fca <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80140ee:	68ca      	ldr	r2, [r1, #12]
 80140f0:	3208      	adds	r2, #8
          break;
 80140f2:	e76a      	b.n	8013fca <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80140f4:	68ca      	ldr	r2, [r1, #12]
 80140f6:	320c      	adds	r2, #12
          break;
 80140f8:	e767      	b.n	8013fca <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80140fa:	2200      	movs	r2, #0
 80140fc:	e765      	b.n	8013fca <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80140fe:	2204      	movs	r2, #4
 8014100:	e763      	b.n	8013fca <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8014102:	2500      	movs	r5, #0
 8014104:	e7a9      	b.n	801405a <HAL_GPIO_Init+0xe6>
 8014106:	2501      	movs	r5, #1
 8014108:	e7a7      	b.n	801405a <HAL_GPIO_Init+0xe6>
 801410a:	2502      	movs	r5, #2
 801410c:	e7a5      	b.n	801405a <HAL_GPIO_Init+0xe6>
 801410e:	bf00      	nop
 8014110:	40010400 	.word	0x40010400
 8014114:	40021000 	.word	0x40021000
 8014118:	40010800 	.word	0x40010800
 801411c:	10220000 	.word	0x10220000
 8014120:	10310000 	.word	0x10310000
 8014124:	10320000 	.word	0x10320000
 8014128:	10120000 	.word	0x10120000

0801412c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801412c:	6883      	ldr	r3, [r0, #8]
 801412e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8014130:	bf14      	ite	ne
 8014132:	2001      	movne	r0, #1
 8014134:	2000      	moveq	r0, #0
 8014136:	4770      	bx	lr

08014138 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014138:	b10a      	cbz	r2, 801413e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 801413a:	6101      	str	r1, [r0, #16]
  }
}
 801413c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 801413e:	0409      	lsls	r1, r1, #16
 8014140:	e7fb      	b.n	801413a <HAL_GPIO_WritePin+0x2>

08014142 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8014142:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8014144:	ea01 0203 	and.w	r2, r1, r3
 8014148:	ea21 0103 	bic.w	r1, r1, r3
 801414c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014150:	6101      	str	r1, [r0, #16]
}
 8014152:	4770      	bx	lr

08014154 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8014154:	4a04      	ldr	r2, [pc, #16]	; (8014168 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8014156:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8014158:	6951      	ldr	r1, [r2, #20]
 801415a:	4201      	tst	r1, r0
 801415c:	d002      	beq.n	8014164 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801415e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014160:	f7ed f8ae 	bl	80012c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8014164:	bd08      	pop	{r3, pc}
 8014166:	bf00      	nop
 8014168:	40010400 	.word	0x40010400

0801416c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801416c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8014170:	4605      	mov	r5, r0
 8014172:	b338      	cbz	r0, 80141c4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014174:	6803      	ldr	r3, [r0, #0]
 8014176:	07db      	lsls	r3, r3, #31
 8014178:	d410      	bmi.n	801419c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801417a:	682b      	ldr	r3, [r5, #0]
 801417c:	079f      	lsls	r7, r3, #30
 801417e:	d45e      	bmi.n	801423e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014180:	682b      	ldr	r3, [r5, #0]
 8014182:	0719      	lsls	r1, r3, #28
 8014184:	f100 8095 	bmi.w	80142b2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	075a      	lsls	r2, r3, #29
 801418c:	f100 80bf 	bmi.w	801430e <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014190:	69e8      	ldr	r0, [r5, #28]
 8014192:	2800      	cmp	r0, #0
 8014194:	f040 812c 	bne.w	80143f0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8014198:	2000      	movs	r0, #0
 801419a:	e029      	b.n	80141f0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801419c:	4c8f      	ldr	r4, [pc, #572]	; (80143dc <HAL_RCC_OscConfig+0x270>)
 801419e:	6863      	ldr	r3, [r4, #4]
 80141a0:	f003 030c 	and.w	r3, r3, #12
 80141a4:	2b04      	cmp	r3, #4
 80141a6:	d007      	beq.n	80141b8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80141a8:	6863      	ldr	r3, [r4, #4]
 80141aa:	f003 030c 	and.w	r3, r3, #12
 80141ae:	2b08      	cmp	r3, #8
 80141b0:	d10a      	bne.n	80141c8 <HAL_RCC_OscConfig+0x5c>
 80141b2:	6863      	ldr	r3, [r4, #4]
 80141b4:	03de      	lsls	r6, r3, #15
 80141b6:	d507      	bpl.n	80141c8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	039c      	lsls	r4, r3, #14
 80141bc:	d5dd      	bpl.n	801417a <HAL_RCC_OscConfig+0xe>
 80141be:	686b      	ldr	r3, [r5, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d1da      	bne.n	801417a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80141c4:	2001      	movs	r0, #1
 80141c6:	e013      	b.n	80141f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80141c8:	686b      	ldr	r3, [r5, #4]
 80141ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141ce:	d112      	bne.n	80141f6 <HAL_RCC_OscConfig+0x8a>
 80141d0:	6823      	ldr	r3, [r4, #0]
 80141d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80141d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80141d8:	f7fe ffb4 	bl	8013144 <HAL_GetTick>
 80141dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80141de:	6823      	ldr	r3, [r4, #0]
 80141e0:	0398      	lsls	r0, r3, #14
 80141e2:	d4ca      	bmi.n	801417a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80141e4:	f7fe ffae 	bl	8013144 <HAL_GetTick>
 80141e8:	1b80      	subs	r0, r0, r6
 80141ea:	2864      	cmp	r0, #100	; 0x64
 80141ec:	d9f7      	bls.n	80141de <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80141ee:	2003      	movs	r0, #3
}
 80141f0:	b002      	add	sp, #8
 80141f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80141f6:	b99b      	cbnz	r3, 8014220 <HAL_RCC_OscConfig+0xb4>
 80141f8:	6823      	ldr	r3, [r4, #0]
 80141fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80141fe:	6023      	str	r3, [r4, #0]
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014206:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8014208:	f7fe ff9c 	bl	8013144 <HAL_GetTick>
 801420c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	0399      	lsls	r1, r3, #14
 8014212:	d5b2      	bpl.n	801417a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014214:	f7fe ff96 	bl	8013144 <HAL_GetTick>
 8014218:	1b80      	subs	r0, r0, r6
 801421a:	2864      	cmp	r0, #100	; 0x64
 801421c:	d9f7      	bls.n	801420e <HAL_RCC_OscConfig+0xa2>
 801421e:	e7e6      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014224:	6823      	ldr	r3, [r4, #0]
 8014226:	d103      	bne.n	8014230 <HAL_RCC_OscConfig+0xc4>
 8014228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801422c:	6023      	str	r3, [r4, #0]
 801422e:	e7cf      	b.n	80141d0 <HAL_RCC_OscConfig+0x64>
 8014230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014234:	6023      	str	r3, [r4, #0]
 8014236:	6823      	ldr	r3, [r4, #0]
 8014238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801423c:	e7cb      	b.n	80141d6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801423e:	4c67      	ldr	r4, [pc, #412]	; (80143dc <HAL_RCC_OscConfig+0x270>)
 8014240:	6863      	ldr	r3, [r4, #4]
 8014242:	f013 0f0c 	tst.w	r3, #12
 8014246:	d007      	beq.n	8014258 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8014248:	6863      	ldr	r3, [r4, #4]
 801424a:	f003 030c 	and.w	r3, r3, #12
 801424e:	2b08      	cmp	r3, #8
 8014250:	d110      	bne.n	8014274 <HAL_RCC_OscConfig+0x108>
 8014252:	6863      	ldr	r3, [r4, #4]
 8014254:	03da      	lsls	r2, r3, #15
 8014256:	d40d      	bmi.n	8014274 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8014258:	6823      	ldr	r3, [r4, #0]
 801425a:	079b      	lsls	r3, r3, #30
 801425c:	d502      	bpl.n	8014264 <HAL_RCC_OscConfig+0xf8>
 801425e:	692b      	ldr	r3, [r5, #16]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d1af      	bne.n	80141c4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014264:	6823      	ldr	r3, [r4, #0]
 8014266:	696a      	ldr	r2, [r5, #20]
 8014268:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801426c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	e785      	b.n	8014180 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014274:	692a      	ldr	r2, [r5, #16]
 8014276:	4b5a      	ldr	r3, [pc, #360]	; (80143e0 <HAL_RCC_OscConfig+0x274>)
 8014278:	b16a      	cbz	r2, 8014296 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 801427a:	2201      	movs	r2, #1
 801427c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801427e:	f7fe ff61 	bl	8013144 <HAL_GetTick>
 8014282:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014284:	6823      	ldr	r3, [r4, #0]
 8014286:	079f      	lsls	r7, r3, #30
 8014288:	d4ec      	bmi.n	8014264 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801428a:	f7fe ff5b 	bl	8013144 <HAL_GetTick>
 801428e:	1b80      	subs	r0, r0, r6
 8014290:	2802      	cmp	r0, #2
 8014292:	d9f7      	bls.n	8014284 <HAL_RCC_OscConfig+0x118>
 8014294:	e7ab      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8014296:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8014298:	f7fe ff54 	bl	8013144 <HAL_GetTick>
 801429c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801429e:	6823      	ldr	r3, [r4, #0]
 80142a0:	0798      	lsls	r0, r3, #30
 80142a2:	f57f af6d 	bpl.w	8014180 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80142a6:	f7fe ff4d 	bl	8013144 <HAL_GetTick>
 80142aa:	1b80      	subs	r0, r0, r6
 80142ac:	2802      	cmp	r0, #2
 80142ae:	d9f6      	bls.n	801429e <HAL_RCC_OscConfig+0x132>
 80142b0:	e79d      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80142b2:	69aa      	ldr	r2, [r5, #24]
 80142b4:	4e49      	ldr	r6, [pc, #292]	; (80143dc <HAL_RCC_OscConfig+0x270>)
 80142b6:	4b4b      	ldr	r3, [pc, #300]	; (80143e4 <HAL_RCC_OscConfig+0x278>)
 80142b8:	b1da      	cbz	r2, 80142f2 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 80142ba:	2201      	movs	r2, #1
 80142bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80142be:	f7fe ff41 	bl	8013144 <HAL_GetTick>
 80142c2:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80142c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80142c6:	079b      	lsls	r3, r3, #30
 80142c8:	d50d      	bpl.n	80142e6 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80142ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80142ce:	4b46      	ldr	r3, [pc, #280]	; (80143e8 <HAL_RCC_OscConfig+0x27c>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80142d6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80142d8:	bf00      	nop
  }
  while (Delay --);
 80142da:	9b01      	ldr	r3, [sp, #4]
 80142dc:	1e5a      	subs	r2, r3, #1
 80142de:	9201      	str	r2, [sp, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d1f9      	bne.n	80142d8 <HAL_RCC_OscConfig+0x16c>
 80142e4:	e750      	b.n	8014188 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80142e6:	f7fe ff2d 	bl	8013144 <HAL_GetTick>
 80142ea:	1b00      	subs	r0, r0, r4
 80142ec:	2802      	cmp	r0, #2
 80142ee:	d9e9      	bls.n	80142c4 <HAL_RCC_OscConfig+0x158>
 80142f0:	e77d      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80142f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80142f4:	f7fe ff26 	bl	8013144 <HAL_GetTick>
 80142f8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80142fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80142fc:	079f      	lsls	r7, r3, #30
 80142fe:	f57f af43 	bpl.w	8014188 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014302:	f7fe ff1f 	bl	8013144 <HAL_GetTick>
 8014306:	1b00      	subs	r0, r0, r4
 8014308:	2802      	cmp	r0, #2
 801430a:	d9f6      	bls.n	80142fa <HAL_RCC_OscConfig+0x18e>
 801430c:	e76f      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801430e:	4c33      	ldr	r4, [pc, #204]	; (80143dc <HAL_RCC_OscConfig+0x270>)
 8014310:	69e3      	ldr	r3, [r4, #28]
 8014312:	00d8      	lsls	r0, r3, #3
 8014314:	d424      	bmi.n	8014360 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8014316:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8014318:	69e3      	ldr	r3, [r4, #28]
 801431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801431e:	61e3      	str	r3, [r4, #28]
 8014320:	69e3      	ldr	r3, [r4, #28]
 8014322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801432a:	4e30      	ldr	r6, [pc, #192]	; (80143ec <HAL_RCC_OscConfig+0x280>)
 801432c:	6833      	ldr	r3, [r6, #0]
 801432e:	05d9      	lsls	r1, r3, #23
 8014330:	d518      	bpl.n	8014364 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014332:	68eb      	ldr	r3, [r5, #12]
 8014334:	2b01      	cmp	r3, #1
 8014336:	d126      	bne.n	8014386 <HAL_RCC_OscConfig+0x21a>
 8014338:	6a23      	ldr	r3, [r4, #32]
 801433a:	f043 0301 	orr.w	r3, r3, #1
 801433e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8014340:	f7fe ff00 	bl	8013144 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014344:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8014348:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801434a:	6a23      	ldr	r3, [r4, #32]
 801434c:	079b      	lsls	r3, r3, #30
 801434e:	d53f      	bpl.n	80143d0 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8014350:	2f00      	cmp	r7, #0
 8014352:	f43f af1d 	beq.w	8014190 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8014356:	69e3      	ldr	r3, [r4, #28]
 8014358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801435c:	61e3      	str	r3, [r4, #28]
 801435e:	e717      	b.n	8014190 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8014360:	2700      	movs	r7, #0
 8014362:	e7e2      	b.n	801432a <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014364:	6833      	ldr	r3, [r6, #0]
 8014366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801436a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 801436c:	f7fe feea 	bl	8013144 <HAL_GetTick>
 8014370:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014372:	6833      	ldr	r3, [r6, #0]
 8014374:	05da      	lsls	r2, r3, #23
 8014376:	d4dc      	bmi.n	8014332 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014378:	f7fe fee4 	bl	8013144 <HAL_GetTick>
 801437c:	eba0 0008 	sub.w	r0, r0, r8
 8014380:	2864      	cmp	r0, #100	; 0x64
 8014382:	d9f6      	bls.n	8014372 <HAL_RCC_OscConfig+0x206>
 8014384:	e733      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014386:	b9ab      	cbnz	r3, 80143b4 <HAL_RCC_OscConfig+0x248>
 8014388:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801438a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801438e:	f023 0301 	bic.w	r3, r3, #1
 8014392:	6223      	str	r3, [r4, #32]
 8014394:	6a23      	ldr	r3, [r4, #32]
 8014396:	f023 0304 	bic.w	r3, r3, #4
 801439a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 801439c:	f7fe fed2 	bl	8013144 <HAL_GetTick>
 80143a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80143a2:	6a23      	ldr	r3, [r4, #32]
 80143a4:	0798      	lsls	r0, r3, #30
 80143a6:	d5d3      	bpl.n	8014350 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80143a8:	f7fe fecc 	bl	8013144 <HAL_GetTick>
 80143ac:	1b80      	subs	r0, r0, r6
 80143ae:	4540      	cmp	r0, r8
 80143b0:	d9f7      	bls.n	80143a2 <HAL_RCC_OscConfig+0x236>
 80143b2:	e71c      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80143b4:	2b05      	cmp	r3, #5
 80143b6:	6a23      	ldr	r3, [r4, #32]
 80143b8:	d103      	bne.n	80143c2 <HAL_RCC_OscConfig+0x256>
 80143ba:	f043 0304 	orr.w	r3, r3, #4
 80143be:	6223      	str	r3, [r4, #32]
 80143c0:	e7ba      	b.n	8014338 <HAL_RCC_OscConfig+0x1cc>
 80143c2:	f023 0301 	bic.w	r3, r3, #1
 80143c6:	6223      	str	r3, [r4, #32]
 80143c8:	6a23      	ldr	r3, [r4, #32]
 80143ca:	f023 0304 	bic.w	r3, r3, #4
 80143ce:	e7b6      	b.n	801433e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80143d0:	f7fe feb8 	bl	8013144 <HAL_GetTick>
 80143d4:	1b80      	subs	r0, r0, r6
 80143d6:	4540      	cmp	r0, r8
 80143d8:	d9b7      	bls.n	801434a <HAL_RCC_OscConfig+0x1de>
 80143da:	e708      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
 80143dc:	40021000 	.word	0x40021000
 80143e0:	42420000 	.word	0x42420000
 80143e4:	42420480 	.word	0x42420480
 80143e8:	20000008 	.word	0x20000008
 80143ec:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80143f0:	4b2a      	ldr	r3, [pc, #168]	; (801449c <HAL_RCC_OscConfig+0x330>)
 80143f2:	685a      	ldr	r2, [r3, #4]
 80143f4:	461c      	mov	r4, r3
 80143f6:	f002 020c 	and.w	r2, r2, #12
 80143fa:	2a08      	cmp	r2, #8
 80143fc:	d03d      	beq.n	801447a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80143fe:	2300      	movs	r3, #0
 8014400:	4e27      	ldr	r6, [pc, #156]	; (80144a0 <HAL_RCC_OscConfig+0x334>)
 8014402:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8014404:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014406:	d12b      	bne.n	8014460 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8014408:	f7fe fe9c 	bl	8013144 <HAL_GetTick>
 801440c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801440e:	6823      	ldr	r3, [r4, #0]
 8014410:	0199      	lsls	r1, r3, #6
 8014412:	d41f      	bmi.n	8014454 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8014414:	6a2b      	ldr	r3, [r5, #32]
 8014416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801441a:	d105      	bne.n	8014428 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 801441c:	6862      	ldr	r2, [r4, #4]
 801441e:	68a9      	ldr	r1, [r5, #8]
 8014420:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8014424:	430a      	orrs	r2, r1
 8014426:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014428:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801442a:	6862      	ldr	r2, [r4, #4]
 801442c:	430b      	orrs	r3, r1
 801442e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8014432:	4313      	orrs	r3, r2
 8014434:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8014436:	2301      	movs	r3, #1
 8014438:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 801443a:	f7fe fe83 	bl	8013144 <HAL_GetTick>
 801443e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8014440:	6823      	ldr	r3, [r4, #0]
 8014442:	019a      	lsls	r2, r3, #6
 8014444:	f53f aea8 	bmi.w	8014198 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014448:	f7fe fe7c 	bl	8013144 <HAL_GetTick>
 801444c:	1b40      	subs	r0, r0, r5
 801444e:	2802      	cmp	r0, #2
 8014450:	d9f6      	bls.n	8014440 <HAL_RCC_OscConfig+0x2d4>
 8014452:	e6cc      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014454:	f7fe fe76 	bl	8013144 <HAL_GetTick>
 8014458:	1bc0      	subs	r0, r0, r7
 801445a:	2802      	cmp	r0, #2
 801445c:	d9d7      	bls.n	801440e <HAL_RCC_OscConfig+0x2a2>
 801445e:	e6c6      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8014460:	f7fe fe70 	bl	8013144 <HAL_GetTick>
 8014464:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	019b      	lsls	r3, r3, #6
 801446a:	f57f ae95 	bpl.w	8014198 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801446e:	f7fe fe69 	bl	8013144 <HAL_GetTick>
 8014472:	1b40      	subs	r0, r0, r5
 8014474:	2802      	cmp	r0, #2
 8014476:	d9f6      	bls.n	8014466 <HAL_RCC_OscConfig+0x2fa>
 8014478:	e6b9      	b.n	80141ee <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801447a:	2801      	cmp	r0, #1
 801447c:	f43f aeb8 	beq.w	80141f0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8014480:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014482:	6a2a      	ldr	r2, [r5, #32]
 8014484:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8014488:	4291      	cmp	r1, r2
 801448a:	f47f ae9b 	bne.w	80141c4 <HAL_RCC_OscConfig+0x58>
 801448e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8014490:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014494:	4293      	cmp	r3, r2
 8014496:	f43f ae7f 	beq.w	8014198 <HAL_RCC_OscConfig+0x2c>
 801449a:	e693      	b.n	80141c4 <HAL_RCC_OscConfig+0x58>
 801449c:	40021000 	.word	0x40021000
 80144a0:	42420060 	.word	0x42420060

080144a4 <HAL_RCC_GetSysClockFreq>:
{
 80144a4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80144a6:	4b18      	ldr	r3, [pc, #96]	; (8014508 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80144a8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80144aa:	ac02      	add	r4, sp, #8
 80144ac:	f103 0510 	add.w	r5, r3, #16
 80144b0:	4622      	mov	r2, r4
 80144b2:	6818      	ldr	r0, [r3, #0]
 80144b4:	6859      	ldr	r1, [r3, #4]
 80144b6:	3308      	adds	r3, #8
 80144b8:	c203      	stmia	r2!, {r0, r1}
 80144ba:	42ab      	cmp	r3, r5
 80144bc:	4614      	mov	r4, r2
 80144be:	d1f7      	bne.n	80144b0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80144c0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80144c4:	4911      	ldr	r1, [pc, #68]	; (801450c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80144c6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80144ca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80144cc:	f003 020c 	and.w	r2, r3, #12
 80144d0:	2a08      	cmp	r2, #8
 80144d2:	d117      	bne.n	8014504 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80144d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80144d8:	a806      	add	r0, sp, #24
 80144da:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80144dc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80144de:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80144e2:	d50c      	bpl.n	80144fe <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80144e4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80144e6:	480a      	ldr	r0, [pc, #40]	; (8014510 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80144e8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80144ec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80144ee:	aa06      	add	r2, sp, #24
 80144f0:	4413      	add	r3, r2
 80144f2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80144f6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80144fa:	b007      	add	sp, #28
 80144fc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80144fe:	4805      	ldr	r0, [pc, #20]	; (8014514 <HAL_RCC_GetSysClockFreq+0x70>)
 8014500:	4350      	muls	r0, r2
 8014502:	e7fa      	b.n	80144fa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8014504:	4802      	ldr	r0, [pc, #8]	; (8014510 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8014506:	e7f8      	b.n	80144fa <HAL_RCC_GetSysClockFreq+0x56>
 8014508:	0801a5f0 	.word	0x0801a5f0
 801450c:	40021000 	.word	0x40021000
 8014510:	007a1200 	.word	0x007a1200
 8014514:	003d0900 	.word	0x003d0900

08014518 <HAL_RCC_ClockConfig>:
{
 8014518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801451c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 801451e:	4604      	mov	r4, r0
 8014520:	b910      	cbnz	r0, 8014528 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8014522:	2001      	movs	r0, #1
}
 8014524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014528:	4a44      	ldr	r2, [pc, #272]	; (801463c <HAL_RCC_ClockConfig+0x124>)
 801452a:	6813      	ldr	r3, [r2, #0]
 801452c:	f003 0307 	and.w	r3, r3, #7
 8014530:	428b      	cmp	r3, r1
 8014532:	d328      	bcc.n	8014586 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014534:	6821      	ldr	r1, [r4, #0]
 8014536:	078e      	lsls	r6, r1, #30
 8014538:	d430      	bmi.n	801459c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801453a:	07ca      	lsls	r2, r1, #31
 801453c:	d443      	bmi.n	80145c6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801453e:	4a3f      	ldr	r2, [pc, #252]	; (801463c <HAL_RCC_ClockConfig+0x124>)
 8014540:	6813      	ldr	r3, [r2, #0]
 8014542:	f003 0307 	and.w	r3, r3, #7
 8014546:	42ab      	cmp	r3, r5
 8014548:	d865      	bhi.n	8014616 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801454a:	6822      	ldr	r2, [r4, #0]
 801454c:	4d3c      	ldr	r5, [pc, #240]	; (8014640 <HAL_RCC_ClockConfig+0x128>)
 801454e:	f012 0f04 	tst.w	r2, #4
 8014552:	d16c      	bne.n	801462e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014554:	0713      	lsls	r3, r2, #28
 8014556:	d506      	bpl.n	8014566 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014558:	686b      	ldr	r3, [r5, #4]
 801455a:	6922      	ldr	r2, [r4, #16]
 801455c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8014560:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014564:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8014566:	f7ff ff9d 	bl	80144a4 <HAL_RCC_GetSysClockFreq>
 801456a:	686b      	ldr	r3, [r5, #4]
 801456c:	4a35      	ldr	r2, [pc, #212]	; (8014644 <HAL_RCC_ClockConfig+0x12c>)
 801456e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014572:	5cd3      	ldrb	r3, [r2, r3]
 8014574:	40d8      	lsrs	r0, r3
 8014576:	4b34      	ldr	r3, [pc, #208]	; (8014648 <HAL_RCC_ClockConfig+0x130>)
 8014578:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 801457a:	4b34      	ldr	r3, [pc, #208]	; (801464c <HAL_RCC_ClockConfig+0x134>)
 801457c:	6818      	ldr	r0, [r3, #0]
 801457e:	f7fe fd9f 	bl	80130c0 <HAL_InitTick>
  return HAL_OK;
 8014582:	2000      	movs	r0, #0
 8014584:	e7ce      	b.n	8014524 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014586:	6813      	ldr	r3, [r2, #0]
 8014588:	f023 0307 	bic.w	r3, r3, #7
 801458c:	430b      	orrs	r3, r1
 801458e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014590:	6813      	ldr	r3, [r2, #0]
 8014592:	f003 0307 	and.w	r3, r3, #7
 8014596:	428b      	cmp	r3, r1
 8014598:	d1c3      	bne.n	8014522 <HAL_RCC_ClockConfig+0xa>
 801459a:	e7cb      	b.n	8014534 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801459c:	4b28      	ldr	r3, [pc, #160]	; (8014640 <HAL_RCC_ClockConfig+0x128>)
 801459e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80145a2:	bf1e      	ittt	ne
 80145a4:	685a      	ldrne	r2, [r3, #4]
 80145a6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80145aa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80145ac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80145ae:	bf42      	ittt	mi
 80145b0:	685a      	ldrmi	r2, [r3, #4]
 80145b2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80145b6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80145b8:	685a      	ldr	r2, [r3, #4]
 80145ba:	68a0      	ldr	r0, [r4, #8]
 80145bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80145c0:	4302      	orrs	r2, r0
 80145c2:	605a      	str	r2, [r3, #4]
 80145c4:	e7b9      	b.n	801453a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80145c6:	6862      	ldr	r2, [r4, #4]
 80145c8:	4e1d      	ldr	r6, [pc, #116]	; (8014640 <HAL_RCC_ClockConfig+0x128>)
 80145ca:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80145cc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80145ce:	d11a      	bne.n	8014606 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80145d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80145d4:	d0a5      	beq.n	8014522 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80145d6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80145d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80145dc:	f023 0303 	bic.w	r3, r3, #3
 80145e0:	4313      	orrs	r3, r2
 80145e2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80145e4:	f7fe fdae 	bl	8013144 <HAL_GetTick>
 80145e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80145ea:	6873      	ldr	r3, [r6, #4]
 80145ec:	6862      	ldr	r2, [r4, #4]
 80145ee:	f003 030c 	and.w	r3, r3, #12
 80145f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80145f6:	d0a2      	beq.n	801453e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80145f8:	f7fe fda4 	bl	8013144 <HAL_GetTick>
 80145fc:	1bc0      	subs	r0, r0, r7
 80145fe:	4540      	cmp	r0, r8
 8014600:	d9f3      	bls.n	80145ea <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8014602:	2003      	movs	r0, #3
 8014604:	e78e      	b.n	8014524 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014606:	2a02      	cmp	r2, #2
 8014608:	d102      	bne.n	8014610 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801460a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801460e:	e7e1      	b.n	80145d4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014610:	f013 0f02 	tst.w	r3, #2
 8014614:	e7de      	b.n	80145d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014616:	6813      	ldr	r3, [r2, #0]
 8014618:	f023 0307 	bic.w	r3, r3, #7
 801461c:	432b      	orrs	r3, r5
 801461e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014620:	6813      	ldr	r3, [r2, #0]
 8014622:	f003 0307 	and.w	r3, r3, #7
 8014626:	42ab      	cmp	r3, r5
 8014628:	f47f af7b 	bne.w	8014522 <HAL_RCC_ClockConfig+0xa>
 801462c:	e78d      	b.n	801454a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801462e:	686b      	ldr	r3, [r5, #4]
 8014630:	68e1      	ldr	r1, [r4, #12]
 8014632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8014636:	430b      	orrs	r3, r1
 8014638:	606b      	str	r3, [r5, #4]
 801463a:	e78b      	b.n	8014554 <HAL_RCC_ClockConfig+0x3c>
 801463c:	40022000 	.word	0x40022000
 8014640:	40021000 	.word	0x40021000
 8014644:	0801a344 	.word	0x0801a344
 8014648:	20000008 	.word	0x20000008
 801464c:	20000034 	.word	0x20000034

08014650 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014650:	6803      	ldr	r3, [r0, #0]
{
 8014652:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014656:	07d9      	lsls	r1, r3, #31
{
 8014658:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801465a:	d520      	bpl.n	801469e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801465c:	4c35      	ldr	r4, [pc, #212]	; (8014734 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 801465e:	69e3      	ldr	r3, [r4, #28]
 8014660:	00da      	lsls	r2, r3, #3
 8014662:	d432      	bmi.n	80146ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8014664:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8014666:	69e3      	ldr	r3, [r4, #28]
 8014668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801466c:	61e3      	str	r3, [r4, #28]
 801466e:	69e3      	ldr	r3, [r4, #28]
 8014670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014674:	9301      	str	r3, [sp, #4]
 8014676:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014678:	4e2f      	ldr	r6, [pc, #188]	; (8014738 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801467a:	6833      	ldr	r3, [r6, #0]
 801467c:	05db      	lsls	r3, r3, #23
 801467e:	d526      	bpl.n	80146ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8014680:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8014682:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8014686:	d136      	bne.n	80146f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014688:	6a23      	ldr	r3, [r4, #32]
 801468a:	686a      	ldr	r2, [r5, #4]
 801468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014690:	4313      	orrs	r3, r2
 8014692:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8014694:	b11f      	cbz	r7, 801469e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014696:	69e3      	ldr	r3, [r4, #28]
 8014698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801469c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801469e:	6828      	ldr	r0, [r5, #0]
 80146a0:	0783      	lsls	r3, r0, #30
 80146a2:	d506      	bpl.n	80146b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80146a4:	4923      	ldr	r1, [pc, #140]	; (8014734 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80146a6:	68ab      	ldr	r3, [r5, #8]
 80146a8:	684a      	ldr	r2, [r1, #4]
 80146aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80146ae:	431a      	orrs	r2, r3
 80146b0:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80146b2:	f010 0010 	ands.w	r0, r0, #16
 80146b6:	d01b      	beq.n	80146f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80146b8:	4a1e      	ldr	r2, [pc, #120]	; (8014734 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80146ba:	68e9      	ldr	r1, [r5, #12]
 80146bc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80146be:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80146c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80146c4:	430b      	orrs	r3, r1
 80146c6:	6053      	str	r3, [r2, #4]
 80146c8:	e012      	b.n	80146f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 80146ca:	2700      	movs	r7, #0
 80146cc:	e7d4      	b.n	8014678 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80146ce:	6833      	ldr	r3, [r6, #0]
 80146d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80146d6:	f7fe fd35 	bl	8013144 <HAL_GetTick>
 80146da:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80146dc:	6833      	ldr	r3, [r6, #0]
 80146de:	05d8      	lsls	r0, r3, #23
 80146e0:	d4ce      	bmi.n	8014680 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80146e2:	f7fe fd2f 	bl	8013144 <HAL_GetTick>
 80146e6:	eba0 0008 	sub.w	r0, r0, r8
 80146ea:	2864      	cmp	r0, #100	; 0x64
 80146ec:	d9f6      	bls.n	80146dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80146ee:	2003      	movs	r0, #3
}
 80146f0:	b002      	add	sp, #8
 80146f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80146f6:	686a      	ldr	r2, [r5, #4]
 80146f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d0c3      	beq.n	8014688 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8014700:	2001      	movs	r0, #1
 8014702:	4a0e      	ldr	r2, [pc, #56]	; (801473c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8014704:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8014706:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014708:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801470a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 801470e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8014710:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8014712:	07d9      	lsls	r1, r3, #31
 8014714:	d5b8      	bpl.n	8014688 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8014716:	f7fe fd15 	bl	8013144 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801471a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 801471e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014720:	6a23      	ldr	r3, [r4, #32]
 8014722:	079a      	lsls	r2, r3, #30
 8014724:	d4b0      	bmi.n	8014688 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014726:	f7fe fd0d 	bl	8013144 <HAL_GetTick>
 801472a:	1b80      	subs	r0, r0, r6
 801472c:	4540      	cmp	r0, r8
 801472e:	d9f7      	bls.n	8014720 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8014730:	e7dd      	b.n	80146ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8014732:	bf00      	nop
 8014734:	40021000 	.word	0x40021000
 8014738:	40007000 	.word	0x40007000
 801473c:	42420440 	.word	0x42420440

08014740 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8014740:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014744:	461c      	mov	r4, r3
 8014746:	4616      	mov	r6, r2
 8014748:	460f      	mov	r7, r1
 801474a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801474c:	f7fe fcfa 	bl	8013144 <HAL_GetTick>
 8014750:	4434      	add	r4, r6
 8014752:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8014754:	f7fe fcf6 	bl	8013144 <HAL_GetTick>
 8014758:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801475a:	4b23      	ldr	r3, [pc, #140]	; (80147e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8014762:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014764:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8014766:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014768:	6893      	ldr	r3, [r2, #8]
 801476a:	ea37 0303 	bics.w	r3, r7, r3
 801476e:	d001      	beq.n	8014774 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8014770:	2000      	movs	r0, #0
 8014772:	e02e      	b.n	80147d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8014774:	1c73      	adds	r3, r6, #1
 8014776:	d0f7      	beq.n	8014768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014778:	f7fe fce4 	bl	8013144 <HAL_GetTick>
 801477c:	eba0 0008 	sub.w	r0, r0, r8
 8014780:	42a0      	cmp	r0, r4
 8014782:	d329      	bcc.n	80147d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014784:	682b      	ldr	r3, [r5, #0]
 8014786:	685a      	ldr	r2, [r3, #4]
 8014788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801478c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801478e:	686a      	ldr	r2, [r5, #4]
 8014790:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8014794:	d10a      	bne.n	80147ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8014796:	68aa      	ldr	r2, [r5, #8]
 8014798:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801479c:	d002      	beq.n	80147a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801479e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80147a2:	d103      	bne.n	80147ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80147a4:	681a      	ldr	r2, [r3, #0]
 80147a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80147aa:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80147ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80147ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80147b2:	d107      	bne.n	80147c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80147b4:	681a      	ldr	r2, [r3, #0]
 80147b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80147ba:	601a      	str	r2, [r3, #0]
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80147c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80147c4:	2301      	movs	r3, #1
 80147c6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80147ca:	2300      	movs	r3, #0
 80147cc:	2003      	movs	r0, #3
 80147ce:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80147d2:	b002      	add	sp, #8
 80147d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80147d8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80147da:	2b00      	cmp	r3, #0
      count--;
 80147dc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80147de:	bf08      	it	eq
 80147e0:	2400      	moveq	r4, #0
      count--;
 80147e2:	3b01      	subs	r3, #1
 80147e4:	e7be      	b.n	8014764 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80147e6:	bf00      	nop
 80147e8:	20000008 	.word	0x20000008

080147ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80147ec:	b510      	push	{r4, lr}
 80147ee:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80147f0:	460a      	mov	r2, r1
 80147f2:	2180      	movs	r1, #128	; 0x80
{
 80147f4:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80147f6:	f7ff ffa3 	bl	8014740 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80147fa:	b120      	cbz	r0, 8014806 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80147fc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80147fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014800:	f043 0320 	orr.w	r3, r3, #32
 8014804:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8014806:	bd10      	pop	{r4, pc}

08014808 <HAL_SPI_Init>:
{
 8014808:	b510      	push	{r4, lr}
  if (hspi == NULL)
 801480a:	4604      	mov	r4, r0
 801480c:	2800      	cmp	r0, #0
 801480e:	d051      	beq.n	80148b4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8014810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014812:	2b00      	cmp	r3, #0
 8014814:	d14a      	bne.n	80148ac <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014816:	6842      	ldr	r2, [r0, #4]
 8014818:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801481c:	d000      	beq.n	8014820 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801481e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014820:	2300      	movs	r3, #0
 8014822:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8014824:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8014828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801482c:	b923      	cbnz	r3, 8014838 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 801482e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8014830:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8014834:	f7ec fe2a 	bl	800148c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8014838:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 801483a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 801483c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8014840:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014842:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8014844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014848:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801484a:	6863      	ldr	r3, [r4, #4]
 801484c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8014850:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8014854:	4303      	orrs	r3, r0
 8014856:	68e0      	ldr	r0, [r4, #12]
 8014858:	69a1      	ldr	r1, [r4, #24]
 801485a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 801485e:	4303      	orrs	r3, r0
 8014860:	6920      	ldr	r0, [r4, #16]
 8014862:	f000 0002 	and.w	r0, r0, #2
 8014866:	4303      	orrs	r3, r0
 8014868:	6960      	ldr	r0, [r4, #20]
 801486a:	f000 0001 	and.w	r0, r0, #1
 801486e:	4303      	orrs	r3, r0
 8014870:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8014874:	4303      	orrs	r3, r0
 8014876:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8014878:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801487a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 801487e:	4303      	orrs	r3, r0
 8014880:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8014882:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8014886:	f000 0080 	and.w	r0, r0, #128	; 0x80
 801488a:	4303      	orrs	r3, r0
 801488c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801488e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8014892:	4303      	orrs	r3, r0
 8014894:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8014896:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014898:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801489a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801489c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80148a0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80148a2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80148a4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80148a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80148aa:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80148ac:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80148ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148b2:	e7b5      	b.n	8014820 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80148b4:	2001      	movs	r0, #1
 80148b6:	e7f8      	b.n	80148aa <HAL_SPI_Init+0xa2>

080148b8 <HAL_SPI_Transmit>:
{
 80148b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80148bc:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80148be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80148c2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80148c4:	2b01      	cmp	r3, #1
{
 80148c6:	460d      	mov	r5, r1
 80148c8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80148ca:	f000 80a0 	beq.w	8014a0e <HAL_SPI_Transmit+0x156>
 80148ce:	2301      	movs	r3, #1
 80148d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80148d4:	f7fe fc36 	bl	8013144 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80148d8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80148dc:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80148de:	2b01      	cmp	r3, #1
 80148e0:	b2d8      	uxtb	r0, r3
 80148e2:	f040 8092 	bne.w	8014a0a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 80148e6:	2d00      	cmp	r5, #0
 80148e8:	d061      	beq.n	80149ae <HAL_SPI_Transmit+0xf6>
 80148ea:	f1b8 0f00 	cmp.w	r8, #0
 80148ee:	d05e      	beq.n	80149ae <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80148f0:	2303      	movs	r3, #3
 80148f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80148f6:	2300      	movs	r3, #0
 80148f8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80148fa:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80148fe:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014902:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8014904:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014906:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014908:	68a3      	ldr	r3, [r4, #8]
 801490a:	6826      	ldr	r6, [r4, #0]
 801490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014910:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014912:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014916:	d107      	bne.n	8014928 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8014918:	6833      	ldr	r3, [r6, #0]
 801491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801491e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8014920:	6833      	ldr	r3, [r6, #0]
 8014922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014926:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014928:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801492a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801492c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 801492e:	bf5e      	ittt	pl
 8014930:	6833      	ldrpl	r3, [r6, #0]
 8014932:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8014936:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014938:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801493c:	6863      	ldr	r3, [r4, #4]
 801493e:	d13f      	bne.n	80149c0 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014940:	b113      	cbz	r3, 8014948 <HAL_SPI_Transmit+0x90>
 8014942:	f1b8 0f01 	cmp.w	r8, #1
 8014946:	d107      	bne.n	8014958 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014948:	f835 3b02 	ldrh.w	r3, [r5], #2
 801494c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801494e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8014950:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014952:	3b01      	subs	r3, #1
 8014954:	b29b      	uxth	r3, r3
 8014956:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8014958:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801495a:	b29b      	uxth	r3, r3
 801495c:	b9a3      	cbnz	r3, 8014988 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801495e:	464a      	mov	r2, r9
 8014960:	4639      	mov	r1, r7
 8014962:	4620      	mov	r0, r4
 8014964:	f7ff ff42 	bl	80147ec <SPI_EndRxTxTransaction>
 8014968:	2800      	cmp	r0, #0
 801496a:	d14b      	bne.n	8014a04 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801496c:	68a3      	ldr	r3, [r4, #8]
 801496e:	b933      	cbnz	r3, 801497e <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014970:	9301      	str	r3, [sp, #4]
 8014972:	6823      	ldr	r3, [r4, #0]
 8014974:	68da      	ldr	r2, [r3, #12]
 8014976:	9201      	str	r2, [sp, #4]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	9301      	str	r3, [sp, #4]
 801497c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801497e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8014980:	3800      	subs	r0, #0
 8014982:	bf18      	it	ne
 8014984:	2001      	movne	r0, #1
error:
 8014986:	e012      	b.n	80149ae <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014988:	6822      	ldr	r2, [r4, #0]
 801498a:	6893      	ldr	r3, [r2, #8]
 801498c:	0798      	lsls	r0, r3, #30
 801498e:	d505      	bpl.n	801499c <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014992:	f833 1b02 	ldrh.w	r1, [r3], #2
 8014996:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014998:	6323      	str	r3, [r4, #48]	; 0x30
 801499a:	e7d9      	b.n	8014950 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801499c:	f7fe fbd2 	bl	8013144 <HAL_GetTick>
 80149a0:	eba0 0009 	sub.w	r0, r0, r9
 80149a4:	42b8      	cmp	r0, r7
 80149a6:	d3d7      	bcc.n	8014958 <HAL_SPI_Transmit+0xa0>
 80149a8:	1c79      	adds	r1, r7, #1
 80149aa:	d0d5      	beq.n	8014958 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80149ac:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80149ae:	2301      	movs	r3, #1
 80149b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80149b4:	2300      	movs	r3, #0
 80149b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80149ba:	b003      	add	sp, #12
 80149bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80149c0:	b113      	cbz	r3, 80149c8 <HAL_SPI_Transmit+0x110>
 80149c2:	f1b8 0f01 	cmp.w	r8, #1
 80149c6:	d108      	bne.n	80149da <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80149c8:	782b      	ldrb	r3, [r5, #0]
 80149ca:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80149cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149ce:	3301      	adds	r3, #1
 80149d0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80149d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80149d4:	3b01      	subs	r3, #1
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80149da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80149dc:	b29b      	uxth	r3, r3
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d0bd      	beq.n	801495e <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80149e2:	6823      	ldr	r3, [r4, #0]
 80149e4:	689a      	ldr	r2, [r3, #8]
 80149e6:	0792      	lsls	r2, r2, #30
 80149e8:	d503      	bpl.n	80149f2 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80149ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80149ec:	7812      	ldrb	r2, [r2, #0]
 80149ee:	731a      	strb	r2, [r3, #12]
 80149f0:	e7ec      	b.n	80149cc <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80149f2:	f7fe fba7 	bl	8013144 <HAL_GetTick>
 80149f6:	eba0 0009 	sub.w	r0, r0, r9
 80149fa:	42b8      	cmp	r0, r7
 80149fc:	d3ed      	bcc.n	80149da <HAL_SPI_Transmit+0x122>
 80149fe:	1c7b      	adds	r3, r7, #1
 8014a00:	d0eb      	beq.n	80149da <HAL_SPI_Transmit+0x122>
 8014a02:	e7d3      	b.n	80149ac <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014a04:	2320      	movs	r3, #32
 8014a06:	6563      	str	r3, [r4, #84]	; 0x54
 8014a08:	e7b0      	b.n	801496c <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8014a0a:	2002      	movs	r0, #2
 8014a0c:	e7cf      	b.n	80149ae <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8014a0e:	2002      	movs	r0, #2
 8014a10:	e7d3      	b.n	80149ba <HAL_SPI_Transmit+0x102>
	...

08014a14 <HAL_SPI_Transmit_DMA>:
{
 8014a14:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8014a16:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8014a1a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8014a1c:	2b01      	cmp	r3, #1
 8014a1e:	d054      	beq.n	8014aca <HAL_SPI_Transmit_DMA+0xb6>
 8014a20:	2301      	movs	r3, #1
 8014a22:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8014a26:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	b2dd      	uxtb	r5, r3
 8014a2e:	d14a      	bne.n	8014ac6 <HAL_SPI_Transmit_DMA+0xb2>
  if ((pData == NULL) || (Size == 0U))
 8014a30:	2900      	cmp	r1, #0
 8014a32:	d031      	beq.n	8014a98 <HAL_SPI_Transmit_DMA+0x84>
 8014a34:	2a00      	cmp	r2, #0
 8014a36:	d02f      	beq.n	8014a98 <HAL_SPI_Transmit_DMA+0x84>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->RxISR       = NULL;
 8014a42:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 8014a46:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014a48:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8014a4a:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014a4c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a4e:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8014a50:	8682      	strh	r2, [r0, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a56:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014a58:	6301      	str	r1, [r0, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a5a:	d107      	bne.n	8014a6c <HAL_SPI_Transmit_DMA+0x58>
    __HAL_SPI_DISABLE(hspi);
 8014a5c:	6813      	ldr	r3, [r2, #0]
 8014a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a62:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8014a64:	6813      	ldr	r3, [r2, #0]
 8014a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014a6a:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8014a6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014a6e:	4b18      	ldr	r3, [pc, #96]	; (8014ad0 <HAL_SPI_Transmit_DMA+0xbc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8014a70:	320c      	adds	r2, #12
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8014a72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8014a74:	4b17      	ldr	r3, [pc, #92]	; (8014ad4 <HAL_SPI_Transmit_DMA+0xc0>)
 8014a76:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8014a78:	4b17      	ldr	r3, [pc, #92]	; (8014ad8 <HAL_SPI_Transmit_DMA+0xc4>)
 8014a7a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback = NULL;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	6343      	str	r3, [r0, #52]	; 0x34
                                 hspi->TxXferCount))
 8014a80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	f7ff f9a4 	bl	8013dd0 <HAL_DMA_Start_IT>
 8014a88:	b158      	cbz	r0, 8014aa2 <HAL_SPI_Transmit_DMA+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014a8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014a8c:	f043 0310 	orr.w	r3, r3, #16
 8014a90:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8014a92:	2301      	movs	r3, #1
 8014a94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014a98:	2300      	movs	r3, #0
 8014a9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014aa2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014aa4:	2500      	movs	r5, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8014aaa:	bf5e      	ittt	pl
 8014aac:	681a      	ldrpl	r2, [r3, #0]
 8014aae:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8014ab2:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8014ab4:	685a      	ldr	r2, [r3, #4]
 8014ab6:	f042 0220 	orr.w	r2, r2, #32
 8014aba:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014abc:	685a      	ldr	r2, [r3, #4]
 8014abe:	f042 0202 	orr.w	r2, r2, #2
 8014ac2:	605a      	str	r2, [r3, #4]
 8014ac4:	e7e8      	b.n	8014a98 <HAL_SPI_Transmit_DMA+0x84>
    errorcode = HAL_BUSY;
 8014ac6:	2502      	movs	r5, #2
 8014ac8:	e7e6      	b.n	8014a98 <HAL_SPI_Transmit_DMA+0x84>
  __HAL_LOCK(hspi);
 8014aca:	2502      	movs	r5, #2
 8014acc:	e7e7      	b.n	8014a9e <HAL_SPI_Transmit_DMA+0x8a>
 8014ace:	bf00      	nop
 8014ad0:	08014ae1 	.word	0x08014ae1
 8014ad4:	08014b0f 	.word	0x08014b0f
 8014ad8:	08014aed 	.word	0x08014aed

08014adc <HAL_SPI_TxCpltCallback>:
 8014adc:	4770      	bx	lr

08014ade <HAL_SPI_TxHalfCpltCallback>:
 8014ade:	4770      	bx	lr

08014ae0 <SPI_DMAHalfTransmitCplt>:
{
 8014ae0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8014ae2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014ae4:	f7ff fffb 	bl	8014ade <HAL_SPI_TxHalfCpltCallback>
}
 8014ae8:	bd08      	pop	{r3, pc}

08014aea <HAL_SPI_ErrorCallback>:
 8014aea:	4770      	bx	lr

08014aec <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014aec:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8014aee:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014af0:	6802      	ldr	r2, [r0, #0]
 8014af2:	6853      	ldr	r3, [r2, #4]
 8014af4:	f023 0303 	bic.w	r3, r3, #3
 8014af8:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014afa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014afc:	f043 0310 	orr.w	r3, r3, #16
 8014b00:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8014b02:	2301      	movs	r3, #1
 8014b04:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8014b08:	f7ff ffef 	bl	8014aea <HAL_SPI_ErrorCallback>
}
 8014b0c:	bd08      	pop	{r3, pc}

08014b0e <SPI_DMATransmitCplt>:
{
 8014b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b10:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014b12:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8014b14:	f7fe fb16 	bl	8013144 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8014b18:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8014b1a:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	069b      	lsls	r3, r3, #26
 8014b20:	d426      	bmi.n	8014b70 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014b22:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014b24:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014b26:	6859      	ldr	r1, [r3, #4]
 8014b28:	f021 0120 	bic.w	r1, r1, #32
 8014b2c:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014b2e:	6859      	ldr	r1, [r3, #4]
 8014b30:	f021 0102 	bic.w	r1, r1, #2
 8014b34:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014b36:	2164      	movs	r1, #100	; 0x64
 8014b38:	f7ff fe58 	bl	80147ec <SPI_EndRxTxTransaction>
 8014b3c:	b118      	cbz	r0, 8014b46 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014b40:	f043 0320 	orr.w	r3, r3, #32
 8014b44:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014b46:	68a3      	ldr	r3, [r4, #8]
 8014b48:	b933      	cbnz	r3, 8014b58 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b4a:	9301      	str	r3, [sp, #4]
 8014b4c:	6823      	ldr	r3, [r4, #0]
 8014b4e:	68da      	ldr	r2, [r3, #12]
 8014b50:	9201      	str	r2, [sp, #4]
 8014b52:	689b      	ldr	r3, [r3, #8]
 8014b54:	9301      	str	r3, [sp, #4]
 8014b56:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014b64:	b123      	cbz	r3, 8014b70 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7ff ffbf 	bl	8014aea <HAL_SPI_ErrorCallback>
}
 8014b6c:	b003      	add	sp, #12
 8014b6e:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8014b70:	4620      	mov	r0, r4
 8014b72:	f7ff ffb3 	bl	8014adc <HAL_SPI_TxCpltCallback>
 8014b76:	e7f9      	b.n	8014b6c <SPI_DMATransmitCplt+0x5e>

08014b78 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b78:	6a03      	ldr	r3, [r0, #32]
{
 8014b7a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b7c:	f023 0301 	bic.w	r3, r3, #1
 8014b80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b86:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014b8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8014b8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014b90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8014b92:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8014b96:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014b98:	4d0a      	ldr	r5, [pc, #40]	; (8014bc4 <TIM_OC1_SetConfig+0x4c>)
 8014b9a:	42a8      	cmp	r0, r5
 8014b9c:	d10b      	bne.n	8014bb6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014b9e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8014ba0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8014ba4:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014ba6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014baa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8014bae:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8014bb0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8014bb4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014bb6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014bb8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014bba:	684a      	ldr	r2, [r1, #4]
 8014bbc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bbe:	6203      	str	r3, [r0, #32]
}
 8014bc0:	bd70      	pop	{r4, r5, r6, pc}
 8014bc2:	bf00      	nop
 8014bc4:	40012c00 	.word	0x40012c00

08014bc8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014bc8:	6a03      	ldr	r3, [r0, #32]
{
 8014bca:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014bd0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bd2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bd4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014bd6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014bd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014bda:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8014bde:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014be0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8014be2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014be6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014bea:	4d0b      	ldr	r5, [pc, #44]	; (8014c18 <TIM_OC3_SetConfig+0x50>)
 8014bec:	42a8      	cmp	r0, r5
 8014bee:	d10d      	bne.n	8014c0c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014bf0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8014bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014bf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014bfa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014bfe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8014c02:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8014c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014c08:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014c0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014c10:	684a      	ldr	r2, [r1, #4]
 8014c12:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c14:	6203      	str	r3, [r0, #32]
}
 8014c16:	bd70      	pop	{r4, r5, r6, pc}
 8014c18:	40012c00 	.word	0x40012c00

08014c1c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014c1c:	6a03      	ldr	r3, [r0, #32]
{
 8014c1e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014c2a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014c2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014c32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014c36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8014c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014c3c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c40:	4d06      	ldr	r5, [pc, #24]	; (8014c5c <TIM_OC4_SetConfig+0x40>)
 8014c42:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014c44:	bf02      	ittt	eq
 8014c46:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014c48:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014c4c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c50:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014c52:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014c54:	684a      	ldr	r2, [r1, #4]
 8014c56:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c58:	6203      	str	r3, [r0, #32]
}
 8014c5a:	bd30      	pop	{r4, r5, pc}
 8014c5c:	40012c00 	.word	0x40012c00

08014c60 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8014c60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d120      	bne.n	8014caa <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8014c68:	2302      	movs	r3, #2
 8014c6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014c6e:	6803      	ldr	r3, [r0, #0]
 8014c70:	68da      	ldr	r2, [r3, #12]
 8014c72:	f042 0201 	orr.w	r2, r2, #1
 8014c76:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014c78:	4a0d      	ldr	r2, [pc, #52]	; (8014cb0 <HAL_TIM_Base_Start_IT+0x50>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d00a      	beq.n	8014c94 <HAL_TIM_Base_Start_IT+0x34>
 8014c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c82:	d007      	beq.n	8014c94 <HAL_TIM_Base_Start_IT+0x34>
 8014c84:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	d003      	beq.n	8014c94 <HAL_TIM_Base_Start_IT+0x34>
 8014c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d104      	bne.n	8014c9e <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014c94:	689a      	ldr	r2, [r3, #8]
 8014c96:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014c9a:	2a06      	cmp	r2, #6
 8014c9c:	d003      	beq.n	8014ca6 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8014c9e:	681a      	ldr	r2, [r3, #0]
 8014ca0:	f042 0201 	orr.w	r2, r2, #1
 8014ca4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8014ca6:	2000      	movs	r0, #0
}
 8014ca8:	4770      	bx	lr
    return HAL_ERROR;
 8014caa:	2001      	movs	r0, #1
 8014cac:	4770      	bx	lr
 8014cae:	bf00      	nop
 8014cb0:	40012c00 	.word	0x40012c00

08014cb4 <HAL_TIM_PWM_MspInit>:
 8014cb4:	4770      	bx	lr

08014cb6 <HAL_TIM_OC_DelayElapsedCallback>:
 8014cb6:	4770      	bx	lr

08014cb8 <HAL_TIM_IC_CaptureCallback>:
 8014cb8:	4770      	bx	lr

08014cba <HAL_TIM_PWM_PulseFinishedCallback>:
 8014cba:	4770      	bx	lr

08014cbc <HAL_TIM_TriggerCallback>:
 8014cbc:	4770      	bx	lr

08014cbe <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014cbe:	6803      	ldr	r3, [r0, #0]
{
 8014cc0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014cc2:	691a      	ldr	r2, [r3, #16]
{
 8014cc4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014cc6:	0791      	lsls	r1, r2, #30
 8014cc8:	d50e      	bpl.n	8014ce8 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014cca:	68da      	ldr	r2, [r3, #12]
 8014ccc:	0792      	lsls	r2, r2, #30
 8014cce:	d50b      	bpl.n	8014ce8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014cd0:	f06f 0202 	mvn.w	r2, #2
 8014cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014cd6:	2201      	movs	r2, #1
 8014cd8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014cda:	699b      	ldr	r3, [r3, #24]
 8014cdc:	079b      	lsls	r3, r3, #30
 8014cde:	d077      	beq.n	8014dd0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8014ce0:	f7ff ffea 	bl	8014cb8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014ce8:	6823      	ldr	r3, [r4, #0]
 8014cea:	691a      	ldr	r2, [r3, #16]
 8014cec:	0750      	lsls	r0, r2, #29
 8014cee:	d510      	bpl.n	8014d12 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014cf0:	68da      	ldr	r2, [r3, #12]
 8014cf2:	0751      	lsls	r1, r2, #29
 8014cf4:	d50d      	bpl.n	8014d12 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014cf6:	f06f 0204 	mvn.w	r2, #4
 8014cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014cfc:	2202      	movs	r2, #2
 8014cfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014d00:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8014d02:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014d04:	f413 7f40 	tst.w	r3, #768	; 0x300
 8014d08:	d068      	beq.n	8014ddc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8014d0a:	f7ff ffd5 	bl	8014cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014d12:	6823      	ldr	r3, [r4, #0]
 8014d14:	691a      	ldr	r2, [r3, #16]
 8014d16:	0712      	lsls	r2, r2, #28
 8014d18:	d50f      	bpl.n	8014d3a <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014d1a:	68da      	ldr	r2, [r3, #12]
 8014d1c:	0710      	lsls	r0, r2, #28
 8014d1e:	d50c      	bpl.n	8014d3a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014d20:	f06f 0208 	mvn.w	r2, #8
 8014d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014d26:	2204      	movs	r2, #4
 8014d28:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014d2a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8014d2c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014d2e:	0799      	lsls	r1, r3, #30
 8014d30:	d05a      	beq.n	8014de8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8014d32:	f7ff ffc1 	bl	8014cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d36:	2300      	movs	r3, #0
 8014d38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014d3a:	6823      	ldr	r3, [r4, #0]
 8014d3c:	691a      	ldr	r2, [r3, #16]
 8014d3e:	06d2      	lsls	r2, r2, #27
 8014d40:	d510      	bpl.n	8014d64 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014d42:	68da      	ldr	r2, [r3, #12]
 8014d44:	06d0      	lsls	r0, r2, #27
 8014d46:	d50d      	bpl.n	8014d64 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014d48:	f06f 0210 	mvn.w	r2, #16
 8014d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014d4e:	2208      	movs	r2, #8
 8014d50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014d52:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8014d54:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014d56:	f413 7f40 	tst.w	r3, #768	; 0x300
 8014d5a:	d04b      	beq.n	8014df4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8014d5c:	f7ff ffac 	bl	8014cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d60:	2300      	movs	r3, #0
 8014d62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014d64:	6823      	ldr	r3, [r4, #0]
 8014d66:	691a      	ldr	r2, [r3, #16]
 8014d68:	07d1      	lsls	r1, r2, #31
 8014d6a:	d508      	bpl.n	8014d7e <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014d6c:	68da      	ldr	r2, [r3, #12]
 8014d6e:	07d2      	lsls	r2, r2, #31
 8014d70:	d505      	bpl.n	8014d7e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014d72:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8014d76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014d78:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8014d7a:	f7ec fb1f 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014d7e:	6823      	ldr	r3, [r4, #0]
 8014d80:	691a      	ldr	r2, [r3, #16]
 8014d82:	0610      	lsls	r0, r2, #24
 8014d84:	d508      	bpl.n	8014d98 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014d86:	68da      	ldr	r2, [r3, #12]
 8014d88:	0611      	lsls	r1, r2, #24
 8014d8a:	d505      	bpl.n	8014d98 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8014d90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014d92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8014d94:	f000 fa79 	bl	801528a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014d98:	6823      	ldr	r3, [r4, #0]
 8014d9a:	691a      	ldr	r2, [r3, #16]
 8014d9c:	0652      	lsls	r2, r2, #25
 8014d9e:	d508      	bpl.n	8014db2 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014da0:	68da      	ldr	r2, [r3, #12]
 8014da2:	0650      	lsls	r0, r2, #25
 8014da4:	d505      	bpl.n	8014db2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8014daa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014dac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8014dae:	f7ff ff85 	bl	8014cbc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014db2:	6823      	ldr	r3, [r4, #0]
 8014db4:	691a      	ldr	r2, [r3, #16]
 8014db6:	0691      	lsls	r1, r2, #26
 8014db8:	d522      	bpl.n	8014e00 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014dba:	68da      	ldr	r2, [r3, #12]
 8014dbc:	0692      	lsls	r2, r2, #26
 8014dbe:	d51f      	bpl.n	8014e00 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014dc0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8014dc4:	4620      	mov	r0, r4
}
 8014dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8014dcc:	f000 ba5c 	b.w	8015288 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014dd0:	f7ff ff71 	bl	8014cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f7ff ff70 	bl	8014cba <HAL_TIM_PWM_PulseFinishedCallback>
 8014dda:	e783      	b.n	8014ce4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014ddc:	f7ff ff6b 	bl	8014cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014de0:	4620      	mov	r0, r4
 8014de2:	f7ff ff6a 	bl	8014cba <HAL_TIM_PWM_PulseFinishedCallback>
 8014de6:	e792      	b.n	8014d0e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014de8:	f7ff ff65 	bl	8014cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014dec:	4620      	mov	r0, r4
 8014dee:	f7ff ff64 	bl	8014cba <HAL_TIM_PWM_PulseFinishedCallback>
 8014df2:	e7a0      	b.n	8014d36 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014df4:	f7ff ff5f 	bl	8014cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ff ff5e 	bl	8014cba <HAL_TIM_PWM_PulseFinishedCallback>
 8014dfe:	e7af      	b.n	8014d60 <HAL_TIM_IRQHandler+0xa2>
}
 8014e00:	bd10      	pop	{r4, pc}
	...

08014e04 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014e04:	4a1a      	ldr	r2, [pc, #104]	; (8014e70 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8014e06:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014e08:	4290      	cmp	r0, r2
 8014e0a:	d00a      	beq.n	8014e22 <TIM_Base_SetConfig+0x1e>
 8014e0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8014e10:	d007      	beq.n	8014e22 <TIM_Base_SetConfig+0x1e>
 8014e12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8014e16:	4290      	cmp	r0, r2
 8014e18:	d003      	beq.n	8014e22 <TIM_Base_SetConfig+0x1e>
 8014e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e1e:	4290      	cmp	r0, r2
 8014e20:	d115      	bne.n	8014e4e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8014e22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8014e28:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014e2a:	4a11      	ldr	r2, [pc, #68]	; (8014e70 <TIM_Base_SetConfig+0x6c>)
 8014e2c:	4290      	cmp	r0, r2
 8014e2e:	d00a      	beq.n	8014e46 <TIM_Base_SetConfig+0x42>
 8014e30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8014e34:	d007      	beq.n	8014e46 <TIM_Base_SetConfig+0x42>
 8014e36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8014e3a:	4290      	cmp	r0, r2
 8014e3c:	d003      	beq.n	8014e46 <TIM_Base_SetConfig+0x42>
 8014e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e42:	4290      	cmp	r0, r2
 8014e44:	d103      	bne.n	8014e4e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014e46:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8014e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014e4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014e4e:	694a      	ldr	r2, [r1, #20]
 8014e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014e54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8014e56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014e58:	688b      	ldr	r3, [r1, #8]
 8014e5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8014e5c:	680b      	ldr	r3, [r1, #0]
 8014e5e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014e60:	4b03      	ldr	r3, [pc, #12]	; (8014e70 <TIM_Base_SetConfig+0x6c>)
 8014e62:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8014e64:	bf04      	itt	eq
 8014e66:	690b      	ldreq	r3, [r1, #16]
 8014e68:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	6143      	str	r3, [r0, #20]
}
 8014e6e:	4770      	bx	lr
 8014e70:	40012c00 	.word	0x40012c00

08014e74 <HAL_TIM_Base_Init>:
{
 8014e74:	b510      	push	{r4, lr}
  if (htim == NULL)
 8014e76:	4604      	mov	r4, r0
 8014e78:	b330      	cbz	r0, 8014ec8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8014e7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8014e7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8014e82:	b91b      	cbnz	r3, 8014e8c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8014e84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8014e88:	f7ec fc88 	bl	800179c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8014e8c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e8e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8014e90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e94:	1d21      	adds	r1, r4, #4
 8014e96:	f7ff ffb5 	bl	8014e04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014e9a:	2301      	movs	r3, #1
  return HAL_OK;
 8014e9c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014e9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ea2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8014ea6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8014eaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8014eae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014eba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8014ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8014ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8014ec6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8014ec8:	2001      	movs	r0, #1
 8014eca:	e7fc      	b.n	8014ec6 <HAL_TIM_Base_Init+0x52>

08014ecc <HAL_TIM_PWM_Init>:
{
 8014ecc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8014ece:	4604      	mov	r4, r0
 8014ed0:	b330      	cbz	r0, 8014f20 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8014ed2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8014ed6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8014eda:	b91b      	cbnz	r3, 8014ee4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8014edc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8014ee0:	f7ff fee8 	bl	8014cb4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8014ee4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014ee6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8014ee8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014eec:	1d21      	adds	r1, r4, #4
 8014eee:	f7ff ff89 	bl	8014e04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014ef2:	2301      	movs	r3, #1
  return HAL_OK;
 8014ef4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014ef6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014efa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8014efe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8014f02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8014f06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8014f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8014f1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8014f1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8014f20:	2001      	movs	r0, #1
 8014f22:	e7fc      	b.n	8014f1e <HAL_TIM_PWM_Init+0x52>

08014f24 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f24:	6a03      	ldr	r3, [r0, #32]
{
 8014f26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f28:	f023 0310 	bic.w	r3, r3, #16
 8014f2c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8014f2e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8014f30:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8014f32:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014f36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f3e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8014f40:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f48:	4d0b      	ldr	r5, [pc, #44]	; (8014f78 <TIM_OC2_SetConfig+0x54>)
 8014f4a:	42a8      	cmp	r0, r5
 8014f4c:	d10d      	bne.n	8014f6a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014f58:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014f5c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8014f60:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014f66:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8014f6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8014f6c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8014f6e:	684a      	ldr	r2, [r1, #4]
 8014f70:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8014f72:	6203      	str	r3, [r0, #32]
}
 8014f74:	bd70      	pop	{r4, r5, r6, pc}
 8014f76:	bf00      	nop
 8014f78:	40012c00 	.word	0x40012c00

08014f7c <HAL_TIM_PWM_ConfigChannel>:
{
 8014f7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8014f7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8014f82:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d052      	beq.n	801502e <HAL_TIM_PWM_ConfigChannel+0xb2>
 8014f88:	2301      	movs	r3, #1
  switch (Channel)
 8014f8a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8014f8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8014f90:	d03c      	beq.n	801500c <HAL_TIM_PWM_ConfigChannel+0x90>
 8014f92:	d806      	bhi.n	8014fa2 <HAL_TIM_PWM_ConfigChannel+0x26>
 8014f94:	b1c2      	cbz	r2, 8014fc8 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8014f96:	2a04      	cmp	r2, #4
 8014f98:	d027      	beq.n	8014fea <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8014fa0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8014fa2:	2a0c      	cmp	r2, #12
 8014fa4:	d1f9      	bne.n	8014f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014fa6:	6800      	ldr	r0, [r0, #0]
 8014fa8:	f7ff fe38 	bl	8014c1c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014fac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014fae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014fb0:	69da      	ldr	r2, [r3, #28]
 8014fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014fb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014fb8:	69da      	ldr	r2, [r3, #28]
 8014fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014fbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014fc0:	69da      	ldr	r2, [r3, #28]
 8014fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014fc6:	e030      	b.n	801502a <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014fc8:	6800      	ldr	r0, [r0, #0]
 8014fca:	f7ff fdd5 	bl	8014b78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014fce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014fd0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014fd2:	699a      	ldr	r2, [r3, #24]
 8014fd4:	f042 0208 	orr.w	r2, r2, #8
 8014fd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014fda:	699a      	ldr	r2, [r3, #24]
 8014fdc:	f022 0204 	bic.w	r2, r2, #4
 8014fe0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014fe2:	699a      	ldr	r2, [r3, #24]
 8014fe4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014fe6:	619a      	str	r2, [r3, #24]
      break;
 8014fe8:	e7d7      	b.n	8014f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014fea:	6800      	ldr	r0, [r0, #0]
 8014fec:	f7ff ff9a 	bl	8014f24 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014ff0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014ff2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014ff4:	699a      	ldr	r2, [r3, #24]
 8014ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014ffc:	699a      	ldr	r2, [r3, #24]
 8014ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015004:	699a      	ldr	r2, [r3, #24]
 8015006:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801500a:	e7ec      	b.n	8014fe6 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801500c:	6800      	ldr	r0, [r0, #0]
 801500e:	f7ff fddb 	bl	8014bc8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015012:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015014:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015016:	69da      	ldr	r2, [r3, #28]
 8015018:	f042 0208 	orr.w	r2, r2, #8
 801501c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801501e:	69da      	ldr	r2, [r3, #28]
 8015020:	f022 0204 	bic.w	r2, r2, #4
 8015024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015026:	69da      	ldr	r2, [r3, #28]
 8015028:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801502a:	61da      	str	r2, [r3, #28]
      break;
 801502c:	e7b5      	b.n	8014f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 801502e:	2002      	movs	r0, #2
 8015030:	e7b6      	b.n	8014fa0 <HAL_TIM_PWM_ConfigChannel+0x24>

08015032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015032:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015034:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015036:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015038:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801503c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8015040:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015042:	6082      	str	r2, [r0, #8]
}
 8015044:	bd10      	pop	{r4, pc}

08015046 <HAL_TIM_ConfigClockSource>:
{
 8015046:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8015048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 801504c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 801504e:	2b01      	cmp	r3, #1
 8015050:	f04f 0002 	mov.w	r0, #2
 8015054:	d027      	beq.n	80150a6 <HAL_TIM_ConfigClockSource+0x60>
 8015056:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8015058:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 801505c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 801505e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8015062:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015068:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 801506c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 801506e:	680b      	ldr	r3, [r1, #0]
 8015070:	2b60      	cmp	r3, #96	; 0x60
 8015072:	d04d      	beq.n	8015110 <HAL_TIM_ConfigClockSource+0xca>
 8015074:	d832      	bhi.n	80150dc <HAL_TIM_ConfigClockSource+0x96>
 8015076:	2b40      	cmp	r3, #64	; 0x40
 8015078:	d062      	beq.n	8015140 <HAL_TIM_ConfigClockSource+0xfa>
 801507a:	d815      	bhi.n	80150a8 <HAL_TIM_ConfigClockSource+0x62>
 801507c:	2b20      	cmp	r3, #32
 801507e:	d003      	beq.n	8015088 <HAL_TIM_ConfigClockSource+0x42>
 8015080:	d809      	bhi.n	8015096 <HAL_TIM_ConfigClockSource+0x50>
 8015082:	f033 0210 	bics.w	r2, r3, #16
 8015086:	d108      	bne.n	801509a <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8015088:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801508a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801508e:	4313      	orrs	r3, r2
 8015090:	f043 0307 	orr.w	r3, r3, #7
 8015094:	e020      	b.n	80150d8 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8015096:	2b30      	cmp	r3, #48	; 0x30
 8015098:	d0f6      	beq.n	8015088 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 801509a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 801509c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801509e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80150a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80150a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80150a8:	2b50      	cmp	r3, #80	; 0x50
 80150aa:	d1f6      	bne.n	801509a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80150ac:	684a      	ldr	r2, [r1, #4]
 80150ae:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80150b0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80150b2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80150b4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80150b8:	f025 0501 	bic.w	r5, r5, #1
 80150bc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80150be:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80150c0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80150c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80150c6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80150ca:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80150cc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80150ce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80150d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80150d4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80150d8:	6083      	str	r3, [r0, #8]
}
 80150da:	e7de      	b.n	801509a <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80150dc:	2b70      	cmp	r3, #112	; 0x70
 80150de:	d00c      	beq.n	80150fa <HAL_TIM_ConfigClockSource+0xb4>
 80150e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80150e4:	d1d9      	bne.n	801509a <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80150e6:	68cb      	ldr	r3, [r1, #12]
 80150e8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80150ec:	f7ff ffa1 	bl	8015032 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80150f0:	6822      	ldr	r2, [r4, #0]
 80150f2:	6893      	ldr	r3, [r2, #8]
 80150f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80150f8:	e008      	b.n	801510c <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80150fa:	68cb      	ldr	r3, [r1, #12]
 80150fc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015100:	f7ff ff97 	bl	8015032 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8015104:	6822      	ldr	r2, [r4, #0]
 8015106:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801510c:	6093      	str	r3, [r2, #8]
      break;
 801510e:	e7c4      	b.n	801509a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015110:	684d      	ldr	r5, [r1, #4]
 8015112:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015114:	6a01      	ldr	r1, [r0, #32]
 8015116:	f021 0110 	bic.w	r1, r1, #16
 801511a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801511c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 801511e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015120:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8015128:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801512c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8015130:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8015132:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8015134:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8015136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801513a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 801513e:	e7cb      	b.n	80150d8 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015140:	684a      	ldr	r2, [r1, #4]
 8015142:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8015144:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015146:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015148:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801514c:	f025 0501 	bic.w	r5, r5, #1
 8015150:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015152:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8015154:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801515a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 801515e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8015160:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8015162:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8015164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015168:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 801516c:	e7b4      	b.n	80150d8 <HAL_TIM_ConfigClockSource+0x92>

0801516e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801516e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015170:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015172:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015174:	f001 011f 	and.w	r1, r1, #31
 8015178:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 801517a:	ea23 0304 	bic.w	r3, r3, r4
 801517e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015180:	6a03      	ldr	r3, [r0, #32]
 8015182:	408a      	lsls	r2, r1
 8015184:	431a      	orrs	r2, r3
 8015186:	6202      	str	r2, [r0, #32]
}
 8015188:	bd10      	pop	{r4, pc}
	...

0801518c <HAL_TIM_OC_Start>:
{
 801518c:	b510      	push	{r4, lr}
 801518e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015190:	b929      	cbnz	r1, 801519e <HAL_TIM_OC_Start+0x12>
 8015192:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8015196:	2b01      	cmp	r3, #1
 8015198:	d01d      	beq.n	80151d6 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 801519a:	2001      	movs	r0, #1
}
 801519c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801519e:	2904      	cmp	r1, #4
 80151a0:	d107      	bne.n	80151b2 <HAL_TIM_OC_Start+0x26>
 80151a2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	d1f7      	bne.n	801519a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80151aa:	2302      	movs	r3, #2
 80151ac:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80151b0:	e014      	b.n	80151dc <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80151b2:	2908      	cmp	r1, #8
 80151b4:	d107      	bne.n	80151c6 <HAL_TIM_OC_Start+0x3a>
 80151b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d1ed      	bne.n	801519a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80151be:	2302      	movs	r3, #2
 80151c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80151c4:	e00a      	b.n	80151dc <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80151c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d1e5      	bne.n	801519a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80151ce:	2302      	movs	r3, #2
 80151d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80151d4:	e002      	b.n	80151dc <HAL_TIM_OC_Start+0x50>
 80151d6:	2302      	movs	r3, #2
 80151d8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80151dc:	2201      	movs	r2, #1
 80151de:	6820      	ldr	r0, [r4, #0]
 80151e0:	f7ff ffc5 	bl	801516e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	4a0e      	ldr	r2, [pc, #56]	; (8015220 <HAL_TIM_OC_Start+0x94>)
 80151e8:	4293      	cmp	r3, r2
 80151ea:	d10a      	bne.n	8015202 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 80151ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80151ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80151f2:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80151f4:	689a      	ldr	r2, [r3, #8]
 80151f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80151fa:	2a06      	cmp	r2, #6
 80151fc:	d10b      	bne.n	8015216 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 80151fe:	2000      	movs	r0, #0
 8015200:	e7cc      	b.n	801519c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015206:	d0f5      	beq.n	80151f4 <HAL_TIM_OC_Start+0x68>
 8015208:	4a06      	ldr	r2, [pc, #24]	; (8015224 <HAL_TIM_OC_Start+0x98>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d0f2      	beq.n	80151f4 <HAL_TIM_OC_Start+0x68>
 801520e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015212:	4293      	cmp	r3, r2
 8015214:	d0ee      	beq.n	80151f4 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	f042 0201 	orr.w	r2, r2, #1
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	e7ee      	b.n	80151fe <HAL_TIM_OC_Start+0x72>
 8015220:	40012c00 	.word	0x40012c00
 8015224:	40000400 	.word	0x40000400

08015228 <HAL_TIM_PWM_Start>:
 8015228:	f7ff bfb0 	b.w	801518c <HAL_TIM_OC_Start>

0801522c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801522c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801522e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8015232:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8015234:	2b01      	cmp	r3, #1
 8015236:	f04f 0002 	mov.w	r0, #2
 801523a:	d022      	beq.n	8015282 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801523c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801523e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8015242:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015244:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8015246:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801524a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 801524c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801524e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015250:	4c0c      	ldr	r4, [pc, #48]	; (8015284 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8015252:	42a3      	cmp	r3, r4
 8015254:	d00a      	beq.n	801526c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8015256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801525a:	d007      	beq.n	801526c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 801525c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8015260:	42a3      	cmp	r3, r4
 8015262:	d003      	beq.n	801526c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8015264:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8015268:	42a3      	cmp	r3, r4
 801526a:	d104      	bne.n	8015276 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801526c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 801526e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015272:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015274:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015276:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8015278:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801527a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801527e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8015282:	bd30      	pop	{r4, r5, pc}
 8015284:	40012c00 	.word	0x40012c00

08015288 <HAL_TIMEx_CommutCallback>:
 8015288:	4770      	bx	lr

0801528a <HAL_TIMEx_BreakCallback>:
 801528a:	4770      	bx	lr

0801528c <__errno>:
 801528c:	4b01      	ldr	r3, [pc, #4]	; (8015294 <__errno+0x8>)
 801528e:	6818      	ldr	r0, [r3, #0]
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop
 8015294:	20000038 	.word	0x20000038

08015298 <__libc_init_array>:
 8015298:	b570      	push	{r4, r5, r6, lr}
 801529a:	2600      	movs	r6, #0
 801529c:	4d0c      	ldr	r5, [pc, #48]	; (80152d0 <__libc_init_array+0x38>)
 801529e:	4c0d      	ldr	r4, [pc, #52]	; (80152d4 <__libc_init_array+0x3c>)
 80152a0:	1b64      	subs	r4, r4, r5
 80152a2:	10a4      	asrs	r4, r4, #2
 80152a4:	42a6      	cmp	r6, r4
 80152a6:	d109      	bne.n	80152bc <__libc_init_array+0x24>
 80152a8:	f000 f8aa 	bl	8015400 <_init>
 80152ac:	2600      	movs	r6, #0
 80152ae:	4d0a      	ldr	r5, [pc, #40]	; (80152d8 <__libc_init_array+0x40>)
 80152b0:	4c0a      	ldr	r4, [pc, #40]	; (80152dc <__libc_init_array+0x44>)
 80152b2:	1b64      	subs	r4, r4, r5
 80152b4:	10a4      	asrs	r4, r4, #2
 80152b6:	42a6      	cmp	r6, r4
 80152b8:	d105      	bne.n	80152c6 <__libc_init_array+0x2e>
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80152c0:	4798      	blx	r3
 80152c2:	3601      	adds	r6, #1
 80152c4:	e7ee      	b.n	80152a4 <__libc_init_array+0xc>
 80152c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80152ca:	4798      	blx	r3
 80152cc:	3601      	adds	r6, #1
 80152ce:	e7f2      	b.n	80152b6 <__libc_init_array+0x1e>
 80152d0:	0801a60c 	.word	0x0801a60c
 80152d4:	0801a60c 	.word	0x0801a60c
 80152d8:	0801a60c 	.word	0x0801a60c
 80152dc:	0801a610 	.word	0x0801a610

080152e0 <malloc>:
 80152e0:	4b02      	ldr	r3, [pc, #8]	; (80152ec <malloc+0xc>)
 80152e2:	4601      	mov	r1, r0
 80152e4:	6818      	ldr	r0, [r3, #0]
 80152e6:	f000 b80b 	b.w	8015300 <_malloc_r>
 80152ea:	bf00      	nop
 80152ec:	20000038 	.word	0x20000038

080152f0 <memset>:
 80152f0:	4603      	mov	r3, r0
 80152f2:	4402      	add	r2, r0
 80152f4:	4293      	cmp	r3, r2
 80152f6:	d100      	bne.n	80152fa <memset+0xa>
 80152f8:	4770      	bx	lr
 80152fa:	f803 1b01 	strb.w	r1, [r3], #1
 80152fe:	e7f9      	b.n	80152f4 <memset+0x4>

08015300 <_malloc_r>:
 8015300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015302:	1ccd      	adds	r5, r1, #3
 8015304:	f025 0503 	bic.w	r5, r5, #3
 8015308:	3508      	adds	r5, #8
 801530a:	2d0c      	cmp	r5, #12
 801530c:	bf38      	it	cc
 801530e:	250c      	movcc	r5, #12
 8015310:	2d00      	cmp	r5, #0
 8015312:	4606      	mov	r6, r0
 8015314:	db01      	blt.n	801531a <_malloc_r+0x1a>
 8015316:	42a9      	cmp	r1, r5
 8015318:	d903      	bls.n	8015322 <_malloc_r+0x22>
 801531a:	230c      	movs	r3, #12
 801531c:	6033      	str	r3, [r6, #0]
 801531e:	2000      	movs	r0, #0
 8015320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015322:	f000 f85f 	bl	80153e4 <__malloc_lock>
 8015326:	4921      	ldr	r1, [pc, #132]	; (80153ac <_malloc_r+0xac>)
 8015328:	680a      	ldr	r2, [r1, #0]
 801532a:	4614      	mov	r4, r2
 801532c:	b99c      	cbnz	r4, 8015356 <_malloc_r+0x56>
 801532e:	4f20      	ldr	r7, [pc, #128]	; (80153b0 <_malloc_r+0xb0>)
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	b923      	cbnz	r3, 801533e <_malloc_r+0x3e>
 8015334:	4621      	mov	r1, r4
 8015336:	4630      	mov	r0, r6
 8015338:	f000 f83c 	bl	80153b4 <_sbrk_r>
 801533c:	6038      	str	r0, [r7, #0]
 801533e:	4629      	mov	r1, r5
 8015340:	4630      	mov	r0, r6
 8015342:	f000 f837 	bl	80153b4 <_sbrk_r>
 8015346:	1c43      	adds	r3, r0, #1
 8015348:	d123      	bne.n	8015392 <_malloc_r+0x92>
 801534a:	230c      	movs	r3, #12
 801534c:	4630      	mov	r0, r6
 801534e:	6033      	str	r3, [r6, #0]
 8015350:	f000 f84e 	bl	80153f0 <__malloc_unlock>
 8015354:	e7e3      	b.n	801531e <_malloc_r+0x1e>
 8015356:	6823      	ldr	r3, [r4, #0]
 8015358:	1b5b      	subs	r3, r3, r5
 801535a:	d417      	bmi.n	801538c <_malloc_r+0x8c>
 801535c:	2b0b      	cmp	r3, #11
 801535e:	d903      	bls.n	8015368 <_malloc_r+0x68>
 8015360:	6023      	str	r3, [r4, #0]
 8015362:	441c      	add	r4, r3
 8015364:	6025      	str	r5, [r4, #0]
 8015366:	e004      	b.n	8015372 <_malloc_r+0x72>
 8015368:	6863      	ldr	r3, [r4, #4]
 801536a:	42a2      	cmp	r2, r4
 801536c:	bf0c      	ite	eq
 801536e:	600b      	streq	r3, [r1, #0]
 8015370:	6053      	strne	r3, [r2, #4]
 8015372:	4630      	mov	r0, r6
 8015374:	f000 f83c 	bl	80153f0 <__malloc_unlock>
 8015378:	f104 000b 	add.w	r0, r4, #11
 801537c:	1d23      	adds	r3, r4, #4
 801537e:	f020 0007 	bic.w	r0, r0, #7
 8015382:	1ac2      	subs	r2, r0, r3
 8015384:	d0cc      	beq.n	8015320 <_malloc_r+0x20>
 8015386:	1a1b      	subs	r3, r3, r0
 8015388:	50a3      	str	r3, [r4, r2]
 801538a:	e7c9      	b.n	8015320 <_malloc_r+0x20>
 801538c:	4622      	mov	r2, r4
 801538e:	6864      	ldr	r4, [r4, #4]
 8015390:	e7cc      	b.n	801532c <_malloc_r+0x2c>
 8015392:	1cc4      	adds	r4, r0, #3
 8015394:	f024 0403 	bic.w	r4, r4, #3
 8015398:	42a0      	cmp	r0, r4
 801539a:	d0e3      	beq.n	8015364 <_malloc_r+0x64>
 801539c:	1a21      	subs	r1, r4, r0
 801539e:	4630      	mov	r0, r6
 80153a0:	f000 f808 	bl	80153b4 <_sbrk_r>
 80153a4:	3001      	adds	r0, #1
 80153a6:	d1dd      	bne.n	8015364 <_malloc_r+0x64>
 80153a8:	e7cf      	b.n	801534a <_malloc_r+0x4a>
 80153aa:	bf00      	nop
 80153ac:	200043d0 	.word	0x200043d0
 80153b0:	200043d4 	.word	0x200043d4

080153b4 <_sbrk_r>:
 80153b4:	b538      	push	{r3, r4, r5, lr}
 80153b6:	2300      	movs	r3, #0
 80153b8:	4d05      	ldr	r5, [pc, #20]	; (80153d0 <_sbrk_r+0x1c>)
 80153ba:	4604      	mov	r4, r0
 80153bc:	4608      	mov	r0, r1
 80153be:	602b      	str	r3, [r5, #0]
 80153c0:	f7ec f928 	bl	8001614 <_sbrk>
 80153c4:	1c43      	adds	r3, r0, #1
 80153c6:	d102      	bne.n	80153ce <_sbrk_r+0x1a>
 80153c8:	682b      	ldr	r3, [r5, #0]
 80153ca:	b103      	cbz	r3, 80153ce <_sbrk_r+0x1a>
 80153cc:	6023      	str	r3, [r4, #0]
 80153ce:	bd38      	pop	{r3, r4, r5, pc}
 80153d0:	200048f8 	.word	0x200048f8

080153d4 <strcpy>:
 80153d4:	4603      	mov	r3, r0
 80153d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153da:	f803 2b01 	strb.w	r2, [r3], #1
 80153de:	2a00      	cmp	r2, #0
 80153e0:	d1f9      	bne.n	80153d6 <strcpy+0x2>
 80153e2:	4770      	bx	lr

080153e4 <__malloc_lock>:
 80153e4:	4801      	ldr	r0, [pc, #4]	; (80153ec <__malloc_lock+0x8>)
 80153e6:	f000 b809 	b.w	80153fc <__retarget_lock_acquire_recursive>
 80153ea:	bf00      	nop
 80153ec:	20004900 	.word	0x20004900

080153f0 <__malloc_unlock>:
 80153f0:	4801      	ldr	r0, [pc, #4]	; (80153f8 <__malloc_unlock+0x8>)
 80153f2:	f000 b804 	b.w	80153fe <__retarget_lock_release_recursive>
 80153f6:	bf00      	nop
 80153f8:	20004900 	.word	0x20004900

080153fc <__retarget_lock_acquire_recursive>:
 80153fc:	4770      	bx	lr

080153fe <__retarget_lock_release_recursive>:
 80153fe:	4770      	bx	lr

08015400 <_init>:
 8015400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015402:	bf00      	nop
 8015404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015406:	bc08      	pop	{r3}
 8015408:	469e      	mov	lr, r3
 801540a:	4770      	bx	lr

0801540c <_fini>:
 801540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540e:	bf00      	nop
 8015410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015412:	bc08      	pop	{r3}
 8015414:	469e      	mov	lr, r3
 8015416:	4770      	bx	lr
